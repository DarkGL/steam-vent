// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_auth.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CCloudGaming_CreateNonce_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloudGaming_CreateNonce_Request {
    // message fields
    // @@protoc_insertion_point(field:CCloudGaming_CreateNonce_Request.platform)
    pub platform: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCloudGaming_CreateNonce_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloudGaming_CreateNonce_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_CreateNonce_Request {
    fn default() -> &'a CCloudGaming_CreateNonce_Request {
        <CCloudGaming_CreateNonce_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCloudGaming_CreateNonce_Request {
    pub fn new() -> CCloudGaming_CreateNonce_Request {
        ::std::default::Default::default()
    }

    // optional string platform = 1;

    pub fn platform(&self) -> &str {
        match self.platform.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_platform(&mut self) {
        self.platform = ::std::option::Option::None;
    }

    pub fn has_platform(&self) -> bool {
        self.platform.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform(&mut self, v: ::std::string::String) {
        self.platform = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_platform(&mut self) -> &mut ::std::string::String {
        if self.platform.is_none() {
            self.platform = ::std::option::Option::Some(::std::string::String::new());
        }
        self.platform.as_mut().unwrap()
    }

    // Take field
    pub fn take_platform(&mut self) -> ::std::string::String {
        self.platform.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "platform",
            |m: &CCloudGaming_CreateNonce_Request| { &m.platform },
            |m: &mut CCloudGaming_CreateNonce_Request| { &mut m.platform },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCloudGaming_CreateNonce_Request| { &m.appid },
            |m: &mut CCloudGaming_CreateNonce_Request| { &mut m.appid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloudGaming_CreateNonce_Request>(
            "CCloudGaming_CreateNonce_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloudGaming_CreateNonce_Request {
    const NAME: &'static str = "CCloudGaming_CreateNonce_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.platform = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.platform.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.platform.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloudGaming_CreateNonce_Request {
        CCloudGaming_CreateNonce_Request::new()
    }

    fn clear(&mut self) {
        self.platform = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloudGaming_CreateNonce_Request {
        static instance: CCloudGaming_CreateNonce_Request = CCloudGaming_CreateNonce_Request {
            platform: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloudGaming_CreateNonce_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloudGaming_CreateNonce_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloudGaming_CreateNonce_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloudGaming_CreateNonce_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloudGaming_CreateNonce_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloudGaming_CreateNonce_Response {
    // message fields
    // @@protoc_insertion_point(field:CCloudGaming_CreateNonce_Response.nonce)
    pub nonce: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCloudGaming_CreateNonce_Response.expiry)
    pub expiry: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloudGaming_CreateNonce_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_CreateNonce_Response {
    fn default() -> &'a CCloudGaming_CreateNonce_Response {
        <CCloudGaming_CreateNonce_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCloudGaming_CreateNonce_Response {
    pub fn new() -> CCloudGaming_CreateNonce_Response {
        ::std::default::Default::default()
    }

    // optional string nonce = 1;

    pub fn nonce(&self) -> &str {
        match self.nonce.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_nonce(&mut self) {
        self.nonce = ::std::option::Option::None;
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::string::String) {
        self.nonce = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::string::String {
        if self.nonce.is_none() {
            self.nonce = ::std::option::Option::Some(::std::string::String::new());
        }
        self.nonce.as_mut().unwrap()
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::string::String {
        self.nonce.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 expiry = 2;

    pub fn expiry(&self) -> u32 {
        self.expiry.unwrap_or(0)
    }

    pub fn clear_expiry(&mut self) {
        self.expiry = ::std::option::Option::None;
    }

    pub fn has_expiry(&self) -> bool {
        self.expiry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: u32) {
        self.expiry = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "nonce",
            |m: &CCloudGaming_CreateNonce_Response| { &m.nonce },
            |m: &mut CCloudGaming_CreateNonce_Response| { &mut m.nonce },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "expiry",
            |m: &CCloudGaming_CreateNonce_Response| { &m.expiry },
            |m: &mut CCloudGaming_CreateNonce_Response| { &mut m.expiry },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloudGaming_CreateNonce_Response>(
            "CCloudGaming_CreateNonce_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloudGaming_CreateNonce_Response {
    const NAME: &'static str = "CCloudGaming_CreateNonce_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.nonce = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.expiry = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.nonce.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.expiry {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.nonce.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.expiry {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloudGaming_CreateNonce_Response {
        CCloudGaming_CreateNonce_Response::new()
    }

    fn clear(&mut self) {
        self.nonce = ::std::option::Option::None;
        self.expiry = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloudGaming_CreateNonce_Response {
        static instance: CCloudGaming_CreateNonce_Response = CCloudGaming_CreateNonce_Response {
            nonce: ::std::option::Option::None,
            expiry: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloudGaming_CreateNonce_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloudGaming_CreateNonce_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloudGaming_CreateNonce_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloudGaming_CreateNonce_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloudGaming_GetTimeRemaining_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloudGaming_GetTimeRemaining_Request {
    // message fields
    // @@protoc_insertion_point(field:CCloudGaming_GetTimeRemaining_Request.platform)
    pub platform: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCloudGaming_GetTimeRemaining_Request.appid_list)
    pub appid_list: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloudGaming_GetTimeRemaining_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_GetTimeRemaining_Request {
    fn default() -> &'a CCloudGaming_GetTimeRemaining_Request {
        <CCloudGaming_GetTimeRemaining_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCloudGaming_GetTimeRemaining_Request {
    pub fn new() -> CCloudGaming_GetTimeRemaining_Request {
        ::std::default::Default::default()
    }

    // optional string platform = 1;

    pub fn platform(&self) -> &str {
        match self.platform.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_platform(&mut self) {
        self.platform = ::std::option::Option::None;
    }

    pub fn has_platform(&self) -> bool {
        self.platform.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform(&mut self, v: ::std::string::String) {
        self.platform = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_platform(&mut self) -> &mut ::std::string::String {
        if self.platform.is_none() {
            self.platform = ::std::option::Option::Some(::std::string::String::new());
        }
        self.platform.as_mut().unwrap()
    }

    // Take field
    pub fn take_platform(&mut self) -> ::std::string::String {
        self.platform.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "platform",
            |m: &CCloudGaming_GetTimeRemaining_Request| { &m.platform },
            |m: &mut CCloudGaming_GetTimeRemaining_Request| { &mut m.platform },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "appid_list",
            |m: &CCloudGaming_GetTimeRemaining_Request| { &m.appid_list },
            |m: &mut CCloudGaming_GetTimeRemaining_Request| { &mut m.appid_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloudGaming_GetTimeRemaining_Request>(
            "CCloudGaming_GetTimeRemaining_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloudGaming_GetTimeRemaining_Request {
    const NAME: &'static str = "CCloudGaming_GetTimeRemaining_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.platform = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.appid_list)?;
                },
                16 => {
                    self.appid_list.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.platform.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.appid_list {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.platform.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.appid_list {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloudGaming_GetTimeRemaining_Request {
        CCloudGaming_GetTimeRemaining_Request::new()
    }

    fn clear(&mut self) {
        self.platform = ::std::option::Option::None;
        self.appid_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloudGaming_GetTimeRemaining_Request {
        static instance: CCloudGaming_GetTimeRemaining_Request = CCloudGaming_GetTimeRemaining_Request {
            platform: ::std::option::Option::None,
            appid_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloudGaming_GetTimeRemaining_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloudGaming_GetTimeRemaining_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloudGaming_GetTimeRemaining_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloudGaming_GetTimeRemaining_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloudGaming_TimeRemaining)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloudGaming_TimeRemaining {
    // message fields
    // @@protoc_insertion_point(field:CCloudGaming_TimeRemaining.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCloudGaming_TimeRemaining.minutes_remaining)
    pub minutes_remaining: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloudGaming_TimeRemaining.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_TimeRemaining {
    fn default() -> &'a CCloudGaming_TimeRemaining {
        <CCloudGaming_TimeRemaining as ::protobuf::Message>::default_instance()
    }
}

impl CCloudGaming_TimeRemaining {
    pub fn new() -> CCloudGaming_TimeRemaining {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 minutes_remaining = 2;

    pub fn minutes_remaining(&self) -> u32 {
        self.minutes_remaining.unwrap_or(0)
    }

    pub fn clear_minutes_remaining(&mut self) {
        self.minutes_remaining = ::std::option::Option::None;
    }

    pub fn has_minutes_remaining(&self) -> bool {
        self.minutes_remaining.is_some()
    }

    // Param is passed by value, moved
    pub fn set_minutes_remaining(&mut self, v: u32) {
        self.minutes_remaining = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCloudGaming_TimeRemaining| { &m.appid },
            |m: &mut CCloudGaming_TimeRemaining| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "minutes_remaining",
            |m: &CCloudGaming_TimeRemaining| { &m.minutes_remaining },
            |m: &mut CCloudGaming_TimeRemaining| { &mut m.minutes_remaining },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloudGaming_TimeRemaining>(
            "CCloudGaming_TimeRemaining",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloudGaming_TimeRemaining {
    const NAME: &'static str = "CCloudGaming_TimeRemaining";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.minutes_remaining = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.minutes_remaining {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.minutes_remaining {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloudGaming_TimeRemaining {
        CCloudGaming_TimeRemaining::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.minutes_remaining = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloudGaming_TimeRemaining {
        static instance: CCloudGaming_TimeRemaining = CCloudGaming_TimeRemaining {
            appid: ::std::option::Option::None,
            minutes_remaining: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloudGaming_TimeRemaining {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloudGaming_TimeRemaining").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloudGaming_TimeRemaining {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloudGaming_TimeRemaining {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloudGaming_GetTimeRemaining_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloudGaming_GetTimeRemaining_Response {
    // message fields
    // @@protoc_insertion_point(field:CCloudGaming_GetTimeRemaining_Response.entries)
    pub entries: ::std::vec::Vec<CCloudGaming_TimeRemaining>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloudGaming_GetTimeRemaining_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_GetTimeRemaining_Response {
    fn default() -> &'a CCloudGaming_GetTimeRemaining_Response {
        <CCloudGaming_GetTimeRemaining_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCloudGaming_GetTimeRemaining_Response {
    pub fn new() -> CCloudGaming_GetTimeRemaining_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entries",
            |m: &CCloudGaming_GetTimeRemaining_Response| { &m.entries },
            |m: &mut CCloudGaming_GetTimeRemaining_Response| { &mut m.entries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloudGaming_GetTimeRemaining_Response>(
            "CCloudGaming_GetTimeRemaining_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloudGaming_GetTimeRemaining_Response {
    const NAME: &'static str = "CCloudGaming_GetTimeRemaining_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.entries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.entries {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloudGaming_GetTimeRemaining_Response {
        CCloudGaming_GetTimeRemaining_Response::new()
    }

    fn clear(&mut self) {
        self.entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloudGaming_GetTimeRemaining_Response {
        static instance: CCloudGaming_GetTimeRemaining_Response = CCloudGaming_GetTimeRemaining_Response {
            entries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloudGaming_GetTimeRemaining_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloudGaming_GetTimeRemaining_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloudGaming_GetTimeRemaining_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloudGaming_GetTimeRemaining_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$steammessages_auth.steamclient.proto\x1a,steammessages_unified_base.s\
    teamclient.proto\"T\n\x20CCloudGaming_CreateNonce_Request\x12\x1a\n\x08p\
    latform\x18\x01\x20\x01(\tR\x08platform\x12\x14\n\x05appid\x18\x02\x20\
    \x01(\rR\x05appid\"Q\n!CCloudGaming_CreateNonce_Response\x12\x14\n\x05no\
    nce\x18\x01\x20\x01(\tR\x05nonce\x12\x16\n\x06expiry\x18\x02\x20\x01(\rR\
    \x06expiry\"b\n%CCloudGaming_GetTimeRemaining_Request\x12\x1a\n\x08platf\
    orm\x18\x01\x20\x01(\tR\x08platform\x12\x1d\n\nappid_list\x18\x02\x20\
    \x03(\rR\tappidList\"_\n\x1aCCloudGaming_TimeRemaining\x12\x14\n\x05appi\
    d\x18\x01\x20\x01(\rR\x05appid\x12+\n\x11minutes_remaining\x18\x02\x20\
    \x01(\rR\x10minutesRemaining\"_\n&CCloudGaming_GetTimeRemaining_Response\
    \x125\n\x07entries\x18\x02\x20\x03(\x0b2\x1b.CCloudGaming_TimeRemainingR\
    \x07entries2\xf2\x02\n\x0bCloudGaming\x12\x8b\x01\n\x0bCreateNonce\x12!.\
    CCloudGaming_CreateNonce_Request\x1a\".CCloudGaming_CreateNonce_Response\
    \"5\x82\xb5\x181Create\x20a\x20nonce\x20for\x20a\x20cloud\x20gaming\x20s\
    ervice\x20session\x12\xa5\x01\n\x10GetTimeRemaining\x12&.CCloudGaming_Ge\
    tTimeRemaining_Request\x1a'.CCloudGaming_GetTimeRemaining_Response\"@\
    \x82\xb5\x18<Get\x20the\x20amount\x20of\x20streaming\x20time\x20remainin\
    g\x20for\x20a\x20set\x20of\x20apps\x1a-\x82\xb5\x18)Methods\x20for\x20St\
    eam\x20cloud\x20gaming\x20operationsB\x03\x80\x01\x01J\xee\x07\n\x06\x12\
    \x04\0\0&\x01\n\t\n\x02\x03\0\x12\x03\0\06\n\x08\n\x01\x08\x12\x03\x02\0\
    \"\n\t\n\x02\x08\x10\x12\x03\x02\0\"\n\n\n\x02\x04\0\x12\x04\x04\0\x07\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08(\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x05\x08%\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x05\x08\x10\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x05\x11\x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x05\x18\x20\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05#$\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x06\x08\"\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\
    \x06\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x11\x17\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x06\x18\x1d\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x06\x20!\n\n\n\x02\x04\x01\x12\x04\t\0\x0c\x01\n\n\n\x03\x04\
    \x01\x01\x12\x03\t\x08)\n\x0b\n\x04\x04\x01\x02\0\x12\x03\n\x08\"\n\x0c\
    \n\x05\x04\x01\x02\0\x04\x12\x03\n\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03\n\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\x18\x1d\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03\n\x20!\n\x0b\n\x04\x04\x01\x02\x01\x12\
    \x03\x0b\x08#\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x0b\x08\x10\n\x0c\
    \n\x05\x04\x01\x02\x01\x05\x12\x03\x0b\x11\x17\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03\x0b\x18\x1e\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0b\
    !\"\n\n\n\x02\x04\x02\x12\x04\x0e\0\x11\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03\x0e\x08-\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x0f\x08%\n\x0c\n\x05\x04\
    \x02\x02\0\x04\x12\x03\x0f\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\
    \x0f\x11\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0f\x18\x20\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03\x0f#$\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\
    \x10\x08'\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x10\x08\x10\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03\x10\x11\x17\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03\x10\x18\"\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x10%&\n\n\
    \n\x02\x04\x03\x12\x04\x13\0\x16\x01\n\n\n\x03\x04\x03\x01\x12\x03\x13\
    \x08\"\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x14\x08\"\n\x0c\n\x05\x04\x03\
    \x02\0\x04\x12\x03\x14\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x14\
    \x11\x17\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x14\x18\x1d\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03\x14\x20!\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\
    \x15\x08.\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03\x15\x08\x10\n\x0c\n\
    \x05\x04\x03\x02\x01\x05\x12\x03\x15\x11\x17\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03\x15\x18)\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x15,-\n\n\
    \n\x02\x04\x04\x12\x04\x18\0\x1a\x01\n\n\n\x03\x04\x04\x01\x12\x03\x18\
    \x08.\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x19\x089\n\x0c\n\x05\x04\x04\x02\
    \0\x04\x12\x03\x19\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03\x19\x11\
    ,\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x19-4\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03\x1978\n\n\n\x02\x06\0\x12\x04\x1c\0&\x01\n\n\n\x03\x06\0\
    \x01\x12\x03\x1c\x08\x13\n\n\n\x03\x06\0\x03\x12\x03\x1d\x08S\n\r\n\x06\
    \x06\0\x03\xd0\x86\x03\x12\x03\x1d\x08S\n\x0c\n\x04\x06\0\x02\0\x12\x04\
    \x1f\x08!\t\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x1f\x0c\x17\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\x1f\x19:\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \x1fEg\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03\x20\x10b\n\x0f\n\x08\x06\0\
    \x02\0\x04\xd0\x86\x03\x12\x03\x20\x10b\n\x0c\n\x04\x06\0\x02\x01\x12\
    \x04#\x08%\t\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03#\x0c\x1c\n\x0c\n\x05\
    \x06\0\x02\x01\x02\x12\x03#\x1eD\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03#O\
    v\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03$\x10m\n\x0f\n\x08\x06\0\x02\x01\
    \x04\xd0\x86\x03\x12\x03$\x10m\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(CCloudGaming_CreateNonce_Request::generated_message_descriptor_data());
            messages.push(CCloudGaming_CreateNonce_Response::generated_message_descriptor_data());
            messages.push(CCloudGaming_GetTimeRemaining_Request::generated_message_descriptor_data());
            messages.push(CCloudGaming_TimeRemaining::generated_message_descriptor_data());
            messages.push(CCloudGaming_GetTimeRemaining_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
