// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_accounthardware.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CAccountHardware_RegisterSteamController_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_RegisterSteamController_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_RegisterSteamController_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterSteamController_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_RegisterSteamController_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_RegisterSteamController_Request {
    fn default() -> &'a CAccountHardware_RegisterSteamController_Request {
        <CAccountHardware_RegisterSteamController_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_RegisterSteamController_Request {
    pub fn new() -> CAccountHardware_RegisterSteamController_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_RegisterSteamController_Request| { &m.serial_number },
            |m: &mut CAccountHardware_RegisterSteamController_Request| { &mut m.serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_code",
            |m: &CAccountHardware_RegisterSteamController_Request| { &m.controller_code },
            |m: &mut CAccountHardware_RegisterSteamController_Request| { &mut m.controller_code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_RegisterSteamController_Request>(
            "CAccountHardware_RegisterSteamController_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_RegisterSteamController_Request {
    const NAME: &'static str = "CAccountHardware_RegisterSteamController_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_RegisterSteamController_Request {
        CAccountHardware_RegisterSteamController_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_RegisterSteamController_Request {
        static instance: CAccountHardware_RegisterSteamController_Request = CAccountHardware_RegisterSteamController_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_RegisterSteamController_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_RegisterSteamController_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_RegisterSteamController_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_RegisterSteamController_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_RegisterSteamController_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_RegisterSteamController_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_RegisterSteamController_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_RegisterSteamController_Response {
    fn default() -> &'a CAccountHardware_RegisterSteamController_Response {
        <CAccountHardware_RegisterSteamController_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_RegisterSteamController_Response {
    pub fn new() -> CAccountHardware_RegisterSteamController_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_RegisterSteamController_Response>(
            "CAccountHardware_RegisterSteamController_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_RegisterSteamController_Response {
    const NAME: &'static str = "CAccountHardware_RegisterSteamController_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_RegisterSteamController_Response {
        CAccountHardware_RegisterSteamController_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_RegisterSteamController_Response {
        static instance: CAccountHardware_RegisterSteamController_Response = CAccountHardware_RegisterSteamController_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_RegisterSteamController_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_RegisterSteamController_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_RegisterSteamController_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_RegisterSteamController_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_CompleteSteamControllerRegistration_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_CompleteSteamControllerRegistration_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_CompleteSteamControllerRegistration_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_CompleteSteamControllerRegistration_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_CompleteSteamControllerRegistration_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_CompleteSteamControllerRegistration_Request {
    fn default() -> &'a CAccountHardware_CompleteSteamControllerRegistration_Request {
        <CAccountHardware_CompleteSteamControllerRegistration_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_CompleteSteamControllerRegistration_Request {
    pub fn new() -> CAccountHardware_CompleteSteamControllerRegistration_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_CompleteSteamControllerRegistration_Request| { &m.serial_number },
            |m: &mut CAccountHardware_CompleteSteamControllerRegistration_Request| { &mut m.serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_code",
            |m: &CAccountHardware_CompleteSteamControllerRegistration_Request| { &m.controller_code },
            |m: &mut CAccountHardware_CompleteSteamControllerRegistration_Request| { &mut m.controller_code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_CompleteSteamControllerRegistration_Request>(
            "CAccountHardware_CompleteSteamControllerRegistration_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_CompleteSteamControllerRegistration_Request {
    const NAME: &'static str = "CAccountHardware_CompleteSteamControllerRegistration_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_CompleteSteamControllerRegistration_Request {
        CAccountHardware_CompleteSteamControllerRegistration_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_CompleteSteamControllerRegistration_Request {
        static instance: CAccountHardware_CompleteSteamControllerRegistration_Request = CAccountHardware_CompleteSteamControllerRegistration_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_CompleteSteamControllerRegistration_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_CompleteSteamControllerRegistration_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_CompleteSteamControllerRegistration_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_CompleteSteamControllerRegistration_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_CompleteSteamControllerRegistration_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_CompleteSteamControllerRegistration_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_CompleteSteamControllerRegistration_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_CompleteSteamControllerRegistration_Response {
    fn default() -> &'a CAccountHardware_CompleteSteamControllerRegistration_Response {
        <CAccountHardware_CompleteSteamControllerRegistration_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_CompleteSteamControllerRegistration_Response {
    pub fn new() -> CAccountHardware_CompleteSteamControllerRegistration_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_CompleteSteamControllerRegistration_Response>(
            "CAccountHardware_CompleteSteamControllerRegistration_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_CompleteSteamControllerRegistration_Response {
    const NAME: &'static str = "CAccountHardware_CompleteSteamControllerRegistration_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_CompleteSteamControllerRegistration_Response {
        CAccountHardware_CompleteSteamControllerRegistration_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_CompleteSteamControllerRegistration_Response {
        static instance: CAccountHardware_CompleteSteamControllerRegistration_Response = CAccountHardware_CompleteSteamControllerRegistration_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_CompleteSteamControllerRegistration_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_CompleteSteamControllerRegistration_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_CompleteSteamControllerRegistration_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_CompleteSteamControllerRegistration_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_QueryAccountsRegisteredToSerial_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    fn default() -> &'a CAccountHardware_QueryAccountsRegisteredToSerial_Request {
        <CAccountHardware_QueryAccountsRegisteredToSerial_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    pub fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_QueryAccountsRegisteredToSerial_Request| { &m.serial_number },
            |m: &mut CAccountHardware_QueryAccountsRegisteredToSerial_Request| { &mut m.serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_code",
            |m: &CAccountHardware_QueryAccountsRegisteredToSerial_Request| { &m.controller_code },
            |m: &mut CAccountHardware_QueryAccountsRegisteredToSerial_Request| { &mut m.controller_code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_QueryAccountsRegisteredToSerial_Request>(
            "CAccountHardware_QueryAccountsRegisteredToSerial_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    const NAME: &'static str = "CAccountHardware_QueryAccountsRegisteredToSerial_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Request {
        CAccountHardware_QueryAccountsRegisteredToSerial_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_QueryAccountsRegisteredToSerial_Request {
        static instance: CAccountHardware_QueryAccountsRegisteredToSerial_Request = CAccountHardware_QueryAccountsRegisteredToSerial_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_QueryAccountsRegisteredToSerial_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.registration_complete)
    pub registration_complete: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    fn default() -> &'a CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
        <CAccountHardware_QueryAccountsRegisteredToSerial_Accounts as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    pub fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
        ::std::default::Default::default()
    }

    // optional uint32 accountid = 1;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional bool registration_complete = 2;

    pub fn registration_complete(&self) -> bool {
        self.registration_complete.unwrap_or(false)
    }

    pub fn clear_registration_complete(&mut self) {
        self.registration_complete = ::std::option::Option::None;
    }

    pub fn has_registration_complete(&self) -> bool {
        self.registration_complete.is_some()
    }

    // Param is passed by value, moved
    pub fn set_registration_complete(&mut self, v: bool) {
        self.registration_complete = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CAccountHardware_QueryAccountsRegisteredToSerial_Accounts| { &m.accountid },
            |m: &mut CAccountHardware_QueryAccountsRegisteredToSerial_Accounts| { &mut m.accountid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "registration_complete",
            |m: &CAccountHardware_QueryAccountsRegisteredToSerial_Accounts| { &m.registration_complete },
            |m: &mut CAccountHardware_QueryAccountsRegisteredToSerial_Accounts| { &mut m.registration_complete },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_QueryAccountsRegisteredToSerial_Accounts>(
            "CAccountHardware_QueryAccountsRegisteredToSerial_Accounts",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    const NAME: &'static str = "CAccountHardware_QueryAccountsRegisteredToSerial_Accounts";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.registration_complete = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.registration_complete {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.accountid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.registration_complete {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
        CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::new()
    }

    fn clear(&mut self) {
        self.accountid = ::std::option::Option::None;
        self.registration_complete = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
        static instance: CAccountHardware_QueryAccountsRegisteredToSerial_Accounts = CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
            accountid: ::std::option::Option::None,
            registration_complete: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_QueryAccountsRegisteredToSerial_Accounts").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Response.accounts)
    pub accounts: ::std::vec::Vec<CAccountHardware_QueryAccountsRegisteredToSerial_Accounts>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_QueryAccountsRegisteredToSerial_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    fn default() -> &'a CAccountHardware_QueryAccountsRegisteredToSerial_Response {
        <CAccountHardware_QueryAccountsRegisteredToSerial_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    pub fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "accounts",
            |m: &CAccountHardware_QueryAccountsRegisteredToSerial_Response| { &m.accounts },
            |m: &mut CAccountHardware_QueryAccountsRegisteredToSerial_Response| { &mut m.accounts },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_QueryAccountsRegisteredToSerial_Response>(
            "CAccountHardware_QueryAccountsRegisteredToSerial_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    const NAME: &'static str = "CAccountHardware_QueryAccountsRegisteredToSerial_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.accounts.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.accounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.accounts {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Response {
        CAccountHardware_QueryAccountsRegisteredToSerial_Response::new()
    }

    fn clear(&mut self) {
        self.accounts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_QueryAccountsRegisteredToSerial_Response {
        static instance: CAccountHardware_QueryAccountsRegisteredToSerial_Response = CAccountHardware_QueryAccountsRegisteredToSerial_Response {
            accounts: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_QueryAccountsRegisteredToSerial_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_ControllerConfig.appidorname)
    pub appidorname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_ControllerConfig.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_ControllerConfig.templatename)
    pub templatename: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerSetConfig_ControllerConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    fn default() -> &'a CAccountHardware_SteamControllerSetConfig_ControllerConfig {
        <CAccountHardware_SteamControllerSetConfig_ControllerConfig as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    pub fn new() -> CAccountHardware_SteamControllerSetConfig_ControllerConfig {
        ::std::default::Default::default()
    }

    // optional string appidorname = 1;

    pub fn appidorname(&self) -> &str {
        match self.appidorname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_appidorname(&mut self) {
        self.appidorname = ::std::option::Option::None;
    }

    pub fn has_appidorname(&self) -> bool {
        self.appidorname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appidorname(&mut self, v: ::std::string::String) {
        self.appidorname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_appidorname(&mut self) -> &mut ::std::string::String {
        if self.appidorname.is_none() {
            self.appidorname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.appidorname.as_mut().unwrap()
    }

    // Take field
    pub fn take_appidorname(&mut self) -> ::std::string::String {
        self.appidorname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 publishedfileid = 2;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional string templatename = 3;

    pub fn templatename(&self) -> &str {
        match self.templatename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_templatename(&mut self) {
        self.templatename = ::std::option::Option::None;
    }

    pub fn has_templatename(&self) -> bool {
        self.templatename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_templatename(&mut self, v: ::std::string::String) {
        self.templatename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_templatename(&mut self) -> &mut ::std::string::String {
        if self.templatename.is_none() {
            self.templatename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.templatename.as_mut().unwrap()
    }

    // Take field
    pub fn take_templatename(&mut self) -> ::std::string::String {
        self.templatename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appidorname",
            |m: &CAccountHardware_SteamControllerSetConfig_ControllerConfig| { &m.appidorname },
            |m: &mut CAccountHardware_SteamControllerSetConfig_ControllerConfig| { &mut m.appidorname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &CAccountHardware_SteamControllerSetConfig_ControllerConfig| { &m.publishedfileid },
            |m: &mut CAccountHardware_SteamControllerSetConfig_ControllerConfig| { &mut m.publishedfileid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "templatename",
            |m: &CAccountHardware_SteamControllerSetConfig_ControllerConfig| { &m.templatename },
            |m: &mut CAccountHardware_SteamControllerSetConfig_ControllerConfig| { &mut m.templatename },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SteamControllerSetConfig_ControllerConfig>(
            "CAccountHardware_SteamControllerSetConfig_ControllerConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    const NAME: &'static str = "CAccountHardware_SteamControllerSetConfig_ControllerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.appidorname = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.templatename = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appidorname.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.publishedfileid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.templatename.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appidorname.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.publishedfileid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.templatename.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerSetConfig_ControllerConfig {
        CAccountHardware_SteamControllerSetConfig_ControllerConfig::new()
    }

    fn clear(&mut self) {
        self.appidorname = ::std::option::Option::None;
        self.publishedfileid = ::std::option::Option::None;
        self.templatename = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerSetConfig_ControllerConfig {
        static instance: CAccountHardware_SteamControllerSetConfig_ControllerConfig = CAccountHardware_SteamControllerSetConfig_ControllerConfig {
            appidorname: ::std::option::Option::None,
            publishedfileid: ::std::option::Option::None,
            templatename: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SteamControllerSetConfig_ControllerConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerSetConfig_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerSetConfig_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.configurations)
    pub configurations: ::std::vec::Vec<CAccountHardware_SteamControllerSetConfig_ControllerConfig>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.controller_type)
    pub controller_type: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.only_for_this_serial)
    pub only_for_this_serial: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerSetConfig_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerSetConfig_Request {
    fn default() -> &'a CAccountHardware_SteamControllerSetConfig_Request {
        <CAccountHardware_SteamControllerSetConfig_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerSetConfig_Request {
    pub fn new() -> CAccountHardware_SteamControllerSetConfig_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 accountid = 3;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional int32 controller_type = 5;

    pub fn controller_type(&self) -> i32 {
        self.controller_type.unwrap_or(2i32)
    }

    pub fn clear_controller_type(&mut self) {
        self.controller_type = ::std::option::Option::None;
    }

    pub fn has_controller_type(&self) -> bool {
        self.controller_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_type(&mut self, v: i32) {
        self.controller_type = ::std::option::Option::Some(v);
    }

    // optional bool only_for_this_serial = 6;

    pub fn only_for_this_serial(&self) -> bool {
        self.only_for_this_serial.unwrap_or(false)
    }

    pub fn clear_only_for_this_serial(&mut self) {
        self.only_for_this_serial = ::std::option::Option::None;
    }

    pub fn has_only_for_this_serial(&self) -> bool {
        self.only_for_this_serial.is_some()
    }

    // Param is passed by value, moved
    pub fn set_only_for_this_serial(&mut self, v: bool) {
        self.only_for_this_serial = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_SteamControllerSetConfig_Request| { &m.serial_number },
            |m: &mut CAccountHardware_SteamControllerSetConfig_Request| { &mut m.serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_code",
            |m: &CAccountHardware_SteamControllerSetConfig_Request| { &m.controller_code },
            |m: &mut CAccountHardware_SteamControllerSetConfig_Request| { &mut m.controller_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CAccountHardware_SteamControllerSetConfig_Request| { &m.accountid },
            |m: &mut CAccountHardware_SteamControllerSetConfig_Request| { &mut m.accountid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "configurations",
            |m: &CAccountHardware_SteamControllerSetConfig_Request| { &m.configurations },
            |m: &mut CAccountHardware_SteamControllerSetConfig_Request| { &mut m.configurations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_type",
            |m: &CAccountHardware_SteamControllerSetConfig_Request| { &m.controller_type },
            |m: &mut CAccountHardware_SteamControllerSetConfig_Request| { &mut m.controller_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "only_for_this_serial",
            |m: &CAccountHardware_SteamControllerSetConfig_Request| { &m.only_for_this_serial },
            |m: &mut CAccountHardware_SteamControllerSetConfig_Request| { &mut m.only_for_this_serial },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SteamControllerSetConfig_Request>(
            "CAccountHardware_SteamControllerSetConfig_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_SteamControllerSetConfig_Request {
    const NAME: &'static str = "CAccountHardware_SteamControllerSetConfig_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.configurations.push(is.read_message()?);
                },
                40 => {
                    self.controller_type = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.only_for_this_serial = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        for value in &self.configurations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.controller_type {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.only_for_this_serial {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(3, v)?;
        }
        for v in &self.configurations {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.controller_type {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.only_for_this_serial {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerSetConfig_Request {
        CAccountHardware_SteamControllerSetConfig_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.configurations.clear();
        self.controller_type = ::std::option::Option::None;
        self.only_for_this_serial = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerSetConfig_Request {
        static instance: CAccountHardware_SteamControllerSetConfig_Request = CAccountHardware_SteamControllerSetConfig_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            configurations: ::std::vec::Vec::new(),
            controller_type: ::std::option::Option::None,
            only_for_this_serial: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_SteamControllerSetConfig_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SteamControllerSetConfig_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SteamControllerSetConfig_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_SteamControllerSetConfig_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerSetConfig_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerSetConfig_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerSetConfig_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerSetConfig_Response {
    fn default() -> &'a CAccountHardware_SteamControllerSetConfig_Response {
        <CAccountHardware_SteamControllerSetConfig_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerSetConfig_Response {
    pub fn new() -> CAccountHardware_SteamControllerSetConfig_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SteamControllerSetConfig_Response>(
            "CAccountHardware_SteamControllerSetConfig_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_SteamControllerSetConfig_Response {
    const NAME: &'static str = "CAccountHardware_SteamControllerSetConfig_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerSetConfig_Response {
        CAccountHardware_SteamControllerSetConfig_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerSetConfig_Response {
        static instance: CAccountHardware_SteamControllerSetConfig_Response = CAccountHardware_SteamControllerSetConfig_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_SteamControllerSetConfig_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SteamControllerSetConfig_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SteamControllerSetConfig_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_SteamControllerSetConfig_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerGetConfig_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerGetConfig_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.appidorname)
    pub appidorname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.controller_type)
    pub controller_type: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.only_for_this_serial)
    pub only_for_this_serial: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerGetConfig_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerGetConfig_Request {
    fn default() -> &'a CAccountHardware_SteamControllerGetConfig_Request {
        <CAccountHardware_SteamControllerGetConfig_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerGetConfig_Request {
    pub fn new() -> CAccountHardware_SteamControllerGetConfig_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 accountid = 3;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional string appidorname = 4;

    pub fn appidorname(&self) -> &str {
        match self.appidorname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_appidorname(&mut self) {
        self.appidorname = ::std::option::Option::None;
    }

    pub fn has_appidorname(&self) -> bool {
        self.appidorname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appidorname(&mut self, v: ::std::string::String) {
        self.appidorname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_appidorname(&mut self) -> &mut ::std::string::String {
        if self.appidorname.is_none() {
            self.appidorname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.appidorname.as_mut().unwrap()
    }

    // Take field
    pub fn take_appidorname(&mut self) -> ::std::string::String {
        self.appidorname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 controller_type = 5;

    pub fn controller_type(&self) -> i32 {
        self.controller_type.unwrap_or(2i32)
    }

    pub fn clear_controller_type(&mut self) {
        self.controller_type = ::std::option::Option::None;
    }

    pub fn has_controller_type(&self) -> bool {
        self.controller_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_type(&mut self, v: i32) {
        self.controller_type = ::std::option::Option::Some(v);
    }

    // optional bool only_for_this_serial = 6;

    pub fn only_for_this_serial(&self) -> bool {
        self.only_for_this_serial.unwrap_or(false)
    }

    pub fn clear_only_for_this_serial(&mut self) {
        self.only_for_this_serial = ::std::option::Option::None;
    }

    pub fn has_only_for_this_serial(&self) -> bool {
        self.only_for_this_serial.is_some()
    }

    // Param is passed by value, moved
    pub fn set_only_for_this_serial(&mut self, v: bool) {
        self.only_for_this_serial = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_SteamControllerGetConfig_Request| { &m.serial_number },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Request| { &mut m.serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_code",
            |m: &CAccountHardware_SteamControllerGetConfig_Request| { &m.controller_code },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Request| { &mut m.controller_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CAccountHardware_SteamControllerGetConfig_Request| { &m.accountid },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Request| { &mut m.accountid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appidorname",
            |m: &CAccountHardware_SteamControllerGetConfig_Request| { &m.appidorname },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Request| { &mut m.appidorname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_type",
            |m: &CAccountHardware_SteamControllerGetConfig_Request| { &m.controller_type },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Request| { &mut m.controller_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "only_for_this_serial",
            |m: &CAccountHardware_SteamControllerGetConfig_Request| { &m.only_for_this_serial },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Request| { &mut m.only_for_this_serial },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SteamControllerGetConfig_Request>(
            "CAccountHardware_SteamControllerGetConfig_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_SteamControllerGetConfig_Request {
    const NAME: &'static str = "CAccountHardware_SteamControllerGetConfig_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.appidorname = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.controller_type = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.only_for_this_serial = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.appidorname.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.controller_type {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.only_for_this_serial {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.appidorname.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.controller_type {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.only_for_this_serial {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerGetConfig_Request {
        CAccountHardware_SteamControllerGetConfig_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.appidorname = ::std::option::Option::None;
        self.controller_type = ::std::option::Option::None;
        self.only_for_this_serial = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerGetConfig_Request {
        static instance: CAccountHardware_SteamControllerGetConfig_Request = CAccountHardware_SteamControllerGetConfig_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            appidorname: ::std::option::Option::None,
            controller_type: ::std::option::Option::None,
            only_for_this_serial: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_SteamControllerGetConfig_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SteamControllerGetConfig_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SteamControllerGetConfig_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_SteamControllerGetConfig_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.appidorname)
    pub appidorname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.templatename)
    pub templatename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    fn default() -> &'a CAccountHardware_SteamControllerGetConfig_ControllerConfig {
        <CAccountHardware_SteamControllerGetConfig_ControllerConfig as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    pub fn new() -> CAccountHardware_SteamControllerGetConfig_ControllerConfig {
        ::std::default::Default::default()
    }

    // optional string appidorname = 1;

    pub fn appidorname(&self) -> &str {
        match self.appidorname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_appidorname(&mut self) {
        self.appidorname = ::std::option::Option::None;
    }

    pub fn has_appidorname(&self) -> bool {
        self.appidorname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appidorname(&mut self, v: ::std::string::String) {
        self.appidorname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_appidorname(&mut self) -> &mut ::std::string::String {
        if self.appidorname.is_none() {
            self.appidorname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.appidorname.as_mut().unwrap()
    }

    // Take field
    pub fn take_appidorname(&mut self) -> ::std::string::String {
        self.appidorname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 publishedfileid = 2;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional string templatename = 3;

    pub fn templatename(&self) -> &str {
        match self.templatename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_templatename(&mut self) {
        self.templatename = ::std::option::Option::None;
    }

    pub fn has_templatename(&self) -> bool {
        self.templatename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_templatename(&mut self, v: ::std::string::String) {
        self.templatename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_templatename(&mut self) -> &mut ::std::string::String {
        if self.templatename.is_none() {
            self.templatename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.templatename.as_mut().unwrap()
    }

    // Take field
    pub fn take_templatename(&mut self) -> ::std::string::String {
        self.templatename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string serial_number = 4;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appidorname",
            |m: &CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &m.appidorname },
            |m: &mut CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &mut m.appidorname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &m.publishedfileid },
            |m: &mut CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &mut m.publishedfileid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "templatename",
            |m: &CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &m.templatename },
            |m: &mut CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &mut m.templatename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &m.serial_number },
            |m: &mut CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &mut m.serial_number },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SteamControllerGetConfig_ControllerConfig>(
            "CAccountHardware_SteamControllerGetConfig_ControllerConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    const NAME: &'static str = "CAccountHardware_SteamControllerGetConfig_ControllerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.appidorname = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.templatename = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appidorname.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.publishedfileid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.templatename.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appidorname.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.publishedfileid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.templatename.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerGetConfig_ControllerConfig {
        CAccountHardware_SteamControllerGetConfig_ControllerConfig::new()
    }

    fn clear(&mut self) {
        self.appidorname = ::std::option::Option::None;
        self.publishedfileid = ::std::option::Option::None;
        self.templatename = ::std::option::Option::None;
        self.serial_number = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerGetConfig_ControllerConfig {
        static instance: CAccountHardware_SteamControllerGetConfig_ControllerConfig = CAccountHardware_SteamControllerGetConfig_ControllerConfig {
            appidorname: ::std::option::Option::None,
            publishedfileid: ::std::option::Option::None,
            templatename: ::std::option::Option::None,
            serial_number: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SteamControllerGetConfig_ControllerConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerGetConfig_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerGetConfig_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Response.configurations)
    pub configurations: ::std::vec::Vec<CAccountHardware_SteamControllerGetConfig_ControllerConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerGetConfig_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerGetConfig_Response {
    fn default() -> &'a CAccountHardware_SteamControllerGetConfig_Response {
        <CAccountHardware_SteamControllerGetConfig_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerGetConfig_Response {
    pub fn new() -> CAccountHardware_SteamControllerGetConfig_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "configurations",
            |m: &CAccountHardware_SteamControllerGetConfig_Response| { &m.configurations },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Response| { &mut m.configurations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SteamControllerGetConfig_Response>(
            "CAccountHardware_SteamControllerGetConfig_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_SteamControllerGetConfig_Response {
    const NAME: &'static str = "CAccountHardware_SteamControllerGetConfig_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.configurations.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.configurations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.configurations {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerGetConfig_Response {
        CAccountHardware_SteamControllerGetConfig_Response::new()
    }

    fn clear(&mut self) {
        self.configurations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerGetConfig_Response {
        static instance: CAccountHardware_SteamControllerGetConfig_Response = CAccountHardware_SteamControllerGetConfig_Response {
            configurations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_SteamControllerGetConfig_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SteamControllerGetConfig_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SteamControllerGetConfig_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_SteamControllerGetConfig_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_DeRegisterSteamController_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_DeRegisterSteamController_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_DeRegisterSteamController_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_DeRegisterSteamController_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_DeRegisterSteamController_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_DeRegisterSteamController_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_DeRegisterSteamController_Request {
    fn default() -> &'a CAccountHardware_DeRegisterSteamController_Request {
        <CAccountHardware_DeRegisterSteamController_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_DeRegisterSteamController_Request {
    pub fn new() -> CAccountHardware_DeRegisterSteamController_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 accountid = 3;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_DeRegisterSteamController_Request| { &m.serial_number },
            |m: &mut CAccountHardware_DeRegisterSteamController_Request| { &mut m.serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_code",
            |m: &CAccountHardware_DeRegisterSteamController_Request| { &m.controller_code },
            |m: &mut CAccountHardware_DeRegisterSteamController_Request| { &mut m.controller_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CAccountHardware_DeRegisterSteamController_Request| { &m.accountid },
            |m: &mut CAccountHardware_DeRegisterSteamController_Request| { &mut m.accountid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_DeRegisterSteamController_Request>(
            "CAccountHardware_DeRegisterSteamController_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_DeRegisterSteamController_Request {
    const NAME: &'static str = "CAccountHardware_DeRegisterSteamController_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_DeRegisterSteamController_Request {
        CAccountHardware_DeRegisterSteamController_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_DeRegisterSteamController_Request {
        static instance: CAccountHardware_DeRegisterSteamController_Request = CAccountHardware_DeRegisterSteamController_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_DeRegisterSteamController_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_DeRegisterSteamController_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_DeRegisterSteamController_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_DeRegisterSteamController_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_DeRegisterSteamController_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_DeRegisterSteamController_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_DeRegisterSteamController_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_DeRegisterSteamController_Response {
    fn default() -> &'a CAccountHardware_DeRegisterSteamController_Response {
        <CAccountHardware_DeRegisterSteamController_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_DeRegisterSteamController_Response {
    pub fn new() -> CAccountHardware_DeRegisterSteamController_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_DeRegisterSteamController_Response>(
            "CAccountHardware_DeRegisterSteamController_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_DeRegisterSteamController_Response {
    const NAME: &'static str = "CAccountHardware_DeRegisterSteamController_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_DeRegisterSteamController_Response {
        CAccountHardware_DeRegisterSteamController_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_DeRegisterSteamController_Response {
        static instance: CAccountHardware_DeRegisterSteamController_Response = CAccountHardware_DeRegisterSteamController_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_DeRegisterSteamController_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_DeRegisterSteamController_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_DeRegisterSteamController_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_DeRegisterSteamController_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SetPersonalizationFile_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SetPersonalizationFile_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SetPersonalizationFile_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SetPersonalizationFile_Request.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAccountHardware_SetPersonalizationFile_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SetPersonalizationFile_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SetPersonalizationFile_Request {
    fn default() -> &'a CAccountHardware_SetPersonalizationFile_Request {
        <CAccountHardware_SetPersonalizationFile_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SetPersonalizationFile_Request {
    pub fn new() -> CAccountHardware_SetPersonalizationFile_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 publishedfileid = 2;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional uint32 accountid = 3;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_SetPersonalizationFile_Request| { &m.serial_number },
            |m: &mut CAccountHardware_SetPersonalizationFile_Request| { &mut m.serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &CAccountHardware_SetPersonalizationFile_Request| { &m.publishedfileid },
            |m: &mut CAccountHardware_SetPersonalizationFile_Request| { &mut m.publishedfileid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CAccountHardware_SetPersonalizationFile_Request| { &m.accountid },
            |m: &mut CAccountHardware_SetPersonalizationFile_Request| { &mut m.accountid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SetPersonalizationFile_Request>(
            "CAccountHardware_SetPersonalizationFile_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_SetPersonalizationFile_Request {
    const NAME: &'static str = "CAccountHardware_SetPersonalizationFile_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.publishedfileid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.publishedfileid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SetPersonalizationFile_Request {
        CAccountHardware_SetPersonalizationFile_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.publishedfileid = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SetPersonalizationFile_Request {
        static instance: CAccountHardware_SetPersonalizationFile_Request = CAccountHardware_SetPersonalizationFile_Request {
            serial_number: ::std::option::Option::None,
            publishedfileid: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_SetPersonalizationFile_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SetPersonalizationFile_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SetPersonalizationFile_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_SetPersonalizationFile_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SetPersonalizationFile_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SetPersonalizationFile_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SetPersonalizationFile_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SetPersonalizationFile_Response {
    fn default() -> &'a CAccountHardware_SetPersonalizationFile_Response {
        <CAccountHardware_SetPersonalizationFile_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SetPersonalizationFile_Response {
    pub fn new() -> CAccountHardware_SetPersonalizationFile_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SetPersonalizationFile_Response>(
            "CAccountHardware_SetPersonalizationFile_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_SetPersonalizationFile_Response {
    const NAME: &'static str = "CAccountHardware_SetPersonalizationFile_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SetPersonalizationFile_Response {
        CAccountHardware_SetPersonalizationFile_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SetPersonalizationFile_Response {
        static instance: CAccountHardware_SetPersonalizationFile_Response = CAccountHardware_SetPersonalizationFile_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_SetPersonalizationFile_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SetPersonalizationFile_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SetPersonalizationFile_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_SetPersonalizationFile_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_GetPersonalizationFile_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_GetPersonalizationFile_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_GetPersonalizationFile_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_GetPersonalizationFile_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_GetPersonalizationFile_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_GetPersonalizationFile_Request {
    fn default() -> &'a CAccountHardware_GetPersonalizationFile_Request {
        <CAccountHardware_GetPersonalizationFile_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_GetPersonalizationFile_Request {
    pub fn new() -> CAccountHardware_GetPersonalizationFile_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 accountid = 2;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_GetPersonalizationFile_Request| { &m.serial_number },
            |m: &mut CAccountHardware_GetPersonalizationFile_Request| { &mut m.serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CAccountHardware_GetPersonalizationFile_Request| { &m.accountid },
            |m: &mut CAccountHardware_GetPersonalizationFile_Request| { &mut m.accountid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_GetPersonalizationFile_Request>(
            "CAccountHardware_GetPersonalizationFile_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_GetPersonalizationFile_Request {
    const NAME: &'static str = "CAccountHardware_GetPersonalizationFile_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_GetPersonalizationFile_Request {
        CAccountHardware_GetPersonalizationFile_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_GetPersonalizationFile_Request {
        static instance: CAccountHardware_GetPersonalizationFile_Request = CAccountHardware_GetPersonalizationFile_Request {
            serial_number: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_GetPersonalizationFile_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_GetPersonalizationFile_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_GetPersonalizationFile_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_GetPersonalizationFile_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_GetPersonalizationFile_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_GetPersonalizationFile_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_GetPersonalizationFile_Response.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_GetPersonalizationFile_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_GetPersonalizationFile_Response {
    fn default() -> &'a CAccountHardware_GetPersonalizationFile_Response {
        <CAccountHardware_GetPersonalizationFile_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_GetPersonalizationFile_Response {
    pub fn new() -> CAccountHardware_GetPersonalizationFile_Response {
        ::std::default::Default::default()
    }

    // optional uint64 publishedfileid = 1;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &CAccountHardware_GetPersonalizationFile_Response| { &m.publishedfileid },
            |m: &mut CAccountHardware_GetPersonalizationFile_Response| { &mut m.publishedfileid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_GetPersonalizationFile_Response>(
            "CAccountHardware_GetPersonalizationFile_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_GetPersonalizationFile_Response {
    const NAME: &'static str = "CAccountHardware_GetPersonalizationFile_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.publishedfileid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.publishedfileid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_GetPersonalizationFile_Response {
        CAccountHardware_GetPersonalizationFile_Response::new()
    }

    fn clear(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_GetPersonalizationFile_Response {
        static instance: CAccountHardware_GetPersonalizationFile_Response = CAccountHardware_GetPersonalizationFile_Response {
            publishedfileid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_GetPersonalizationFile_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_GetPersonalizationFile_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_GetPersonalizationFile_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_GetPersonalizationFile_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_VRCompatibilityCheck_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Request.product_name)
    pub product_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Request.values)
    pub values: ::std::vec::Vec<caccount_hardware_vrcompatibility_check_request::Pair>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_VRCompatibilityCheck_Request {
    fn default() -> &'a CAccountHardware_VRCompatibilityCheck_Request {
        <CAccountHardware_VRCompatibilityCheck_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_VRCompatibilityCheck_Request {
    pub fn new() -> CAccountHardware_VRCompatibilityCheck_Request {
        ::std::default::Default::default()
    }

    // optional string product_name = 1;

    pub fn product_name(&self) -> &str {
        match self.product_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_product_name(&mut self) {
        self.product_name = ::std::option::Option::None;
    }

    pub fn has_product_name(&self) -> bool {
        self.product_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_product_name(&mut self, v: ::std::string::String) {
        self.product_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_name(&mut self) -> &mut ::std::string::String {
        if self.product_name.is_none() {
            self.product_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.product_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_product_name(&mut self) -> ::std::string::String {
        self.product_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "product_name",
            |m: &CAccountHardware_VRCompatibilityCheck_Request| { &m.product_name },
            |m: &mut CAccountHardware_VRCompatibilityCheck_Request| { &mut m.product_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &CAccountHardware_VRCompatibilityCheck_Request| { &m.values },
            |m: &mut CAccountHardware_VRCompatibilityCheck_Request| { &mut m.values },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_VRCompatibilityCheck_Request>(
            "CAccountHardware_VRCompatibilityCheck_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_VRCompatibilityCheck_Request {
    const NAME: &'static str = "CAccountHardware_VRCompatibilityCheck_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.product_name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.values.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.product_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.product_name.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.values {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_VRCompatibilityCheck_Request {
        CAccountHardware_VRCompatibilityCheck_Request::new()
    }

    fn clear(&mut self) {
        self.product_name = ::std::option::Option::None;
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_VRCompatibilityCheck_Request {
        static instance: CAccountHardware_VRCompatibilityCheck_Request = CAccountHardware_VRCompatibilityCheck_Request {
            product_name: ::std::option::Option::None,
            values: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_VRCompatibilityCheck_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_VRCompatibilityCheck_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_VRCompatibilityCheck_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_VRCompatibilityCheck_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CAccountHardware_VRCompatibilityCheck_Request`
pub mod caccount_hardware_vrcompatibility_check_request {
    // @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Request.Pair)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Pair {
        // message fields
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Request.Pair.key)
        pub key: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Request.Pair.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Request.Pair.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Pair {
        fn default() -> &'a Pair {
            <Pair as ::protobuf::Message>::default_instance()
        }
    }

    impl Pair {
        pub fn new() -> Pair {
            ::std::default::Default::default()
        }

        // optional string key = 1;

        pub fn key(&self) -> &str {
            match self.key.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_key(&mut self) {
            self.key = ::std::option::Option::None;
        }

        pub fn has_key(&self) -> bool {
            self.key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_key(&mut self, v: ::std::string::String) {
            self.key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_key(&mut self) -> &mut ::std::string::String {
            if self.key.is_none() {
                self.key = ::std::option::Option::Some(::std::string::String::new());
            }
            self.key.as_mut().unwrap()
        }

        // Take field
        pub fn take_key(&mut self) -> ::std::string::String {
            self.key.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "key",
                |m: &Pair| { &m.key },
                |m: &mut Pair| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &Pair| { &m.value },
                |m: &mut Pair| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Pair>(
                "CAccountHardware_VRCompatibilityCheck_Request.Pair",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Pair {
        const NAME: &'static str = "Pair";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.key = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.key.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Pair {
            Pair::new()
        }

        fn clear(&mut self) {
            self.key = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Pair {
            static instance: Pair = Pair {
                key: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Pair {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CAccountHardware_VRCompatibilityCheck_Request.Pair").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Pair {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Pair {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_VRCompatibilityCheck_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.values)
    pub values: ::std::vec::Vec<caccount_hardware_vrcompatibility_check_response::Pair>,
    // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.components)
    pub components: ::std::vec::Vec<caccount_hardware_vrcompatibility_check_response::ComponentDisplay>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_VRCompatibilityCheck_Response {
    fn default() -> &'a CAccountHardware_VRCompatibilityCheck_Response {
        <CAccountHardware_VRCompatibilityCheck_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_VRCompatibilityCheck_Response {
    pub fn new() -> CAccountHardware_VRCompatibilityCheck_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &CAccountHardware_VRCompatibilityCheck_Response| { &m.values },
            |m: &mut CAccountHardware_VRCompatibilityCheck_Response| { &mut m.values },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "components",
            |m: &CAccountHardware_VRCompatibilityCheck_Response| { &m.components },
            |m: &mut CAccountHardware_VRCompatibilityCheck_Response| { &mut m.components },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_VRCompatibilityCheck_Response>(
            "CAccountHardware_VRCompatibilityCheck_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_VRCompatibilityCheck_Response {
    const NAME: &'static str = "CAccountHardware_VRCompatibilityCheck_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.values.push(is.read_message()?);
                },
                18 => {
                    self.components.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.components {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.values {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.components {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_VRCompatibilityCheck_Response {
        CAccountHardware_VRCompatibilityCheck_Response::new()
    }

    fn clear(&mut self) {
        self.values.clear();
        self.components.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_VRCompatibilityCheck_Response {
        static instance: CAccountHardware_VRCompatibilityCheck_Response = CAccountHardware_VRCompatibilityCheck_Response {
            values: ::std::vec::Vec::new(),
            components: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_VRCompatibilityCheck_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_VRCompatibilityCheck_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_VRCompatibilityCheck_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_VRCompatibilityCheck_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CAccountHardware_VRCompatibilityCheck_Response`
pub mod caccount_hardware_vrcompatibility_check_response {
    // @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Response.Pair)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Pair {
        // message fields
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.Pair.key)
        pub key: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.Pair.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Response.Pair.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Pair {
        fn default() -> &'a Pair {
            <Pair as ::protobuf::Message>::default_instance()
        }
    }

    impl Pair {
        pub fn new() -> Pair {
            ::std::default::Default::default()
        }

        // optional string key = 1;

        pub fn key(&self) -> &str {
            match self.key.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_key(&mut self) {
            self.key = ::std::option::Option::None;
        }

        pub fn has_key(&self) -> bool {
            self.key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_key(&mut self, v: ::std::string::String) {
            self.key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_key(&mut self) -> &mut ::std::string::String {
            if self.key.is_none() {
                self.key = ::std::option::Option::Some(::std::string::String::new());
            }
            self.key.as_mut().unwrap()
        }

        // Take field
        pub fn take_key(&mut self) -> ::std::string::String {
            self.key.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "key",
                |m: &Pair| { &m.key },
                |m: &mut Pair| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &Pair| { &m.value },
                |m: &mut Pair| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Pair>(
                "CAccountHardware_VRCompatibilityCheck_Response.Pair",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Pair {
        const NAME: &'static str = "Pair";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.key = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.key.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Pair {
            Pair::new()
        }

        fn clear(&mut self) {
            self.key = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Pair {
            static instance: Pair = Pair {
                key: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Pair {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CAccountHardware_VRCompatibilityCheck_Response.Pair").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Pair {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Pair {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ComponentDisplay {
        // message fields
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.image)
        pub image: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ComponentDisplay {
        fn default() -> &'a ComponentDisplay {
            <ComponentDisplay as ::protobuf::Message>::default_instance()
        }
    }

    impl ComponentDisplay {
        pub fn new() -> ComponentDisplay {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string image = 2;

        pub fn image(&self) -> &str {
            match self.image.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_image(&mut self) {
            self.image = ::std::option::Option::None;
        }

        pub fn has_image(&self) -> bool {
            self.image.is_some()
        }

        // Param is passed by value, moved
        pub fn set_image(&mut self, v: ::std::string::String) {
            self.image = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_image(&mut self) -> &mut ::std::string::String {
            if self.image.is_none() {
                self.image = ::std::option::Option::Some(::std::string::String::new());
            }
            self.image.as_mut().unwrap()
        }

        // Take field
        pub fn take_image(&mut self) -> ::std::string::String {
            self.image.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 3;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &ComponentDisplay| { &m.name },
                |m: &mut ComponentDisplay| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "image",
                |m: &ComponentDisplay| { &m.image },
                |m: &mut ComponentDisplay| { &mut m.image },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &ComponentDisplay| { &m.value },
                |m: &mut ComponentDisplay| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ComponentDisplay>(
                "CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ComponentDisplay {
        const NAME: &'static str = "ComponentDisplay";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.image = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.image.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.image.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ComponentDisplay {
            ComponentDisplay::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.image = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ComponentDisplay {
            static instance: ComponentDisplay = ComponentDisplay {
                name: ::std::option::Option::None,
                image: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ComponentDisplay {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ComponentDisplay {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ComponentDisplay {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CAccountHardware_RegisterValveIndexComponent_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_RegisterValveIndexComponent_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.manufacturer_serial_number)
    pub manufacturer_serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.component_code)
    pub component_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.component_type)
    pub component_type: ::std::option::Option<::protobuf::EnumOrUnknown<EValveIndexComponent>>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.estimated_time_registered)
    pub estimated_time_registered: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_RegisterValveIndexComponent_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_RegisterValveIndexComponent_Request {
    fn default() -> &'a CAccountHardware_RegisterValveIndexComponent_Request {
        <CAccountHardware_RegisterValveIndexComponent_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_RegisterValveIndexComponent_Request {
    pub fn new() -> CAccountHardware_RegisterValveIndexComponent_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string manufacturer_serial_number = 2;

    pub fn manufacturer_serial_number(&self) -> &str {
        match self.manufacturer_serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_manufacturer_serial_number(&mut self) {
        self.manufacturer_serial_number = ::std::option::Option::None;
    }

    pub fn has_manufacturer_serial_number(&self) -> bool {
        self.manufacturer_serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manufacturer_serial_number(&mut self, v: ::std::string::String) {
        self.manufacturer_serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer_serial_number(&mut self) -> &mut ::std::string::String {
        if self.manufacturer_serial_number.is_none() {
            self.manufacturer_serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.manufacturer_serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_manufacturer_serial_number(&mut self) -> ::std::string::String {
        self.manufacturer_serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string component_code = 3;

    pub fn component_code(&self) -> &str {
        match self.component_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_component_code(&mut self) {
        self.component_code = ::std::option::Option::None;
    }

    pub fn has_component_code(&self) -> bool {
        self.component_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_component_code(&mut self, v: ::std::string::String) {
        self.component_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_component_code(&mut self) -> &mut ::std::string::String {
        if self.component_code.is_none() {
            self.component_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.component_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_component_code(&mut self) -> ::std::string::String {
        self.component_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EValveIndexComponent component_type = 4;

    pub fn component_type(&self) -> EValveIndexComponent {
        match self.component_type {
            Some(e) => e.enum_value_or(EValveIndexComponent::k_EValveIndexComponentUnknown),
            None => EValveIndexComponent::k_EValveIndexComponentUnknown,
        }
    }

    pub fn clear_component_type(&mut self) {
        self.component_type = ::std::option::Option::None;
    }

    pub fn has_component_type(&self) -> bool {
        self.component_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_component_type(&mut self, v: EValveIndexComponent) {
        self.component_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional int32 estimated_time_registered = 5;

    pub fn estimated_time_registered(&self) -> i32 {
        self.estimated_time_registered.unwrap_or(0)
    }

    pub fn clear_estimated_time_registered(&mut self) {
        self.estimated_time_registered = ::std::option::Option::None;
    }

    pub fn has_estimated_time_registered(&self) -> bool {
        self.estimated_time_registered.is_some()
    }

    // Param is passed by value, moved
    pub fn set_estimated_time_registered(&mut self, v: i32) {
        self.estimated_time_registered = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_RegisterValveIndexComponent_Request| { &m.serial_number },
            |m: &mut CAccountHardware_RegisterValveIndexComponent_Request| { &mut m.serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "manufacturer_serial_number",
            |m: &CAccountHardware_RegisterValveIndexComponent_Request| { &m.manufacturer_serial_number },
            |m: &mut CAccountHardware_RegisterValveIndexComponent_Request| { &mut m.manufacturer_serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "component_code",
            |m: &CAccountHardware_RegisterValveIndexComponent_Request| { &m.component_code },
            |m: &mut CAccountHardware_RegisterValveIndexComponent_Request| { &mut m.component_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "component_type",
            |m: &CAccountHardware_RegisterValveIndexComponent_Request| { &m.component_type },
            |m: &mut CAccountHardware_RegisterValveIndexComponent_Request| { &mut m.component_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "estimated_time_registered",
            |m: &CAccountHardware_RegisterValveIndexComponent_Request| { &m.estimated_time_registered },
            |m: &mut CAccountHardware_RegisterValveIndexComponent_Request| { &mut m.estimated_time_registered },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_RegisterValveIndexComponent_Request>(
            "CAccountHardware_RegisterValveIndexComponent_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_RegisterValveIndexComponent_Request {
    const NAME: &'static str = "CAccountHardware_RegisterValveIndexComponent_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.manufacturer_serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.component_code = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.component_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                40 => {
                    self.estimated_time_registered = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.manufacturer_serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.component_code.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.component_type {
            my_size += ::protobuf::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.estimated_time_registered {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.manufacturer_serial_number.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.component_code.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.component_type {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.estimated_time_registered {
            os.write_int32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_RegisterValveIndexComponent_Request {
        CAccountHardware_RegisterValveIndexComponent_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.manufacturer_serial_number = ::std::option::Option::None;
        self.component_code = ::std::option::Option::None;
        self.component_type = ::std::option::Option::None;
        self.estimated_time_registered = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_RegisterValveIndexComponent_Request {
        static instance: CAccountHardware_RegisterValveIndexComponent_Request = CAccountHardware_RegisterValveIndexComponent_Request {
            serial_number: ::std::option::Option::None,
            manufacturer_serial_number: ::std::option::Option::None,
            component_code: ::std::option::Option::None,
            component_type: ::std::option::Option::None,
            estimated_time_registered: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_RegisterValveIndexComponent_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_RegisterValveIndexComponent_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_RegisterValveIndexComponent_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_RegisterValveIndexComponent_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_RegisterValveIndexComponent_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_RegisterValveIndexComponent_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_RegisterValveIndexComponent_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_RegisterValveIndexComponent_Response {
    fn default() -> &'a CAccountHardware_RegisterValveIndexComponent_Response {
        <CAccountHardware_RegisterValveIndexComponent_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_RegisterValveIndexComponent_Response {
    pub fn new() -> CAccountHardware_RegisterValveIndexComponent_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_RegisterValveIndexComponent_Response>(
            "CAccountHardware_RegisterValveIndexComponent_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAccountHardware_RegisterValveIndexComponent_Response {
    const NAME: &'static str = "CAccountHardware_RegisterValveIndexComponent_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_RegisterValveIndexComponent_Response {
        CAccountHardware_RegisterValveIndexComponent_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_RegisterValveIndexComponent_Response {
        static instance: CAccountHardware_RegisterValveIndexComponent_Response = CAccountHardware_RegisterValveIndexComponent_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAccountHardware_RegisterValveIndexComponent_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_RegisterValveIndexComponent_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_RegisterValveIndexComponent_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAccountHardware_RegisterValveIndexComponent_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EValveIndexComponent)
pub enum EValveIndexComponent {
    // @@protoc_insertion_point(enum_value:EValveIndexComponent.k_EValveIndexComponentUnknown)
    k_EValveIndexComponentUnknown = 0,
    // @@protoc_insertion_point(enum_value:EValveIndexComponent.k_EValveIndexComponentHMD)
    k_EValveIndexComponentHMD = 1,
    // @@protoc_insertion_point(enum_value:EValveIndexComponent.k_EValveIndexComponentLeftKnuckle)
    k_EValveIndexComponentLeftKnuckle = 2,
    // @@protoc_insertion_point(enum_value:EValveIndexComponent.k_EValveIndexComponentRightKnuckle)
    k_EValveIndexComponentRightKnuckle = 3,
}

impl ::protobuf::Enum for EValveIndexComponent {
    const NAME: &'static str = "EValveIndexComponent";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EValveIndexComponent> {
        match value {
            0 => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentUnknown),
            1 => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentHMD),
            2 => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentLeftKnuckle),
            3 => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentRightKnuckle),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EValveIndexComponent> {
        match str {
            "k_EValveIndexComponentUnknown" => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentUnknown),
            "k_EValveIndexComponentHMD" => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentHMD),
            "k_EValveIndexComponentLeftKnuckle" => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentLeftKnuckle),
            "k_EValveIndexComponentRightKnuckle" => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentRightKnuckle),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EValveIndexComponent] = &[
        EValveIndexComponent::k_EValveIndexComponentUnknown,
        EValveIndexComponent::k_EValveIndexComponentHMD,
        EValveIndexComponent::k_EValveIndexComponentLeftKnuckle,
        EValveIndexComponent::k_EValveIndexComponentRightKnuckle,
    ];
}

impl ::protobuf::EnumFull for EValveIndexComponent {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EValveIndexComponent").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EValveIndexComponent {
    fn default() -> Self {
        EValveIndexComponent::k_EValveIndexComponentUnknown
    }
}

impl EValveIndexComponent {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EValveIndexComponent>("EValveIndexComponent")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/steammessages_accounthardware.steamclient.proto\x1a,steammessages_uni\
    fied_base.steamclient.proto\"\x80\x01\n0CAccountHardware_RegisterSteamCo\
    ntroller_Request\x12#\n\rserial_number\x18\x01\x20\x01(\tR\x0cserialNumb\
    er\x12'\n\x0fcontroller_code\x18\x02\x20\x01(\tR\x0econtrollerCode\"3\n1\
    CAccountHardware_RegisterSteamController_Response\"\x8c\x01\n<CAccountHa\
    rdware_CompleteSteamControllerRegistration_Request\x12#\n\rserial_number\
    \x18\x01\x20\x01(\tR\x0cserialNumber\x12'\n\x0fcontroller_code\x18\x02\
    \x20\x01(\tR\x0econtrollerCode\"?\n=CAccountHardware_CompleteSteamContro\
    llerRegistration_Response\"\x88\x01\n8CAccountHardware_QueryAccountsRegi\
    steredToSerial_Request\x12#\n\rserial_number\x18\x01\x20\x01(\tR\x0cseri\
    alNumber\x12'\n\x0fcontroller_code\x18\x02\x20\x01(\tR\x0econtrollerCode\
    \"\x8e\x01\n9CAccountHardware_QueryAccountsRegisteredToSerial_Accounts\
    \x12\x1c\n\taccountid\x18\x01\x20\x01(\rR\taccountid\x123\n\x15registrat\
    ion_complete\x18\x02\x20\x01(\x08R\x14registrationComplete\"\x93\x01\n9C\
    AccountHardware_QueryAccountsRegisteredToSerial_Response\x12V\n\x08accou\
    nts\x18\x01\x20\x03(\x0b2:.CAccountHardware_QueryAccountsRegisteredToSer\
    ial_AccountsR\x08accounts\"\xac\x01\n:CAccountHardware_SteamControllerSe\
    tConfig_ControllerConfig\x12\x20\n\x0bappidorname\x18\x01\x20\x01(\tR\
    \x0bappidorname\x12(\n\x0fpublishedfileid\x18\x02\x20\x01(\x04R\x0fpubli\
    shedfileid\x12\"\n\x0ctemplatename\x18\x03\x20\x01(\tR\x0ctemplatename\"\
    \xe8\x02\n1CAccountHardware_SteamControllerSetConfig_Request\x12#\n\rser\
    ial_number\x18\x01\x20\x01(\tR\x0cserialNumber\x12'\n\x0fcontroller_code\
    \x18\x02\x20\x01(\tR\x0econtrollerCode\x12\x1c\n\taccountid\x18\x03\x20\
    \x01(\rR\taccountid\x12c\n\x0econfigurations\x18\x04\x20\x03(\x0b2;.CAcc\
    ountHardware_SteamControllerSetConfig_ControllerConfigR\x0econfiguration\
    s\x12*\n\x0fcontroller_type\x18\x05\x20\x01(\x05:\x012R\x0econtrollerTyp\
    e\x126\n\x14only_for_this_serial\x18\x06\x20\x01(\x08:\x05falseR\x11only\
    ForThisSerial\"4\n2CAccountHardware_SteamControllerSetConfig_Response\"\
    \xa5\x02\n1CAccountHardware_SteamControllerGetConfig_Request\x12#\n\rser\
    ial_number\x18\x01\x20\x01(\tR\x0cserialNumber\x12'\n\x0fcontroller_code\
    \x18\x02\x20\x01(\tR\x0econtrollerCode\x12\x1c\n\taccountid\x18\x03\x20\
    \x01(\rR\taccountid\x12\x20\n\x0bappidorname\x18\x04\x20\x01(\tR\x0bappi\
    dorname\x12*\n\x0fcontroller_type\x18\x05\x20\x01(\x05:\x012R\x0econtrol\
    lerType\x126\n\x14only_for_this_serial\x18\x06\x20\x01(\x08:\x05falseR\
    \x11onlyForThisSerial\"\xd1\x01\n:CAccountHardware_SteamControllerGetCon\
    fig_ControllerConfig\x12\x20\n\x0bappidorname\x18\x01\x20\x01(\tR\x0bapp\
    idorname\x12(\n\x0fpublishedfileid\x18\x02\x20\x01(\x04R\x0fpublishedfil\
    eid\x12\"\n\x0ctemplatename\x18\x03\x20\x01(\tR\x0ctemplatename\x12#\n\r\
    serial_number\x18\x04\x20\x01(\tR\x0cserialNumber\"\x99\x01\n2CAccountHa\
    rdware_SteamControllerGetConfig_Response\x12c\n\x0econfigurations\x18\
    \x01\x20\x03(\x0b2;.CAccountHardware_SteamControllerGetConfig_Controller\
    ConfigR\x0econfigurations\"\xa0\x01\n2CAccountHardware_DeRegisterSteamCo\
    ntroller_Request\x12#\n\rserial_number\x18\x01\x20\x01(\tR\x0cserialNumb\
    er\x12'\n\x0fcontroller_code\x18\x02\x20\x01(\tR\x0econtrollerCode\x12\
    \x1c\n\taccountid\x18\x03\x20\x01(\rR\taccountid\"5\n3CAccountHardware_D\
    eRegisterSteamController_Response\"\x9e\x01\n/CAccountHardware_SetPerson\
    alizationFile_Request\x12#\n\rserial_number\x18\x01\x20\x01(\tR\x0cseria\
    lNumber\x12(\n\x0fpublishedfileid\x18\x02\x20\x01(\x04R\x0fpublishedfile\
    id\x12\x1c\n\taccountid\x18\x03\x20\x01(\rR\taccountid\"2\n0CAccountHard\
    ware_SetPersonalizationFile_Response\"t\n/CAccountHardware_GetPersonaliz\
    ationFile_Request\x12#\n\rserial_number\x18\x01\x20\x01(\tR\x0cserialNum\
    ber\x12\x1c\n\taccountid\x18\x02\x20\x01(\rR\taccountid\"\\\n0CAccountHa\
    rdware_GetPersonalizationFile_Response\x12(\n\x0fpublishedfileid\x18\x01\
    \x20\x01(\x04R\x0fpublishedfileid\"\x98\x02\n-CAccountHardware_VRCompati\
    bilityCheck_Request\x12E\n\x0cproduct_name\x18\x01\x20\x01(\tR\x0bproduc\
    tNameB\"\x82\xb5\x18\x1eName\x20of\x20product\x20we're\x20checking\x12p\
    \n\x06values\x18\x02\x20\x03(\x0b23.CAccountHardware_VRCompatibilityChec\
    k_Request.PairR\x06valuesB#\x82\xb5\x18\x1fValues\x20from\x20client\x20s\
    ystem\x20probe\x1a.\n\x04Pair\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03ke\
    y\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\"\x90\x04\n.CAccountHa\
    rdware_VRCompatibilityCheck_Response\x12u\n\x06values\x18\x01\x20\x03(\
    \x0b24.CAccountHardware_VRCompatibilityCheck_Response.PairR\x06valuesB'\
    \x82\xb5\x18#Top-level\x20values\x20reported\x20to\x20client\x12\x80\x01\
    \n\ncomponents\x18\x02\x20\x03(\x0b2@.CAccountHardware_VRCompatibilityCh\
    eck_Response.ComponentDisplayR\ncomponentsB\x1e\x82\xb5\x18\x1aSpecific\
    \x20values\x20to\x20display\x1a.\n\x04Pair\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\x1a\xb3\
    \x01\n\x10ComponentDisplay\x12>\n\x04name\x18\x01\x20\x01(\tR\x04nameB*\
    \x82\xb5\x18&Name\x20of\x20component\x20(OS,\x20RAM,\x20GPU,\x20etc.)\
    \x12-\n\x05image\x18\x02\x20\x01(\tR\x05imageB\x17\x82\xb5\x18\x13Name\
    \x20of\x20icon\x20to\x20use\x120\n\x05value\x18\x03\x20\x01(\tR\x05value\
    B\x1a\x82\xb5\x18\x16String\x20value\x20to\x20report\"\xd9\x02\n4CAccoun\
    tHardware_RegisterValveIndexComponent_Request\x12#\n\rserial_number\x18\
    \x01\x20\x01(\tR\x0cserialNumber\x12<\n\x1amanufacturer_serial_number\
    \x18\x02\x20\x01(\tR\x18manufacturerSerialNumber\x12%\n\x0ecomponent_cod\
    e\x18\x03\x20\x01(\tR\rcomponentCode\x12[\n\x0ecomponent_type\x18\x04\
    \x20\x01(\x0e2\x15.EValveIndexComponent:\x1dk_EValveIndexComponentUnknow\
    nR\rcomponentType\x12:\n\x19estimated_time_registered\x18\x05\x20\x01(\
    \x05R\x17estimatedTimeRegistered\"7\n5CAccountHardware_RegisterValveInde\
    xComponent_Response*\xa7\x01\n\x14EValveIndexComponent\x12!\n\x1dk_EValv\
    eIndexComponentUnknown\x10\0\x12\x1d\n\x19k_EValveIndexComponentHMD\x10\
    \x01\x12%\n!k_EValveIndexComponentLeftKnuckle\x10\x02\x12&\n\"k_EValveIn\
    dexComponentRightKnuckle\x10\x032\xea\x0f\n\x0fAccountHardware\x12\xd8\
    \x01\n\x17RegisterSteamController\x121.CAccountHardware_RegisterSteamCon\
    troller_Request\x1a2.CAccountHardware_RegisterSteamController_Response\"\
    V\x82\xb5\x18RRecords\x20a\x20serial\x20number\x20and\x20the\x20calling\
    \x20user's\x20account\x20info\x20for\x20warranty\x20purposes.\x12\xd7\
    \x01\n#CompleteSteamControllerRegistration\x12=.CAccountHardware_Complet\
    eSteamControllerRegistration_Request\x1a>.CAccountHardware_CompleteSteam\
    ControllerRegistration_Response\"1\x82\xb5\x18-Marks\x20a\x20controller'\
    s\x20registration\x20as\x20complete\x12\xdb\x01\n#QueryAccountsRegistere\
    dToController\x129.CAccountHardware_QueryAccountsRegisteredToSerial_Requ\
    est\x1a:.CAccountHardware_QueryAccountsRegisteredToSerial_Response\"=\
    \x82\xb5\x189Sends\x20back\x20a\x20list\x20of\x20accounts\x20registered\
    \x20to\x20a\x20controller.\x12\xbc\x01\n\x20SetDesiredControllerConfigFo\
    rApp\x122.CAccountHardware_SteamControllerSetConfig_Request\x1a3.CAccoun\
    tHardware_SteamControllerSetConfig_Response\"/\x82\xb5\x18+Sets\x20a\x20\
    desired\x20controller\x20config\x20for\x20an\x20app\x12\xbc\x01\n\x20Get\
    DesiredControllerConfigForApp\x122.CAccountHardware_SteamControllerGetCo\
    nfig_Request\x1a3.CAccountHardware_SteamControllerGetConfig_Response\"/\
    \x82\xb5\x18+Gets\x20a\x20desired\x20controller\x20config\x20for\x20an\
    \x20app\x12\xa5\x01\n\x19DeRegisterSteamController\x123.CAccountHardware\
    _DeRegisterSteamController_Request\x1a4.CAccountHardware_DeRegisterSteam\
    Controller_Response\"\x1d\x82\xb5\x18\x19De\x20registers\x20a\x20control\
    ler\x12\xbb\x01\n\x20SetControllerPersonalizationFile\x120.CAccountHardw\
    are_SetPersonalizationFile_Request\x1a1.CAccountHardware_SetPersonalizat\
    ionFile_Response\"2\x82\xb5\x18.Stores\x20the\x20file\x20ID\x20of\x20the\
    \x20personalization\x20file\x12\xb9\x01\n\x20GetControllerPersonalizatio\
    nFile\x120.CAccountHardware_GetPersonalizationFile_Request\x1a1.CAccount\
    Hardware_GetPersonalizationFile_Response\"0\x82\xb5\x18,Gets\x20the\x20f\
    ile\x20ID\x20of\x20the\x20personalization\x20file\x12\xa8\x01\n\x14VRCom\
    patibilityCheck\x12..CAccountHardware_VRCompatibilityCheck_Request\x1a/.\
    CAccountHardware_VRCompatibilityCheck_Response\"/\x82\xb5\x18+Check\x20s\
    ystem\x20info\x20for\x20compatibility\x20with\x20VR\x12\xc1\x01\n\x1bReg\
    isterValveIndexComponent\x125.CAccountHardware_RegisterValveIndexCompone\
    nt_Request\x1a6.CAccountHardware_RegisterValveIndexComponent_Response\"3\
    \x82\xb5\x18/Registers\x20a\x20valve\x20index\x20component\x20to\x20a\
    \x20customer\x1a5\x82\xb5\x181A\x20service\x20to\x20use\x20account\x20ha\
    rdware\x20related\x20methodsB\x03\x80\x01\x01J\xcf/\n\x07\x12\x05\0\0\
    \xb9\x01\x01\n\t\n\x02\x03\0\x12\x03\0\06\n\x08\n\x01\x08\x12\x03\x02\0\
    \"\n\t\n\x02\x08\x10\x12\x03\x02\0\"\n\n\n\x02\x05\0\x12\x04\x04\0\t\x01\
    \n\n\n\x03\x05\0\x01\x12\x03\x04\x05\x19\n\x0b\n\x04\x05\0\x02\0\x12\x03\
    \x05\x08*\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x05\x08%\n\x0c\n\x05\x05\0\
    \x02\0\x02\x12\x03\x05()\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x06\x08&\n\
    \x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x06\x08!\n\x0c\n\x05\x05\0\x02\x01\
    \x02\x12\x03\x06$%\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x07\x08.\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03\x07\x08)\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03\x07,-\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x08\x08/\n\x0c\n\x05\
    \x05\0\x02\x03\x01\x12\x03\x08\x08*\n\x0c\n\x05\x05\0\x02\x03\x02\x12\
    \x03\x08-.\n\n\n\x02\x04\0\x12\x04\x0b\0\x0e\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x0b\x088\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x08*\n\x0c\n\x05\x04\0\
    \x02\0\x04\x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0c\
    \x11\x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\x18%\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x0c()\n\x0b\n\x04\x04\0\x02\x01\x12\x03\r\x08,\n\x0c\
    \n\x05\x04\0\x02\x01\x04\x12\x03\r\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\r\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\x18'\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\r*+\n\n\n\x02\x04\x01\x12\x04\x10\0\x11\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\x10\x089\n\n\n\x02\x04\x02\x12\x04\
    \x13\0\x16\x01\n\n\n\x03\x04\x02\x01\x12\x03\x13\x08D\n\x0b\n\x04\x04\
    \x02\x02\0\x12\x03\x14\x08*\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x14\
    \x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x14\x11\x17\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x14\x18%\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x14()\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x15\x08,\n\x0c\n\x05\x04\
    \x02\x02\x01\x04\x12\x03\x15\x08\x10\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03\x15\x11\x17\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x15\x18'\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03\x15*+\n\n\n\x02\x04\x03\x12\x04\x18\0\
    \x19\x01\n\n\n\x03\x04\x03\x01\x12\x03\x18\x08E\n\n\n\x02\x04\x04\x12\
    \x04\x1b\0\x1e\x01\n\n\n\x03\x04\x04\x01\x12\x03\x1b\x08@\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03\x1c\x08*\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03\
    \x1c\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x1c\x11\x17\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03\x1c\x18%\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03\x1c()\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x1d\x08,\n\x0c\n\x05\
    \x04\x04\x02\x01\x04\x12\x03\x1d\x08\x10\n\x0c\n\x05\x04\x04\x02\x01\x05\
    \x12\x03\x1d\x11\x17\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1d\x18'\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x1d*+\n\n\n\x02\x04\x05\x12\x04\
    \x20\0#\x01\n\n\n\x03\x04\x05\x01\x12\x03\x20\x08A\n\x0b\n\x04\x04\x05\
    \x02\0\x12\x03!\x08&\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03!\x08\x10\n\
    \x0c\n\x05\x04\x05\x02\0\x05\x12\x03!\x11\x17\n\x0c\n\x05\x04\x05\x02\0\
    \x01\x12\x03!\x18!\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03!$%\n\x0b\n\x04\
    \x04\x05\x02\x01\x12\x03\"\x080\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03\
    \"\x08\x10\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03\"\x11\x15\n\x0c\n\x05\
    \x04\x05\x02\x01\x01\x12\x03\"\x16+\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x03\"./\n\n\n\x02\x04\x06\x12\x04%\0'\x01\n\n\n\x03\x04\x06\x01\x12\x03\
    %\x08A\n\x0b\n\x04\x04\x06\x02\0\x12\x03&\x08Y\n\x0c\n\x05\x04\x06\x02\0\
    \x04\x12\x03&\x08\x10\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03&\x11K\n\x0c\
    \n\x05\x04\x06\x02\0\x01\x12\x03&LT\n\x0c\n\x05\x04\x06\x02\0\x03\x12\
    \x03&WX\n\n\n\x02\x04\x07\x12\x04)\0-\x01\n\n\n\x03\x04\x07\x01\x12\x03)\
    \x08B\n\x0b\n\x04\x04\x07\x02\0\x12\x03*\x08(\n\x0c\n\x05\x04\x07\x02\0\
    \x04\x12\x03*\x08\x10\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03*\x11\x17\n\
    \x0c\n\x05\x04\x07\x02\0\x01\x12\x03*\x18#\n\x0c\n\x05\x04\x07\x02\0\x03\
    \x12\x03*&'\n\x0b\n\x04\x04\x07\x02\x01\x12\x03+\x08,\n\x0c\n\x05\x04\
    \x07\x02\x01\x04\x12\x03+\x08\x10\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\
    \x03+\x11\x17\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03+\x18'\n\x0c\n\x05\
    \x04\x07\x02\x01\x03\x12\x03+*+\n\x0b\n\x04\x04\x07\x02\x02\x12\x03,\x08\
    )\n\x0c\n\x05\x04\x07\x02\x02\x04\x12\x03,\x08\x10\n\x0c\n\x05\x04\x07\
    \x02\x02\x05\x12\x03,\x11\x17\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03,\
    \x18$\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03,'(\n\n\n\x02\x04\x08\x12\
    \x04/\06\x01\n\n\n\x03\x04\x08\x01\x12\x03/\x089\n\x0b\n\x04\x04\x08\x02\
    \0\x12\x030\x08*\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x030\x08\x10\n\x0c\n\
    \x05\x04\x08\x02\0\x05\x12\x030\x11\x17\n\x0c\n\x05\x04\x08\x02\0\x01\
    \x12\x030\x18%\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x030()\n\x0b\n\x04\x04\
    \x08\x02\x01\x12\x031\x08,\n\x0c\n\x05\x04\x08\x02\x01\x04\x12\x031\x08\
    \x10\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x031\x11\x17\n\x0c\n\x05\x04\
    \x08\x02\x01\x01\x12\x031\x18'\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x031*\
    +\n\x0b\n\x04\x04\x08\x02\x02\x12\x032\x08&\n\x0c\n\x05\x04\x08\x02\x02\
    \x04\x12\x032\x08\x10\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\x032\x11\x17\n\
    \x0c\n\x05\x04\x08\x02\x02\x01\x12\x032\x18!\n\x0c\n\x05\x04\x08\x02\x02\
    \x03\x12\x032$%\n\x0b\n\x04\x04\x08\x02\x03\x12\x033\x08`\n\x0c\n\x05\
    \x04\x08\x02\x03\x04\x12\x033\x08\x10\n\x0c\n\x05\x04\x08\x02\x03\x06\
    \x12\x033\x11L\n\x0c\n\x05\x04\x08\x02\x03\x01\x12\x033M[\n\x0c\n\x05\
    \x04\x08\x02\x03\x03\x12\x033^_\n\x0b\n\x04\x04\x08\x02\x04\x12\x034\x08\
    9\n\x0c\n\x05\x04\x08\x02\x04\x04\x12\x034\x08\x10\n\x0c\n\x05\x04\x08\
    \x02\x04\x05\x12\x034\x11\x16\n\x0c\n\x05\x04\x08\x02\x04\x01\x12\x034\
    \x17&\n\x0c\n\x05\x04\x08\x02\x04\x03\x12\x034)*\n\x0c\n\x05\x04\x08\x02\
    \x04\x08\x12\x034+8\n\x0c\n\x05\x04\x08\x02\x04\x07\x12\x03467\n\x0b\n\
    \x04\x04\x08\x02\x05\x12\x035\x08A\n\x0c\n\x05\x04\x08\x02\x05\x04\x12\
    \x035\x08\x10\n\x0c\n\x05\x04\x08\x02\x05\x05\x12\x035\x11\x15\n\x0c\n\
    \x05\x04\x08\x02\x05\x01\x12\x035\x16*\n\x0c\n\x05\x04\x08\x02\x05\x03\
    \x12\x035-.\n\x0c\n\x05\x04\x08\x02\x05\x08\x12\x035/@\n\x0c\n\x05\x04\
    \x08\x02\x05\x07\x12\x035:?\n\n\n\x02\x04\t\x12\x048\09\x01\n\n\n\x03\
    \x04\t\x01\x12\x038\x08:\n\n\n\x02\x04\n\x12\x04;\0B\x01\n\n\n\x03\x04\n\
    \x01\x12\x03;\x089\n\x0b\n\x04\x04\n\x02\0\x12\x03<\x08*\n\x0c\n\x05\x04\
    \n\x02\0\x04\x12\x03<\x08\x10\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03<\x11\
    \x17\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03<\x18%\n\x0c\n\x05\x04\n\x02\0\
    \x03\x12\x03<()\n\x0b\n\x04\x04\n\x02\x01\x12\x03=\x08,\n\x0c\n\x05\x04\
    \n\x02\x01\x04\x12\x03=\x08\x10\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03=\
    \x11\x17\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03=\x18'\n\x0c\n\x05\x04\n\
    \x02\x01\x03\x12\x03=*+\n\x0b\n\x04\x04\n\x02\x02\x12\x03>\x08&\n\x0c\n\
    \x05\x04\n\x02\x02\x04\x12\x03>\x08\x10\n\x0c\n\x05\x04\n\x02\x02\x05\
    \x12\x03>\x11\x17\n\x0c\n\x05\x04\n\x02\x02\x01\x12\x03>\x18!\n\x0c\n\
    \x05\x04\n\x02\x02\x03\x12\x03>$%\n\x0b\n\x04\x04\n\x02\x03\x12\x03?\x08\
    (\n\x0c\n\x05\x04\n\x02\x03\x04\x12\x03?\x08\x10\n\x0c\n\x05\x04\n\x02\
    \x03\x05\x12\x03?\x11\x17\n\x0c\n\x05\x04\n\x02\x03\x01\x12\x03?\x18#\n\
    \x0c\n\x05\x04\n\x02\x03\x03\x12\x03?&'\n\x0b\n\x04\x04\n\x02\x04\x12\
    \x03@\x089\n\x0c\n\x05\x04\n\x02\x04\x04\x12\x03@\x08\x10\n\x0c\n\x05\
    \x04\n\x02\x04\x05\x12\x03@\x11\x16\n\x0c\n\x05\x04\n\x02\x04\x01\x12\
    \x03@\x17&\n\x0c\n\x05\x04\n\x02\x04\x03\x12\x03@)*\n\x0c\n\x05\x04\n\
    \x02\x04\x08\x12\x03@+8\n\x0c\n\x05\x04\n\x02\x04\x07\x12\x03@67\n\x0b\n\
    \x04\x04\n\x02\x05\x12\x03A\x08A\n\x0c\n\x05\x04\n\x02\x05\x04\x12\x03A\
    \x08\x10\n\x0c\n\x05\x04\n\x02\x05\x05\x12\x03A\x11\x15\n\x0c\n\x05\x04\
    \n\x02\x05\x01\x12\x03A\x16*\n\x0c\n\x05\x04\n\x02\x05\x03\x12\x03A-.\n\
    \x0c\n\x05\x04\n\x02\x05\x08\x12\x03A/@\n\x0c\n\x05\x04\n\x02\x05\x07\
    \x12\x03A:?\n\n\n\x02\x04\x0b\x12\x04D\0I\x01\n\n\n\x03\x04\x0b\x01\x12\
    \x03D\x08B\n\x0b\n\x04\x04\x0b\x02\0\x12\x03E\x08(\n\x0c\n\x05\x04\x0b\
    \x02\0\x04\x12\x03E\x08\x10\n\x0c\n\x05\x04\x0b\x02\0\x05\x12\x03E\x11\
    \x17\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03E\x18#\n\x0c\n\x05\x04\x0b\x02\
    \0\x03\x12\x03E&'\n\x0b\n\x04\x04\x0b\x02\x01\x12\x03F\x08,\n\x0c\n\x05\
    \x04\x0b\x02\x01\x04\x12\x03F\x08\x10\n\x0c\n\x05\x04\x0b\x02\x01\x05\
    \x12\x03F\x11\x17\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03F\x18'\n\x0c\n\
    \x05\x04\x0b\x02\x01\x03\x12\x03F*+\n\x0b\n\x04\x04\x0b\x02\x02\x12\x03G\
    \x08)\n\x0c\n\x05\x04\x0b\x02\x02\x04\x12\x03G\x08\x10\n\x0c\n\x05\x04\
    \x0b\x02\x02\x05\x12\x03G\x11\x17\n\x0c\n\x05\x04\x0b\x02\x02\x01\x12\
    \x03G\x18$\n\x0c\n\x05\x04\x0b\x02\x02\x03\x12\x03G'(\n\x0b\n\x04\x04\
    \x0b\x02\x03\x12\x03H\x08*\n\x0c\n\x05\x04\x0b\x02\x03\x04\x12\x03H\x08\
    \x10\n\x0c\n\x05\x04\x0b\x02\x03\x05\x12\x03H\x11\x17\n\x0c\n\x05\x04\
    \x0b\x02\x03\x01\x12\x03H\x18%\n\x0c\n\x05\x04\x0b\x02\x03\x03\x12\x03H(\
    )\n\n\n\x02\x04\x0c\x12\x04K\0M\x01\n\n\n\x03\x04\x0c\x01\x12\x03K\x08:\
    \n\x0b\n\x04\x04\x0c\x02\0\x12\x03L\x08`\n\x0c\n\x05\x04\x0c\x02\0\x04\
    \x12\x03L\x08\x10\n\x0c\n\x05\x04\x0c\x02\0\x06\x12\x03L\x11L\n\x0c\n\
    \x05\x04\x0c\x02\0\x01\x12\x03LM[\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03L\
    ^_\n\n\n\x02\x04\r\x12\x04O\0S\x01\n\n\n\x03\x04\r\x01\x12\x03O\x08:\n\
    \x0b\n\x04\x04\r\x02\0\x12\x03P\x08*\n\x0c\n\x05\x04\r\x02\0\x04\x12\x03\
    P\x08\x10\n\x0c\n\x05\x04\r\x02\0\x05\x12\x03P\x11\x17\n\x0c\n\x05\x04\r\
    \x02\0\x01\x12\x03P\x18%\n\x0c\n\x05\x04\r\x02\0\x03\x12\x03P()\n\x0b\n\
    \x04\x04\r\x02\x01\x12\x03Q\x08,\n\x0c\n\x05\x04\r\x02\x01\x04\x12\x03Q\
    \x08\x10\n\x0c\n\x05\x04\r\x02\x01\x05\x12\x03Q\x11\x17\n\x0c\n\x05\x04\
    \r\x02\x01\x01\x12\x03Q\x18'\n\x0c\n\x05\x04\r\x02\x01\x03\x12\x03Q*+\n\
    \x0b\n\x04\x04\r\x02\x02\x12\x03R\x08&\n\x0c\n\x05\x04\r\x02\x02\x04\x12\
    \x03R\x08\x10\n\x0c\n\x05\x04\r\x02\x02\x05\x12\x03R\x11\x17\n\x0c\n\x05\
    \x04\r\x02\x02\x01\x12\x03R\x18!\n\x0c\n\x05\x04\r\x02\x02\x03\x12\x03R$\
    %\n\n\n\x02\x04\x0e\x12\x04U\0V\x01\n\n\n\x03\x04\x0e\x01\x12\x03U\x08;\
    \n\n\n\x02\x04\x0f\x12\x04X\0\\\x01\n\n\n\x03\x04\x0f\x01\x12\x03X\x087\
    \n\x0b\n\x04\x04\x0f\x02\0\x12\x03Y\x08*\n\x0c\n\x05\x04\x0f\x02\0\x04\
    \x12\x03Y\x08\x10\n\x0c\n\x05\x04\x0f\x02\0\x05\x12\x03Y\x11\x17\n\x0c\n\
    \x05\x04\x0f\x02\0\x01\x12\x03Y\x18%\n\x0c\n\x05\x04\x0f\x02\0\x03\x12\
    \x03Y()\n\x0b\n\x04\x04\x0f\x02\x01\x12\x03Z\x08,\n\x0c\n\x05\x04\x0f\
    \x02\x01\x04\x12\x03Z\x08\x10\n\x0c\n\x05\x04\x0f\x02\x01\x05\x12\x03Z\
    \x11\x17\n\x0c\n\x05\x04\x0f\x02\x01\x01\x12\x03Z\x18'\n\x0c\n\x05\x04\
    \x0f\x02\x01\x03\x12\x03Z*+\n\x0b\n\x04\x04\x0f\x02\x02\x12\x03[\x08&\n\
    \x0c\n\x05\x04\x0f\x02\x02\x04\x12\x03[\x08\x10\n\x0c\n\x05\x04\x0f\x02\
    \x02\x05\x12\x03[\x11\x17\n\x0c\n\x05\x04\x0f\x02\x02\x01\x12\x03[\x18!\
    \n\x0c\n\x05\x04\x0f\x02\x02\x03\x12\x03[$%\n\n\n\x02\x04\x10\x12\x04^\0\
    _\x01\n\n\n\x03\x04\x10\x01\x12\x03^\x088\n\n\n\x02\x04\x11\x12\x04a\0d\
    \x01\n\n\n\x03\x04\x11\x01\x12\x03a\x087\n\x0b\n\x04\x04\x11\x02\0\x12\
    \x03b\x08*\n\x0c\n\x05\x04\x11\x02\0\x04\x12\x03b\x08\x10\n\x0c\n\x05\
    \x04\x11\x02\0\x05\x12\x03b\x11\x17\n\x0c\n\x05\x04\x11\x02\0\x01\x12\
    \x03b\x18%\n\x0c\n\x05\x04\x11\x02\0\x03\x12\x03b()\n\x0b\n\x04\x04\x11\
    \x02\x01\x12\x03c\x08&\n\x0c\n\x05\x04\x11\x02\x01\x04\x12\x03c\x08\x10\
    \n\x0c\n\x05\x04\x11\x02\x01\x05\x12\x03c\x11\x17\n\x0c\n\x05\x04\x11\
    \x02\x01\x01\x12\x03c\x18!\n\x0c\n\x05\x04\x11\x02\x01\x03\x12\x03c$%\n\
    \n\n\x02\x04\x12\x12\x04f\0h\x01\n\n\n\x03\x04\x12\x01\x12\x03f\x088\n\
    \x0b\n\x04\x04\x12\x02\0\x12\x03g\x08,\n\x0c\n\x05\x04\x12\x02\0\x04\x12\
    \x03g\x08\x10\n\x0c\n\x05\x04\x12\x02\0\x05\x12\x03g\x11\x17\n\x0c\n\x05\
    \x04\x12\x02\0\x01\x12\x03g\x18'\n\x0c\n\x05\x04\x12\x02\0\x03\x12\x03g*\
    +\n\n\n\x02\x04\x13\x12\x04j\0r\x01\n\n\n\x03\x04\x13\x01\x12\x03j\x085\
    \n\x0c\n\x04\x04\x13\x03\0\x12\x04k\x08n\t\n\x0c\n\x05\x04\x13\x03\0\x01\
    \x12\x03k\x10\x14\n\r\n\x06\x04\x13\x03\0\x02\0\x12\x03l\x10(\n\x0e\n\
    \x07\x04\x13\x03\0\x02\0\x04\x12\x03l\x10\x18\n\x0e\n\x07\x04\x13\x03\0\
    \x02\0\x05\x12\x03l\x19\x1f\n\x0e\n\x07\x04\x13\x03\0\x02\0\x01\x12\x03l\
    \x20#\n\x0e\n\x07\x04\x13\x03\0\x02\0\x03\x12\x03l&'\n\r\n\x06\x04\x13\
    \x03\0\x02\x01\x12\x03m\x10*\n\x0e\n\x07\x04\x13\x03\0\x02\x01\x04\x12\
    \x03m\x10\x18\n\x0e\n\x07\x04\x13\x03\0\x02\x01\x05\x12\x03m\x19\x1f\n\
    \x0e\n\x07\x04\x13\x03\0\x02\x01\x01\x12\x03m\x20%\n\x0e\n\x07\x04\x13\
    \x03\0\x02\x01\x03\x12\x03m()\n\x0b\n\x04\x04\x13\x02\0\x12\x03p\x08\\\n\
    \x0c\n\x05\x04\x13\x02\0\x04\x12\x03p\x08\x10\n\x0c\n\x05\x04\x13\x02\0\
    \x05\x12\x03p\x11\x17\n\x0c\n\x05\x04\x13\x02\0\x01\x12\x03p\x18$\n\x0c\
    \n\x05\x04\x13\x02\0\x03\x12\x03p'(\n\x0c\n\x05\x04\x13\x02\0\x08\x12\
    \x03p)[\n\x0f\n\x08\x04\x13\x02\0\x08\xd0\x86\x03\x12\x03p*Z\n\x0c\n\x04\
    \x04\x13\x02\x01\x12\x04q\x08\x84\x01\n\x0c\n\x05\x04\x13\x02\x01\x04\
    \x12\x03q\x08\x10\n\x0c\n\x05\x04\x13\x02\x01\x06\x12\x03q\x11D\n\x0c\n\
    \x05\x04\x13\x02\x01\x01\x12\x03qEK\n\x0c\n\x05\x04\x13\x02\x01\x03\x12\
    \x03qNO\n\r\n\x05\x04\x13\x02\x01\x08\x12\x04qP\x83\x01\n\x10\n\x08\x04\
    \x13\x02\x01\x08\xd0\x86\x03\x12\x04qQ\x82\x01\n\x0b\n\x02\x04\x14\x12\
    \x05t\0\x82\x01\x01\n\n\n\x03\x04\x14\x01\x12\x03t\x086\n\x0c\n\x04\x04\
    \x14\x03\0\x12\x04u\x08x\t\n\x0c\n\x05\x04\x14\x03\0\x01\x12\x03u\x10\
    \x14\n\r\n\x06\x04\x14\x03\0\x02\0\x12\x03v\x10(\n\x0e\n\x07\x04\x14\x03\
    \0\x02\0\x04\x12\x03v\x10\x18\n\x0e\n\x07\x04\x14\x03\0\x02\0\x05\x12\
    \x03v\x19\x1f\n\x0e\n\x07\x04\x14\x03\0\x02\0\x01\x12\x03v\x20#\n\x0e\n\
    \x07\x04\x14\x03\0\x02\0\x03\x12\x03v&'\n\r\n\x06\x04\x14\x03\0\x02\x01\
    \x12\x03w\x10*\n\x0e\n\x07\x04\x14\x03\0\x02\x01\x04\x12\x03w\x10\x18\n\
    \x0e\n\x07\x04\x14\x03\0\x02\x01\x05\x12\x03w\x19\x1f\n\x0e\n\x07\x04\
    \x14\x03\0\x02\x01\x01\x12\x03w\x20%\n\x0e\n\x07\x04\x14\x03\0\x02\x01\
    \x03\x12\x03w()\n\x0c\n\x04\x04\x14\x03\x01\x12\x04z\x08~\t\n\x0c\n\x05\
    \x04\x14\x03\x01\x01\x12\x03z\x10\x20\n\r\n\x06\x04\x14\x03\x01\x02\0\
    \x12\x03{\x10d\n\x0e\n\x07\x04\x14\x03\x01\x02\0\x04\x12\x03{\x10\x18\n\
    \x0e\n\x07\x04\x14\x03\x01\x02\0\x05\x12\x03{\x19\x1f\n\x0e\n\x07\x04\
    \x14\x03\x01\x02\0\x01\x12\x03{\x20$\n\x0e\n\x07\x04\x14\x03\x01\x02\0\
    \x03\x12\x03{'(\n\x0e\n\x07\x04\x14\x03\x01\x02\0\x08\x12\x03{)c\n\x11\n\
    \n\x04\x14\x03\x01\x02\0\x08\xd0\x86\x03\x12\x03{*b\n\r\n\x06\x04\x14\
    \x03\x01\x02\x01\x12\x03|\x10R\n\x0e\n\x07\x04\x14\x03\x01\x02\x01\x04\
    \x12\x03|\x10\x18\n\x0e\n\x07\x04\x14\x03\x01\x02\x01\x05\x12\x03|\x19\
    \x1f\n\x0e\n\x07\x04\x14\x03\x01\x02\x01\x01\x12\x03|\x20%\n\x0e\n\x07\
    \x04\x14\x03\x01\x02\x01\x03\x12\x03|()\n\x0e\n\x07\x04\x14\x03\x01\x02\
    \x01\x08\x12\x03|*Q\n\x11\n\n\x04\x14\x03\x01\x02\x01\x08\xd0\x86\x03\
    \x12\x03|+P\n\r\n\x06\x04\x14\x03\x01\x02\x02\x12\x03}\x10U\n\x0e\n\x07\
    \x04\x14\x03\x01\x02\x02\x04\x12\x03}\x10\x18\n\x0e\n\x07\x04\x14\x03\
    \x01\x02\x02\x05\x12\x03}\x19\x1f\n\x0e\n\x07\x04\x14\x03\x01\x02\x02\
    \x01\x12\x03}\x20%\n\x0e\n\x07\x04\x14\x03\x01\x02\x02\x03\x12\x03}()\n\
    \x0e\n\x07\x04\x14\x03\x01\x02\x02\x08\x12\x03}*T\n\x11\n\n\x04\x14\x03\
    \x01\x02\x02\x08\xd0\x86\x03\x12\x03}+S\n\r\n\x04\x04\x14\x02\0\x12\x05\
    \x80\x01\x08\x89\x01\n\r\n\x05\x04\x14\x02\0\x04\x12\x04\x80\x01\x08\x10\
    \n\r\n\x05\x04\x14\x02\0\x06\x12\x04\x80\x01\x11E\n\r\n\x05\x04\x14\x02\
    \0\x01\x12\x04\x80\x01FL\n\r\n\x05\x04\x14\x02\0\x03\x12\x04\x80\x01OP\n\
    \x0e\n\x05\x04\x14\x02\0\x08\x12\x05\x80\x01Q\x88\x01\n\x11\n\x08\x04\
    \x14\x02\0\x08\xd0\x86\x03\x12\x05\x80\x01R\x87\x01\n\r\n\x04\x04\x14\
    \x02\x01\x12\x05\x81\x01\x08\x90\x01\n\r\n\x05\x04\x14\x02\x01\x04\x12\
    \x04\x81\x01\x08\x10\n\r\n\x05\x04\x14\x02\x01\x06\x12\x04\x81\x01\x11Q\
    \n\r\n\x05\x04\x14\x02\x01\x01\x12\x04\x81\x01R\\\n\r\n\x05\x04\x14\x02\
    \x01\x03\x12\x04\x81\x01_`\n\x0e\n\x05\x04\x14\x02\x01\x08\x12\x05\x81\
    \x01a\x8f\x01\n\x11\n\x08\x04\x14\x02\x01\x08\xd0\x86\x03\x12\x05\x81\
    \x01b\x8e\x01\n\x0c\n\x02\x04\x15\x12\x06\x84\x01\0\x8a\x01\x01\n\x0b\n\
    \x03\x04\x15\x01\x12\x04\x84\x01\x08<\n\x0c\n\x04\x04\x15\x02\0\x12\x04\
    \x85\x01\x08*\n\r\n\x05\x04\x15\x02\0\x04\x12\x04\x85\x01\x08\x10\n\r\n\
    \x05\x04\x15\x02\0\x05\x12\x04\x85\x01\x11\x17\n\r\n\x05\x04\x15\x02\0\
    \x01\x12\x04\x85\x01\x18%\n\r\n\x05\x04\x15\x02\0\x03\x12\x04\x85\x01()\
    \n\x0c\n\x04\x04\x15\x02\x01\x12\x04\x86\x01\x087\n\r\n\x05\x04\x15\x02\
    \x01\x04\x12\x04\x86\x01\x08\x10\n\r\n\x05\x04\x15\x02\x01\x05\x12\x04\
    \x86\x01\x11\x17\n\r\n\x05\x04\x15\x02\x01\x01\x12\x04\x86\x01\x182\n\r\
    \n\x05\x04\x15\x02\x01\x03\x12\x04\x86\x0156\n\x0c\n\x04\x04\x15\x02\x02\
    \x12\x04\x87\x01\x08+\n\r\n\x05\x04\x15\x02\x02\x04\x12\x04\x87\x01\x08\
    \x10\n\r\n\x05\x04\x15\x02\x02\x05\x12\x04\x87\x01\x11\x17\n\r\n\x05\x04\
    \x15\x02\x02\x01\x12\x04\x87\x01\x18&\n\r\n\x05\x04\x15\x02\x02\x03\x12\
    \x04\x87\x01)*\n\x0c\n\x04\x04\x15\x02\x03\x12\x04\x88\x01\x08d\n\r\n\
    \x05\x04\x15\x02\x03\x04\x12\x04\x88\x01\x08\x10\n\r\n\x05\x04\x15\x02\
    \x03\x06\x12\x04\x88\x01\x11&\n\r\n\x05\x04\x15\x02\x03\x01\x12\x04\x88\
    \x01'5\n\r\n\x05\x04\x15\x02\x03\x03\x12\x04\x88\x0189\n\r\n\x05\x04\x15\
    \x02\x03\x08\x12\x04\x88\x01:c\n\r\n\x05\x04\x15\x02\x03\x07\x12\x04\x88\
    \x01Eb\n\x0c\n\x04\x04\x15\x02\x04\x12\x04\x89\x01\x085\n\r\n\x05\x04\
    \x15\x02\x04\x04\x12\x04\x89\x01\x08\x10\n\r\n\x05\x04\x15\x02\x04\x05\
    \x12\x04\x89\x01\x11\x16\n\r\n\x05\x04\x15\x02\x04\x01\x12\x04\x89\x01\
    \x170\n\r\n\x05\x04\x15\x02\x04\x03\x12\x04\x89\x0134\n\x0c\n\x02\x04\
    \x16\x12\x06\x8c\x01\0\x8d\x01\x01\n\x0b\n\x03\x04\x16\x01\x12\x04\x8c\
    \x01\x08=\n\x0c\n\x02\x06\0\x12\x06\x8f\x01\0\xb9\x01\x01\n\x0b\n\x03\
    \x06\0\x01\x12\x04\x8f\x01\x08\x17\n\x0b\n\x03\x06\0\x03\x12\x04\x90\x01\
    \x08[\n\x0e\n\x06\x06\0\x03\xd0\x86\x03\x12\x04\x90\x01\x08[\n\x0e\n\x04\
    \x06\0\x02\0\x12\x06\x92\x01\x08\x94\x01\t\n\r\n\x05\x06\0\x02\0\x01\x12\
    \x04\x92\x01\x0c#\n\r\n\x05\x06\0\x02\0\x02\x12\x04\x92\x01%V\n\x0e\n\
    \x05\x06\0\x02\0\x03\x12\x05\x92\x01a\x93\x01\n\x0e\n\x05\x06\0\x02\0\
    \x04\x12\x05\x93\x01\x10\x83\x01\n\x11\n\x08\x06\0\x02\0\x04\xd0\x86\x03\
    \x12\x05\x93\x01\x10\x83\x01\n\x0e\n\x04\x06\0\x02\x01\x12\x06\x96\x01\
    \x08\x98\x01\t\n\r\n\x05\x06\0\x02\x01\x01\x12\x04\x96\x01\x0c/\n\r\n\
    \x05\x06\0\x02\x01\x02\x12\x04\x96\x011n\n\x0e\n\x05\x06\0\x02\x01\x03\
    \x12\x05\x96\x01y\xb7\x01\n\r\n\x05\x06\0\x02\x01\x04\x12\x04\x97\x01\
    \x10^\n\x10\n\x08\x06\0\x02\x01\x04\xd0\x86\x03\x12\x04\x97\x01\x10^\n\
    \x0e\n\x04\x06\0\x02\x02\x12\x06\x9a\x01\x08\x9c\x01\t\n\r\n\x05\x06\0\
    \x02\x02\x01\x12\x04\x9a\x01\x0c/\n\r\n\x05\x06\0\x02\x02\x02\x12\x04\
    \x9a\x011j\n\x0e\n\x05\x06\0\x02\x02\x03\x12\x05\x9a\x01u\xaf\x01\n\r\n\
    \x05\x06\0\x02\x02\x04\x12\x04\x9b\x01\x10j\n\x10\n\x08\x06\0\x02\x02\
    \x04\xd0\x86\x03\x12\x04\x9b\x01\x10j\n\x0e\n\x04\x06\0\x02\x03\x12\x06\
    \x9e\x01\x08\xa0\x01\t\n\r\n\x05\x06\0\x02\x03\x01\x12\x04\x9e\x01\x0c,\
    \n\r\n\x05\x06\0\x02\x03\x02\x12\x04\x9e\x01.`\n\x0e\n\x05\x06\0\x02\x03\
    \x03\x12\x05\x9e\x01k\x9e\x01\n\r\n\x05\x06\0\x02\x03\x04\x12\x04\x9f\
    \x01\x10\\\n\x10\n\x08\x06\0\x02\x03\x04\xd0\x86\x03\x12\x04\x9f\x01\x10\
    \\\n\x0e\n\x04\x06\0\x02\x04\x12\x06\xa2\x01\x08\xa4\x01\t\n\r\n\x05\x06\
    \0\x02\x04\x01\x12\x04\xa2\x01\x0c,\n\r\n\x05\x06\0\x02\x04\x02\x12\x04\
    \xa2\x01.`\n\x0e\n\x05\x06\0\x02\x04\x03\x12\x05\xa2\x01k\x9e\x01\n\r\n\
    \x05\x06\0\x02\x04\x04\x12\x04\xa3\x01\x10\\\n\x10\n\x08\x06\0\x02\x04\
    \x04\xd0\x86\x03\x12\x04\xa3\x01\x10\\\n\x0e\n\x04\x06\0\x02\x05\x12\x06\
    \xa6\x01\x08\xa8\x01\t\n\r\n\x05\x06\0\x02\x05\x01\x12\x04\xa6\x01\x0c%\
    \n\r\n\x05\x06\0\x02\x05\x02\x12\x04\xa6\x01'Z\n\x0e\n\x05\x06\0\x02\x05\
    \x03\x12\x05\xa6\x01e\x99\x01\n\r\n\x05\x06\0\x02\x05\x04\x12\x04\xa7\
    \x01\x10J\n\x10\n\x08\x06\0\x02\x05\x04\xd0\x86\x03\x12\x04\xa7\x01\x10J\
    \n\x0e\n\x04\x06\0\x02\x06\x12\x06\xaa\x01\x08\xac\x01\t\n\r\n\x05\x06\0\
    \x02\x06\x01\x12\x04\xaa\x01\x0c,\n\r\n\x05\x06\0\x02\x06\x02\x12\x04\
    \xaa\x01.^\n\x0e\n\x05\x06\0\x02\x06\x03\x12\x05\xaa\x01i\x9a\x01\n\r\n\
    \x05\x06\0\x02\x06\x04\x12\x04\xab\x01\x10_\n\x10\n\x08\x06\0\x02\x06\
    \x04\xd0\x86\x03\x12\x04\xab\x01\x10_\n\x0e\n\x04\x06\0\x02\x07\x12\x06\
    \xae\x01\x08\xb0\x01\t\n\r\n\x05\x06\0\x02\x07\x01\x12\x04\xae\x01\x0c,\
    \n\r\n\x05\x06\0\x02\x07\x02\x12\x04\xae\x01.^\n\x0e\n\x05\x06\0\x02\x07\
    \x03\x12\x05\xae\x01i\x9a\x01\n\r\n\x05\x06\0\x02\x07\x04\x12\x04\xaf\
    \x01\x10]\n\x10\n\x08\x06\0\x02\x07\x04\xd0\x86\x03\x12\x04\xaf\x01\x10]\
    \n\x0e\n\x04\x06\0\x02\x08\x12\x06\xb2\x01\x08\xb4\x01\t\n\r\n\x05\x06\0\
    \x02\x08\x01\x12\x04\xb2\x01\x0c\x20\n\r\n\x05\x06\0\x02\x08\x02\x12\x04\
    \xb2\x01\"P\n\x0e\n\x05\x06\0\x02\x08\x03\x12\x05\xb2\x01[\x8a\x01\n\r\n\
    \x05\x06\0\x02\x08\x04\x12\x04\xb3\x01\x10\\\n\x10\n\x08\x06\0\x02\x08\
    \x04\xd0\x86\x03\x12\x04\xb3\x01\x10\\\n\x0e\n\x04\x06\0\x02\t\x12\x06\
    \xb6\x01\x08\xb8\x01\t\n\r\n\x05\x06\0\x02\t\x01\x12\x04\xb6\x01\x0c'\n\
    \r\n\x05\x06\0\x02\t\x02\x12\x04\xb6\x01)^\n\x0e\n\x05\x06\0\x02\t\x03\
    \x12\x05\xb6\x01i\x9f\x01\n\r\n\x05\x06\0\x02\t\x04\x12\x04\xb7\x01\x10`\
    \n\x10\n\x08\x06\0\x02\t\x04\xd0\x86\x03\x12\x04\xb7\x01\x10`\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(26);
            messages.push(CAccountHardware_RegisterSteamController_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_RegisterSteamController_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_CompleteSteamControllerRegistration_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_CompleteSteamControllerRegistration_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_QueryAccountsRegisteredToSerial_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::generated_message_descriptor_data());
            messages.push(CAccountHardware_QueryAccountsRegisteredToSerial_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_SteamControllerSetConfig_ControllerConfig::generated_message_descriptor_data());
            messages.push(CAccountHardware_SteamControllerSetConfig_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_SteamControllerSetConfig_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_SteamControllerGetConfig_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_SteamControllerGetConfig_ControllerConfig::generated_message_descriptor_data());
            messages.push(CAccountHardware_SteamControllerGetConfig_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_DeRegisterSteamController_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_DeRegisterSteamController_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_SetPersonalizationFile_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_SetPersonalizationFile_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_GetPersonalizationFile_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_GetPersonalizationFile_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_VRCompatibilityCheck_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_VRCompatibilityCheck_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_RegisterValveIndexComponent_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_RegisterValveIndexComponent_Response::generated_message_descriptor_data());
            messages.push(caccount_hardware_vrcompatibility_check_request::Pair::generated_message_descriptor_data());
            messages.push(caccount_hardware_vrcompatibility_check_response::Pair::generated_message_descriptor_data());
            messages.push(caccount_hardware_vrcompatibility_check_response::ComponentDisplay::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(EValveIndexComponent::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
