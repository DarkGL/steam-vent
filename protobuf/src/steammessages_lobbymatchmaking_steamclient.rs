// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_lobbymatchmaking.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:LobbyMatchmakingLegacy_GetLobbyStatus_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    // message fields
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Request.steamid_lobby)
    pub steamid_lobby: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Request.claim_ownership)
    pub claim_ownership: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Request.claim_membership)
    pub claim_membership: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Request.version_num)
    pub version_num: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:LobbyMatchmakingLegacy_GetLobbyStatus_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    fn default() -> &'a LobbyMatchmakingLegacy_GetLobbyStatus_Request {
        <LobbyMatchmakingLegacy_GetLobbyStatus_Request as ::protobuf::Message>::default_instance()
    }
}

impl LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    pub fn new() -> LobbyMatchmakingLegacy_GetLobbyStatus_Request {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_lobby = 2;

    pub fn steamid_lobby(&self) -> u64 {
        self.steamid_lobby.unwrap_or(0)
    }

    pub fn clear_steamid_lobby(&mut self) {
        self.steamid_lobby = ::std::option::Option::None;
    }

    pub fn has_steamid_lobby(&self) -> bool {
        self.steamid_lobby.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_lobby(&mut self, v: u64) {
        self.steamid_lobby = ::std::option::Option::Some(v);
    }

    // optional bool claim_ownership = 3;

    pub fn claim_ownership(&self) -> bool {
        self.claim_ownership.unwrap_or(false)
    }

    pub fn clear_claim_ownership(&mut self) {
        self.claim_ownership = ::std::option::Option::None;
    }

    pub fn has_claim_ownership(&self) -> bool {
        self.claim_ownership.is_some()
    }

    // Param is passed by value, moved
    pub fn set_claim_ownership(&mut self, v: bool) {
        self.claim_ownership = ::std::option::Option::Some(v);
    }

    // optional bool claim_membership = 4;

    pub fn claim_membership(&self) -> bool {
        self.claim_membership.unwrap_or(false)
    }

    pub fn clear_claim_membership(&mut self) {
        self.claim_membership = ::std::option::Option::None;
    }

    pub fn has_claim_membership(&self) -> bool {
        self.claim_membership.is_some()
    }

    // Param is passed by value, moved
    pub fn set_claim_membership(&mut self, v: bool) {
        self.claim_membership = ::std::option::Option::Some(v);
    }

    // optional uint32 version_num = 5;

    pub fn version_num(&self) -> u32 {
        self.version_num.unwrap_or(0)
    }

    pub fn clear_version_num(&mut self) {
        self.version_num = ::std::option::Option::None;
    }

    pub fn has_version_num(&self) -> bool {
        self.version_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version_num(&mut self, v: u32) {
        self.version_num = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &m.app_id },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &mut m.app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_lobby",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &m.steamid_lobby },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &mut m.steamid_lobby },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "claim_ownership",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &m.claim_ownership },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &mut m.claim_ownership },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "claim_membership",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &m.claim_membership },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &mut m.claim_membership },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version_num",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &m.version_num },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &mut m.version_num },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LobbyMatchmakingLegacy_GetLobbyStatus_Request>(
            "LobbyMatchmakingLegacy_GetLobbyStatus_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    const NAME: &'static str = "LobbyMatchmakingLegacy_GetLobbyStatus_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    self.steamid_lobby = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.claim_ownership = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.claim_membership = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.version_num = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid_lobby {
            my_size += 1 + 8;
        }
        if let Some(v) = self.claim_ownership {
            my_size += 1 + 1;
        }
        if let Some(v) = self.claim_membership {
            my_size += 1 + 1;
        }
        if let Some(v) = self.version_num {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid_lobby {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.claim_ownership {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.claim_membership {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.version_num {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LobbyMatchmakingLegacy_GetLobbyStatus_Request {
        LobbyMatchmakingLegacy_GetLobbyStatus_Request::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.steamid_lobby = ::std::option::Option::None;
        self.claim_ownership = ::std::option::Option::None;
        self.claim_membership = ::std::option::Option::None;
        self.version_num = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LobbyMatchmakingLegacy_GetLobbyStatus_Request {
        static instance: LobbyMatchmakingLegacy_GetLobbyStatus_Request = LobbyMatchmakingLegacy_GetLobbyStatus_Request {
            app_id: ::std::option::Option::None,
            steamid_lobby: ::std::option::Option::None,
            claim_ownership: ::std::option::Option::None,
            claim_membership: ::std::option::Option::None,
            version_num: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LobbyMatchmakingLegacy_GetLobbyStatus_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:LobbyMatchmakingLegacy_GetLobbyStatus_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    // message fields
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Response.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Response.steamid_lobby)
    pub steamid_lobby: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Response.lobby_status)
    pub lobby_status: ::std::option::Option<::protobuf::EnumOrUnknown<ELobbyStatus>>,
    // special fields
    // @@protoc_insertion_point(special_field:LobbyMatchmakingLegacy_GetLobbyStatus_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    fn default() -> &'a LobbyMatchmakingLegacy_GetLobbyStatus_Response {
        <LobbyMatchmakingLegacy_GetLobbyStatus_Response as ::protobuf::Message>::default_instance()
    }
}

impl LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    pub fn new() -> LobbyMatchmakingLegacy_GetLobbyStatus_Response {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_lobby = 2;

    pub fn steamid_lobby(&self) -> u64 {
        self.steamid_lobby.unwrap_or(0)
    }

    pub fn clear_steamid_lobby(&mut self) {
        self.steamid_lobby = ::std::option::Option::None;
    }

    pub fn has_steamid_lobby(&self) -> bool {
        self.steamid_lobby.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_lobby(&mut self, v: u64) {
        self.steamid_lobby = ::std::option::Option::Some(v);
    }

    // optional .ELobbyStatus lobby_status = 3;

    pub fn lobby_status(&self) -> ELobbyStatus {
        match self.lobby_status {
            Some(e) => e.enum_value_or(ELobbyStatus::k_ELobbyStatusInvalid),
            None => ELobbyStatus::k_ELobbyStatusInvalid,
        }
    }

    pub fn clear_lobby_status(&mut self) {
        self.lobby_status = ::std::option::Option::None;
    }

    pub fn has_lobby_status(&self) -> bool {
        self.lobby_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lobby_status(&mut self, v: ELobbyStatus) {
        self.lobby_status = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Response| { &m.app_id },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Response| { &mut m.app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_lobby",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Response| { &m.steamid_lobby },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Response| { &mut m.steamid_lobby },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lobby_status",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Response| { &m.lobby_status },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Response| { &mut m.lobby_status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LobbyMatchmakingLegacy_GetLobbyStatus_Response>(
            "LobbyMatchmakingLegacy_GetLobbyStatus_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    const NAME: &'static str = "LobbyMatchmakingLegacy_GetLobbyStatus_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    self.steamid_lobby = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.lobby_status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid_lobby {
            my_size += 1 + 8;
        }
        if let Some(v) = self.lobby_status {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid_lobby {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.lobby_status {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LobbyMatchmakingLegacy_GetLobbyStatus_Response {
        LobbyMatchmakingLegacy_GetLobbyStatus_Response::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.steamid_lobby = ::std::option::Option::None;
        self.lobby_status = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LobbyMatchmakingLegacy_GetLobbyStatus_Response {
        static instance: LobbyMatchmakingLegacy_GetLobbyStatus_Response = LobbyMatchmakingLegacy_GetLobbyStatus_Response {
            app_id: ::std::option::Option::None,
            steamid_lobby: ::std::option::Option::None,
            lobby_status: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LobbyMatchmakingLegacy_GetLobbyStatus_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ELobbyStatus)
pub enum ELobbyStatus {
    // @@protoc_insertion_point(enum_value:ELobbyStatus.k_ELobbyStatusInvalid)
    k_ELobbyStatusInvalid = 0,
    // @@protoc_insertion_point(enum_value:ELobbyStatus.k_ELobbyStatusExists)
    k_ELobbyStatusExists = 1,
    // @@protoc_insertion_point(enum_value:ELobbyStatus.k_ELobbyStatusDoesNotExist)
    k_ELobbyStatusDoesNotExist = 2,
    // @@protoc_insertion_point(enum_value:ELobbyStatus.k_ELobbyStatusNotAMember)
    k_ELobbyStatusNotAMember = 3,
}

impl ::protobuf::Enum for ELobbyStatus {
    const NAME: &'static str = "ELobbyStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ELobbyStatus> {
        match value {
            0 => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusInvalid),
            1 => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusExists),
            2 => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusDoesNotExist),
            3 => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusNotAMember),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ELobbyStatus> {
        match str {
            "k_ELobbyStatusInvalid" => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusInvalid),
            "k_ELobbyStatusExists" => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusExists),
            "k_ELobbyStatusDoesNotExist" => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusDoesNotExist),
            "k_ELobbyStatusNotAMember" => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusNotAMember),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ELobbyStatus] = &[
        ELobbyStatus::k_ELobbyStatusInvalid,
        ELobbyStatus::k_ELobbyStatusExists,
        ELobbyStatus::k_ELobbyStatusDoesNotExist,
        ELobbyStatus::k_ELobbyStatusNotAMember,
    ];
}

impl ::protobuf::EnumFull for ELobbyStatus {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ELobbyStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ELobbyStatus {
    fn default() -> Self {
        ELobbyStatus::k_ELobbyStatusInvalid
    }
}

impl ELobbyStatus {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ELobbyStatus>("ELobbyStatus")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n0steammessages_lobbymatchmaking.steamclient.proto\x1a,steammessages_un\
    ified_base.steamclient.proto\"\xe0\x01\n-LobbyMatchmakingLegacy_GetLobby\
    Status_Request\x12\x15\n\x06app_id\x18\x01\x20\x01(\rR\x05appId\x12#\n\r\
    steamid_lobby\x18\x02\x20\x01(\x06R\x0csteamidLobby\x12'\n\x0fclaim_owne\
    rship\x18\x03\x20\x01(\x08R\x0eclaimOwnership\x12)\n\x10claim_membership\
    \x18\x04\x20\x01(\x08R\x0fclaimMembership\x12\x1f\n\x0bversion_num\x18\
    \x05\x20\x01(\rR\nversionNum\"\xb5\x01\n.LobbyMatchmakingLegacy_GetLobby\
    Status_Response\x12\x15\n\x06app_id\x18\x01\x20\x01(\rR\x05appId\x12#\n\
    \rsteamid_lobby\x18\x02\x20\x01(\x06R\x0csteamidLobby\x12G\n\x0clobby_st\
    atus\x18\x03\x20\x01(\x0e2\r.ELobbyStatus:\x15k_ELobbyStatusInvalidR\x0b\
    lobbyStatus*\x81\x01\n\x0cELobbyStatus\x12\x19\n\x15k_ELobbyStatusInvali\
    d\x10\0\x12\x18\n\x14k_ELobbyStatusExists\x10\x01\x12\x1e\n\x1ak_ELobbyS\
    tatusDoesNotExist\x10\x02\x12\x1c\n\x18k_ELobbyStatusNotAMember\x10\x032\
    \xc6\x01\n\x16LobbyMatchmakingLegacy\x12\x85\x01\n\x0eGetLobbyStatus\x12\
    ..LobbyMatchmakingLegacy_GetLobbyStatus_Request\x1a/.LobbyMatchmakingLeg\
    acy_GetLobbyStatus_Response\"\x12\x82\xb5\x18\x0eGetLobbyStatus\x1a$\x82\
    \xb5\x18\x20Lobby\x20matchmaking\x20legacy\x20serviceB\x03\x80\x01\x01J\
    \xe3\x07\n\x06\x12\x04\0\0\x1f\x01\n\t\n\x02\x03\0\x12\x03\0\06\n\x08\n\
    \x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\x10\x12\x03\x02\0\"\n\n\n\x02\x05\
    \0\x12\x04\x04\0\t\x01\n\n\n\x03\x05\0\x01\x12\x03\x04\x05\x11\n\x0b\n\
    \x04\x05\0\x02\0\x12\x03\x05\x08\"\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\
    \x05\x08\x1d\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x05\x20!\n\x0b\n\x04\
    \x05\0\x02\x01\x12\x03\x06\x08!\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\
    \x06\x08\x1c\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x06\x1f\x20\n\x0b\n\
    \x04\x05\0\x02\x02\x12\x03\x07\x08'\n\x0c\n\x05\x05\0\x02\x02\x01\x12\
    \x03\x07\x08\"\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x07%&\n\x0b\n\x04\
    \x05\0\x02\x03\x12\x03\x08\x08%\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\
    \x08\x08\x20\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x08#$\n\n\n\x02\x04\0\
    \x12\x04\x0b\0\x11\x01\n\n\n\x03\x04\0\x01\x12\x03\x0b\x085\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x0c\x08#\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x0c\
    \x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0c\x11\x17\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\x0c\x18\x1e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c\
    !\"\n\x0b\n\x04\x04\0\x02\x01\x12\x03\r\x08+\n\x0c\n\x05\x04\0\x02\x01\
    \x04\x12\x03\r\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\r\x11\x18\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\x19&\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\r)*\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0e\x08*\n\x0c\n\x05\
    \x04\0\x02\x02\x04\x12\x03\x0e\x08\x10\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\x0e\x11\x15\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0e\x16%\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\x0e()\n\x0b\n\x04\x04\0\x02\x03\x12\x03\
    \x0f\x08+\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x0f\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03\x0f\x11\x15\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\x0f\x16&\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0f)*\n\x0b\n\x04\
    \x04\0\x02\x04\x12\x03\x10\x08(\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\
    \x10\x08\x10\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x10\x11\x17\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x03\x10\x18#\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03\x10&'\n\n\n\x02\x04\x01\x12\x04\x13\0\x17\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x13\x086\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x14\x08#\n\x0c\n\
    \x05\x04\x01\x02\0\x04\x12\x03\x14\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03\x14\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x14\x18\x1e\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x14!\"\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x15\x08+\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x15\x08\x10\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x15\x11\x18\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x15\x19&\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x15)*\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x16\x08R\n\x0c\n\x05\x04\x01\
    \x02\x02\x04\x12\x03\x16\x08\x10\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\
    \x16\x11\x1e\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x16\x1f+\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03\x16./\n\x0c\n\x05\x04\x01\x02\x02\x08\
    \x12\x03\x160Q\n\x0c\n\x05\x04\x01\x02\x02\x07\x12\x03\x16;P\n\n\n\x02\
    \x06\0\x12\x04\x19\0\x1f\x01\n\n\n\x03\x06\0\x01\x12\x03\x19\x08\x1e\n\n\
    \n\x03\x06\0\x03\x12\x03\x1a\x08J\n\r\n\x06\x06\0\x03\xd0\x86\x03\x12\
    \x03\x1a\x08J\n\x0c\n\x04\x06\0\x02\0\x12\x04\x1c\x08\x1e\t\n\x0c\n\x05\
    \x06\0\x02\0\x01\x12\x03\x1c\x0c\x1a\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\
    \x1c\x1cJ\n\r\n\x05\x06\0\x02\0\x03\x12\x04\x1cU\x84\x01\n\x0c\n\x05\x06\
    \0\x02\0\x04\x12\x03\x1d\x10?\n\x0f\n\x08\x06\0\x02\0\x04\xd0\x86\x03\
    \x12\x03\x1d\x10?\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(LobbyMatchmakingLegacy_GetLobbyStatus_Request::generated_message_descriptor_data());
            messages.push(LobbyMatchmakingLegacy_GetLobbyStatus_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ELobbyStatus::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
