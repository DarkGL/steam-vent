// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_datapublisher.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CDataPublisher_ClientContentCorruptionReport_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDataPublisher_ClientContentCorruptionReport_Notification {
    // message fields
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.depotid)
    pub depotid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
    pub download_source: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
    pub objectid: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.cellid)
    pub cellid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.is_manifest)
    pub is_manifest: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.object_size)
    pub object_size: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.corruption_type)
    pub corruption_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.used_https)
    pub used_https: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.oc_proxy_detected)
    pub oc_proxy_detected: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CDataPublisher_ClientContentCorruptionReport_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDataPublisher_ClientContentCorruptionReport_Notification {
    fn default() -> &'a CDataPublisher_ClientContentCorruptionReport_Notification {
        <CDataPublisher_ClientContentCorruptionReport_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CDataPublisher_ClientContentCorruptionReport_Notification {
    pub fn new() -> CDataPublisher_ClientContentCorruptionReport_Notification {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 depotid = 2;

    pub fn depotid(&self) -> u32 {
        self.depotid.unwrap_or(0)
    }

    pub fn clear_depotid(&mut self) {
        self.depotid = ::std::option::Option::None;
    }

    pub fn has_depotid(&self) -> bool {
        self.depotid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depotid(&mut self, v: u32) {
        self.depotid = ::std::option::Option::Some(v);
    }

    // optional string download_source = 3;

    pub fn download_source(&self) -> &str {
        match self.download_source.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_download_source(&mut self) {
        self.download_source = ::std::option::Option::None;
    }

    pub fn has_download_source(&self) -> bool {
        self.download_source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_download_source(&mut self, v: ::std::string::String) {
        self.download_source = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_download_source(&mut self) -> &mut ::std::string::String {
        if self.download_source.is_none() {
            self.download_source = ::std::option::Option::Some(::std::string::String::new());
        }
        self.download_source.as_mut().unwrap()
    }

    // Take field
    pub fn take_download_source(&mut self) -> ::std::string::String {
        self.download_source.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string objectid = 4;

    pub fn objectid(&self) -> &str {
        match self.objectid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_objectid(&mut self) {
        self.objectid = ::std::option::Option::None;
    }

    pub fn has_objectid(&self) -> bool {
        self.objectid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_objectid(&mut self, v: ::std::string::String) {
        self.objectid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_objectid(&mut self) -> &mut ::std::string::String {
        if self.objectid.is_none() {
            self.objectid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.objectid.as_mut().unwrap()
    }

    // Take field
    pub fn take_objectid(&mut self) -> ::std::string::String {
        self.objectid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 cellid = 5;

    pub fn cellid(&self) -> u32 {
        self.cellid.unwrap_or(0)
    }

    pub fn clear_cellid(&mut self) {
        self.cellid = ::std::option::Option::None;
    }

    pub fn has_cellid(&self) -> bool {
        self.cellid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cellid(&mut self, v: u32) {
        self.cellid = ::std::option::Option::Some(v);
    }

    // optional bool is_manifest = 6;

    pub fn is_manifest(&self) -> bool {
        self.is_manifest.unwrap_or(false)
    }

    pub fn clear_is_manifest(&mut self) {
        self.is_manifest = ::std::option::Option::None;
    }

    pub fn has_is_manifest(&self) -> bool {
        self.is_manifest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_manifest(&mut self, v: bool) {
        self.is_manifest = ::std::option::Option::Some(v);
    }

    // optional uint64 object_size = 7;

    pub fn object_size(&self) -> u64 {
        self.object_size.unwrap_or(0)
    }

    pub fn clear_object_size(&mut self) {
        self.object_size = ::std::option::Option::None;
    }

    pub fn has_object_size(&self) -> bool {
        self.object_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_object_size(&mut self, v: u64) {
        self.object_size = ::std::option::Option::Some(v);
    }

    // optional uint32 corruption_type = 8;

    pub fn corruption_type(&self) -> u32 {
        self.corruption_type.unwrap_or(0)
    }

    pub fn clear_corruption_type(&mut self) {
        self.corruption_type = ::std::option::Option::None;
    }

    pub fn has_corruption_type(&self) -> bool {
        self.corruption_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_corruption_type(&mut self, v: u32) {
        self.corruption_type = ::std::option::Option::Some(v);
    }

    // optional bool used_https = 9;

    pub fn used_https(&self) -> bool {
        self.used_https.unwrap_or(false)
    }

    pub fn clear_used_https(&mut self) {
        self.used_https = ::std::option::Option::None;
    }

    pub fn has_used_https(&self) -> bool {
        self.used_https.is_some()
    }

    // Param is passed by value, moved
    pub fn set_used_https(&mut self, v: bool) {
        self.used_https = ::std::option::Option::Some(v);
    }

    // optional bool oc_proxy_detected = 10;

    pub fn oc_proxy_detected(&self) -> bool {
        self.oc_proxy_detected.unwrap_or(false)
    }

    pub fn clear_oc_proxy_detected(&mut self) {
        self.oc_proxy_detected = ::std::option::Option::None;
    }

    pub fn has_oc_proxy_detected(&self) -> bool {
        self.oc_proxy_detected.is_some()
    }

    // Param is passed by value, moved
    pub fn set_oc_proxy_detected(&mut self, v: bool) {
        self.oc_proxy_detected = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.appid },
            |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "depotid",
            |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.depotid },
            |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.depotid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "download_source",
            |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.download_source },
            |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.download_source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "objectid",
            |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.objectid },
            |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.objectid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cellid",
            |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.cellid },
            |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.cellid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_manifest",
            |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.is_manifest },
            |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.is_manifest },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "object_size",
            |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.object_size },
            |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.object_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "corruption_type",
            |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.corruption_type },
            |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.corruption_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "used_https",
            |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.used_https },
            |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.used_https },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "oc_proxy_detected",
            |m: &CDataPublisher_ClientContentCorruptionReport_Notification| { &m.oc_proxy_detected },
            |m: &mut CDataPublisher_ClientContentCorruptionReport_Notification| { &mut m.oc_proxy_detected },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CDataPublisher_ClientContentCorruptionReport_Notification>(
            "CDataPublisher_ClientContentCorruptionReport_Notification",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CDataPublisher_ClientContentCorruptionReport_Notification {
    const NAME: &'static str = "CDataPublisher_ClientContentCorruptionReport_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.depotid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.download_source = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.objectid = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.cellid = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.is_manifest = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.object_size = ::std::option::Option::Some(is.read_uint64()?);
                },
                64 => {
                    self.corruption_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.used_https = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.oc_proxy_detected = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.depotid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.download_source.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.objectid.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.cellid {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.is_manifest {
            my_size += 1 + 1;
        }
        if let Some(v) = self.object_size {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        if let Some(v) = self.corruption_type {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.used_https {
            my_size += 1 + 1;
        }
        if let Some(v) = self.oc_proxy_detected {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.depotid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.download_source.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.objectid.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.cellid {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.is_manifest {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.object_size {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.corruption_type {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.used_https {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.oc_proxy_detected {
            os.write_bool(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDataPublisher_ClientContentCorruptionReport_Notification {
        CDataPublisher_ClientContentCorruptionReport_Notification::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.depotid = ::std::option::Option::None;
        self.download_source = ::std::option::Option::None;
        self.objectid = ::std::option::Option::None;
        self.cellid = ::std::option::Option::None;
        self.is_manifest = ::std::option::Option::None;
        self.object_size = ::std::option::Option::None;
        self.corruption_type = ::std::option::Option::None;
        self.used_https = ::std::option::Option::None;
        self.oc_proxy_detected = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDataPublisher_ClientContentCorruptionReport_Notification {
        static instance: CDataPublisher_ClientContentCorruptionReport_Notification = CDataPublisher_ClientContentCorruptionReport_Notification {
            appid: ::std::option::Option::None,
            depotid: ::std::option::Option::None,
            download_source: ::std::option::Option::None,
            objectid: ::std::option::Option::None,
            cellid: ::std::option::Option::None,
            is_manifest: ::std::option::Option::None,
            object_size: ::std::option::Option::None,
            corruption_type: ::std::option::Option::None,
            used_https: ::std::option::Option::None,
            oc_proxy_detected: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CDataPublisher_ClientContentCorruptionReport_Notification {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDataPublisher_ClientContentCorruptionReport_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDataPublisher_ClientContentCorruptionReport_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CDataPublisher_ClientContentCorruptionReport_Notification {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CValveHWSurvey_GetSurveySchedule_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CValveHWSurvey_GetSurveySchedule_Request {
    // message fields
    // @@protoc_insertion_point(field:CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
    pub surveydatetoken: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CValveHWSurvey_GetSurveySchedule_Request.surveydatetokenversion)
    pub surveydatetokenversion: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CValveHWSurvey_GetSurveySchedule_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CValveHWSurvey_GetSurveySchedule_Request {
    fn default() -> &'a CValveHWSurvey_GetSurveySchedule_Request {
        <CValveHWSurvey_GetSurveySchedule_Request as ::protobuf::Message>::default_instance()
    }
}

impl CValveHWSurvey_GetSurveySchedule_Request {
    pub fn new() -> CValveHWSurvey_GetSurveySchedule_Request {
        ::std::default::Default::default()
    }

    // optional string surveydatetoken = 1;

    pub fn surveydatetoken(&self) -> &str {
        match self.surveydatetoken.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_surveydatetoken(&mut self) {
        self.surveydatetoken = ::std::option::Option::None;
    }

    pub fn has_surveydatetoken(&self) -> bool {
        self.surveydatetoken.is_some()
    }

    // Param is passed by value, moved
    pub fn set_surveydatetoken(&mut self, v: ::std::string::String) {
        self.surveydatetoken = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_surveydatetoken(&mut self) -> &mut ::std::string::String {
        if self.surveydatetoken.is_none() {
            self.surveydatetoken = ::std::option::Option::Some(::std::string::String::new());
        }
        self.surveydatetoken.as_mut().unwrap()
    }

    // Take field
    pub fn take_surveydatetoken(&mut self) -> ::std::string::String {
        self.surveydatetoken.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 surveydatetokenversion = 2;

    pub fn surveydatetokenversion(&self) -> u64 {
        self.surveydatetokenversion.unwrap_or(0)
    }

    pub fn clear_surveydatetokenversion(&mut self) {
        self.surveydatetokenversion = ::std::option::Option::None;
    }

    pub fn has_surveydatetokenversion(&self) -> bool {
        self.surveydatetokenversion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_surveydatetokenversion(&mut self, v: u64) {
        self.surveydatetokenversion = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "surveydatetoken",
            |m: &CValveHWSurvey_GetSurveySchedule_Request| { &m.surveydatetoken },
            |m: &mut CValveHWSurvey_GetSurveySchedule_Request| { &mut m.surveydatetoken },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "surveydatetokenversion",
            |m: &CValveHWSurvey_GetSurveySchedule_Request| { &m.surveydatetokenversion },
            |m: &mut CValveHWSurvey_GetSurveySchedule_Request| { &mut m.surveydatetokenversion },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CValveHWSurvey_GetSurveySchedule_Request>(
            "CValveHWSurvey_GetSurveySchedule_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CValveHWSurvey_GetSurveySchedule_Request {
    const NAME: &'static str = "CValveHWSurvey_GetSurveySchedule_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.surveydatetoken = ::std::option::Option::Some(is.read_string()?);
                },
                17 => {
                    self.surveydatetokenversion = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.surveydatetoken.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.surveydatetokenversion {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.surveydatetoken.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.surveydatetokenversion {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CValveHWSurvey_GetSurveySchedule_Request {
        CValveHWSurvey_GetSurveySchedule_Request::new()
    }

    fn clear(&mut self) {
        self.surveydatetoken = ::std::option::Option::None;
        self.surveydatetokenversion = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CValveHWSurvey_GetSurveySchedule_Request {
        static instance: CValveHWSurvey_GetSurveySchedule_Request = CValveHWSurvey_GetSurveySchedule_Request {
            surveydatetoken: ::std::option::Option::None,
            surveydatetokenversion: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CValveHWSurvey_GetSurveySchedule_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CValveHWSurvey_GetSurveySchedule_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CValveHWSurvey_GetSurveySchedule_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CValveHWSurvey_GetSurveySchedule_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CValveHWSurvey_GetSurveySchedule_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CValveHWSurvey_GetSurveySchedule_Response {
    // message fields
    // @@protoc_insertion_point(field:CValveHWSurvey_GetSurveySchedule_Response.surveydatetoken)
    pub surveydatetoken: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CValveHWSurvey_GetSurveySchedule_Response.surveydatetokenversion)
    pub surveydatetokenversion: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CValveHWSurvey_GetSurveySchedule_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CValveHWSurvey_GetSurveySchedule_Response {
    fn default() -> &'a CValveHWSurvey_GetSurveySchedule_Response {
        <CValveHWSurvey_GetSurveySchedule_Response as ::protobuf::Message>::default_instance()
    }
}

impl CValveHWSurvey_GetSurveySchedule_Response {
    pub fn new() -> CValveHWSurvey_GetSurveySchedule_Response {
        ::std::default::Default::default()
    }

    // optional uint32 surveydatetoken = 1;

    pub fn surveydatetoken(&self) -> u32 {
        self.surveydatetoken.unwrap_or(0)
    }

    pub fn clear_surveydatetoken(&mut self) {
        self.surveydatetoken = ::std::option::Option::None;
    }

    pub fn has_surveydatetoken(&self) -> bool {
        self.surveydatetoken.is_some()
    }

    // Param is passed by value, moved
    pub fn set_surveydatetoken(&mut self, v: u32) {
        self.surveydatetoken = ::std::option::Option::Some(v);
    }

    // optional fixed64 surveydatetokenversion = 2;

    pub fn surveydatetokenversion(&self) -> u64 {
        self.surveydatetokenversion.unwrap_or(0)
    }

    pub fn clear_surveydatetokenversion(&mut self) {
        self.surveydatetokenversion = ::std::option::Option::None;
    }

    pub fn has_surveydatetokenversion(&self) -> bool {
        self.surveydatetokenversion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_surveydatetokenversion(&mut self, v: u64) {
        self.surveydatetokenversion = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "surveydatetoken",
            |m: &CValveHWSurvey_GetSurveySchedule_Response| { &m.surveydatetoken },
            |m: &mut CValveHWSurvey_GetSurveySchedule_Response| { &mut m.surveydatetoken },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "surveydatetokenversion",
            |m: &CValveHWSurvey_GetSurveySchedule_Response| { &m.surveydatetokenversion },
            |m: &mut CValveHWSurvey_GetSurveySchedule_Response| { &mut m.surveydatetokenversion },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CValveHWSurvey_GetSurveySchedule_Response>(
            "CValveHWSurvey_GetSurveySchedule_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CValveHWSurvey_GetSurveySchedule_Response {
    const NAME: &'static str = "CValveHWSurvey_GetSurveySchedule_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.surveydatetoken = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    self.surveydatetokenversion = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.surveydatetoken {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.surveydatetokenversion {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.surveydatetoken {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.surveydatetokenversion {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CValveHWSurvey_GetSurveySchedule_Response {
        CValveHWSurvey_GetSurveySchedule_Response::new()
    }

    fn clear(&mut self) {
        self.surveydatetoken = ::std::option::Option::None;
        self.surveydatetokenversion = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CValveHWSurvey_GetSurveySchedule_Response {
        static instance: CValveHWSurvey_GetSurveySchedule_Response = CValveHWSurvey_GetSurveySchedule_Response {
            surveydatetoken: ::std::option::Option::None,
            surveydatetokenversion: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CValveHWSurvey_GetSurveySchedule_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CValveHWSurvey_GetSurveySchedule_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CValveHWSurvey_GetSurveySchedule_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CValveHWSurvey_GetSurveySchedule_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-steammessages_datapublisher.steamclient.proto\x1a,steammessages_unifi\
    ed_base.steamclient.proto\"\xf3\x04\n9CDataPublisher_ClientContentCorrup\
    tionReport_Notification\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\
    \x12\x18\n\x07depotid\x18\x02\x20\x01(\rR\x07depotid\x12I\n\x0fdownload_\
    source\x18\x03\x20\x01(\tR\x0edownloadSourceB\x20\x82\xb5\x18\x1chost\
    \x20name\x20of\x20download\x20source\x128\n\x08objectid\x18\x04\x20\x01(\
    \tR\x08objectidB\x1c\x82\xb5\x18\x18Chunk\x20SHA\x20or\x20Manifest\x20ID\
    \x12*\n\x06cellid\x18\x05\x20\x01(\rR\x06cellidB\x12\x82\xb5\x18\x0eClie\
    nt\x20Cell\x20ID\x12J\n\x0bis_manifest\x18\x06\x20\x01(\x08R\nisManifest\
    B)\x82\xb5\x18%The\x20object\x20is\x20a\x20manifest,\x20not\x20a\x20chun\
    k\x129\n\x0bobject_size\x18\x07\x20\x01(\x04R\nobjectSizeB\x18\x82\xb5\
    \x18\x14object\x20size\x20in\x20bytes\x12G\n\x0fcorruption_type\x18\x08\
    \x20\x01(\rR\x0ecorruptionTypeB\x1e\x82\xb5\x18\x1aSee\x20EContentCorrup\
    tionType\x128\n\nused_https\x18\t\x20\x01(\x08R\tusedHttpsB\x19\x82\xb5\
    \x18\x15the\x20request\x20was\x20HTTPS\x12K\n\x11oc_proxy_detected\x18\n\
    \x20\x01(\x08R\x0focProxyDetectedB\x1f\x82\xb5\x18\x1bdetected\x20an\x20\
    OpenCache\x20proxy\"\x8c\x01\n(CValveHWSurvey_GetSurveySchedule_Request\
    \x12(\n\x0fsurveydatetoken\x18\x01\x20\x01(\tR\x0fsurveydatetoken\x126\n\
    \x16surveydatetokenversion\x18\x02\x20\x01(\x06R\x16surveydatetokenversi\
    on\"\x8d\x01\n)CValveHWSurvey_GetSurveySchedule_Response\x12(\n\x0fsurve\
    ydatetoken\x18\x01\x20\x01(\rR\x0fsurveydatetoken\x126\n\x16surveydateto\
    kenversion\x18\x02\x20\x01(\x06R\x16surveydatetokenversion2\xa2\x01\n\rD\
    ataPublisher\x12h\n\x1dClientContentCorruptionReport\x12:.CDataPublisher\
    _ClientContentCorruptionReport_Notification\x1a\x0b.NoResponse\x1a'\x82\
    \xb5\x18#Data\x20Publisher\x20(DP)\x20server\x20services2\xac\x01\n\rVal\
    veHWSurvey\x12\x87\x01\n\x11GetSurveySchedule\x12).CValveHWSurvey_GetSur\
    veySchedule_Request\x1a*.CValveHWSurvey_GetSurveySchedule_Response\"\x1b\
    \x82\xb5\x18\x17Should\x20I\x20run\x20the\x20survey\x1a\x11\x82\xb5\x18\
    \rValveHWSurveyB\x03\x80\x01\x01J\xa2\x0c\n\x06\x12\x04\0\0'\x01\n\t\n\
    \x02\x03\0\x12\x03\0\06\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\
    \x10\x12\x03\x02\0\"\n\n\n\x02\x04\0\x12\x04\x04\0\x0f\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x04\x08A\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x08\"\n\x0c\
    \n\x05\x04\0\x02\0\x04\x12\x03\x05\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x05\x11\x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x18\x1d\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x20!\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\x06\x08$\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x06\x08\x10\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x11\x17\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x06\x18\x1f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\"\
    #\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x07\x08]\n\x0c\n\x05\x04\0\x02\x02\
    \x04\x12\x03\x07\x08\x10\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x07\x11\
    \x17\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x07\x18'\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\x07*+\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x07,\\\
    \n\x0f\n\x08\x04\0\x02\x02\x08\xd0\x86\x03\x12\x03\x07-[\n\x0b\n\x04\x04\
    \0\x02\x03\x12\x03\x08\x08R\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x08\
    \x08\x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x08\x11\x17\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x03\x08\x18\x20\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x03\x08#$\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\x08%Q\n\x0f\n\x08\x04\0\
    \x02\x03\x08\xd0\x86\x03\x12\x03\x08&P\n\x0b\n\x04\x04\0\x02\x04\x12\x03\
    \t\x08F\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\t\x08\x10\n\x0c\n\x05\x04\
    \0\x02\x04\x05\x12\x03\t\x11\x17\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\t\
    \x18\x1e\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\t!\"\n\x0c\n\x05\x04\0\
    \x02\x04\x08\x12\x03\t#E\n\x0f\n\x08\x04\0\x02\x04\x08\xd0\x86\x03\x12\
    \x03\t$D\n\x0b\n\x04\x04\0\x02\x05\x12\x03\n\x08`\n\x0c\n\x05\x04\0\x02\
    \x05\x04\x12\x03\n\x08\x10\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\n\x11\
    \x15\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\n\x16!\n\x0c\n\x05\x04\0\x02\
    \x05\x03\x12\x03\n$%\n\x0c\n\x05\x04\0\x02\x05\x08\x12\x03\n&_\n\x0f\n\
    \x08\x04\0\x02\x05\x08\xd0\x86\x03\x12\x03\n'^\n\x0b\n\x04\x04\0\x02\x06\
    \x12\x03\x0b\x08Q\n\x0c\n\x05\x04\0\x02\x06\x04\x12\x03\x0b\x08\x10\n\
    \x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x0b\x11\x17\n\x0c\n\x05\x04\0\x02\
    \x06\x01\x12\x03\x0b\x18#\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x0b&'\n\
    \x0c\n\x05\x04\0\x02\x06\x08\x12\x03\x0b(P\n\x0f\n\x08\x04\0\x02\x06\x08\
    \xd0\x86\x03\x12\x03\x0b)O\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x0c\x08[\n\
    \x0c\n\x05\x04\0\x02\x07\x04\x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\0\x02\
    \x07\x05\x12\x03\x0c\x11\x17\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x0c\
    \x18'\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x0c*+\n\x0c\n\x05\x04\0\x02\
    \x07\x08\x12\x03\x0c,Z\n\x0f\n\x08\x04\0\x02\x07\x08\xd0\x86\x03\x12\x03\
    \x0c-Y\n\x0b\n\x04\x04\0\x02\x08\x12\x03\r\x08O\n\x0c\n\x05\x04\0\x02\
    \x08\x04\x12\x03\r\x08\x10\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\r\x11\
    \x15\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\r\x16\x20\n\x0c\n\x05\x04\0\
    \x02\x08\x03\x12\x03\r#$\n\x0c\n\x05\x04\0\x02\x08\x08\x12\x03\r%N\n\x0f\
    \n\x08\x04\0\x02\x08\x08\xd0\x86\x03\x12\x03\r&M\n\x0b\n\x04\x04\0\x02\t\
    \x12\x03\x0e\x08]\n\x0c\n\x05\x04\0\x02\t\x04\x12\x03\x0e\x08\x10\n\x0c\
    \n\x05\x04\0\x02\t\x05\x12\x03\x0e\x11\x15\n\x0c\n\x05\x04\0\x02\t\x01\
    \x12\x03\x0e\x16'\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03\x0e*,\n\x0c\n\x05\
    \x04\0\x02\t\x08\x12\x03\x0e-\\\n\x0f\n\x08\x04\0\x02\t\x08\xd0\x86\x03\
    \x12\x03\x0e.[\n\n\n\x02\x04\x01\x12\x04\x11\0\x14\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x11\x080\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x12\x08,\n\x0c\n\
    \x05\x04\x01\x02\0\x04\x12\x03\x12\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03\x12\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x12\x18'\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x12*+\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x13\x084\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x13\x08\x10\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x13\x11\x18\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x13\x19/\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x1323\n\n\n\x02\x04\x02\x12\x04\x16\0\x19\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03\x16\x081\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x17\x08,\n\x0c\n\x05\x04\
    \x02\x02\0\x04\x12\x03\x17\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\
    \x17\x11\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x17\x18'\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\x17*+\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x18\
    \x084\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x18\x08\x10\n\x0c\n\x05\
    \x04\x02\x02\x01\x05\x12\x03\x18\x11\x18\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03\x18\x19/\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1823\n\n\n\
    \x02\x06\0\x12\x04\x1b\0\x1f\x01\n\n\n\x03\x06\0\x01\x12\x03\x1b\x08\x15\
    \n\n\n\x03\x06\0\x03\x12\x03\x1c\x08M\n\r\n\x06\x06\0\x03\xd0\x86\x03\
    \x12\x03\x1c\x08M\n\x0b\n\x04\x06\0\x02\0\x12\x03\x1e\x08}\n\x0c\n\x05\
    \x06\0\x02\0\x01\x12\x03\x1e\x0c)\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\
    \x1e+e\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x1ep{\n\n\n\x02\x06\x01\x12\
    \x04!\0'\x01\n\n\n\x03\x06\x01\x01\x12\x03!\x08\x15\n\n\n\x03\x06\x01\
    \x03\x12\x03\"\x087\n\r\n\x06\x06\x01\x03\xd0\x86\x03\x12\x03\"\x087\n\
    \x0c\n\x04\x06\x01\x02\0\x12\x04$\x08&\t\n\x0c\n\x05\x06\x01\x02\0\x01\
    \x12\x03$\x0c\x1d\n\x0c\n\x05\x06\x01\x02\0\x02\x12\x03$\x1fH\n\x0c\n\
    \x05\x06\x01\x02\0\x03\x12\x03$S}\n\x0c\n\x05\x06\x01\x02\0\x04\x12\x03%\
    \x10H\n\x0f\n\x08\x06\x01\x02\0\x04\xd0\x86\x03\x12\x03%\x10H\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(CDataPublisher_ClientContentCorruptionReport_Notification::generated_message_descriptor_data());
            messages.push(CValveHWSurvey_GetSurveySchedule_Request::generated_message_descriptor_data());
            messages.push(CValveHWSurvey_GetSurveySchedule_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
