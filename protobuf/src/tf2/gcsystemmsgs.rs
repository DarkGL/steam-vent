// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tf2/gcsystemmsgs.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CCommunity_GamePersonalDataCategoryInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GamePersonalDataCategoryInfo {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GamePersonalDataCategoryInfo.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GamePersonalDataCategoryInfo.localization_token)
    pub localization_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GamePersonalDataCategoryInfo.template_file)
    pub template_file: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GamePersonalDataCategoryInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GamePersonalDataCategoryInfo {
    fn default() -> &'a CCommunity_GamePersonalDataCategoryInfo {
        <CCommunity_GamePersonalDataCategoryInfo as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GamePersonalDataCategoryInfo {
    pub fn new() -> CCommunity_GamePersonalDataCategoryInfo {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string localization_token = 2;

    pub fn localization_token(&self) -> &str {
        match self.localization_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_localization_token(&mut self) {
        self.localization_token = ::std::option::Option::None;
    }

    pub fn has_localization_token(&self) -> bool {
        self.localization_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_localization_token(&mut self, v: ::std::string::String) {
        self.localization_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localization_token(&mut self) -> &mut ::std::string::String {
        if self.localization_token.is_none() {
            self.localization_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.localization_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_localization_token(&mut self) -> ::std::string::String {
        self.localization_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string template_file = 3;

    pub fn template_file(&self) -> &str {
        match self.template_file.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_template_file(&mut self) {
        self.template_file = ::std::option::Option::None;
    }

    pub fn has_template_file(&self) -> bool {
        self.template_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_template_file(&mut self, v: ::std::string::String) {
        self.template_file = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_template_file(&mut self) -> &mut ::std::string::String {
        if self.template_file.is_none() {
            self.template_file = ::std::option::Option::Some(::std::string::String::new());
        }
        self.template_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_template_file(&mut self) -> ::std::string::String {
        self.template_file.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CCommunity_GamePersonalDataCategoryInfo| { &m.type_ },
            |m: &mut CCommunity_GamePersonalDataCategoryInfo| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "localization_token",
            |m: &CCommunity_GamePersonalDataCategoryInfo| { &m.localization_token },
            |m: &mut CCommunity_GamePersonalDataCategoryInfo| { &mut m.localization_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "template_file",
            |m: &CCommunity_GamePersonalDataCategoryInfo| { &m.template_file },
            |m: &mut CCommunity_GamePersonalDataCategoryInfo| { &mut m.template_file },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GamePersonalDataCategoryInfo>(
            "CCommunity_GamePersonalDataCategoryInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GamePersonalDataCategoryInfo {
    const NAME: &'static str = "CCommunity_GamePersonalDataCategoryInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.localization_token = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.template_file = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.localization_token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.template_file.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.localization_token.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.template_file.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GamePersonalDataCategoryInfo {
        CCommunity_GamePersonalDataCategoryInfo::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.localization_token = ::std::option::Option::None;
        self.template_file = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GamePersonalDataCategoryInfo {
        static instance: CCommunity_GamePersonalDataCategoryInfo = CCommunity_GamePersonalDataCategoryInfo {
            type_: ::std::option::Option::None,
            localization_token: ::std::option::Option::None,
            template_file: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GamePersonalDataCategoryInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GamePersonalDataCategoryInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GamePersonalDataCategoryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GamePersonalDataCategoryInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetGamePersonalDataCategories_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetGamePersonalDataCategories_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataCategories_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetGamePersonalDataCategories_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataCategories_Request {
    fn default() -> &'a CCommunity_GetGamePersonalDataCategories_Request {
        <CCommunity_GetGamePersonalDataCategories_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataCategories_Request {
    pub fn new() -> CCommunity_GetGamePersonalDataCategories_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCommunity_GetGamePersonalDataCategories_Request| { &m.appid },
            |m: &mut CCommunity_GetGamePersonalDataCategories_Request| { &mut m.appid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetGamePersonalDataCategories_Request>(
            "CCommunity_GetGamePersonalDataCategories_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataCategories_Request {
    const NAME: &'static str = "CCommunity_GetGamePersonalDataCategories_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetGamePersonalDataCategories_Request {
        CCommunity_GetGamePersonalDataCategories_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataCategories_Request {
        static instance: CCommunity_GetGamePersonalDataCategories_Request = CCommunity_GetGamePersonalDataCategories_Request {
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetGamePersonalDataCategories_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetGamePersonalDataCategories_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetGamePersonalDataCategories_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataCategories_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetGamePersonalDataCategories_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetGamePersonalDataCategories_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataCategories_Response.categories)
    pub categories: ::std::vec::Vec<CCommunity_GamePersonalDataCategoryInfo>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
    pub app_assets_basename: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetGamePersonalDataCategories_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataCategories_Response {
    fn default() -> &'a CCommunity_GetGamePersonalDataCategories_Response {
        <CCommunity_GetGamePersonalDataCategories_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataCategories_Response {
    pub fn new() -> CCommunity_GetGamePersonalDataCategories_Response {
        ::std::default::Default::default()
    }

    // optional string app_assets_basename = 2;

    pub fn app_assets_basename(&self) -> &str {
        match self.app_assets_basename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_app_assets_basename(&mut self) {
        self.app_assets_basename = ::std::option::Option::None;
    }

    pub fn has_app_assets_basename(&self) -> bool {
        self.app_assets_basename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_assets_basename(&mut self, v: ::std::string::String) {
        self.app_assets_basename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_assets_basename(&mut self) -> &mut ::std::string::String {
        if self.app_assets_basename.is_none() {
            self.app_assets_basename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.app_assets_basename.as_mut().unwrap()
    }

    // Take field
    pub fn take_app_assets_basename(&mut self) -> ::std::string::String {
        self.app_assets_basename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "categories",
            |m: &CCommunity_GetGamePersonalDataCategories_Response| { &m.categories },
            |m: &mut CCommunity_GetGamePersonalDataCategories_Response| { &mut m.categories },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_assets_basename",
            |m: &CCommunity_GetGamePersonalDataCategories_Response| { &m.app_assets_basename },
            |m: &mut CCommunity_GetGamePersonalDataCategories_Response| { &mut m.app_assets_basename },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetGamePersonalDataCategories_Response>(
            "CCommunity_GetGamePersonalDataCategories_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataCategories_Response {
    const NAME: &'static str = "CCommunity_GetGamePersonalDataCategories_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.categories.push(is.read_message()?);
                },
                18 => {
                    self.app_assets_basename = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.categories {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.app_assets_basename.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.categories {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.app_assets_basename.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetGamePersonalDataCategories_Response {
        CCommunity_GetGamePersonalDataCategories_Response::new()
    }

    fn clear(&mut self) {
        self.categories.clear();
        self.app_assets_basename = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataCategories_Response {
        static instance: CCommunity_GetGamePersonalDataCategories_Response = CCommunity_GetGamePersonalDataCategories_Response {
            categories: ::std::vec::Vec::new(),
            app_assets_basename: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetGamePersonalDataCategories_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetGamePersonalDataCategories_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetGamePersonalDataCategories_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataCategories_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetGamePersonalDataEntries_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetGamePersonalDataEntries_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Request.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
    pub continue_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetGamePersonalDataEntries_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataEntries_Request {
    fn default() -> &'a CCommunity_GetGamePersonalDataEntries_Request {
        <CCommunity_GetGamePersonalDataEntries_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataEntries_Request {
    pub fn new() -> CCommunity_GetGamePersonalDataEntries_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string type = 3;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string continue_token = 4;

    pub fn continue_token(&self) -> &str {
        match self.continue_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_continue_token(&mut self) {
        self.continue_token = ::std::option::Option::None;
    }

    pub fn has_continue_token(&self) -> bool {
        self.continue_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_continue_token(&mut self, v: ::std::string::String) {
        self.continue_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_continue_token(&mut self) -> &mut ::std::string::String {
        if self.continue_token.is_none() {
            self.continue_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.continue_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_continue_token(&mut self) -> ::std::string::String {
        self.continue_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.appid },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.steamid },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.type_ },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "continue_token",
            |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.continue_token },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.continue_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetGamePersonalDataEntries_Request>(
            "CCommunity_GetGamePersonalDataEntries_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataEntries_Request {
    const NAME: &'static str = "CCommunity_GetGamePersonalDataEntries_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.continue_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.continue_token.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.type_.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.continue_token.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetGamePersonalDataEntries_Request {
        CCommunity_GetGamePersonalDataEntries_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.continue_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataEntries_Request {
        static instance: CCommunity_GetGamePersonalDataEntries_Request = CCommunity_GetGamePersonalDataEntries_Request {
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            type_: ::std::option::Option::None,
            continue_token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetGamePersonalDataEntries_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetGamePersonalDataEntries_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetGamePersonalDataEntries_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataEntries_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetGamePersonalDataEntries_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetGamePersonalDataEntries_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Response.gceresult)
    pub gceresult: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Response.entries)
    pub entries: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
    pub continue_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetGamePersonalDataEntries_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataEntries_Response {
    fn default() -> &'a CCommunity_GetGamePersonalDataEntries_Response {
        <CCommunity_GetGamePersonalDataEntries_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataEntries_Response {
    pub fn new() -> CCommunity_GetGamePersonalDataEntries_Response {
        ::std::default::Default::default()
    }

    // optional uint32 gceresult = 1;

    pub fn gceresult(&self) -> u32 {
        self.gceresult.unwrap_or(0)
    }

    pub fn clear_gceresult(&mut self) {
        self.gceresult = ::std::option::Option::None;
    }

    pub fn has_gceresult(&self) -> bool {
        self.gceresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gceresult(&mut self, v: u32) {
        self.gceresult = ::std::option::Option::Some(v);
    }

    // optional string continue_token = 3;

    pub fn continue_token(&self) -> &str {
        match self.continue_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_continue_token(&mut self) {
        self.continue_token = ::std::option::Option::None;
    }

    pub fn has_continue_token(&self) -> bool {
        self.continue_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_continue_token(&mut self, v: ::std::string::String) {
        self.continue_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_continue_token(&mut self) -> &mut ::std::string::String {
        if self.continue_token.is_none() {
            self.continue_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.continue_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_continue_token(&mut self) -> ::std::string::String {
        self.continue_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gceresult",
            |m: &CCommunity_GetGamePersonalDataEntries_Response| { &m.gceresult },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Response| { &mut m.gceresult },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entries",
            |m: &CCommunity_GetGamePersonalDataEntries_Response| { &m.entries },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Response| { &mut m.entries },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "continue_token",
            |m: &CCommunity_GetGamePersonalDataEntries_Response| { &m.continue_token },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Response| { &mut m.continue_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetGamePersonalDataEntries_Response>(
            "CCommunity_GetGamePersonalDataEntries_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataEntries_Response {
    const NAME: &'static str = "CCommunity_GetGamePersonalDataEntries_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gceresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.entries.push(is.read_string()?);
                },
                26 => {
                    self.continue_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gceresult {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.entries {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let Some(v) = self.continue_token.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.gceresult {
            os.write_uint32(1, v)?;
        }
        for v in &self.entries {
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.continue_token.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetGamePersonalDataEntries_Response {
        CCommunity_GetGamePersonalDataEntries_Response::new()
    }

    fn clear(&mut self) {
        self.gceresult = ::std::option::Option::None;
        self.entries.clear();
        self.continue_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataEntries_Response {
        static instance: CCommunity_GetGamePersonalDataEntries_Response = CCommunity_GetGamePersonalDataEntries_Response {
            gceresult: ::std::option::Option::None,
            entries: ::std::vec::Vec::new(),
            continue_token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetGamePersonalDataEntries_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetGamePersonalDataEntries_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetGamePersonalDataEntries_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataEntries_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_TerminateGamePersonalDataEntries_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_TerminateGamePersonalDataEntries_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_TerminateGamePersonalDataEntries_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_TerminateGamePersonalDataEntries_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_TerminateGamePersonalDataEntries_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_TerminateGamePersonalDataEntries_Request {
    fn default() -> &'a CCommunity_TerminateGamePersonalDataEntries_Request {
        <CCommunity_TerminateGamePersonalDataEntries_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_TerminateGamePersonalDataEntries_Request {
    pub fn new() -> CCommunity_TerminateGamePersonalDataEntries_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCommunity_TerminateGamePersonalDataEntries_Request| { &m.appid },
            |m: &mut CCommunity_TerminateGamePersonalDataEntries_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CCommunity_TerminateGamePersonalDataEntries_Request| { &m.steamid },
            |m: &mut CCommunity_TerminateGamePersonalDataEntries_Request| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_TerminateGamePersonalDataEntries_Request>(
            "CCommunity_TerminateGamePersonalDataEntries_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_TerminateGamePersonalDataEntries_Request {
    const NAME: &'static str = "CCommunity_TerminateGamePersonalDataEntries_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_TerminateGamePersonalDataEntries_Request {
        CCommunity_TerminateGamePersonalDataEntries_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_TerminateGamePersonalDataEntries_Request {
        static instance: CCommunity_TerminateGamePersonalDataEntries_Request = CCommunity_TerminateGamePersonalDataEntries_Request {
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_TerminateGamePersonalDataEntries_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_TerminateGamePersonalDataEntries_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_TerminateGamePersonalDataEntries_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_TerminateGamePersonalDataEntries_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_TerminateGamePersonalDataEntries_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_TerminateGamePersonalDataEntries_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_TerminateGamePersonalDataEntries_Response.gceresult)
    pub gceresult: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_TerminateGamePersonalDataEntries_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_TerminateGamePersonalDataEntries_Response {
    fn default() -> &'a CCommunity_TerminateGamePersonalDataEntries_Response {
        <CCommunity_TerminateGamePersonalDataEntries_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_TerminateGamePersonalDataEntries_Response {
    pub fn new() -> CCommunity_TerminateGamePersonalDataEntries_Response {
        ::std::default::Default::default()
    }

    // optional uint32 gceresult = 1;

    pub fn gceresult(&self) -> u32 {
        self.gceresult.unwrap_or(0)
    }

    pub fn clear_gceresult(&mut self) {
        self.gceresult = ::std::option::Option::None;
    }

    pub fn has_gceresult(&self) -> bool {
        self.gceresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gceresult(&mut self, v: u32) {
        self.gceresult = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gceresult",
            |m: &CCommunity_TerminateGamePersonalDataEntries_Response| { &m.gceresult },
            |m: &mut CCommunity_TerminateGamePersonalDataEntries_Response| { &mut m.gceresult },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_TerminateGamePersonalDataEntries_Response>(
            "CCommunity_TerminateGamePersonalDataEntries_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_TerminateGamePersonalDataEntries_Response {
    const NAME: &'static str = "CCommunity_TerminateGamePersonalDataEntries_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gceresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gceresult {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.gceresult {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_TerminateGamePersonalDataEntries_Response {
        CCommunity_TerminateGamePersonalDataEntries_Response::new()
    }

    fn clear(&mut self) {
        self.gceresult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_TerminateGamePersonalDataEntries_Response {
        static instance: CCommunity_TerminateGamePersonalDataEntries_Response = CCommunity_TerminateGamePersonalDataEntries_Response {
            gceresult: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_TerminateGamePersonalDataEntries_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_TerminateGamePersonalDataEntries_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_TerminateGamePersonalDataEntries_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_TerminateGamePersonalDataEntries_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCSystemMsg)
pub enum EGCSystemMsg {
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgInvalid)
    k_EGCMsgInvalid = 0,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMulti)
    k_EGCMsgMulti = 1,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGenericReply)
    k_EGCMsgGenericReply = 10,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSystemBase)
    k_EGCMsgSystemBase = 50,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAchievementAwarded)
    k_EGCMsgAchievementAwarded = 51,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgConCommand)
    k_EGCMsgConCommand = 52,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgStartPlaying)
    k_EGCMsgStartPlaying = 53,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgStopPlaying)
    k_EGCMsgStopPlaying = 54,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgStartGameserver)
    k_EGCMsgStartGameserver = 55,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgStopGameserver)
    k_EGCMsgStopGameserver = 56,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWGRequest)
    k_EGCMsgWGRequest = 57,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWGResponse)
    k_EGCMsgWGResponse = 58,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserGameStatsSchema)
    k_EGCMsgGetUserGameStatsSchema = 59,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserGameStatsSchemaResponse)
    k_EGCMsgGetUserGameStatsSchemaResponse = 60,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserStatsDEPRECATED)
    k_EGCMsgGetUserStatsDEPRECATED = 61,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserStatsResponse)
    k_EGCMsgGetUserStatsResponse = 62,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAppInfoUpdated)
    k_EGCMsgAppInfoUpdated = 63,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgValidateSession)
    k_EGCMsgValidateSession = 64,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgValidateSessionResponse)
    k_EGCMsgValidateSessionResponse = 65,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgLookupAccountFromInput)
    k_EGCMsgLookupAccountFromInput = 66,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSendHTTPRequest)
    k_EGCMsgSendHTTPRequest = 67,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSendHTTPRequestResponse)
    k_EGCMsgSendHTTPRequestResponse = 68,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgPreTestSetup)
    k_EGCMsgPreTestSetup = 69,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgRecordSupportAction)
    k_EGCMsgRecordSupportAction = 70,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetAccountDetails_DEPRECATED)
    k_EGCMsgGetAccountDetails_DEPRECATED = 71,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgReceiveInterAppMessage)
    k_EGCMsgReceiveInterAppMessage = 73,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgFindAccounts)
    k_EGCMsgFindAccounts = 74,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgPostAlert)
    k_EGCMsgPostAlert = 75,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetLicenses)
    k_EGCMsgGetLicenses = 76,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserStats)
    k_EGCMsgGetUserStats = 77,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetCommands)
    k_EGCMsgGetCommands = 78,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetCommandsResponse)
    k_EGCMsgGetCommandsResponse = 79,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAddFreeLicense)
    k_EGCMsgAddFreeLicense = 80,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAddFreeLicenseResponse)
    k_EGCMsgAddFreeLicenseResponse = 81,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetIPLocation)
    k_EGCMsgGetIPLocation = 82,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetIPLocationResponse)
    k_EGCMsgGetIPLocationResponse = 83,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSystemStatsSchema)
    k_EGCMsgSystemStatsSchema = 84,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetSystemStats)
    k_EGCMsgGetSystemStats = 85,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetSystemStatsResponse)
    k_EGCMsgGetSystemStatsResponse = 86,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSendEmail)
    k_EGCMsgSendEmail = 87,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSendEmailResponse)
    k_EGCMsgSendEmailResponse = 88,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetEmailTemplate)
    k_EGCMsgGetEmailTemplate = 89,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetEmailTemplateResponse)
    k_EGCMsgGetEmailTemplateResponse = 90,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGrantGuestPass)
    k_EGCMsgGrantGuestPass = 91,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGrantGuestPassResponse)
    k_EGCMsgGrantGuestPassResponse = 92,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetAccountDetails)
    k_EGCMsgGetAccountDetails = 93,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetAccountDetailsResponse)
    k_EGCMsgGetAccountDetailsResponse = 94,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPersonaNames)
    k_EGCMsgGetPersonaNames = 95,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPersonaNamesResponse)
    k_EGCMsgGetPersonaNamesResponse = 96,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMultiplexMsg)
    k_EGCMsgMultiplexMsg = 97,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWebAPIRegisterInterfaces)
    k_EGCMsgWebAPIRegisterInterfaces = 101,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWebAPIJobRequest)
    k_EGCMsgWebAPIJobRequest = 102,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWebAPIJobRequestHttpResponse)
    k_EGCMsgWebAPIJobRequestHttpResponse = 104,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWebAPIJobRequestForwardResponse)
    k_EGCMsgWebAPIJobRequestForwardResponse = 105,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedGet)
    k_EGCMsgMemCachedGet = 200,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedGetResponse)
    k_EGCMsgMemCachedGetResponse = 201,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedSet)
    k_EGCMsgMemCachedSet = 202,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedDelete)
    k_EGCMsgMemCachedDelete = 203,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedStats)
    k_EGCMsgMemCachedStats = 204,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedStatsResponse)
    k_EGCMsgMemCachedStatsResponse = 205,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSQLStats)
    k_EGCMsgSQLStats = 210,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSQLStatsResponse)
    k_EGCMsgSQLStatsResponse = 211,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetDirectory)
    k_EGCMsgMasterSetDirectory = 220,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetDirectoryResponse)
    k_EGCMsgMasterSetDirectoryResponse = 221,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetWebAPIRouting)
    k_EGCMsgMasterSetWebAPIRouting = 222,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetWebAPIRoutingResponse)
    k_EGCMsgMasterSetWebAPIRoutingResponse = 223,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetClientMsgRouting)
    k_EGCMsgMasterSetClientMsgRouting = 224,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetClientMsgRoutingResponse)
    k_EGCMsgMasterSetClientMsgRoutingResponse = 225,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSetOptions)
    k_EGCMsgSetOptions = 226,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSetOptionsResponse)
    k_EGCMsgSetOptionsResponse = 227,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSystemBase2)
    k_EGCMsgSystemBase2 = 500,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPurchaseTrustStatus)
    k_EGCMsgGetPurchaseTrustStatus = 501,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPurchaseTrustStatusResponse)
    k_EGCMsgGetPurchaseTrustStatusResponse = 502,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgUpdateSession)
    k_EGCMsgUpdateSession = 503,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGCAccountVacStatusChange)
    k_EGCMsgGCAccountVacStatusChange = 504,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgCheckFriendship)
    k_EGCMsgCheckFriendship = 505,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgCheckFriendshipResponse)
    k_EGCMsgCheckFriendshipResponse = 506,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPartnerAccountLink)
    k_EGCMsgGetPartnerAccountLink = 507,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPartnerAccountLinkResponse)
    k_EGCMsgGetPartnerAccountLinkResponse = 508,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgVSReportedSuspiciousActivity)
    k_EGCMsgVSReportedSuspiciousActivity = 509,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAccountTradeBanStatusChange)
    k_EGCMsgAccountTradeBanStatusChange = 510,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAccountLockStatusChange)
    k_EGCMsgAccountLockStatusChange = 511,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgDPPartnerMicroTxns)
    k_EGCMsgDPPartnerMicroTxns = 512,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgDPPartnerMicroTxnsResponse)
    k_EGCMsgDPPartnerMicroTxnsResponse = 513,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetIPASN)
    k_EGCMsgGetIPASN = 514,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetIPASNResponse)
    k_EGCMsgGetIPASNResponse = 515,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetAppFriendsList)
    k_EGCMsgGetAppFriendsList = 516,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetAppFriendsListResponse)
    k_EGCMsgGetAppFriendsListResponse = 517,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgVacVerificationChange)
    k_EGCMsgVacVerificationChange = 518,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAccountPhoneNumberChange)
    k_EGCMsgAccountPhoneNumberChange = 519,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAccountTwoFactorChange)
    k_EGCMsgAccountTwoFactorChange = 520,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgCheckClanMembership)
    k_EGCMsgCheckClanMembership = 521,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgCheckClanMembershipResponse)
    k_EGCMsgCheckClanMembershipResponse = 522,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgInviteUserToLobby)
    k_EGCMsgInviteUserToLobby = 523,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetGamePersonalDataCategoriesRequest)
    k_EGCMsgGetGamePersonalDataCategoriesRequest = 524,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetGamePersonalDataCategoriesResponse)
    k_EGCMsgGetGamePersonalDataCategoriesResponse = 525,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetGamePersonalDataEntriesRequest)
    k_EGCMsgGetGamePersonalDataEntriesRequest = 526,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetGamePersonalDataEntriesResponse)
    k_EGCMsgGetGamePersonalDataEntriesResponse = 527,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgTerminateGamePersonalDataEntriesRequest)
    k_EGCMsgTerminateGamePersonalDataEntriesRequest = 528,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgTerminateGamePersonalDataEntriesResponse)
    k_EGCMsgTerminateGamePersonalDataEntriesResponse = 529,
}

impl ::protobuf::Enum for EGCSystemMsg {
    const NAME: &'static str = "EGCSystemMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCSystemMsg> {
        match value {
            0 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInvalid),
            1 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMulti),
            10 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGenericReply),
            50 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase),
            51 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAchievementAwarded),
            52 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgConCommand),
            53 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartPlaying),
            54 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopPlaying),
            55 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartGameserver),
            56 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopGameserver),
            57 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGRequest),
            58 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGResponse),
            59 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema),
            60 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse),
            61 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED),
            62 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsResponse),
            63 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAppInfoUpdated),
            64 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSession),
            65 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSessionResponse),
            66 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgLookupAccountFromInput),
            67 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequest),
            68 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse),
            69 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPreTestSetup),
            70 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgRecordSupportAction),
            71 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED),
            73 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgReceiveInterAppMessage),
            74 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgFindAccounts),
            75 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPostAlert),
            76 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetLicenses),
            77 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStats),
            78 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommands),
            79 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommandsResponse),
            80 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicense),
            81 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse),
            82 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocation),
            83 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocationResponse),
            84 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemStatsSchema),
            85 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStats),
            86 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStatsResponse),
            87 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmail),
            88 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmailResponse),
            89 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplate),
            90 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse),
            91 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPass),
            92 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPassResponse),
            93 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails),
            94 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse),
            95 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNames),
            96 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse),
            97 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMultiplexMsg),
            101 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces),
            102 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequest),
            104 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse),
            105 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse),
            200 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGet),
            201 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGetResponse),
            202 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedSet),
            203 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedDelete),
            204 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStats),
            205 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStatsResponse),
            210 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSQLStats),
            211 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSQLStatsResponse),
            220 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectory),
            221 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse),
            222 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting),
            223 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse),
            224 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting),
            225 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse),
            226 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptions),
            227 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptionsResponse),
            500 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase2),
            501 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus),
            502 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse),
            503 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgUpdateSession),
            504 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange),
            505 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendship),
            506 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendshipResponse),
            507 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLink),
            508 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse),
            509 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgVSReportedSuspiciousActivity),
            510 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountTradeBanStatusChange),
            511 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountLockStatusChange),
            512 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns),
            513 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse),
            514 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPASN),
            515 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPASNResponse),
            516 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAppFriendsList),
            517 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAppFriendsListResponse),
            518 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgVacVerificationChange),
            519 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange),
            520 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountTwoFactorChange),
            521 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckClanMembership),
            522 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckClanMembershipResponse),
            523 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInviteUserToLobby),
            524 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest),
            525 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse),
            526 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest),
            527 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse),
            528 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest),
            529 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCSystemMsg> {
        match str {
            "k_EGCMsgInvalid" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInvalid),
            "k_EGCMsgMulti" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMulti),
            "k_EGCMsgGenericReply" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGenericReply),
            "k_EGCMsgSystemBase" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase),
            "k_EGCMsgAchievementAwarded" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAchievementAwarded),
            "k_EGCMsgConCommand" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgConCommand),
            "k_EGCMsgStartPlaying" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartPlaying),
            "k_EGCMsgStopPlaying" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopPlaying),
            "k_EGCMsgStartGameserver" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartGameserver),
            "k_EGCMsgStopGameserver" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopGameserver),
            "k_EGCMsgWGRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGRequest),
            "k_EGCMsgWGResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGResponse),
            "k_EGCMsgGetUserGameStatsSchema" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema),
            "k_EGCMsgGetUserGameStatsSchemaResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse),
            "k_EGCMsgGetUserStatsDEPRECATED" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED),
            "k_EGCMsgGetUserStatsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsResponse),
            "k_EGCMsgAppInfoUpdated" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAppInfoUpdated),
            "k_EGCMsgValidateSession" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSession),
            "k_EGCMsgValidateSessionResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSessionResponse),
            "k_EGCMsgLookupAccountFromInput" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgLookupAccountFromInput),
            "k_EGCMsgSendHTTPRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequest),
            "k_EGCMsgSendHTTPRequestResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse),
            "k_EGCMsgPreTestSetup" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPreTestSetup),
            "k_EGCMsgRecordSupportAction" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgRecordSupportAction),
            "k_EGCMsgGetAccountDetails_DEPRECATED" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED),
            "k_EGCMsgReceiveInterAppMessage" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgReceiveInterAppMessage),
            "k_EGCMsgFindAccounts" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgFindAccounts),
            "k_EGCMsgPostAlert" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPostAlert),
            "k_EGCMsgGetLicenses" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetLicenses),
            "k_EGCMsgGetUserStats" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStats),
            "k_EGCMsgGetCommands" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommands),
            "k_EGCMsgGetCommandsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommandsResponse),
            "k_EGCMsgAddFreeLicense" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicense),
            "k_EGCMsgAddFreeLicenseResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse),
            "k_EGCMsgGetIPLocation" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocation),
            "k_EGCMsgGetIPLocationResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocationResponse),
            "k_EGCMsgSystemStatsSchema" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemStatsSchema),
            "k_EGCMsgGetSystemStats" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStats),
            "k_EGCMsgGetSystemStatsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStatsResponse),
            "k_EGCMsgSendEmail" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmail),
            "k_EGCMsgSendEmailResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmailResponse),
            "k_EGCMsgGetEmailTemplate" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplate),
            "k_EGCMsgGetEmailTemplateResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse),
            "k_EGCMsgGrantGuestPass" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPass),
            "k_EGCMsgGrantGuestPassResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPassResponse),
            "k_EGCMsgGetAccountDetails" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails),
            "k_EGCMsgGetAccountDetailsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse),
            "k_EGCMsgGetPersonaNames" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNames),
            "k_EGCMsgGetPersonaNamesResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse),
            "k_EGCMsgMultiplexMsg" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMultiplexMsg),
            "k_EGCMsgWebAPIRegisterInterfaces" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces),
            "k_EGCMsgWebAPIJobRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequest),
            "k_EGCMsgWebAPIJobRequestHttpResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse),
            "k_EGCMsgWebAPIJobRequestForwardResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse),
            "k_EGCMsgMemCachedGet" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGet),
            "k_EGCMsgMemCachedGetResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGetResponse),
            "k_EGCMsgMemCachedSet" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedSet),
            "k_EGCMsgMemCachedDelete" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedDelete),
            "k_EGCMsgMemCachedStats" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStats),
            "k_EGCMsgMemCachedStatsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStatsResponse),
            "k_EGCMsgSQLStats" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSQLStats),
            "k_EGCMsgSQLStatsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSQLStatsResponse),
            "k_EGCMsgMasterSetDirectory" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectory),
            "k_EGCMsgMasterSetDirectoryResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse),
            "k_EGCMsgMasterSetWebAPIRouting" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting),
            "k_EGCMsgMasterSetWebAPIRoutingResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse),
            "k_EGCMsgMasterSetClientMsgRouting" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting),
            "k_EGCMsgMasterSetClientMsgRoutingResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse),
            "k_EGCMsgSetOptions" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptions),
            "k_EGCMsgSetOptionsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptionsResponse),
            "k_EGCMsgSystemBase2" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase2),
            "k_EGCMsgGetPurchaseTrustStatus" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus),
            "k_EGCMsgGetPurchaseTrustStatusResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse),
            "k_EGCMsgUpdateSession" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgUpdateSession),
            "k_EGCMsgGCAccountVacStatusChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange),
            "k_EGCMsgCheckFriendship" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendship),
            "k_EGCMsgCheckFriendshipResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendshipResponse),
            "k_EGCMsgGetPartnerAccountLink" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLink),
            "k_EGCMsgGetPartnerAccountLinkResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse),
            "k_EGCMsgVSReportedSuspiciousActivity" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgVSReportedSuspiciousActivity),
            "k_EGCMsgAccountTradeBanStatusChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountTradeBanStatusChange),
            "k_EGCMsgAccountLockStatusChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountLockStatusChange),
            "k_EGCMsgDPPartnerMicroTxns" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns),
            "k_EGCMsgDPPartnerMicroTxnsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse),
            "k_EGCMsgGetIPASN" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPASN),
            "k_EGCMsgGetIPASNResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPASNResponse),
            "k_EGCMsgGetAppFriendsList" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAppFriendsList),
            "k_EGCMsgGetAppFriendsListResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAppFriendsListResponse),
            "k_EGCMsgVacVerificationChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgVacVerificationChange),
            "k_EGCMsgAccountPhoneNumberChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange),
            "k_EGCMsgAccountTwoFactorChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountTwoFactorChange),
            "k_EGCMsgCheckClanMembership" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckClanMembership),
            "k_EGCMsgCheckClanMembershipResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckClanMembershipResponse),
            "k_EGCMsgInviteUserToLobby" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInviteUserToLobby),
            "k_EGCMsgGetGamePersonalDataCategoriesRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest),
            "k_EGCMsgGetGamePersonalDataCategoriesResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse),
            "k_EGCMsgGetGamePersonalDataEntriesRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest),
            "k_EGCMsgGetGamePersonalDataEntriesResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse),
            "k_EGCMsgTerminateGamePersonalDataEntriesRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest),
            "k_EGCMsgTerminateGamePersonalDataEntriesResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCSystemMsg] = &[
        EGCSystemMsg::k_EGCMsgInvalid,
        EGCSystemMsg::k_EGCMsgMulti,
        EGCSystemMsg::k_EGCMsgGenericReply,
        EGCSystemMsg::k_EGCMsgSystemBase,
        EGCSystemMsg::k_EGCMsgAchievementAwarded,
        EGCSystemMsg::k_EGCMsgConCommand,
        EGCSystemMsg::k_EGCMsgStartPlaying,
        EGCSystemMsg::k_EGCMsgStopPlaying,
        EGCSystemMsg::k_EGCMsgStartGameserver,
        EGCSystemMsg::k_EGCMsgStopGameserver,
        EGCSystemMsg::k_EGCMsgWGRequest,
        EGCSystemMsg::k_EGCMsgWGResponse,
        EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema,
        EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse,
        EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED,
        EGCSystemMsg::k_EGCMsgGetUserStatsResponse,
        EGCSystemMsg::k_EGCMsgAppInfoUpdated,
        EGCSystemMsg::k_EGCMsgValidateSession,
        EGCSystemMsg::k_EGCMsgValidateSessionResponse,
        EGCSystemMsg::k_EGCMsgLookupAccountFromInput,
        EGCSystemMsg::k_EGCMsgSendHTTPRequest,
        EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse,
        EGCSystemMsg::k_EGCMsgPreTestSetup,
        EGCSystemMsg::k_EGCMsgRecordSupportAction,
        EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED,
        EGCSystemMsg::k_EGCMsgReceiveInterAppMessage,
        EGCSystemMsg::k_EGCMsgFindAccounts,
        EGCSystemMsg::k_EGCMsgPostAlert,
        EGCSystemMsg::k_EGCMsgGetLicenses,
        EGCSystemMsg::k_EGCMsgGetUserStats,
        EGCSystemMsg::k_EGCMsgGetCommands,
        EGCSystemMsg::k_EGCMsgGetCommandsResponse,
        EGCSystemMsg::k_EGCMsgAddFreeLicense,
        EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse,
        EGCSystemMsg::k_EGCMsgGetIPLocation,
        EGCSystemMsg::k_EGCMsgGetIPLocationResponse,
        EGCSystemMsg::k_EGCMsgSystemStatsSchema,
        EGCSystemMsg::k_EGCMsgGetSystemStats,
        EGCSystemMsg::k_EGCMsgGetSystemStatsResponse,
        EGCSystemMsg::k_EGCMsgSendEmail,
        EGCSystemMsg::k_EGCMsgSendEmailResponse,
        EGCSystemMsg::k_EGCMsgGetEmailTemplate,
        EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse,
        EGCSystemMsg::k_EGCMsgGrantGuestPass,
        EGCSystemMsg::k_EGCMsgGrantGuestPassResponse,
        EGCSystemMsg::k_EGCMsgGetAccountDetails,
        EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse,
        EGCSystemMsg::k_EGCMsgGetPersonaNames,
        EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse,
        EGCSystemMsg::k_EGCMsgMultiplexMsg,
        EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces,
        EGCSystemMsg::k_EGCMsgWebAPIJobRequest,
        EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse,
        EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse,
        EGCSystemMsg::k_EGCMsgMemCachedGet,
        EGCSystemMsg::k_EGCMsgMemCachedGetResponse,
        EGCSystemMsg::k_EGCMsgMemCachedSet,
        EGCSystemMsg::k_EGCMsgMemCachedDelete,
        EGCSystemMsg::k_EGCMsgMemCachedStats,
        EGCSystemMsg::k_EGCMsgMemCachedStatsResponse,
        EGCSystemMsg::k_EGCMsgSQLStats,
        EGCSystemMsg::k_EGCMsgSQLStatsResponse,
        EGCSystemMsg::k_EGCMsgMasterSetDirectory,
        EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse,
        EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting,
        EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse,
        EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting,
        EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse,
        EGCSystemMsg::k_EGCMsgSetOptions,
        EGCSystemMsg::k_EGCMsgSetOptionsResponse,
        EGCSystemMsg::k_EGCMsgSystemBase2,
        EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus,
        EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse,
        EGCSystemMsg::k_EGCMsgUpdateSession,
        EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange,
        EGCSystemMsg::k_EGCMsgCheckFriendship,
        EGCSystemMsg::k_EGCMsgCheckFriendshipResponse,
        EGCSystemMsg::k_EGCMsgGetPartnerAccountLink,
        EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse,
        EGCSystemMsg::k_EGCMsgVSReportedSuspiciousActivity,
        EGCSystemMsg::k_EGCMsgAccountTradeBanStatusChange,
        EGCSystemMsg::k_EGCMsgAccountLockStatusChange,
        EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns,
        EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse,
        EGCSystemMsg::k_EGCMsgGetIPASN,
        EGCSystemMsg::k_EGCMsgGetIPASNResponse,
        EGCSystemMsg::k_EGCMsgGetAppFriendsList,
        EGCSystemMsg::k_EGCMsgGetAppFriendsListResponse,
        EGCSystemMsg::k_EGCMsgVacVerificationChange,
        EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange,
        EGCSystemMsg::k_EGCMsgAccountTwoFactorChange,
        EGCSystemMsg::k_EGCMsgCheckClanMembership,
        EGCSystemMsg::k_EGCMsgCheckClanMembershipResponse,
        EGCSystemMsg::k_EGCMsgInviteUserToLobby,
        EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest,
        EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse,
        EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest,
        EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse,
        EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest,
        EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse,
    ];
}

impl ::protobuf::EnumFull for EGCSystemMsg {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGCSystemMsg").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EGCSystemMsg::k_EGCMsgInvalid => 0,
            EGCSystemMsg::k_EGCMsgMulti => 1,
            EGCSystemMsg::k_EGCMsgGenericReply => 2,
            EGCSystemMsg::k_EGCMsgSystemBase => 3,
            EGCSystemMsg::k_EGCMsgAchievementAwarded => 4,
            EGCSystemMsg::k_EGCMsgConCommand => 5,
            EGCSystemMsg::k_EGCMsgStartPlaying => 6,
            EGCSystemMsg::k_EGCMsgStopPlaying => 7,
            EGCSystemMsg::k_EGCMsgStartGameserver => 8,
            EGCSystemMsg::k_EGCMsgStopGameserver => 9,
            EGCSystemMsg::k_EGCMsgWGRequest => 10,
            EGCSystemMsg::k_EGCMsgWGResponse => 11,
            EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema => 12,
            EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse => 13,
            EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED => 14,
            EGCSystemMsg::k_EGCMsgGetUserStatsResponse => 15,
            EGCSystemMsg::k_EGCMsgAppInfoUpdated => 16,
            EGCSystemMsg::k_EGCMsgValidateSession => 17,
            EGCSystemMsg::k_EGCMsgValidateSessionResponse => 18,
            EGCSystemMsg::k_EGCMsgLookupAccountFromInput => 19,
            EGCSystemMsg::k_EGCMsgSendHTTPRequest => 20,
            EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse => 21,
            EGCSystemMsg::k_EGCMsgPreTestSetup => 22,
            EGCSystemMsg::k_EGCMsgRecordSupportAction => 23,
            EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED => 24,
            EGCSystemMsg::k_EGCMsgReceiveInterAppMessage => 25,
            EGCSystemMsg::k_EGCMsgFindAccounts => 26,
            EGCSystemMsg::k_EGCMsgPostAlert => 27,
            EGCSystemMsg::k_EGCMsgGetLicenses => 28,
            EGCSystemMsg::k_EGCMsgGetUserStats => 29,
            EGCSystemMsg::k_EGCMsgGetCommands => 30,
            EGCSystemMsg::k_EGCMsgGetCommandsResponse => 31,
            EGCSystemMsg::k_EGCMsgAddFreeLicense => 32,
            EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse => 33,
            EGCSystemMsg::k_EGCMsgGetIPLocation => 34,
            EGCSystemMsg::k_EGCMsgGetIPLocationResponse => 35,
            EGCSystemMsg::k_EGCMsgSystemStatsSchema => 36,
            EGCSystemMsg::k_EGCMsgGetSystemStats => 37,
            EGCSystemMsg::k_EGCMsgGetSystemStatsResponse => 38,
            EGCSystemMsg::k_EGCMsgSendEmail => 39,
            EGCSystemMsg::k_EGCMsgSendEmailResponse => 40,
            EGCSystemMsg::k_EGCMsgGetEmailTemplate => 41,
            EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse => 42,
            EGCSystemMsg::k_EGCMsgGrantGuestPass => 43,
            EGCSystemMsg::k_EGCMsgGrantGuestPassResponse => 44,
            EGCSystemMsg::k_EGCMsgGetAccountDetails => 45,
            EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse => 46,
            EGCSystemMsg::k_EGCMsgGetPersonaNames => 47,
            EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse => 48,
            EGCSystemMsg::k_EGCMsgMultiplexMsg => 49,
            EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces => 50,
            EGCSystemMsg::k_EGCMsgWebAPIJobRequest => 51,
            EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse => 52,
            EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse => 53,
            EGCSystemMsg::k_EGCMsgMemCachedGet => 54,
            EGCSystemMsg::k_EGCMsgMemCachedGetResponse => 55,
            EGCSystemMsg::k_EGCMsgMemCachedSet => 56,
            EGCSystemMsg::k_EGCMsgMemCachedDelete => 57,
            EGCSystemMsg::k_EGCMsgMemCachedStats => 58,
            EGCSystemMsg::k_EGCMsgMemCachedStatsResponse => 59,
            EGCSystemMsg::k_EGCMsgSQLStats => 60,
            EGCSystemMsg::k_EGCMsgSQLStatsResponse => 61,
            EGCSystemMsg::k_EGCMsgMasterSetDirectory => 62,
            EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse => 63,
            EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting => 64,
            EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse => 65,
            EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting => 66,
            EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse => 67,
            EGCSystemMsg::k_EGCMsgSetOptions => 68,
            EGCSystemMsg::k_EGCMsgSetOptionsResponse => 69,
            EGCSystemMsg::k_EGCMsgSystemBase2 => 70,
            EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus => 71,
            EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse => 72,
            EGCSystemMsg::k_EGCMsgUpdateSession => 73,
            EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange => 74,
            EGCSystemMsg::k_EGCMsgCheckFriendship => 75,
            EGCSystemMsg::k_EGCMsgCheckFriendshipResponse => 76,
            EGCSystemMsg::k_EGCMsgGetPartnerAccountLink => 77,
            EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse => 78,
            EGCSystemMsg::k_EGCMsgVSReportedSuspiciousActivity => 79,
            EGCSystemMsg::k_EGCMsgAccountTradeBanStatusChange => 80,
            EGCSystemMsg::k_EGCMsgAccountLockStatusChange => 81,
            EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns => 82,
            EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse => 83,
            EGCSystemMsg::k_EGCMsgGetIPASN => 84,
            EGCSystemMsg::k_EGCMsgGetIPASNResponse => 85,
            EGCSystemMsg::k_EGCMsgGetAppFriendsList => 86,
            EGCSystemMsg::k_EGCMsgGetAppFriendsListResponse => 87,
            EGCSystemMsg::k_EGCMsgVacVerificationChange => 88,
            EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange => 89,
            EGCSystemMsg::k_EGCMsgAccountTwoFactorChange => 90,
            EGCSystemMsg::k_EGCMsgCheckClanMembership => 91,
            EGCSystemMsg::k_EGCMsgCheckClanMembershipResponse => 92,
            EGCSystemMsg::k_EGCMsgInviteUserToLobby => 93,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest => 94,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse => 95,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest => 96,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse => 97,
            EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest => 98,
            EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse => 99,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EGCSystemMsg {
    fn default() -> Self {
        EGCSystemMsg::k_EGCMsgInvalid
    }
}

impl EGCSystemMsg {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGCSystemMsg>("EGCSystemMsg")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ESOMsg)
pub enum ESOMsg {
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_Create)
    k_ESOMsg_Create = 21,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_Update)
    k_ESOMsg_Update = 22,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_Destroy)
    k_ESOMsg_Destroy = 23,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheSubscribed)
    k_ESOMsg_CacheSubscribed = 24,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheUnsubscribed)
    k_ESOMsg_CacheUnsubscribed = 25,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_UpdateMultiple)
    k_ESOMsg_UpdateMultiple = 26,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheSubscriptionCheck)
    k_ESOMsg_CacheSubscriptionCheck = 27,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheSubscriptionRefresh)
    k_ESOMsg_CacheSubscriptionRefresh = 28,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheSubscribedUpToDate)
    k_ESOMsg_CacheSubscribedUpToDate = 29,
}

impl ::protobuf::Enum for ESOMsg {
    const NAME: &'static str = "ESOMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ESOMsg> {
        match value {
            21 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Create),
            22 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Update),
            23 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Destroy),
            24 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscribed),
            25 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheUnsubscribed),
            26 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_UpdateMultiple),
            27 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionCheck),
            28 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionRefresh),
            29 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscribedUpToDate),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ESOMsg> {
        match str {
            "k_ESOMsg_Create" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Create),
            "k_ESOMsg_Update" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Update),
            "k_ESOMsg_Destroy" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Destroy),
            "k_ESOMsg_CacheSubscribed" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscribed),
            "k_ESOMsg_CacheUnsubscribed" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheUnsubscribed),
            "k_ESOMsg_UpdateMultiple" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_UpdateMultiple),
            "k_ESOMsg_CacheSubscriptionCheck" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionCheck),
            "k_ESOMsg_CacheSubscriptionRefresh" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionRefresh),
            "k_ESOMsg_CacheSubscribedUpToDate" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscribedUpToDate),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ESOMsg] = &[
        ESOMsg::k_ESOMsg_Create,
        ESOMsg::k_ESOMsg_Update,
        ESOMsg::k_ESOMsg_Destroy,
        ESOMsg::k_ESOMsg_CacheSubscribed,
        ESOMsg::k_ESOMsg_CacheUnsubscribed,
        ESOMsg::k_ESOMsg_UpdateMultiple,
        ESOMsg::k_ESOMsg_CacheSubscriptionCheck,
        ESOMsg::k_ESOMsg_CacheSubscriptionRefresh,
        ESOMsg::k_ESOMsg_CacheSubscribedUpToDate,
    ];
}

impl ::protobuf::EnumFull for ESOMsg {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ESOMsg").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            ESOMsg::k_ESOMsg_Create => 0,
            ESOMsg::k_ESOMsg_Update => 1,
            ESOMsg::k_ESOMsg_Destroy => 2,
            ESOMsg::k_ESOMsg_CacheSubscribed => 3,
            ESOMsg::k_ESOMsg_CacheUnsubscribed => 4,
            ESOMsg::k_ESOMsg_UpdateMultiple => 5,
            ESOMsg::k_ESOMsg_CacheSubscriptionCheck => 6,
            ESOMsg::k_ESOMsg_CacheSubscriptionRefresh => 7,
            ESOMsg::k_ESOMsg_CacheSubscribedUpToDate => 8,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ESOMsg {
    fn default() -> Self {
        ESOMsg::k_ESOMsg_Create
    }
}

impl ESOMsg {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ESOMsg>("ESOMsg")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCBaseClientMsg)
pub enum EGCBaseClientMsg {
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCPingRequest)
    k_EMsgGCPingRequest = 3001,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCPingResponse)
    k_EMsgGCPingResponse = 3002,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientWelcome)
    k_EMsgGCClientWelcome = 4004,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCServerWelcome)
    k_EMsgGCServerWelcome = 4005,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientHello)
    k_EMsgGCClientHello = 4006,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCServerHello)
    k_EMsgGCServerHello = 4007,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientGoodbye)
    k_EMsgGCClientGoodbye = 4008,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCServerGoodbye)
    k_EMsgGCServerGoodbye = 4009,
}

impl ::protobuf::Enum for EGCBaseClientMsg {
    const NAME: &'static str = "EGCBaseClientMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCBaseClientMsg> {
        match value {
            3001 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCPingRequest),
            3002 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCPingResponse),
            4004 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientWelcome),
            4005 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerWelcome),
            4006 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHello),
            4007 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerHello),
            4008 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientGoodbye),
            4009 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerGoodbye),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCBaseClientMsg> {
        match str {
            "k_EMsgGCPingRequest" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCPingRequest),
            "k_EMsgGCPingResponse" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCPingResponse),
            "k_EMsgGCClientWelcome" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientWelcome),
            "k_EMsgGCServerWelcome" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerWelcome),
            "k_EMsgGCClientHello" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHello),
            "k_EMsgGCServerHello" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerHello),
            "k_EMsgGCClientGoodbye" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientGoodbye),
            "k_EMsgGCServerGoodbye" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerGoodbye),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCBaseClientMsg] = &[
        EGCBaseClientMsg::k_EMsgGCPingRequest,
        EGCBaseClientMsg::k_EMsgGCPingResponse,
        EGCBaseClientMsg::k_EMsgGCClientWelcome,
        EGCBaseClientMsg::k_EMsgGCServerWelcome,
        EGCBaseClientMsg::k_EMsgGCClientHello,
        EGCBaseClientMsg::k_EMsgGCServerHello,
        EGCBaseClientMsg::k_EMsgGCClientGoodbye,
        EGCBaseClientMsg::k_EMsgGCServerGoodbye,
    ];
}

impl ::protobuf::EnumFull for EGCBaseClientMsg {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGCBaseClientMsg").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EGCBaseClientMsg::k_EMsgGCPingRequest => 0,
            EGCBaseClientMsg::k_EMsgGCPingResponse => 1,
            EGCBaseClientMsg::k_EMsgGCClientWelcome => 2,
            EGCBaseClientMsg::k_EMsgGCServerWelcome => 3,
            EGCBaseClientMsg::k_EMsgGCClientHello => 4,
            EGCBaseClientMsg::k_EMsgGCServerHello => 5,
            EGCBaseClientMsg::k_EMsgGCClientGoodbye => 6,
            EGCBaseClientMsg::k_EMsgGCServerGoodbye => 7,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCBaseClientMsg {
    fn default() -> Self {
        EGCBaseClientMsg::k_EMsgGCPingRequest
    }
}

impl EGCBaseClientMsg {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGCBaseClientMsg>("EGCBaseClientMsg")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCToGCMsg)
pub enum EGCToGCMsg {
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgMasterAck)
    k_EGCToGCMsgMasterAck = 150,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgMasterAckResponse)
    k_EGCToGCMsgMasterAckResponse = 151,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgRouted)
    k_EGCToGCMsgRouted = 152,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgRoutedReply)
    k_EGCToGCMsgRoutedReply = 153,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EMsgGCUpdateSubGCSessionInfo)
    k_EMsgGCUpdateSubGCSessionInfo = 154,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EMsgGCRequestSubGCSessionInfo)
    k_EMsgGCRequestSubGCSessionInfo = 155,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EMsgGCRequestSubGCSessionInfoResponse)
    k_EMsgGCRequestSubGCSessionInfoResponse = 156,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgMasterStartupComplete)
    k_EGCToGCMsgMasterStartupComplete = 157,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EMsgGCToGCSOCacheSubscribe)
    k_EMsgGCToGCSOCacheSubscribe = 158,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EMsgGCToGCSOCacheUnsubscribe)
    k_EMsgGCToGCSOCacheUnsubscribe = 159,
}

impl ::protobuf::Enum for EGCToGCMsg {
    const NAME: &'static str = "EGCToGCMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCToGCMsg> {
        match value {
            150 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAck),
            151 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAckResponse),
            152 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRouted),
            153 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRoutedReply),
            154 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCUpdateSubGCSessionInfo),
            155 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfo),
            156 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfoResponse),
            157 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete),
            158 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCToGCSOCacheSubscribe),
            159 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCToGCSOCacheUnsubscribe),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCToGCMsg> {
        match str {
            "k_EGCToGCMsgMasterAck" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAck),
            "k_EGCToGCMsgMasterAckResponse" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAckResponse),
            "k_EGCToGCMsgRouted" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRouted),
            "k_EGCToGCMsgRoutedReply" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRoutedReply),
            "k_EMsgGCUpdateSubGCSessionInfo" => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCUpdateSubGCSessionInfo),
            "k_EMsgGCRequestSubGCSessionInfo" => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfo),
            "k_EMsgGCRequestSubGCSessionInfoResponse" => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfoResponse),
            "k_EGCToGCMsgMasterStartupComplete" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete),
            "k_EMsgGCToGCSOCacheSubscribe" => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCToGCSOCacheSubscribe),
            "k_EMsgGCToGCSOCacheUnsubscribe" => ::std::option::Option::Some(EGCToGCMsg::k_EMsgGCToGCSOCacheUnsubscribe),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCToGCMsg] = &[
        EGCToGCMsg::k_EGCToGCMsgMasterAck,
        EGCToGCMsg::k_EGCToGCMsgMasterAckResponse,
        EGCToGCMsg::k_EGCToGCMsgRouted,
        EGCToGCMsg::k_EGCToGCMsgRoutedReply,
        EGCToGCMsg::k_EMsgGCUpdateSubGCSessionInfo,
        EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfo,
        EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfoResponse,
        EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete,
        EGCToGCMsg::k_EMsgGCToGCSOCacheSubscribe,
        EGCToGCMsg::k_EMsgGCToGCSOCacheUnsubscribe,
    ];
}

impl ::protobuf::EnumFull for EGCToGCMsg {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGCToGCMsg").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EGCToGCMsg::k_EGCToGCMsgMasterAck => 0,
            EGCToGCMsg::k_EGCToGCMsgMasterAckResponse => 1,
            EGCToGCMsg::k_EGCToGCMsgRouted => 2,
            EGCToGCMsg::k_EGCToGCMsgRoutedReply => 3,
            EGCToGCMsg::k_EMsgGCUpdateSubGCSessionInfo => 4,
            EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfo => 5,
            EGCToGCMsg::k_EMsgGCRequestSubGCSessionInfoResponse => 6,
            EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete => 7,
            EGCToGCMsg::k_EMsgGCToGCSOCacheSubscribe => 8,
            EGCToGCMsg::k_EMsgGCToGCSOCacheUnsubscribe => 9,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCToGCMsg {
    fn default() -> Self {
        EGCToGCMsg::k_EGCToGCMsgMasterAck
    }
}

impl EGCToGCMsg {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGCToGCMsg>("EGCToGCMsg")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16tf2/gcsystemmsgs.proto\"\x91\x01\n'CCommunity_GamePersonalDataCate\
    goryInfo\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\x12-\n\x12localiz\
    ation_token\x18\x02\x20\x01(\tR\x11localizationToken\x12#\n\rtemplate_fi\
    le\x18\x03\x20\x01(\tR\x0ctemplateFile\"H\n0CCommunity_GetGamePersonalDa\
    taCategories_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\"\
    \xad\x01\n1CCommunity_GetGamePersonalDataCategories_Response\x12H\n\ncat\
    egories\x18\x01\x20\x03(\x0b2(.CCommunity_GamePersonalDataCategoryInfoR\
    \ncategories\x12.\n\x13app_assets_basename\x18\x02\x20\x01(\tR\x11appAss\
    etsBasename\"\x9a\x01\n-CCommunity_GetGamePersonalDataEntries_Request\
    \x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\n\x07steamid\
    \x18\x02\x20\x01(\x04R\x07steamid\x12\x12\n\x04type\x18\x03\x20\x01(\tR\
    \x04type\x12%\n\x0econtinue_token\x18\x04\x20\x01(\tR\rcontinueToken\"\
    \x8f\x01\n.CCommunity_GetGamePersonalDataEntries_Response\x12\x1c\n\tgce\
    result\x18\x01\x20\x01(\rR\tgceresult\x12\x18\n\x07entries\x18\x02\x20\
    \x03(\tR\x07entries\x12%\n\x0econtinue_token\x18\x03\x20\x01(\tR\rcontin\
    ueToken\"e\n3CCommunity_TerminateGamePersonalDataEntries_Request\x12\x14\
    \n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\n\x07steamid\x18\x02\
    \x20\x01(\x04R\x07steamid\"T\n4CCommunity_TerminateGamePersonalDataEntri\
    es_Response\x12\x1c\n\tgceresult\x18\x01\x20\x01(\rR\tgceresult*\xc4\x1a\
    \n\x0cEGCSystemMsg\x12\x13\n\x0fk_EGCMsgInvalid\x10\0\x12\x11\n\rk_EGCMs\
    gMulti\x10\x01\x12\x18\n\x14k_EGCMsgGenericReply\x10\n\x12\x16\n\x12k_EG\
    CMsgSystemBase\x102\x12\x1e\n\x1ak_EGCMsgAchievementAwarded\x103\x12\x16\
    \n\x12k_EGCMsgConCommand\x104\x12\x18\n\x14k_EGCMsgStartPlaying\x105\x12\
    \x17\n\x13k_EGCMsgStopPlaying\x106\x12\x1b\n\x17k_EGCMsgStartGameserver\
    \x107\x12\x1a\n\x16k_EGCMsgStopGameserver\x108\x12\x15\n\x11k_EGCMsgWGRe\
    quest\x109\x12\x16\n\x12k_EGCMsgWGResponse\x10:\x12\"\n\x1ek_EGCMsgGetUs\
    erGameStatsSchema\x10;\x12*\n&k_EGCMsgGetUserGameStatsSchemaResponse\x10\
    <\x12\"\n\x1ek_EGCMsgGetUserStatsDEPRECATED\x10=\x12\x20\n\x1ck_EGCMsgGe\
    tUserStatsResponse\x10>\x12\x1a\n\x16k_EGCMsgAppInfoUpdated\x10?\x12\x1b\
    \n\x17k_EGCMsgValidateSession\x10@\x12#\n\x1fk_EGCMsgValidateSessionResp\
    onse\x10A\x12\"\n\x1ek_EGCMsgLookupAccountFromInput\x10B\x12\x1b\n\x17k_\
    EGCMsgSendHTTPRequest\x10C\x12#\n\x1fk_EGCMsgSendHTTPRequestResponse\x10\
    D\x12\x18\n\x14k_EGCMsgPreTestSetup\x10E\x12\x1f\n\x1bk_EGCMsgRecordSupp\
    ortAction\x10F\x12(\n$k_EGCMsgGetAccountDetails_DEPRECATED\x10G\x12\"\n\
    \x1ek_EGCMsgReceiveInterAppMessage\x10I\x12\x18\n\x14k_EGCMsgFindAccount\
    s\x10J\x12\x15\n\x11k_EGCMsgPostAlert\x10K\x12\x17\n\x13k_EGCMsgGetLicen\
    ses\x10L\x12\x18\n\x14k_EGCMsgGetUserStats\x10M\x12\x17\n\x13k_EGCMsgGet\
    Commands\x10N\x12\x1f\n\x1bk_EGCMsgGetCommandsResponse\x10O\x12\x1a\n\
    \x16k_EGCMsgAddFreeLicense\x10P\x12\"\n\x1ek_EGCMsgAddFreeLicenseRespons\
    e\x10Q\x12\x19\n\x15k_EGCMsgGetIPLocation\x10R\x12!\n\x1dk_EGCMsgGetIPLo\
    cationResponse\x10S\x12\x1d\n\x19k_EGCMsgSystemStatsSchema\x10T\x12\x1a\
    \n\x16k_EGCMsgGetSystemStats\x10U\x12\"\n\x1ek_EGCMsgGetSystemStatsRespo\
    nse\x10V\x12\x15\n\x11k_EGCMsgSendEmail\x10W\x12\x1d\n\x19k_EGCMsgSendEm\
    ailResponse\x10X\x12\x1c\n\x18k_EGCMsgGetEmailTemplate\x10Y\x12$\n\x20k_\
    EGCMsgGetEmailTemplateResponse\x10Z\x12\x1a\n\x16k_EGCMsgGrantGuestPass\
    \x10[\x12\"\n\x1ek_EGCMsgGrantGuestPassResponse\x10\\\x12\x1d\n\x19k_EGC\
    MsgGetAccountDetails\x10]\x12%\n!k_EGCMsgGetAccountDetailsResponse\x10^\
    \x12\x1b\n\x17k_EGCMsgGetPersonaNames\x10_\x12#\n\x1fk_EGCMsgGetPersonaN\
    amesResponse\x10`\x12\x18\n\x14k_EGCMsgMultiplexMsg\x10a\x12$\n\x20k_EGC\
    MsgWebAPIRegisterInterfaces\x10e\x12\x1c\n\x18k_EGCMsgWebAPIJobRequest\
    \x10f\x12(\n$k_EGCMsgWebAPIJobRequestHttpResponse\x10h\x12+\n'k_EGCMsgWe\
    bAPIJobRequestForwardResponse\x10i\x12\x19\n\x14k_EGCMsgMemCachedGet\x10\
    \xc8\x01\x12!\n\x1ck_EGCMsgMemCachedGetResponse\x10\xc9\x01\x12\x19\n\
    \x14k_EGCMsgMemCachedSet\x10\xca\x01\x12\x1c\n\x17k_EGCMsgMemCachedDelet\
    e\x10\xcb\x01\x12\x1b\n\x16k_EGCMsgMemCachedStats\x10\xcc\x01\x12#\n\x1e\
    k_EGCMsgMemCachedStatsResponse\x10\xcd\x01\x12\x15\n\x10k_EGCMsgSQLStats\
    \x10\xd2\x01\x12\x1d\n\x18k_EGCMsgSQLStatsResponse\x10\xd3\x01\x12\x1f\n\
    \x1ak_EGCMsgMasterSetDirectory\x10\xdc\x01\x12'\n\"k_EGCMsgMasterSetDire\
    ctoryResponse\x10\xdd\x01\x12#\n\x1ek_EGCMsgMasterSetWebAPIRouting\x10\
    \xde\x01\x12+\n&k_EGCMsgMasterSetWebAPIRoutingResponse\x10\xdf\x01\x12&\
    \n!k_EGCMsgMasterSetClientMsgRouting\x10\xe0\x01\x12.\n)k_EGCMsgMasterSe\
    tClientMsgRoutingResponse\x10\xe1\x01\x12\x17\n\x12k_EGCMsgSetOptions\
    \x10\xe2\x01\x12\x1f\n\x1ak_EGCMsgSetOptionsResponse\x10\xe3\x01\x12\x18\
    \n\x13k_EGCMsgSystemBase2\x10\xf4\x03\x12#\n\x1ek_EGCMsgGetPurchaseTrust\
    Status\x10\xf5\x03\x12+\n&k_EGCMsgGetPurchaseTrustStatusResponse\x10\xf6\
    \x03\x12\x1a\n\x15k_EGCMsgUpdateSession\x10\xf7\x03\x12%\n\x20k_EGCMsgGC\
    AccountVacStatusChange\x10\xf8\x03\x12\x1c\n\x17k_EGCMsgCheckFriendship\
    \x10\xf9\x03\x12$\n\x1fk_EGCMsgCheckFriendshipResponse\x10\xfa\x03\x12\"\
    \n\x1dk_EGCMsgGetPartnerAccountLink\x10\xfb\x03\x12*\n%k_EGCMsgGetPartne\
    rAccountLinkResponse\x10\xfc\x03\x12)\n$k_EGCMsgVSReportedSuspiciousActi\
    vity\x10\xfd\x03\x12(\n#k_EGCMsgAccountTradeBanStatusChange\x10\xfe\x03\
    \x12$\n\x1fk_EGCMsgAccountLockStatusChange\x10\xff\x03\x12\x1f\n\x1ak_EG\
    CMsgDPPartnerMicroTxns\x10\x80\x04\x12'\n\"k_EGCMsgDPPartnerMicroTxnsRes\
    ponse\x10\x81\x04\x12\x15\n\x10k_EGCMsgGetIPASN\x10\x82\x04\x12\x1d\n\
    \x18k_EGCMsgGetIPASNResponse\x10\x83\x04\x12\x1e\n\x19k_EGCMsgGetAppFrie\
    ndsList\x10\x84\x04\x12&\n!k_EGCMsgGetAppFriendsListResponse\x10\x85\x04\
    \x12\"\n\x1dk_EGCMsgVacVerificationChange\x10\x86\x04\x12%\n\x20k_EGCMsg\
    AccountPhoneNumberChange\x10\x87\x04\x12#\n\x1ek_EGCMsgAccountTwoFactorC\
    hange\x10\x88\x04\x12\x20\n\x1bk_EGCMsgCheckClanMembership\x10\x89\x04\
    \x12(\n#k_EGCMsgCheckClanMembershipResponse\x10\x8a\x04\x12\x1e\n\x19k_E\
    GCMsgInviteUserToLobby\x10\x8b\x04\x121\n,k_EGCMsgGetGamePersonalDataCat\
    egoriesRequest\x10\x8c\x04\x122\n-k_EGCMsgGetGamePersonalDataCategoriesR\
    esponse\x10\x8d\x04\x12.\n)k_EGCMsgGetGamePersonalDataEntriesRequest\x10\
    \x8e\x04\x12/\n*k_EGCMsgGetGamePersonalDataEntriesResponse\x10\x8f\x04\
    \x124\n/k_EGCMsgTerminateGamePersonalDataEntriesRequest\x10\x90\x04\x125\
    \n0k_EGCMsgTerminateGamePersonalDataEntriesResponse\x10\x91\x04*\x95\x02\
    \n\x06ESOMsg\x12\x13\n\x0fk_ESOMsg_Create\x10\x15\x12\x13\n\x0fk_ESOMsg_\
    Update\x10\x16\x12\x14\n\x10k_ESOMsg_Destroy\x10\x17\x12\x1c\n\x18k_ESOM\
    sg_CacheSubscribed\x10\x18\x12\x1e\n\x1ak_ESOMsg_CacheUnsubscribed\x10\
    \x19\x12\x1b\n\x17k_ESOMsg_UpdateMultiple\x10\x1a\x12#\n\x1fk_ESOMsg_Cac\
    heSubscriptionCheck\x10\x1b\x12%\n!k_ESOMsg_CacheSubscriptionRefresh\x10\
    \x1c\x12$\n\x20k_ESOMsg_CacheSubscribedUpToDate\x10\x1d*\xeb\x01\n\x10EG\
    CBaseClientMsg\x12\x18\n\x13k_EMsgGCPingRequest\x10\xb9\x17\x12\x19\n\
    \x14k_EMsgGCPingResponse\x10\xba\x17\x12\x1a\n\x15k_EMsgGCClientWelcome\
    \x10\xa4\x1f\x12\x1a\n\x15k_EMsgGCServerWelcome\x10\xa5\x1f\x12\x18\n\
    \x13k_EMsgGCClientHello\x10\xa6\x1f\x12\x18\n\x13k_EMsgGCServerHello\x10\
    \xa7\x1f\x12\x1a\n\x15k_EMsgGCClientGoodbye\x10\xa8\x1f\x12\x1a\n\x15k_E\
    MsgGCServerGoodbye\x10\xa9\x1f*\xec\x02\n\nEGCToGCMsg\x12\x1a\n\x15k_EGC\
    ToGCMsgMasterAck\x10\x96\x01\x12\"\n\x1dk_EGCToGCMsgMasterAckResponse\
    \x10\x97\x01\x12\x17\n\x12k_EGCToGCMsgRouted\x10\x98\x01\x12\x1c\n\x17k_\
    EGCToGCMsgRoutedReply\x10\x99\x01\x12#\n\x1ek_EMsgGCUpdateSubGCSessionIn\
    fo\x10\x9a\x01\x12$\n\x1fk_EMsgGCRequestSubGCSessionInfo\x10\x9b\x01\x12\
    ,\n'k_EMsgGCRequestSubGCSessionInfoResponse\x10\x9c\x01\x12&\n!k_EGCToGC\
    MsgMasterStartupComplete\x10\x9d\x01\x12!\n\x1ck_EMsgGCToGCSOCacheSubscr\
    ibe\x10\x9e\x01\x12#\n\x1ek_EMsgGCToGCSOCacheUnsubscribe\x10\x9f\x01B\
    \x05H\x01\x80\x01\0J\xe84\n\x07\x12\x05\0\0\xb1\x01\x01\n\x08\n\x01\x08\
    \x12\x03\0\0\x1c\n\t\n\x02\x08\t\x12\x03\0\0\x1c\n\x08\n\x01\x08\x12\x03\
    \x01\0#\n\t\n\x02\x08\x10\x12\x03\x01\0#\n\n\n\x02\x05\0\x12\x04\x03\0h\
    \x01\n\n\n\x03\x05\0\x01\x12\x03\x03\x05\x11\n\x0b\n\x04\x05\0\x02\0\x12\
    \x03\x04\x08\x1c\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x04\x08\x17\n\x0c\n\
    \x05\x05\0\x02\0\x02\x12\x03\x04\x1a\x1b\n\x0b\n\x04\x05\0\x02\x01\x12\
    \x03\x05\x08\x1a\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x05\x08\x15\n\x0c\
    \n\x05\x05\0\x02\x01\x02\x12\x03\x05\x18\x19\n\x0b\n\x04\x05\0\x02\x02\
    \x12\x03\x06\x08\"\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x06\x08\x1c\n\
    \x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x06\x1f!\n\x0b\n\x04\x05\0\x02\x03\
    \x12\x03\x07\x08\x20\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x07\x08\x1a\n\
    \x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x07\x1d\x1f\n\x0b\n\x04\x05\0\x02\
    \x04\x12\x03\x08\x08(\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x08\x08\"\n\
    \x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x08%'\n\x0b\n\x04\x05\0\x02\x05\x12\
    \x03\t\x08\x20\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\t\x08\x1a\n\x0c\n\
    \x05\x05\0\x02\x05\x02\x12\x03\t\x1d\x1f\n\x0b\n\x04\x05\0\x02\x06\x12\
    \x03\n\x08\"\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\n\x08\x1c\n\x0c\n\x05\
    \x05\0\x02\x06\x02\x12\x03\n\x1f!\n\x0b\n\x04\x05\0\x02\x07\x12\x03\x0b\
    \x08!\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03\x0b\x08\x1b\n\x0c\n\x05\x05\
    \0\x02\x07\x02\x12\x03\x0b\x1e\x20\n\x0b\n\x04\x05\0\x02\x08\x12\x03\x0c\
    \x08%\n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03\x0c\x08\x1f\n\x0c\n\x05\x05\
    \0\x02\x08\x02\x12\x03\x0c\"$\n\x0b\n\x04\x05\0\x02\t\x12\x03\r\x08$\n\
    \x0c\n\x05\x05\0\x02\t\x01\x12\x03\r\x08\x1e\n\x0c\n\x05\x05\0\x02\t\x02\
    \x12\x03\r!#\n\x0b\n\x04\x05\0\x02\n\x12\x03\x0e\x08\x1f\n\x0c\n\x05\x05\
    \0\x02\n\x01\x12\x03\x0e\x08\x19\n\x0c\n\x05\x05\0\x02\n\x02\x12\x03\x0e\
    \x1c\x1e\n\x0b\n\x04\x05\0\x02\x0b\x12\x03\x0f\x08\x20\n\x0c\n\x05\x05\0\
    \x02\x0b\x01\x12\x03\x0f\x08\x1a\n\x0c\n\x05\x05\0\x02\x0b\x02\x12\x03\
    \x0f\x1d\x1f\n\x0b\n\x04\x05\0\x02\x0c\x12\x03\x10\x08,\n\x0c\n\x05\x05\
    \0\x02\x0c\x01\x12\x03\x10\x08&\n\x0c\n\x05\x05\0\x02\x0c\x02\x12\x03\
    \x10)+\n\x0b\n\x04\x05\0\x02\r\x12\x03\x11\x084\n\x0c\n\x05\x05\0\x02\r\
    \x01\x12\x03\x11\x08.\n\x0c\n\x05\x05\0\x02\r\x02\x12\x03\x1113\n\x0b\n\
    \x04\x05\0\x02\x0e\x12\x03\x12\x08,\n\x0c\n\x05\x05\0\x02\x0e\x01\x12\
    \x03\x12\x08&\n\x0c\n\x05\x05\0\x02\x0e\x02\x12\x03\x12)+\n\x0b\n\x04\
    \x05\0\x02\x0f\x12\x03\x13\x08*\n\x0c\n\x05\x05\0\x02\x0f\x01\x12\x03\
    \x13\x08$\n\x0c\n\x05\x05\0\x02\x0f\x02\x12\x03\x13')\n\x0b\n\x04\x05\0\
    \x02\x10\x12\x03\x14\x08$\n\x0c\n\x05\x05\0\x02\x10\x01\x12\x03\x14\x08\
    \x1e\n\x0c\n\x05\x05\0\x02\x10\x02\x12\x03\x14!#\n\x0b\n\x04\x05\0\x02\
    \x11\x12\x03\x15\x08%\n\x0c\n\x05\x05\0\x02\x11\x01\x12\x03\x15\x08\x1f\
    \n\x0c\n\x05\x05\0\x02\x11\x02\x12\x03\x15\"$\n\x0b\n\x04\x05\0\x02\x12\
    \x12\x03\x16\x08-\n\x0c\n\x05\x05\0\x02\x12\x01\x12\x03\x16\x08'\n\x0c\n\
    \x05\x05\0\x02\x12\x02\x12\x03\x16*,\n\x0b\n\x04\x05\0\x02\x13\x12\x03\
    \x17\x08,\n\x0c\n\x05\x05\0\x02\x13\x01\x12\x03\x17\x08&\n\x0c\n\x05\x05\
    \0\x02\x13\x02\x12\x03\x17)+\n\x0b\n\x04\x05\0\x02\x14\x12\x03\x18\x08%\
    \n\x0c\n\x05\x05\0\x02\x14\x01\x12\x03\x18\x08\x1f\n\x0c\n\x05\x05\0\x02\
    \x14\x02\x12\x03\x18\"$\n\x0b\n\x04\x05\0\x02\x15\x12\x03\x19\x08-\n\x0c\
    \n\x05\x05\0\x02\x15\x01\x12\x03\x19\x08'\n\x0c\n\x05\x05\0\x02\x15\x02\
    \x12\x03\x19*,\n\x0b\n\x04\x05\0\x02\x16\x12\x03\x1a\x08\"\n\x0c\n\x05\
    \x05\0\x02\x16\x01\x12\x03\x1a\x08\x1c\n\x0c\n\x05\x05\0\x02\x16\x02\x12\
    \x03\x1a\x1f!\n\x0b\n\x04\x05\0\x02\x17\x12\x03\x1b\x08)\n\x0c\n\x05\x05\
    \0\x02\x17\x01\x12\x03\x1b\x08#\n\x0c\n\x05\x05\0\x02\x17\x02\x12\x03\
    \x1b&(\n\x0b\n\x04\x05\0\x02\x18\x12\x03\x1c\x082\n\x0c\n\x05\x05\0\x02\
    \x18\x01\x12\x03\x1c\x08,\n\x0c\n\x05\x05\0\x02\x18\x02\x12\x03\x1c/1\n\
    \x0b\n\x04\x05\0\x02\x19\x12\x03\x1d\x08,\n\x0c\n\x05\x05\0\x02\x19\x01\
    \x12\x03\x1d\x08&\n\x0c\n\x05\x05\0\x02\x19\x02\x12\x03\x1d)+\n\x0b\n\
    \x04\x05\0\x02\x1a\x12\x03\x1e\x08\"\n\x0c\n\x05\x05\0\x02\x1a\x01\x12\
    \x03\x1e\x08\x1c\n\x0c\n\x05\x05\0\x02\x1a\x02\x12\x03\x1e\x1f!\n\x0b\n\
    \x04\x05\0\x02\x1b\x12\x03\x1f\x08\x1f\n\x0c\n\x05\x05\0\x02\x1b\x01\x12\
    \x03\x1f\x08\x19\n\x0c\n\x05\x05\0\x02\x1b\x02\x12\x03\x1f\x1c\x1e\n\x0b\
    \n\x04\x05\0\x02\x1c\x12\x03\x20\x08!\n\x0c\n\x05\x05\0\x02\x1c\x01\x12\
    \x03\x20\x08\x1b\n\x0c\n\x05\x05\0\x02\x1c\x02\x12\x03\x20\x1e\x20\n\x0b\
    \n\x04\x05\0\x02\x1d\x12\x03!\x08\"\n\x0c\n\x05\x05\0\x02\x1d\x01\x12\
    \x03!\x08\x1c\n\x0c\n\x05\x05\0\x02\x1d\x02\x12\x03!\x1f!\n\x0b\n\x04\
    \x05\0\x02\x1e\x12\x03\"\x08!\n\x0c\n\x05\x05\0\x02\x1e\x01\x12\x03\"\
    \x08\x1b\n\x0c\n\x05\x05\0\x02\x1e\x02\x12\x03\"\x1e\x20\n\x0b\n\x04\x05\
    \0\x02\x1f\x12\x03#\x08)\n\x0c\n\x05\x05\0\x02\x1f\x01\x12\x03#\x08#\n\
    \x0c\n\x05\x05\0\x02\x1f\x02\x12\x03#&(\n\x0b\n\x04\x05\0\x02\x20\x12\
    \x03$\x08$\n\x0c\n\x05\x05\0\x02\x20\x01\x12\x03$\x08\x1e\n\x0c\n\x05\
    \x05\0\x02\x20\x02\x12\x03$!#\n\x0b\n\x04\x05\0\x02!\x12\x03%\x08,\n\x0c\
    \n\x05\x05\0\x02!\x01\x12\x03%\x08&\n\x0c\n\x05\x05\0\x02!\x02\x12\x03%)\
    +\n\x0b\n\x04\x05\0\x02\"\x12\x03&\x08#\n\x0c\n\x05\x05\0\x02\"\x01\x12\
    \x03&\x08\x1d\n\x0c\n\x05\x05\0\x02\"\x02\x12\x03&\x20\"\n\x0b\n\x04\x05\
    \0\x02#\x12\x03'\x08+\n\x0c\n\x05\x05\0\x02#\x01\x12\x03'\x08%\n\x0c\n\
    \x05\x05\0\x02#\x02\x12\x03'(*\n\x0b\n\x04\x05\0\x02$\x12\x03(\x08'\n\
    \x0c\n\x05\x05\0\x02$\x01\x12\x03(\x08!\n\x0c\n\x05\x05\0\x02$\x02\x12\
    \x03($&\n\x0b\n\x04\x05\0\x02%\x12\x03)\x08$\n\x0c\n\x05\x05\0\x02%\x01\
    \x12\x03)\x08\x1e\n\x0c\n\x05\x05\0\x02%\x02\x12\x03)!#\n\x0b\n\x04\x05\
    \0\x02&\x12\x03*\x08,\n\x0c\n\x05\x05\0\x02&\x01\x12\x03*\x08&\n\x0c\n\
    \x05\x05\0\x02&\x02\x12\x03*)+\n\x0b\n\x04\x05\0\x02'\x12\x03+\x08\x1f\n\
    \x0c\n\x05\x05\0\x02'\x01\x12\x03+\x08\x19\n\x0c\n\x05\x05\0\x02'\x02\
    \x12\x03+\x1c\x1e\n\x0b\n\x04\x05\0\x02(\x12\x03,\x08'\n\x0c\n\x05\x05\0\
    \x02(\x01\x12\x03,\x08!\n\x0c\n\x05\x05\0\x02(\x02\x12\x03,$&\n\x0b\n\
    \x04\x05\0\x02)\x12\x03-\x08&\n\x0c\n\x05\x05\0\x02)\x01\x12\x03-\x08\
    \x20\n\x0c\n\x05\x05\0\x02)\x02\x12\x03-#%\n\x0b\n\x04\x05\0\x02*\x12\
    \x03.\x08.\n\x0c\n\x05\x05\0\x02*\x01\x12\x03.\x08(\n\x0c\n\x05\x05\0\
    \x02*\x02\x12\x03.+-\n\x0b\n\x04\x05\0\x02+\x12\x03/\x08$\n\x0c\n\x05\
    \x05\0\x02+\x01\x12\x03/\x08\x1e\n\x0c\n\x05\x05\0\x02+\x02\x12\x03/!#\n\
    \x0b\n\x04\x05\0\x02,\x12\x030\x08,\n\x0c\n\x05\x05\0\x02,\x01\x12\x030\
    \x08&\n\x0c\n\x05\x05\0\x02,\x02\x12\x030)+\n\x0b\n\x04\x05\0\x02-\x12\
    \x031\x08'\n\x0c\n\x05\x05\0\x02-\x01\x12\x031\x08!\n\x0c\n\x05\x05\0\
    \x02-\x02\x12\x031$&\n\x0b\n\x04\x05\0\x02.\x12\x032\x08/\n\x0c\n\x05\
    \x05\0\x02.\x01\x12\x032\x08)\n\x0c\n\x05\x05\0\x02.\x02\x12\x032,.\n\
    \x0b\n\x04\x05\0\x02/\x12\x033\x08%\n\x0c\n\x05\x05\0\x02/\x01\x12\x033\
    \x08\x1f\n\x0c\n\x05\x05\0\x02/\x02\x12\x033\"$\n\x0b\n\x04\x05\0\x020\
    \x12\x034\x08-\n\x0c\n\x05\x05\0\x020\x01\x12\x034\x08'\n\x0c\n\x05\x05\
    \0\x020\x02\x12\x034*,\n\x0b\n\x04\x05\0\x021\x12\x035\x08\"\n\x0c\n\x05\
    \x05\0\x021\x01\x12\x035\x08\x1c\n\x0c\n\x05\x05\0\x021\x02\x12\x035\x1f\
    !\n\x0b\n\x04\x05\0\x022\x12\x036\x08/\n\x0c\n\x05\x05\0\x022\x01\x12\
    \x036\x08(\n\x0c\n\x05\x05\0\x022\x02\x12\x036+.\n\x0b\n\x04\x05\0\x023\
    \x12\x037\x08'\n\x0c\n\x05\x05\0\x023\x01\x12\x037\x08\x20\n\x0c\n\x05\
    \x05\0\x023\x02\x12\x037#&\n\x0b\n\x04\x05\0\x024\x12\x038\x083\n\x0c\n\
    \x05\x05\0\x024\x01\x12\x038\x08,\n\x0c\n\x05\x05\0\x024\x02\x12\x038/2\
    \n\x0b\n\x04\x05\0\x025\x12\x039\x086\n\x0c\n\x05\x05\0\x025\x01\x12\x03\
    9\x08/\n\x0c\n\x05\x05\0\x025\x02\x12\x03925\n\x0b\n\x04\x05\0\x026\x12\
    \x03:\x08#\n\x0c\n\x05\x05\0\x026\x01\x12\x03:\x08\x1c\n\x0c\n\x05\x05\0\
    \x026\x02\x12\x03:\x1f\"\n\x0b\n\x04\x05\0\x027\x12\x03;\x08+\n\x0c\n\
    \x05\x05\0\x027\x01\x12\x03;\x08$\n\x0c\n\x05\x05\0\x027\x02\x12\x03;'*\
    \n\x0b\n\x04\x05\0\x028\x12\x03<\x08#\n\x0c\n\x05\x05\0\x028\x01\x12\x03\
    <\x08\x1c\n\x0c\n\x05\x05\0\x028\x02\x12\x03<\x1f\"\n\x0b\n\x04\x05\0\
    \x029\x12\x03=\x08&\n\x0c\n\x05\x05\0\x029\x01\x12\x03=\x08\x1f\n\x0c\n\
    \x05\x05\0\x029\x02\x12\x03=\"%\n\x0b\n\x04\x05\0\x02:\x12\x03>\x08%\n\
    \x0c\n\x05\x05\0\x02:\x01\x12\x03>\x08\x1e\n\x0c\n\x05\x05\0\x02:\x02\
    \x12\x03>!$\n\x0b\n\x04\x05\0\x02;\x12\x03?\x08-\n\x0c\n\x05\x05\0\x02;\
    \x01\x12\x03?\x08&\n\x0c\n\x05\x05\0\x02;\x02\x12\x03?),\n\x0b\n\x04\x05\
    \0\x02<\x12\x03@\x08\x1f\n\x0c\n\x05\x05\0\x02<\x01\x12\x03@\x08\x18\n\
    \x0c\n\x05\x05\0\x02<\x02\x12\x03@\x1b\x1e\n\x0b\n\x04\x05\0\x02=\x12\
    \x03A\x08'\n\x0c\n\x05\x05\0\x02=\x01\x12\x03A\x08\x20\n\x0c\n\x05\x05\0\
    \x02=\x02\x12\x03A#&\n\x0b\n\x04\x05\0\x02>\x12\x03B\x08)\n\x0c\n\x05\
    \x05\0\x02>\x01\x12\x03B\x08\"\n\x0c\n\x05\x05\0\x02>\x02\x12\x03B%(\n\
    \x0b\n\x04\x05\0\x02?\x12\x03C\x081\n\x0c\n\x05\x05\0\x02?\x01\x12\x03C\
    \x08*\n\x0c\n\x05\x05\0\x02?\x02\x12\x03C-0\n\x0b\n\x04\x05\0\x02@\x12\
    \x03D\x08-\n\x0c\n\x05\x05\0\x02@\x01\x12\x03D\x08&\n\x0c\n\x05\x05\0\
    \x02@\x02\x12\x03D),\n\x0b\n\x04\x05\0\x02A\x12\x03E\x085\n\x0c\n\x05\
    \x05\0\x02A\x01\x12\x03E\x08.\n\x0c\n\x05\x05\0\x02A\x02\x12\x03E14\n\
    \x0b\n\x04\x05\0\x02B\x12\x03F\x080\n\x0c\n\x05\x05\0\x02B\x01\x12\x03F\
    \x08)\n\x0c\n\x05\x05\0\x02B\x02\x12\x03F,/\n\x0b\n\x04\x05\0\x02C\x12\
    \x03G\x088\n\x0c\n\x05\x05\0\x02C\x01\x12\x03G\x081\n\x0c\n\x05\x05\0\
    \x02C\x02\x12\x03G47\n\x0b\n\x04\x05\0\x02D\x12\x03H\x08!\n\x0c\n\x05\
    \x05\0\x02D\x01\x12\x03H\x08\x1a\n\x0c\n\x05\x05\0\x02D\x02\x12\x03H\x1d\
    \x20\n\x0b\n\x04\x05\0\x02E\x12\x03I\x08)\n\x0c\n\x05\x05\0\x02E\x01\x12\
    \x03I\x08\"\n\x0c\n\x05\x05\0\x02E\x02\x12\x03I%(\n\x0b\n\x04\x05\0\x02F\
    \x12\x03J\x08\"\n\x0c\n\x05\x05\0\x02F\x01\x12\x03J\x08\x1b\n\x0c\n\x05\
    \x05\0\x02F\x02\x12\x03J\x1e!\n\x0b\n\x04\x05\0\x02G\x12\x03K\x08-\n\x0c\
    \n\x05\x05\0\x02G\x01\x12\x03K\x08&\n\x0c\n\x05\x05\0\x02G\x02\x12\x03K)\
    ,\n\x0b\n\x04\x05\0\x02H\x12\x03L\x085\n\x0c\n\x05\x05\0\x02H\x01\x12\
    \x03L\x08.\n\x0c\n\x05\x05\0\x02H\x02\x12\x03L14\n\x0b\n\x04\x05\0\x02I\
    \x12\x03M\x08$\n\x0c\n\x05\x05\0\x02I\x01\x12\x03M\x08\x1d\n\x0c\n\x05\
    \x05\0\x02I\x02\x12\x03M\x20#\n\x0b\n\x04\x05\0\x02J\x12\x03N\x08/\n\x0c\
    \n\x05\x05\0\x02J\x01\x12\x03N\x08(\n\x0c\n\x05\x05\0\x02J\x02\x12\x03N+\
    .\n\x0b\n\x04\x05\0\x02K\x12\x03O\x08&\n\x0c\n\x05\x05\0\x02K\x01\x12\
    \x03O\x08\x1f\n\x0c\n\x05\x05\0\x02K\x02\x12\x03O\"%\n\x0b\n\x04\x05\0\
    \x02L\x12\x03P\x08.\n\x0c\n\x05\x05\0\x02L\x01\x12\x03P\x08'\n\x0c\n\x05\
    \x05\0\x02L\x02\x12\x03P*-\n\x0b\n\x04\x05\0\x02M\x12\x03Q\x08,\n\x0c\n\
    \x05\x05\0\x02M\x01\x12\x03Q\x08%\n\x0c\n\x05\x05\0\x02M\x02\x12\x03Q(+\
    \n\x0b\n\x04\x05\0\x02N\x12\x03R\x084\n\x0c\n\x05\x05\0\x02N\x01\x12\x03\
    R\x08-\n\x0c\n\x05\x05\0\x02N\x02\x12\x03R03\n\x0b\n\x04\x05\0\x02O\x12\
    \x03S\x083\n\x0c\n\x05\x05\0\x02O\x01\x12\x03S\x08,\n\x0c\n\x05\x05\0\
    \x02O\x02\x12\x03S/2\n\x0b\n\x04\x05\0\x02P\x12\x03T\x082\n\x0c\n\x05\
    \x05\0\x02P\x01\x12\x03T\x08+\n\x0c\n\x05\x05\0\x02P\x02\x12\x03T.1\n\
    \x0b\n\x04\x05\0\x02Q\x12\x03U\x08.\n\x0c\n\x05\x05\0\x02Q\x01\x12\x03U\
    \x08'\n\x0c\n\x05\x05\0\x02Q\x02\x12\x03U*-\n\x0b\n\x04\x05\0\x02R\x12\
    \x03V\x08)\n\x0c\n\x05\x05\0\x02R\x01\x12\x03V\x08\"\n\x0c\n\x05\x05\0\
    \x02R\x02\x12\x03V%(\n\x0b\n\x04\x05\0\x02S\x12\x03W\x081\n\x0c\n\x05\
    \x05\0\x02S\x01\x12\x03W\x08*\n\x0c\n\x05\x05\0\x02S\x02\x12\x03W-0\n\
    \x0b\n\x04\x05\0\x02T\x12\x03X\x08\x1f\n\x0c\n\x05\x05\0\x02T\x01\x12\
    \x03X\x08\x18\n\x0c\n\x05\x05\0\x02T\x02\x12\x03X\x1b\x1e\n\x0b\n\x04\
    \x05\0\x02U\x12\x03Y\x08'\n\x0c\n\x05\x05\0\x02U\x01\x12\x03Y\x08\x20\n\
    \x0c\n\x05\x05\0\x02U\x02\x12\x03Y#&\n\x0b\n\x04\x05\0\x02V\x12\x03Z\x08\
    (\n\x0c\n\x05\x05\0\x02V\x01\x12\x03Z\x08!\n\x0c\n\x05\x05\0\x02V\x02\
    \x12\x03Z$'\n\x0b\n\x04\x05\0\x02W\x12\x03[\x080\n\x0c\n\x05\x05\0\x02W\
    \x01\x12\x03[\x08)\n\x0c\n\x05\x05\0\x02W\x02\x12\x03[,/\n\x0b\n\x04\x05\
    \0\x02X\x12\x03\\\x08,\n\x0c\n\x05\x05\0\x02X\x01\x12\x03\\\x08%\n\x0c\n\
    \x05\x05\0\x02X\x02\x12\x03\\(+\n\x0b\n\x04\x05\0\x02Y\x12\x03]\x08/\n\
    \x0c\n\x05\x05\0\x02Y\x01\x12\x03]\x08(\n\x0c\n\x05\x05\0\x02Y\x02\x12\
    \x03]+.\n\x0b\n\x04\x05\0\x02Z\x12\x03^\x08-\n\x0c\n\x05\x05\0\x02Z\x01\
    \x12\x03^\x08&\n\x0c\n\x05\x05\0\x02Z\x02\x12\x03^),\n\x0b\n\x04\x05\0\
    \x02[\x12\x03_\x08*\n\x0c\n\x05\x05\0\x02[\x01\x12\x03_\x08#\n\x0c\n\x05\
    \x05\0\x02[\x02\x12\x03_&)\n\x0b\n\x04\x05\0\x02\\\x12\x03`\x082\n\x0c\n\
    \x05\x05\0\x02\\\x01\x12\x03`\x08+\n\x0c\n\x05\x05\0\x02\\\x02\x12\x03`.\
    1\n\x0b\n\x04\x05\0\x02]\x12\x03a\x08(\n\x0c\n\x05\x05\0\x02]\x01\x12\
    \x03a\x08!\n\x0c\n\x05\x05\0\x02]\x02\x12\x03a$'\n\x0b\n\x04\x05\0\x02^\
    \x12\x03b\x08;\n\x0c\n\x05\x05\0\x02^\x01\x12\x03b\x084\n\x0c\n\x05\x05\
    \0\x02^\x02\x12\x03b7:\n\x0b\n\x04\x05\0\x02_\x12\x03c\x08<\n\x0c\n\x05\
    \x05\0\x02_\x01\x12\x03c\x085\n\x0c\n\x05\x05\0\x02_\x02\x12\x03c8;\n\
    \x0b\n\x04\x05\0\x02`\x12\x03d\x088\n\x0c\n\x05\x05\0\x02`\x01\x12\x03d\
    \x081\n\x0c\n\x05\x05\0\x02`\x02\x12\x03d47\n\x0b\n\x04\x05\0\x02a\x12\
    \x03e\x089\n\x0c\n\x05\x05\0\x02a\x01\x12\x03e\x082\n\x0c\n\x05\x05\0\
    \x02a\x02\x12\x03e58\n\x0b\n\x04\x05\0\x02b\x12\x03f\x08>\n\x0c\n\x05\
    \x05\0\x02b\x01\x12\x03f\x087\n\x0c\n\x05\x05\0\x02b\x02\x12\x03f:=\n\
    \x0b\n\x04\x05\0\x02c\x12\x03g\x08?\n\x0c\n\x05\x05\0\x02c\x01\x12\x03g\
    \x088\n\x0c\n\x05\x05\0\x02c\x02\x12\x03g;>\n\n\n\x02\x05\x01\x12\x04j\0\
    t\x01\n\n\n\x03\x05\x01\x01\x12\x03j\x05\x0b\n\x0b\n\x04\x05\x01\x02\0\
    \x12\x03k\x08\x1d\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03k\x08\x17\n\x0c\n\
    \x05\x05\x01\x02\0\x02\x12\x03k\x1a\x1c\n\x0b\n\x04\x05\x01\x02\x01\x12\
    \x03l\x08\x1d\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03l\x08\x17\n\x0c\n\
    \x05\x05\x01\x02\x01\x02\x12\x03l\x1a\x1c\n\x0b\n\x04\x05\x01\x02\x02\
    \x12\x03m\x08\x1e\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03m\x08\x18\n\x0c\
    \n\x05\x05\x01\x02\x02\x02\x12\x03m\x1b\x1d\n\x0b\n\x04\x05\x01\x02\x03\
    \x12\x03n\x08&\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03n\x08\x20\n\x0c\n\
    \x05\x05\x01\x02\x03\x02\x12\x03n#%\n\x0b\n\x04\x05\x01\x02\x04\x12\x03o\
    \x08(\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\x03o\x08\"\n\x0c\n\x05\x05\x01\
    \x02\x04\x02\x12\x03o%'\n\x0b\n\x04\x05\x01\x02\x05\x12\x03p\x08%\n\x0c\
    \n\x05\x05\x01\x02\x05\x01\x12\x03p\x08\x1f\n\x0c\n\x05\x05\x01\x02\x05\
    \x02\x12\x03p\"$\n\x0b\n\x04\x05\x01\x02\x06\x12\x03q\x08-\n\x0c\n\x05\
    \x05\x01\x02\x06\x01\x12\x03q\x08'\n\x0c\n\x05\x05\x01\x02\x06\x02\x12\
    \x03q*,\n\x0b\n\x04\x05\x01\x02\x07\x12\x03r\x08/\n\x0c\n\x05\x05\x01\
    \x02\x07\x01\x12\x03r\x08)\n\x0c\n\x05\x05\x01\x02\x07\x02\x12\x03r,.\n\
    \x0b\n\x04\x05\x01\x02\x08\x12\x03s\x08.\n\x0c\n\x05\x05\x01\x02\x08\x01\
    \x12\x03s\x08(\n\x0c\n\x05\x05\x01\x02\x08\x02\x12\x03s+-\n\n\n\x02\x05\
    \x02\x12\x04v\0\x7f\x01\n\n\n\x03\x05\x02\x01\x12\x03v\x05\x15\n\x0b\n\
    \x04\x05\x02\x02\0\x12\x03w\x08#\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03w\
    \x08\x1b\n\x0c\n\x05\x05\x02\x02\0\x02\x12\x03w\x1e\"\n\x0b\n\x04\x05\
    \x02\x02\x01\x12\x03x\x08$\n\x0c\n\x05\x05\x02\x02\x01\x01\x12\x03x\x08\
    \x1c\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x03x\x1f#\n\x0b\n\x04\x05\x02\
    \x02\x02\x12\x03y\x08%\n\x0c\n\x05\x05\x02\x02\x02\x01\x12\x03y\x08\x1d\
    \n\x0c\n\x05\x05\x02\x02\x02\x02\x12\x03y\x20$\n\x0b\n\x04\x05\x02\x02\
    \x03\x12\x03z\x08%\n\x0c\n\x05\x05\x02\x02\x03\x01\x12\x03z\x08\x1d\n\
    \x0c\n\x05\x05\x02\x02\x03\x02\x12\x03z\x20$\n\x0b\n\x04\x05\x02\x02\x04\
    \x12\x03{\x08#\n\x0c\n\x05\x05\x02\x02\x04\x01\x12\x03{\x08\x1b\n\x0c\n\
    \x05\x05\x02\x02\x04\x02\x12\x03{\x1e\"\n\x0b\n\x04\x05\x02\x02\x05\x12\
    \x03|\x08#\n\x0c\n\x05\x05\x02\x02\x05\x01\x12\x03|\x08\x1b\n\x0c\n\x05\
    \x05\x02\x02\x05\x02\x12\x03|\x1e\"\n\x0b\n\x04\x05\x02\x02\x06\x12\x03}\
    \x08%\n\x0c\n\x05\x05\x02\x02\x06\x01\x12\x03}\x08\x1d\n\x0c\n\x05\x05\
    \x02\x02\x06\x02\x12\x03}\x20$\n\x0b\n\x04\x05\x02\x02\x07\x12\x03~\x08%\
    \n\x0c\n\x05\x05\x02\x02\x07\x01\x12\x03~\x08\x1d\n\x0c\n\x05\x05\x02\
    \x02\x07\x02\x12\x03~\x20$\n\x0c\n\x02\x05\x03\x12\x06\x81\x01\0\x8c\x01\
    \x01\n\x0b\n\x03\x05\x03\x01\x12\x04\x81\x01\x05\x0f\n\x0c\n\x04\x05\x03\
    \x02\0\x12\x04\x82\x01\x08$\n\r\n\x05\x05\x03\x02\0\x01\x12\x04\x82\x01\
    \x08\x1d\n\r\n\x05\x05\x03\x02\0\x02\x12\x04\x82\x01\x20#\n\x0c\n\x04\
    \x05\x03\x02\x01\x12\x04\x83\x01\x08,\n\r\n\x05\x05\x03\x02\x01\x01\x12\
    \x04\x83\x01\x08%\n\r\n\x05\x05\x03\x02\x01\x02\x12\x04\x83\x01(+\n\x0c\
    \n\x04\x05\x03\x02\x02\x12\x04\x84\x01\x08!\n\r\n\x05\x05\x03\x02\x02\
    \x01\x12\x04\x84\x01\x08\x1a\n\r\n\x05\x05\x03\x02\x02\x02\x12\x04\x84\
    \x01\x1d\x20\n\x0c\n\x04\x05\x03\x02\x03\x12\x04\x85\x01\x08&\n\r\n\x05\
    \x05\x03\x02\x03\x01\x12\x04\x85\x01\x08\x1f\n\r\n\x05\x05\x03\x02\x03\
    \x02\x12\x04\x85\x01\"%\n\x0c\n\x04\x05\x03\x02\x04\x12\x04\x86\x01\x08-\
    \n\r\n\x05\x05\x03\x02\x04\x01\x12\x04\x86\x01\x08&\n\r\n\x05\x05\x03\
    \x02\x04\x02\x12\x04\x86\x01),\n\x0c\n\x04\x05\x03\x02\x05\x12\x04\x87\
    \x01\x08.\n\r\n\x05\x05\x03\x02\x05\x01\x12\x04\x87\x01\x08'\n\r\n\x05\
    \x05\x03\x02\x05\x02\x12\x04\x87\x01*-\n\x0c\n\x04\x05\x03\x02\x06\x12\
    \x04\x88\x01\x086\n\r\n\x05\x05\x03\x02\x06\x01\x12\x04\x88\x01\x08/\n\r\
    \n\x05\x05\x03\x02\x06\x02\x12\x04\x88\x0125\n\x0c\n\x04\x05\x03\x02\x07\
    \x12\x04\x89\x01\x080\n\r\n\x05\x05\x03\x02\x07\x01\x12\x04\x89\x01\x08)\
    \n\r\n\x05\x05\x03\x02\x07\x02\x12\x04\x89\x01,/\n\x0c\n\x04\x05\x03\x02\
    \x08\x12\x04\x8a\x01\x08+\n\r\n\x05\x05\x03\x02\x08\x01\x12\x04\x8a\x01\
    \x08$\n\r\n\x05\x05\x03\x02\x08\x02\x12\x04\x8a\x01'*\n\x0c\n\x04\x05\
    \x03\x02\t\x12\x04\x8b\x01\x08-\n\r\n\x05\x05\x03\x02\t\x01\x12\x04\x8b\
    \x01\x08&\n\r\n\x05\x05\x03\x02\t\x02\x12\x04\x8b\x01),\n\x0c\n\x02\x04\
    \0\x12\x06\x8e\x01\0\x92\x01\x01\n\x0b\n\x03\x04\0\x01\x12\x04\x8e\x01\
    \x08/\n\x0c\n\x04\x04\0\x02\0\x12\x04\x8f\x01\x08!\n\r\n\x05\x04\0\x02\0\
    \x04\x12\x04\x8f\x01\x08\x10\n\r\n\x05\x04\0\x02\0\x05\x12\x04\x8f\x01\
    \x11\x17\n\r\n\x05\x04\0\x02\0\x01\x12\x04\x8f\x01\x18\x1c\n\r\n\x05\x04\
    \0\x02\0\x03\x12\x04\x8f\x01\x1f\x20\n\x0c\n\x04\x04\0\x02\x01\x12\x04\
    \x90\x01\x08/\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x90\x01\x08\x10\n\r\n\
    \x05\x04\0\x02\x01\x05\x12\x04\x90\x01\x11\x17\n\r\n\x05\x04\0\x02\x01\
    \x01\x12\x04\x90\x01\x18*\n\r\n\x05\x04\0\x02\x01\x03\x12\x04\x90\x01-.\
    \n\x0c\n\x04\x04\0\x02\x02\x12\x04\x91\x01\x08*\n\r\n\x05\x04\0\x02\x02\
    \x04\x12\x04\x91\x01\x08\x10\n\r\n\x05\x04\0\x02\x02\x05\x12\x04\x91\x01\
    \x11\x17\n\r\n\x05\x04\0\x02\x02\x01\x12\x04\x91\x01\x18%\n\r\n\x05\x04\
    \0\x02\x02\x03\x12\x04\x91\x01()\n\x0c\n\x02\x04\x01\x12\x06\x94\x01\0\
    \x96\x01\x01\n\x0b\n\x03\x04\x01\x01\x12\x04\x94\x01\x088\n\x0c\n\x04\
    \x04\x01\x02\0\x12\x04\x95\x01\x08\"\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\
    \x95\x01\x08\x10\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\x95\x01\x11\x17\n\r\
    \n\x05\x04\x01\x02\0\x01\x12\x04\x95\x01\x18\x1d\n\r\n\x05\x04\x01\x02\0\
    \x03\x12\x04\x95\x01\x20!\n\x0c\n\x02\x04\x02\x12\x06\x98\x01\0\x9b\x01\
    \x01\n\x0b\n\x03\x04\x02\x01\x12\x04\x98\x01\x089\n\x0c\n\x04\x04\x02\
    \x02\0\x12\x04\x99\x01\x08I\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x99\x01\
    \x08\x10\n\r\n\x05\x04\x02\x02\0\x06\x12\x04\x99\x01\x119\n\r\n\x05\x04\
    \x02\x02\0\x01\x12\x04\x99\x01:D\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\x99\
    \x01GH\n\x0c\n\x04\x04\x02\x02\x01\x12\x04\x9a\x01\x080\n\r\n\x05\x04\
    \x02\x02\x01\x04\x12\x04\x9a\x01\x08\x10\n\r\n\x05\x04\x02\x02\x01\x05\
    \x12\x04\x9a\x01\x11\x17\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\x9a\x01\
    \x18+\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\x9a\x01./\n\x0c\n\x02\x04\
    \x03\x12\x06\x9d\x01\0\xa2\x01\x01\n\x0b\n\x03\x04\x03\x01\x12\x04\x9d\
    \x01\x085\n\x0c\n\x04\x04\x03\x02\0\x12\x04\x9e\x01\x08\"\n\r\n\x05\x04\
    \x03\x02\0\x04\x12\x04\x9e\x01\x08\x10\n\r\n\x05\x04\x03\x02\0\x05\x12\
    \x04\x9e\x01\x11\x17\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\x9e\x01\x18\x1d\
    \n\r\n\x05\x04\x03\x02\0\x03\x12\x04\x9e\x01\x20!\n\x0c\n\x04\x04\x03\
    \x02\x01\x12\x04\x9f\x01\x08$\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\x9f\
    \x01\x08\x10\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\x9f\x01\x11\x17\n\r\n\
    \x05\x04\x03\x02\x01\x01\x12\x04\x9f\x01\x18\x1f\n\r\n\x05\x04\x03\x02\
    \x01\x03\x12\x04\x9f\x01\"#\n\x0c\n\x04\x04\x03\x02\x02\x12\x04\xa0\x01\
    \x08!\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04\xa0\x01\x08\x10\n\r\n\x05\
    \x04\x03\x02\x02\x05\x12\x04\xa0\x01\x11\x17\n\r\n\x05\x04\x03\x02\x02\
    \x01\x12\x04\xa0\x01\x18\x1c\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\xa0\
    \x01\x1f\x20\n\x0c\n\x04\x04\x03\x02\x03\x12\x04\xa1\x01\x08+\n\r\n\x05\
    \x04\x03\x02\x03\x04\x12\x04\xa1\x01\x08\x10\n\r\n\x05\x04\x03\x02\x03\
    \x05\x12\x04\xa1\x01\x11\x17\n\r\n\x05\x04\x03\x02\x03\x01\x12\x04\xa1\
    \x01\x18&\n\r\n\x05\x04\x03\x02\x03\x03\x12\x04\xa1\x01)*\n\x0c\n\x02\
    \x04\x04\x12\x06\xa4\x01\0\xa8\x01\x01\n\x0b\n\x03\x04\x04\x01\x12\x04\
    \xa4\x01\x086\n\x0c\n\x04\x04\x04\x02\0\x12\x04\xa5\x01\x08&\n\r\n\x05\
    \x04\x04\x02\0\x04\x12\x04\xa5\x01\x08\x10\n\r\n\x05\x04\x04\x02\0\x05\
    \x12\x04\xa5\x01\x11\x17\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xa5\x01\x18\
    !\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\xa5\x01$%\n\x0c\n\x04\x04\x04\x02\
    \x01\x12\x04\xa6\x01\x08$\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04\xa6\x01\
    \x08\x10\n\r\n\x05\x04\x04\x02\x01\x05\x12\x04\xa6\x01\x11\x17\n\r\n\x05\
    \x04\x04\x02\x01\x01\x12\x04\xa6\x01\x18\x1f\n\r\n\x05\x04\x04\x02\x01\
    \x03\x12\x04\xa6\x01\"#\n\x0c\n\x04\x04\x04\x02\x02\x12\x04\xa7\x01\x08+\
    \n\r\n\x05\x04\x04\x02\x02\x04\x12\x04\xa7\x01\x08\x10\n\r\n\x05\x04\x04\
    \x02\x02\x05\x12\x04\xa7\x01\x11\x17\n\r\n\x05\x04\x04\x02\x02\x01\x12\
    \x04\xa7\x01\x18&\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\xa7\x01)*\n\x0c\
    \n\x02\x04\x05\x12\x06\xaa\x01\0\xad\x01\x01\n\x0b\n\x03\x04\x05\x01\x12\
    \x04\xaa\x01\x08;\n\x0c\n\x04\x04\x05\x02\0\x12\x04\xab\x01\x08\"\n\r\n\
    \x05\x04\x05\x02\0\x04\x12\x04\xab\x01\x08\x10\n\r\n\x05\x04\x05\x02\0\
    \x05\x12\x04\xab\x01\x11\x17\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\xab\x01\
    \x18\x1d\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xab\x01\x20!\n\x0c\n\x04\
    \x04\x05\x02\x01\x12\x04\xac\x01\x08$\n\r\n\x05\x04\x05\x02\x01\x04\x12\
    \x04\xac\x01\x08\x10\n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\xac\x01\x11\
    \x17\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\xac\x01\x18\x1f\n\r\n\x05\x04\
    \x05\x02\x01\x03\x12\x04\xac\x01\"#\n\x0c\n\x02\x04\x06\x12\x06\xaf\x01\
    \0\xb1\x01\x01\n\x0b\n\x03\x04\x06\x01\x12\x04\xaf\x01\x08<\n\x0c\n\x04\
    \x04\x06\x02\0\x12\x04\xb0\x01\x08&\n\r\n\x05\x04\x06\x02\0\x04\x12\x04\
    \xb0\x01\x08\x10\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\xb0\x01\x11\x17\n\r\
    \n\x05\x04\x06\x02\0\x01\x12\x04\xb0\x01\x18!\n\r\n\x05\x04\x06\x02\0\
    \x03\x12\x04\xb0\x01$%\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(CCommunity_GamePersonalDataCategoryInfo::generated_message_descriptor_data());
            messages.push(CCommunity_GetGamePersonalDataCategories_Request::generated_message_descriptor_data());
            messages.push(CCommunity_GetGamePersonalDataCategories_Response::generated_message_descriptor_data());
            messages.push(CCommunity_GetGamePersonalDataEntries_Request::generated_message_descriptor_data());
            messages.push(CCommunity_GetGamePersonalDataEntries_Response::generated_message_descriptor_data());
            messages.push(CCommunity_TerminateGamePersonalDataEntries_Request::generated_message_descriptor_data());
            messages.push(CCommunity_TerminateGamePersonalDataEntries_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(4);
            enums.push(EGCSystemMsg::generated_enum_descriptor_data());
            enums.push(ESOMsg::generated_enum_descriptor_data());
            enums.push(EGCBaseClientMsg::generated_enum_descriptor_data());
            enums.push(EGCToGCMsg::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
