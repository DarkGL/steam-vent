// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tf2/steamdatagram_messages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CMsgSteamDatagramRouterPingReply)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramRouterPingReply {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterPingReply.client_timestamp)
    pub client_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterPingReply.latency_datacenter_ids)
    pub latency_datacenter_ids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterPingReply.latency_ping_ms)
    pub latency_ping_ms: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterPingReply.your_public_ip)
    pub your_public_ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterPingReply.server_time)
    pub server_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterPingReply.challenge)
    pub challenge: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterPingReply.seconds_until_shutdown)
    pub seconds_until_shutdown: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterPingReply.client_cookie)
    pub client_cookie: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterPingReply.scoring_penalty_relay_cluster)
    pub scoring_penalty_relay_cluster: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterPingReply.route_exceptions)
    pub route_exceptions: ::std::vec::Vec<cmsg_steam_datagram_router_ping_reply::RouteException>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramRouterPingReply.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramRouterPingReply {
    fn default() -> &'a CMsgSteamDatagramRouterPingReply {
        <CMsgSteamDatagramRouterPingReply as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramRouterPingReply {
    pub fn new() -> CMsgSteamDatagramRouterPingReply {
        ::std::default::Default::default()
    }

    // optional fixed32 client_timestamp = 1;

    pub fn client_timestamp(&self) -> u32 {
        self.client_timestamp.unwrap_or(0)
    }

    pub fn clear_client_timestamp(&mut self) {
        self.client_timestamp = ::std::option::Option::None;
    }

    pub fn has_client_timestamp(&self) -> bool {
        self.client_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_timestamp(&mut self, v: u32) {
        self.client_timestamp = ::std::option::Option::Some(v);
    }

    // optional fixed32 your_public_ip = 4;

    pub fn your_public_ip(&self) -> u32 {
        self.your_public_ip.unwrap_or(0)
    }

    pub fn clear_your_public_ip(&mut self) {
        self.your_public_ip = ::std::option::Option::None;
    }

    pub fn has_your_public_ip(&self) -> bool {
        self.your_public_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_your_public_ip(&mut self, v: u32) {
        self.your_public_ip = ::std::option::Option::Some(v);
    }

    // optional fixed32 server_time = 5;

    pub fn server_time(&self) -> u32 {
        self.server_time.unwrap_or(0)
    }

    pub fn clear_server_time(&mut self) {
        self.server_time = ::std::option::Option::None;
    }

    pub fn has_server_time(&self) -> bool {
        self.server_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_time(&mut self, v: u32) {
        self.server_time = ::std::option::Option::Some(v);
    }

    // optional fixed64 challenge = 6;

    pub fn challenge(&self) -> u64 {
        self.challenge.unwrap_or(0)
    }

    pub fn clear_challenge(&mut self) {
        self.challenge = ::std::option::Option::None;
    }

    pub fn has_challenge(&self) -> bool {
        self.challenge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: u64) {
        self.challenge = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_until_shutdown = 7;

    pub fn seconds_until_shutdown(&self) -> u32 {
        self.seconds_until_shutdown.unwrap_or(0)
    }

    pub fn clear_seconds_until_shutdown(&mut self) {
        self.seconds_until_shutdown = ::std::option::Option::None;
    }

    pub fn has_seconds_until_shutdown(&self) -> bool {
        self.seconds_until_shutdown.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_until_shutdown(&mut self, v: u32) {
        self.seconds_until_shutdown = ::std::option::Option::Some(v);
    }

    // optional fixed32 client_cookie = 8;

    pub fn client_cookie(&self) -> u32 {
        self.client_cookie.unwrap_or(0)
    }

    pub fn clear_client_cookie(&mut self) {
        self.client_cookie = ::std::option::Option::None;
    }

    pub fn has_client_cookie(&self) -> bool {
        self.client_cookie.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_cookie(&mut self, v: u32) {
        self.client_cookie = ::std::option::Option::Some(v);
    }

    // optional uint32 scoring_penalty_relay_cluster = 9;

    pub fn scoring_penalty_relay_cluster(&self) -> u32 {
        self.scoring_penalty_relay_cluster.unwrap_or(0)
    }

    pub fn clear_scoring_penalty_relay_cluster(&mut self) {
        self.scoring_penalty_relay_cluster = ::std::option::Option::None;
    }

    pub fn has_scoring_penalty_relay_cluster(&self) -> bool {
        self.scoring_penalty_relay_cluster.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scoring_penalty_relay_cluster(&mut self, v: u32) {
        self.scoring_penalty_relay_cluster = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_timestamp",
            |m: &CMsgSteamDatagramRouterPingReply| { &m.client_timestamp },
            |m: &mut CMsgSteamDatagramRouterPingReply| { &mut m.client_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "latency_datacenter_ids",
            |m: &CMsgSteamDatagramRouterPingReply| { &m.latency_datacenter_ids },
            |m: &mut CMsgSteamDatagramRouterPingReply| { &mut m.latency_datacenter_ids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "latency_ping_ms",
            |m: &CMsgSteamDatagramRouterPingReply| { &m.latency_ping_ms },
            |m: &mut CMsgSteamDatagramRouterPingReply| { &mut m.latency_ping_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "your_public_ip",
            |m: &CMsgSteamDatagramRouterPingReply| { &m.your_public_ip },
            |m: &mut CMsgSteamDatagramRouterPingReply| { &mut m.your_public_ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_time",
            |m: &CMsgSteamDatagramRouterPingReply| { &m.server_time },
            |m: &mut CMsgSteamDatagramRouterPingReply| { &mut m.server_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge",
            |m: &CMsgSteamDatagramRouterPingReply| { &m.challenge },
            |m: &mut CMsgSteamDatagramRouterPingReply| { &mut m.challenge },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_until_shutdown",
            |m: &CMsgSteamDatagramRouterPingReply| { &m.seconds_until_shutdown },
            |m: &mut CMsgSteamDatagramRouterPingReply| { &mut m.seconds_until_shutdown },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_cookie",
            |m: &CMsgSteamDatagramRouterPingReply| { &m.client_cookie },
            |m: &mut CMsgSteamDatagramRouterPingReply| { &mut m.client_cookie },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "scoring_penalty_relay_cluster",
            |m: &CMsgSteamDatagramRouterPingReply| { &m.scoring_penalty_relay_cluster },
            |m: &mut CMsgSteamDatagramRouterPingReply| { &mut m.scoring_penalty_relay_cluster },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "route_exceptions",
            |m: &CMsgSteamDatagramRouterPingReply| { &m.route_exceptions },
            |m: &mut CMsgSteamDatagramRouterPingReply| { &mut m.route_exceptions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramRouterPingReply>(
            "CMsgSteamDatagramRouterPingReply",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramRouterPingReply {
    const NAME: &'static str = "CMsgSteamDatagramRouterPingReply";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.client_timestamp = ::std::option::Option::Some(is.read_fixed32()?);
                },
                18 => {
                    is.read_repeated_packed_fixed32_into(&mut self.latency_datacenter_ids)?;
                },
                21 => {
                    self.latency_datacenter_ids.push(is.read_fixed32()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.latency_ping_ms)?;
                },
                24 => {
                    self.latency_ping_ms.push(is.read_uint32()?);
                },
                37 => {
                    self.your_public_ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                45 => {
                    self.server_time = ::std::option::Option::Some(is.read_fixed32()?);
                },
                49 => {
                    self.challenge = ::std::option::Option::Some(is.read_fixed64()?);
                },
                56 => {
                    self.seconds_until_shutdown = ::std::option::Option::Some(is.read_uint32()?);
                },
                69 => {
                    self.client_cookie = ::std::option::Option::Some(is.read_fixed32()?);
                },
                72 => {
                    self.scoring_penalty_relay_cluster = ::std::option::Option::Some(is.read_uint32()?);
                },
                82 => {
                    self.route_exceptions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_timestamp {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::vec_packed_fixed32_size(2, &self.latency_datacenter_ids);
        my_size += ::protobuf::rt::vec_packed_uint32_size(3, &self.latency_ping_ms);
        if let Some(v) = self.your_public_ip {
            my_size += 1 + 4;
        }
        if let Some(v) = self.server_time {
            my_size += 1 + 4;
        }
        if let Some(v) = self.challenge {
            my_size += 1 + 8;
        }
        if let Some(v) = self.seconds_until_shutdown {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.client_cookie {
            my_size += 1 + 4;
        }
        if let Some(v) = self.scoring_penalty_relay_cluster {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        for value in &self.route_exceptions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.client_timestamp {
            os.write_fixed32(1, v)?;
        }
        os.write_repeated_packed_fixed32(2, &self.latency_datacenter_ids)?;
        os.write_repeated_packed_uint32(3, &self.latency_ping_ms)?;
        if let Some(v) = self.your_public_ip {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.server_time {
            os.write_fixed32(5, v)?;
        }
        if let Some(v) = self.challenge {
            os.write_fixed64(6, v)?;
        }
        if let Some(v) = self.seconds_until_shutdown {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.client_cookie {
            os.write_fixed32(8, v)?;
        }
        if let Some(v) = self.scoring_penalty_relay_cluster {
            os.write_uint32(9, v)?;
        }
        for v in &self.route_exceptions {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramRouterPingReply {
        CMsgSteamDatagramRouterPingReply::new()
    }

    fn clear(&mut self) {
        self.client_timestamp = ::std::option::Option::None;
        self.latency_datacenter_ids.clear();
        self.latency_ping_ms.clear();
        self.your_public_ip = ::std::option::Option::None;
        self.server_time = ::std::option::Option::None;
        self.challenge = ::std::option::Option::None;
        self.seconds_until_shutdown = ::std::option::Option::None;
        self.client_cookie = ::std::option::Option::None;
        self.scoring_penalty_relay_cluster = ::std::option::Option::None;
        self.route_exceptions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramRouterPingReply {
        static instance: CMsgSteamDatagramRouterPingReply = CMsgSteamDatagramRouterPingReply {
            client_timestamp: ::std::option::Option::None,
            latency_datacenter_ids: ::std::vec::Vec::new(),
            latency_ping_ms: ::std::vec::Vec::new(),
            your_public_ip: ::std::option::Option::None,
            server_time: ::std::option::Option::None,
            challenge: ::std::option::Option::None,
            seconds_until_shutdown: ::std::option::Option::None,
            client_cookie: ::std::option::Option::None,
            scoring_penalty_relay_cluster: ::std::option::Option::None,
            route_exceptions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramRouterPingReply {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramRouterPingReply").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramRouterPingReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramRouterPingReply {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramRouterPingReply`
pub mod cmsg_steam_datagram_router_ping_reply {
    // @@protoc_insertion_point(message:CMsgSteamDatagramRouterPingReply.RouteException)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RouteException {
        // message fields
        // @@protoc_insertion_point(field:CMsgSteamDatagramRouterPingReply.RouteException.data_center_id)
        pub data_center_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramRouterPingReply.RouteException.flags)
        pub flags: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramRouterPingReply.RouteException.penalty)
        pub penalty: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgSteamDatagramRouterPingReply.RouteException.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RouteException {
        fn default() -> &'a RouteException {
            <RouteException as ::protobuf::Message>::default_instance()
        }
    }

    impl RouteException {
        pub fn new() -> RouteException {
            ::std::default::Default::default()
        }

        // optional fixed32 data_center_id = 1;

        pub fn data_center_id(&self) -> u32 {
            self.data_center_id.unwrap_or(0)
        }

        pub fn clear_data_center_id(&mut self) {
            self.data_center_id = ::std::option::Option::None;
        }

        pub fn has_data_center_id(&self) -> bool {
            self.data_center_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_data_center_id(&mut self, v: u32) {
            self.data_center_id = ::std::option::Option::Some(v);
        }

        // optional uint32 flags = 2;

        pub fn flags(&self) -> u32 {
            self.flags.unwrap_or(0)
        }

        pub fn clear_flags(&mut self) {
            self.flags = ::std::option::Option::None;
        }

        pub fn has_flags(&self) -> bool {
            self.flags.is_some()
        }

        // Param is passed by value, moved
        pub fn set_flags(&mut self, v: u32) {
            self.flags = ::std::option::Option::Some(v);
        }

        // optional uint32 penalty = 3;

        pub fn penalty(&self) -> u32 {
            self.penalty.unwrap_or(0)
        }

        pub fn clear_penalty(&mut self) {
            self.penalty = ::std::option::Option::None;
        }

        pub fn has_penalty(&self) -> bool {
            self.penalty.is_some()
        }

        // Param is passed by value, moved
        pub fn set_penalty(&mut self, v: u32) {
            self.penalty = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "data_center_id",
                |m: &RouteException| { &m.data_center_id },
                |m: &mut RouteException| { &mut m.data_center_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "flags",
                |m: &RouteException| { &m.flags },
                |m: &mut RouteException| { &mut m.flags },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "penalty",
                |m: &RouteException| { &m.penalty },
                |m: &mut RouteException| { &mut m.penalty },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RouteException>(
                "CMsgSteamDatagramRouterPingReply.RouteException",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RouteException {
        const NAME: &'static str = "RouteException";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.data_center_id = ::std::option::Option::Some(is.read_fixed32()?);
                    },
                    16 => {
                        self.flags = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.penalty = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.data_center_id {
                my_size += 1 + 4;
            }
            if let Some(v) = self.flags {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.penalty {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.data_center_id {
                os.write_fixed32(1, v)?;
            }
            if let Some(v) = self.flags {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.penalty {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RouteException {
            RouteException::new()
        }

        fn clear(&mut self) {
            self.data_center_id = ::std::option::Option::None;
            self.flags = ::std::option::Option::None;
            self.penalty = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RouteException {
            static instance: RouteException = RouteException {
                data_center_id: ::std::option::Option::None,
                flags: ::std::option::Option::None,
                penalty: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RouteException {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgSteamDatagramRouterPingReply.RouteException").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RouteException {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RouteException {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramGameserverPing)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramGameserverPing {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverPing.legacy_client_session)
    pub legacy_client_session: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverPing.client_steam_id)
    pub client_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverPing.client_timestamp)
    pub client_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverPing.router_timestamp)
    pub router_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverPing.router_gameserver_latency)
    pub router_gameserver_latency: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverPing.seq_number_router)
    pub seq_number_router: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverPing.seq_number_e2e)
    pub seq_number_e2e: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverPing.relay_session_id)
    pub relay_session_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverPing.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramGameserverPing.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramGameserverPing {
    fn default() -> &'a CMsgSteamDatagramGameserverPing {
        <CMsgSteamDatagramGameserverPing as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramGameserverPing {
    pub fn new() -> CMsgSteamDatagramGameserverPing {
        ::std::default::Default::default()
    }

    // optional uint32 legacy_client_session = 1;

    pub fn legacy_client_session(&self) -> u32 {
        self.legacy_client_session.unwrap_or(0)
    }

    pub fn clear_legacy_client_session(&mut self) {
        self.legacy_client_session = ::std::option::Option::None;
    }

    pub fn has_legacy_client_session(&self) -> bool {
        self.legacy_client_session.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_client_session(&mut self, v: u32) {
        self.legacy_client_session = ::std::option::Option::Some(v);
    }

    // optional fixed64 client_steam_id = 2;

    pub fn client_steam_id(&self) -> u64 {
        self.client_steam_id.unwrap_or(0)
    }

    pub fn clear_client_steam_id(&mut self) {
        self.client_steam_id = ::std::option::Option::None;
    }

    pub fn has_client_steam_id(&self) -> bool {
        self.client_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_steam_id(&mut self, v: u64) {
        self.client_steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 client_timestamp = 3;

    pub fn client_timestamp(&self) -> u32 {
        self.client_timestamp.unwrap_or(0)
    }

    pub fn clear_client_timestamp(&mut self) {
        self.client_timestamp = ::std::option::Option::None;
    }

    pub fn has_client_timestamp(&self) -> bool {
        self.client_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_timestamp(&mut self, v: u32) {
        self.client_timestamp = ::std::option::Option::Some(v);
    }

    // optional fixed32 router_timestamp = 4;

    pub fn router_timestamp(&self) -> u32 {
        self.router_timestamp.unwrap_or(0)
    }

    pub fn clear_router_timestamp(&mut self) {
        self.router_timestamp = ::std::option::Option::None;
    }

    pub fn has_router_timestamp(&self) -> bool {
        self.router_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_router_timestamp(&mut self, v: u32) {
        self.router_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 router_gameserver_latency = 5;

    pub fn router_gameserver_latency(&self) -> u32 {
        self.router_gameserver_latency.unwrap_or(0)
    }

    pub fn clear_router_gameserver_latency(&mut self) {
        self.router_gameserver_latency = ::std::option::Option::None;
    }

    pub fn has_router_gameserver_latency(&self) -> bool {
        self.router_gameserver_latency.is_some()
    }

    // Param is passed by value, moved
    pub fn set_router_gameserver_latency(&mut self, v: u32) {
        self.router_gameserver_latency = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_number_router = 6;

    pub fn seq_number_router(&self) -> u32 {
        self.seq_number_router.unwrap_or(0)
    }

    pub fn clear_seq_number_router(&mut self) {
        self.seq_number_router = ::std::option::Option::None;
    }

    pub fn has_seq_number_router(&self) -> bool {
        self.seq_number_router.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_number_router(&mut self, v: u32) {
        self.seq_number_router = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_number_e2e = 7;

    pub fn seq_number_e2e(&self) -> u32 {
        self.seq_number_e2e.unwrap_or(0)
    }

    pub fn clear_seq_number_e2e(&mut self) {
        self.seq_number_e2e = ::std::option::Option::None;
    }

    pub fn has_seq_number_e2e(&self) -> bool {
        self.seq_number_e2e.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_number_e2e(&mut self, v: u32) {
        self.seq_number_e2e = ::std::option::Option::Some(v);
    }

    // optional uint32 relay_session_id = 8;

    pub fn relay_session_id(&self) -> u32 {
        self.relay_session_id.unwrap_or(0)
    }

    pub fn clear_relay_session_id(&mut self) {
        self.relay_session_id = ::std::option::Option::None;
    }

    pub fn has_relay_session_id(&self) -> bool {
        self.relay_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_relay_session_id(&mut self, v: u32) {
        self.relay_session_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 connection_id = 9;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_client_session",
            |m: &CMsgSteamDatagramGameserverPing| { &m.legacy_client_session },
            |m: &mut CMsgSteamDatagramGameserverPing| { &mut m.legacy_client_session },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_steam_id",
            |m: &CMsgSteamDatagramGameserverPing| { &m.client_steam_id },
            |m: &mut CMsgSteamDatagramGameserverPing| { &mut m.client_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_timestamp",
            |m: &CMsgSteamDatagramGameserverPing| { &m.client_timestamp },
            |m: &mut CMsgSteamDatagramGameserverPing| { &mut m.client_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "router_timestamp",
            |m: &CMsgSteamDatagramGameserverPing| { &m.router_timestamp },
            |m: &mut CMsgSteamDatagramGameserverPing| { &mut m.router_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "router_gameserver_latency",
            |m: &CMsgSteamDatagramGameserverPing| { &m.router_gameserver_latency },
            |m: &mut CMsgSteamDatagramGameserverPing| { &mut m.router_gameserver_latency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_number_router",
            |m: &CMsgSteamDatagramGameserverPing| { &m.seq_number_router },
            |m: &mut CMsgSteamDatagramGameserverPing| { &mut m.seq_number_router },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_number_e2e",
            |m: &CMsgSteamDatagramGameserverPing| { &m.seq_number_e2e },
            |m: &mut CMsgSteamDatagramGameserverPing| { &mut m.seq_number_e2e },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "relay_session_id",
            |m: &CMsgSteamDatagramGameserverPing| { &m.relay_session_id },
            |m: &mut CMsgSteamDatagramGameserverPing| { &mut m.relay_session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamDatagramGameserverPing| { &m.connection_id },
            |m: &mut CMsgSteamDatagramGameserverPing| { &mut m.connection_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramGameserverPing>(
            "CMsgSteamDatagramGameserverPing",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramGameserverPing {
    const NAME: &'static str = "CMsgSteamDatagramGameserverPing";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.legacy_client_session = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    self.client_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                29 => {
                    self.client_timestamp = ::std::option::Option::Some(is.read_fixed32()?);
                },
                37 => {
                    self.router_timestamp = ::std::option::Option::Some(is.read_fixed32()?);
                },
                40 => {
                    self.router_gameserver_latency = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.seq_number_router = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.seq_number_e2e = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.relay_session_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                77 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.legacy_client_session {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.client_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_timestamp {
            my_size += 1 + 4;
        }
        if let Some(v) = self.router_timestamp {
            my_size += 1 + 4;
        }
        if let Some(v) = self.router_gameserver_latency {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.seq_number_router {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.seq_number_e2e {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.relay_session_id {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.legacy_client_session {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.client_steam_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.client_timestamp {
            os.write_fixed32(3, v)?;
        }
        if let Some(v) = self.router_timestamp {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.router_gameserver_latency {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.seq_number_router {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.seq_number_e2e {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.relay_session_id {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.connection_id {
            os.write_fixed32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramGameserverPing {
        CMsgSteamDatagramGameserverPing::new()
    }

    fn clear(&mut self) {
        self.legacy_client_session = ::std::option::Option::None;
        self.client_steam_id = ::std::option::Option::None;
        self.client_timestamp = ::std::option::Option::None;
        self.router_timestamp = ::std::option::Option::None;
        self.router_gameserver_latency = ::std::option::Option::None;
        self.seq_number_router = ::std::option::Option::None;
        self.seq_number_e2e = ::std::option::Option::None;
        self.relay_session_id = ::std::option::Option::None;
        self.connection_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramGameserverPing {
        static instance: CMsgSteamDatagramGameserverPing = CMsgSteamDatagramGameserverPing {
            legacy_client_session: ::std::option::Option::None,
            client_steam_id: ::std::option::Option::None,
            client_timestamp: ::std::option::Option::None,
            router_timestamp: ::std::option::Option::None,
            router_gameserver_latency: ::std::option::Option::None,
            seq_number_router: ::std::option::Option::None,
            seq_number_e2e: ::std::option::Option::None,
            relay_session_id: ::std::option::Option::None,
            connection_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramGameserverPing {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramGameserverPing").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramGameserverPing {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramGameserverPing {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramRelayToRelayPing)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramRelayToRelayPing {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayToRelayPing.request_timestamp)
    pub request_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayToRelayPing.request_date)
    pub request_date: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayToRelayPing.my_pop_id)
    pub my_pop_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayToRelayPing.your_pop_id)
    pub your_pop_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayToRelayPing.checksum)
    pub checksum: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramRelayToRelayPing.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramRelayToRelayPing {
    fn default() -> &'a CMsgSteamDatagramRelayToRelayPing {
        <CMsgSteamDatagramRelayToRelayPing as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramRelayToRelayPing {
    pub fn new() -> CMsgSteamDatagramRelayToRelayPing {
        ::std::default::Default::default()
    }

    // optional fixed32 request_timestamp = 1;

    pub fn request_timestamp(&self) -> u32 {
        self.request_timestamp.unwrap_or(0)
    }

    pub fn clear_request_timestamp(&mut self) {
        self.request_timestamp = ::std::option::Option::None;
    }

    pub fn has_request_timestamp(&self) -> bool {
        self.request_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_timestamp(&mut self, v: u32) {
        self.request_timestamp = ::std::option::Option::Some(v);
    }

    // optional fixed32 request_date = 2;

    pub fn request_date(&self) -> u32 {
        self.request_date.unwrap_or(0)
    }

    pub fn clear_request_date(&mut self) {
        self.request_date = ::std::option::Option::None;
    }

    pub fn has_request_date(&self) -> bool {
        self.request_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_date(&mut self, v: u32) {
        self.request_date = ::std::option::Option::Some(v);
    }

    // optional fixed32 my_pop_id = 3;

    pub fn my_pop_id(&self) -> u32 {
        self.my_pop_id.unwrap_or(0)
    }

    pub fn clear_my_pop_id(&mut self) {
        self.my_pop_id = ::std::option::Option::None;
    }

    pub fn has_my_pop_id(&self) -> bool {
        self.my_pop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_my_pop_id(&mut self, v: u32) {
        self.my_pop_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 your_pop_id = 4;

    pub fn your_pop_id(&self) -> u32 {
        self.your_pop_id.unwrap_or(0)
    }

    pub fn clear_your_pop_id(&mut self) {
        self.your_pop_id = ::std::option::Option::None;
    }

    pub fn has_your_pop_id(&self) -> bool {
        self.your_pop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_your_pop_id(&mut self, v: u32) {
        self.your_pop_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 checksum = 5;

    pub fn checksum(&self) -> u32 {
        self.checksum.unwrap_or(0)
    }

    pub fn clear_checksum(&mut self) {
        self.checksum = ::std::option::Option::None;
    }

    pub fn has_checksum(&self) -> bool {
        self.checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_checksum(&mut self, v: u32) {
        self.checksum = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "request_timestamp",
            |m: &CMsgSteamDatagramRelayToRelayPing| { &m.request_timestamp },
            |m: &mut CMsgSteamDatagramRelayToRelayPing| { &mut m.request_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "request_date",
            |m: &CMsgSteamDatagramRelayToRelayPing| { &m.request_date },
            |m: &mut CMsgSteamDatagramRelayToRelayPing| { &mut m.request_date },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "my_pop_id",
            |m: &CMsgSteamDatagramRelayToRelayPing| { &m.my_pop_id },
            |m: &mut CMsgSteamDatagramRelayToRelayPing| { &mut m.my_pop_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "your_pop_id",
            |m: &CMsgSteamDatagramRelayToRelayPing| { &m.your_pop_id },
            |m: &mut CMsgSteamDatagramRelayToRelayPing| { &mut m.your_pop_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "checksum",
            |m: &CMsgSteamDatagramRelayToRelayPing| { &m.checksum },
            |m: &mut CMsgSteamDatagramRelayToRelayPing| { &mut m.checksum },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramRelayToRelayPing>(
            "CMsgSteamDatagramRelayToRelayPing",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramRelayToRelayPing {
    const NAME: &'static str = "CMsgSteamDatagramRelayToRelayPing";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.request_timestamp = ::std::option::Option::Some(is.read_fixed32()?);
                },
                21 => {
                    self.request_date = ::std::option::Option::Some(is.read_fixed32()?);
                },
                29 => {
                    self.my_pop_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                37 => {
                    self.your_pop_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                45 => {
                    self.checksum = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.request_timestamp {
            my_size += 1 + 4;
        }
        if let Some(v) = self.request_date {
            my_size += 1 + 4;
        }
        if let Some(v) = self.my_pop_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.your_pop_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.checksum {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.request_timestamp {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.request_date {
            os.write_fixed32(2, v)?;
        }
        if let Some(v) = self.my_pop_id {
            os.write_fixed32(3, v)?;
        }
        if let Some(v) = self.your_pop_id {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.checksum {
            os.write_fixed32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramRelayToRelayPing {
        CMsgSteamDatagramRelayToRelayPing::new()
    }

    fn clear(&mut self) {
        self.request_timestamp = ::std::option::Option::None;
        self.request_date = ::std::option::Option::None;
        self.my_pop_id = ::std::option::Option::None;
        self.your_pop_id = ::std::option::Option::None;
        self.checksum = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramRelayToRelayPing {
        static instance: CMsgSteamDatagramRelayToRelayPing = CMsgSteamDatagramRelayToRelayPing {
            request_timestamp: ::std::option::Option::None,
            request_date: ::std::option::Option::None,
            my_pop_id: ::std::option::Option::None,
            your_pop_id: ::std::option::Option::None,
            checksum: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramRelayToRelayPing {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramRelayToRelayPing").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramRelayToRelayPing {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramRelayToRelayPing {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramSessionCryptInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramSessionCryptInfo {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramSessionCryptInfo.key_type)
    pub key_type: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_steam_datagram_session_crypt_info::EKeyType>>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramSessionCryptInfo.key_data)
    pub key_data: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramSessionCryptInfo.nonce)
    pub nonce: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramSessionCryptInfo.is_snp)
    pub is_snp: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramSessionCryptInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramSessionCryptInfo {
    fn default() -> &'a CMsgSteamDatagramSessionCryptInfo {
        <CMsgSteamDatagramSessionCryptInfo as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramSessionCryptInfo {
    pub fn new() -> CMsgSteamDatagramSessionCryptInfo {
        ::std::default::Default::default()
    }

    // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1;

    pub fn key_type(&self) -> cmsg_steam_datagram_session_crypt_info::EKeyType {
        match self.key_type {
            Some(e) => e.enum_value_or(cmsg_steam_datagram_session_crypt_info::EKeyType::INVALID),
            None => cmsg_steam_datagram_session_crypt_info::EKeyType::INVALID,
        }
    }

    pub fn clear_key_type(&mut self) {
        self.key_type = ::std::option::Option::None;
    }

    pub fn has_key_type(&self) -> bool {
        self.key_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_type(&mut self, v: cmsg_steam_datagram_session_crypt_info::EKeyType) {
        self.key_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional bytes key_data = 2;

    pub fn key_data(&self) -> &[u8] {
        match self.key_data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_key_data(&mut self) {
        self.key_data = ::std::option::Option::None;
    }

    pub fn has_key_data(&self) -> bool {
        self.key_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.key_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.key_data.is_none() {
            self.key_data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.key_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_key_data(&mut self) -> ::std::vec::Vec<u8> {
        self.key_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional fixed64 nonce = 3;

    pub fn nonce(&self) -> u64 {
        self.nonce.unwrap_or(0)
    }

    pub fn clear_nonce(&mut self) {
        self.nonce = ::std::option::Option::None;
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = ::std::option::Option::Some(v);
    }

    // optional bool is_snp = 4;

    pub fn is_snp(&self) -> bool {
        self.is_snp.unwrap_or(false)
    }

    pub fn clear_is_snp(&mut self) {
        self.is_snp = ::std::option::Option::None;
    }

    pub fn has_is_snp(&self) -> bool {
        self.is_snp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_snp(&mut self, v: bool) {
        self.is_snp = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key_type",
            |m: &CMsgSteamDatagramSessionCryptInfo| { &m.key_type },
            |m: &mut CMsgSteamDatagramSessionCryptInfo| { &mut m.key_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key_data",
            |m: &CMsgSteamDatagramSessionCryptInfo| { &m.key_data },
            |m: &mut CMsgSteamDatagramSessionCryptInfo| { &mut m.key_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "nonce",
            |m: &CMsgSteamDatagramSessionCryptInfo| { &m.nonce },
            |m: &mut CMsgSteamDatagramSessionCryptInfo| { &mut m.nonce },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_snp",
            |m: &CMsgSteamDatagramSessionCryptInfo| { &m.is_snp },
            |m: &mut CMsgSteamDatagramSessionCryptInfo| { &mut m.is_snp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramSessionCryptInfo>(
            "CMsgSteamDatagramSessionCryptInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramSessionCryptInfo {
    const NAME: &'static str = "CMsgSteamDatagramSessionCryptInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.key_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.key_data = ::std::option::Option::Some(is.read_bytes()?);
                },
                25 => {
                    self.nonce = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.is_snp = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key_type {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.key_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.nonce {
            my_size += 1 + 8;
        }
        if let Some(v) = self.is_snp {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key_type {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.key_data.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.nonce {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.is_snp {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramSessionCryptInfo {
        CMsgSteamDatagramSessionCryptInfo::new()
    }

    fn clear(&mut self) {
        self.key_type = ::std::option::Option::None;
        self.key_data = ::std::option::Option::None;
        self.nonce = ::std::option::Option::None;
        self.is_snp = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramSessionCryptInfo {
        static instance: CMsgSteamDatagramSessionCryptInfo = CMsgSteamDatagramSessionCryptInfo {
            key_type: ::std::option::Option::None,
            key_data: ::std::option::Option::None,
            nonce: ::std::option::Option::None,
            is_snp: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramSessionCryptInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramSessionCryptInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramSessionCryptInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramSessionCryptInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramSessionCryptInfo`
pub mod cmsg_steam_datagram_session_crypt_info {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgSteamDatagramSessionCryptInfo.EKeyType)
    pub enum EKeyType {
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramSessionCryptInfo.EKeyType.INVALID)
        INVALID = 0,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramSessionCryptInfo.EKeyType.CURVE25519)
        CURVE25519 = 1,
    }

    impl ::protobuf::Enum for EKeyType {
        const NAME: &'static str = "EKeyType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EKeyType> {
            match value {
                0 => ::std::option::Option::Some(EKeyType::INVALID),
                1 => ::std::option::Option::Some(EKeyType::CURVE25519),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EKeyType> {
            match str {
                "INVALID" => ::std::option::Option::Some(EKeyType::INVALID),
                "CURVE25519" => ::std::option::Option::Some(EKeyType::CURVE25519),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EKeyType] = &[
            EKeyType::INVALID,
            EKeyType::CURVE25519,
        ];
    }

    impl ::protobuf::EnumFull for EKeyType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgSteamDatagramSessionCryptInfo.EKeyType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for EKeyType {
        fn default() -> Self {
            EKeyType::INVALID
        }
    }

    impl EKeyType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EKeyType>("CMsgSteamDatagramSessionCryptInfo.EKeyType")
        }
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramSessionCryptInfoSigned)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramSessionCryptInfoSigned {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramSessionCryptInfoSigned.info)
    pub info: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramSessionCryptInfoSigned.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramSessionCryptInfoSigned.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramSessionCryptInfoSigned {
    fn default() -> &'a CMsgSteamDatagramSessionCryptInfoSigned {
        <CMsgSteamDatagramSessionCryptInfoSigned as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramSessionCryptInfoSigned {
    pub fn new() -> CMsgSteamDatagramSessionCryptInfoSigned {
        ::std::default::Default::default()
    }

    // optional bytes info = 1;

    pub fn info(&self) -> &[u8] {
        match self.info.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_info(&mut self) {
        self.info = ::std::option::Option::None;
    }

    pub fn has_info(&self) -> bool {
        self.info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: ::std::vec::Vec<u8>) {
        self.info = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.info.is_none() {
            self.info = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.info.as_mut().unwrap()
    }

    // Take field
    pub fn take_info(&mut self) -> ::std::vec::Vec<u8> {
        self.info.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "info",
            |m: &CMsgSteamDatagramSessionCryptInfoSigned| { &m.info },
            |m: &mut CMsgSteamDatagramSessionCryptInfoSigned| { &mut m.info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &CMsgSteamDatagramSessionCryptInfoSigned| { &m.signature },
            |m: &mut CMsgSteamDatagramSessionCryptInfoSigned| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramSessionCryptInfoSigned>(
            "CMsgSteamDatagramSessionCryptInfoSigned",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramSessionCryptInfoSigned {
    const NAME: &'static str = "CMsgSteamDatagramSessionCryptInfoSigned";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.info = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.info.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.info.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramSessionCryptInfoSigned {
        CMsgSteamDatagramSessionCryptInfoSigned::new()
    }

    fn clear(&mut self) {
        self.info = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramSessionCryptInfoSigned {
        static instance: CMsgSteamDatagramSessionCryptInfoSigned = CMsgSteamDatagramSessionCryptInfoSigned {
            info: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramSessionCryptInfoSigned {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramSessionCryptInfoSigned").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramSessionCryptInfoSigned {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramSessionCryptInfoSigned {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramGameserverSessionRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramGameserverSessionRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverSessionRequest.ticket)
    pub ticket: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverSessionRequest.challenge_time)
    pub challenge_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverSessionRequest.challenge)
    pub challenge: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverSessionRequest.client_connection_id)
    pub client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverSessionRequest.server_connection_id)
    pub server_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverSessionRequest.network_config_version)
    pub network_config_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverSessionRequest.protocol_version)
    pub protocol_version: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramGameserverSessionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramGameserverSessionRequest {
    fn default() -> &'a CMsgSteamDatagramGameserverSessionRequest {
        <CMsgSteamDatagramGameserverSessionRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramGameserverSessionRequest {
    pub fn new() -> CMsgSteamDatagramGameserverSessionRequest {
        ::std::default::Default::default()
    }

    // optional bytes ticket = 1;

    pub fn ticket(&self) -> &[u8] {
        match self.ticket.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_ticket(&mut self) {
        self.ticket = ::std::option::Option::None;
    }

    pub fn has_ticket(&self) -> bool {
        self.ticket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ticket(&mut self, v: ::std::vec::Vec<u8>) {
        self.ticket = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ticket(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.ticket.is_none() {
            self.ticket = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.ticket.as_mut().unwrap()
    }

    // Take field
    pub fn take_ticket(&mut self) -> ::std::vec::Vec<u8> {
        self.ticket.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional fixed32 challenge_time = 3;

    pub fn challenge_time(&self) -> u32 {
        self.challenge_time.unwrap_or(0)
    }

    pub fn clear_challenge_time(&mut self) {
        self.challenge_time = ::std::option::Option::None;
    }

    pub fn has_challenge_time(&self) -> bool {
        self.challenge_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge_time(&mut self, v: u32) {
        self.challenge_time = ::std::option::Option::Some(v);
    }

    // optional fixed64 challenge = 4;

    pub fn challenge(&self) -> u64 {
        self.challenge.unwrap_or(0)
    }

    pub fn clear_challenge(&mut self) {
        self.challenge = ::std::option::Option::None;
    }

    pub fn has_challenge(&self) -> bool {
        self.challenge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: u64) {
        self.challenge = ::std::option::Option::Some(v);
    }

    // optional fixed32 client_connection_id = 5;

    pub fn client_connection_id(&self) -> u32 {
        self.client_connection_id.unwrap_or(0)
    }

    pub fn clear_client_connection_id(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
    }

    pub fn has_client_connection_id(&self) -> bool {
        self.client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_connection_id(&mut self, v: u32) {
        self.client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 server_connection_id = 8;

    pub fn server_connection_id(&self) -> u32 {
        self.server_connection_id.unwrap_or(0)
    }

    pub fn clear_server_connection_id(&mut self) {
        self.server_connection_id = ::std::option::Option::None;
    }

    pub fn has_server_connection_id(&self) -> bool {
        self.server_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_connection_id(&mut self, v: u32) {
        self.server_connection_id = ::std::option::Option::Some(v);
    }

    // optional uint32 network_config_version = 6;

    pub fn network_config_version(&self) -> u32 {
        self.network_config_version.unwrap_or(0)
    }

    pub fn clear_network_config_version(&mut self) {
        self.network_config_version = ::std::option::Option::None;
    }

    pub fn has_network_config_version(&self) -> bool {
        self.network_config_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_network_config_version(&mut self, v: u32) {
        self.network_config_version = ::std::option::Option::Some(v);
    }

    // optional uint32 protocol_version = 7;

    pub fn protocol_version(&self) -> u32 {
        self.protocol_version.unwrap_or(0)
    }

    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = ::std::option::Option::None;
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: u32) {
        self.protocol_version = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ticket",
            |m: &CMsgSteamDatagramGameserverSessionRequest| { &m.ticket },
            |m: &mut CMsgSteamDatagramGameserverSessionRequest| { &mut m.ticket },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge_time",
            |m: &CMsgSteamDatagramGameserverSessionRequest| { &m.challenge_time },
            |m: &mut CMsgSteamDatagramGameserverSessionRequest| { &mut m.challenge_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge",
            |m: &CMsgSteamDatagramGameserverSessionRequest| { &m.challenge },
            |m: &mut CMsgSteamDatagramGameserverSessionRequest| { &mut m.challenge },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_connection_id",
            |m: &CMsgSteamDatagramGameserverSessionRequest| { &m.client_connection_id },
            |m: &mut CMsgSteamDatagramGameserverSessionRequest| { &mut m.client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_connection_id",
            |m: &CMsgSteamDatagramGameserverSessionRequest| { &m.server_connection_id },
            |m: &mut CMsgSteamDatagramGameserverSessionRequest| { &mut m.server_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "network_config_version",
            |m: &CMsgSteamDatagramGameserverSessionRequest| { &m.network_config_version },
            |m: &mut CMsgSteamDatagramGameserverSessionRequest| { &mut m.network_config_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "protocol_version",
            |m: &CMsgSteamDatagramGameserverSessionRequest| { &m.protocol_version },
            |m: &mut CMsgSteamDatagramGameserverSessionRequest| { &mut m.protocol_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramGameserverSessionRequest>(
            "CMsgSteamDatagramGameserverSessionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramGameserverSessionRequest {
    const NAME: &'static str = "CMsgSteamDatagramGameserverSessionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ticket = ::std::option::Option::Some(is.read_bytes()?);
                },
                29 => {
                    self.challenge_time = ::std::option::Option::Some(is.read_fixed32()?);
                },
                33 => {
                    self.challenge = ::std::option::Option::Some(is.read_fixed64()?);
                },
                45 => {
                    self.client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                69 => {
                    self.server_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                48 => {
                    self.network_config_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.protocol_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ticket.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.challenge_time {
            my_size += 1 + 4;
        }
        if let Some(v) = self.challenge {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.server_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.network_config_version {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.protocol_version {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ticket.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.challenge_time {
            os.write_fixed32(3, v)?;
        }
        if let Some(v) = self.challenge {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.client_connection_id {
            os.write_fixed32(5, v)?;
        }
        if let Some(v) = self.server_connection_id {
            os.write_fixed32(8, v)?;
        }
        if let Some(v) = self.network_config_version {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.protocol_version {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramGameserverSessionRequest {
        CMsgSteamDatagramGameserverSessionRequest::new()
    }

    fn clear(&mut self) {
        self.ticket = ::std::option::Option::None;
        self.challenge_time = ::std::option::Option::None;
        self.challenge = ::std::option::Option::None;
        self.client_connection_id = ::std::option::Option::None;
        self.server_connection_id = ::std::option::Option::None;
        self.network_config_version = ::std::option::Option::None;
        self.protocol_version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramGameserverSessionRequest {
        static instance: CMsgSteamDatagramGameserverSessionRequest = CMsgSteamDatagramGameserverSessionRequest {
            ticket: ::std::option::Option::None,
            challenge_time: ::std::option::Option::None,
            challenge: ::std::option::Option::None,
            client_connection_id: ::std::option::Option::None,
            server_connection_id: ::std::option::Option::None,
            network_config_version: ::std::option::Option::None,
            protocol_version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramGameserverSessionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramGameserverSessionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramGameserverSessionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramGameserverSessionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramGameserverSessionEstablished)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramGameserverSessionEstablished {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverSessionEstablished.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverSessionEstablished.gameserver_steam_id)
    pub gameserver_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverSessionEstablished.seconds_until_shutdown)
    pub seconds_until_shutdown: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverSessionEstablished.legacy_relay_session_id)
    pub legacy_relay_session_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramGameserverSessionEstablished.seq_num_r2c)
    pub seq_num_r2c: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramGameserverSessionEstablished.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramGameserverSessionEstablished {
    fn default() -> &'a CMsgSteamDatagramGameserverSessionEstablished {
        <CMsgSteamDatagramGameserverSessionEstablished as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramGameserverSessionEstablished {
    pub fn new() -> CMsgSteamDatagramGameserverSessionEstablished {
        ::std::default::Default::default()
    }

    // optional fixed32 connection_id = 1;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 gameserver_steam_id = 3;

    pub fn gameserver_steam_id(&self) -> u64 {
        self.gameserver_steam_id.unwrap_or(0)
    }

    pub fn clear_gameserver_steam_id(&mut self) {
        self.gameserver_steam_id = ::std::option::Option::None;
    }

    pub fn has_gameserver_steam_id(&self) -> bool {
        self.gameserver_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameserver_steam_id(&mut self, v: u64) {
        self.gameserver_steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_until_shutdown = 4;

    pub fn seconds_until_shutdown(&self) -> u32 {
        self.seconds_until_shutdown.unwrap_or(0)
    }

    pub fn clear_seconds_until_shutdown(&mut self) {
        self.seconds_until_shutdown = ::std::option::Option::None;
    }

    pub fn has_seconds_until_shutdown(&self) -> bool {
        self.seconds_until_shutdown.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_until_shutdown(&mut self, v: u32) {
        self.seconds_until_shutdown = ::std::option::Option::Some(v);
    }

    // optional uint32 legacy_relay_session_id = 5;

    pub fn legacy_relay_session_id(&self) -> u32 {
        self.legacy_relay_session_id.unwrap_or(0)
    }

    pub fn clear_legacy_relay_session_id(&mut self) {
        self.legacy_relay_session_id = ::std::option::Option::None;
    }

    pub fn has_legacy_relay_session_id(&self) -> bool {
        self.legacy_relay_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_relay_session_id(&mut self, v: u32) {
        self.legacy_relay_session_id = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_r2c = 6;

    pub fn seq_num_r2c(&self) -> u32 {
        self.seq_num_r2c.unwrap_or(0)
    }

    pub fn clear_seq_num_r2c(&mut self) {
        self.seq_num_r2c = ::std::option::Option::None;
    }

    pub fn has_seq_num_r2c(&self) -> bool {
        self.seq_num_r2c.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_r2c(&mut self, v: u32) {
        self.seq_num_r2c = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamDatagramGameserverSessionEstablished| { &m.connection_id },
            |m: &mut CMsgSteamDatagramGameserverSessionEstablished| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gameserver_steam_id",
            |m: &CMsgSteamDatagramGameserverSessionEstablished| { &m.gameserver_steam_id },
            |m: &mut CMsgSteamDatagramGameserverSessionEstablished| { &mut m.gameserver_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_until_shutdown",
            |m: &CMsgSteamDatagramGameserverSessionEstablished| { &m.seconds_until_shutdown },
            |m: &mut CMsgSteamDatagramGameserverSessionEstablished| { &mut m.seconds_until_shutdown },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_relay_session_id",
            |m: &CMsgSteamDatagramGameserverSessionEstablished| { &m.legacy_relay_session_id },
            |m: &mut CMsgSteamDatagramGameserverSessionEstablished| { &mut m.legacy_relay_session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_r2c",
            |m: &CMsgSteamDatagramGameserverSessionEstablished| { &m.seq_num_r2c },
            |m: &mut CMsgSteamDatagramGameserverSessionEstablished| { &mut m.seq_num_r2c },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramGameserverSessionEstablished>(
            "CMsgSteamDatagramGameserverSessionEstablished",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramGameserverSessionEstablished {
    const NAME: &'static str = "CMsgSteamDatagramGameserverSessionEstablished";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                25 => {
                    self.gameserver_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.seconds_until_shutdown = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.legacy_relay_session_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.seq_num_r2c = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.gameserver_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.seconds_until_shutdown {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.legacy_relay_session_id {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.seq_num_r2c {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.gameserver_steam_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.seconds_until_shutdown {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.legacy_relay_session_id {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.seq_num_r2c {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramGameserverSessionEstablished {
        CMsgSteamDatagramGameserverSessionEstablished::new()
    }

    fn clear(&mut self) {
        self.connection_id = ::std::option::Option::None;
        self.gameserver_steam_id = ::std::option::Option::None;
        self.seconds_until_shutdown = ::std::option::Option::None;
        self.legacy_relay_session_id = ::std::option::Option::None;
        self.seq_num_r2c = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramGameserverSessionEstablished {
        static instance: CMsgSteamDatagramGameserverSessionEstablished = CMsgSteamDatagramGameserverSessionEstablished {
            connection_id: ::std::option::Option::None,
            gameserver_steam_id: ::std::option::Option::None,
            seconds_until_shutdown: ::std::option::Option::None,
            legacy_relay_session_id: ::std::option::Option::None,
            seq_num_r2c: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramGameserverSessionEstablished {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramGameserverSessionEstablished").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramGameserverSessionEstablished {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramGameserverSessionEstablished {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramNoSessionRelayToClient)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramNoSessionRelayToClient {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoSessionRelayToClient.legacy_relay_session_id)
    pub legacy_relay_session_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoSessionRelayToClient.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoSessionRelayToClient.your_public_ip)
    pub your_public_ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoSessionRelayToClient.server_time)
    pub server_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoSessionRelayToClient.challenge)
    pub challenge: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoSessionRelayToClient.seconds_until_shutdown)
    pub seconds_until_shutdown: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramNoSessionRelayToClient.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramNoSessionRelayToClient {
    fn default() -> &'a CMsgSteamDatagramNoSessionRelayToClient {
        <CMsgSteamDatagramNoSessionRelayToClient as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramNoSessionRelayToClient {
    pub fn new() -> CMsgSteamDatagramNoSessionRelayToClient {
        ::std::default::Default::default()
    }

    // optional uint32 legacy_relay_session_id = 1;

    pub fn legacy_relay_session_id(&self) -> u32 {
        self.legacy_relay_session_id.unwrap_or(0)
    }

    pub fn clear_legacy_relay_session_id(&mut self) {
        self.legacy_relay_session_id = ::std::option::Option::None;
    }

    pub fn has_legacy_relay_session_id(&self) -> bool {
        self.legacy_relay_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_relay_session_id(&mut self, v: u32) {
        self.legacy_relay_session_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 connection_id = 7;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 your_public_ip = 2;

    pub fn your_public_ip(&self) -> u32 {
        self.your_public_ip.unwrap_or(0)
    }

    pub fn clear_your_public_ip(&mut self) {
        self.your_public_ip = ::std::option::Option::None;
    }

    pub fn has_your_public_ip(&self) -> bool {
        self.your_public_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_your_public_ip(&mut self, v: u32) {
        self.your_public_ip = ::std::option::Option::Some(v);
    }

    // optional fixed32 server_time = 3;

    pub fn server_time(&self) -> u32 {
        self.server_time.unwrap_or(0)
    }

    pub fn clear_server_time(&mut self) {
        self.server_time = ::std::option::Option::None;
    }

    pub fn has_server_time(&self) -> bool {
        self.server_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_time(&mut self, v: u32) {
        self.server_time = ::std::option::Option::Some(v);
    }

    // optional fixed64 challenge = 4;

    pub fn challenge(&self) -> u64 {
        self.challenge.unwrap_or(0)
    }

    pub fn clear_challenge(&mut self) {
        self.challenge = ::std::option::Option::None;
    }

    pub fn has_challenge(&self) -> bool {
        self.challenge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: u64) {
        self.challenge = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_until_shutdown = 5;

    pub fn seconds_until_shutdown(&self) -> u32 {
        self.seconds_until_shutdown.unwrap_or(0)
    }

    pub fn clear_seconds_until_shutdown(&mut self) {
        self.seconds_until_shutdown = ::std::option::Option::None;
    }

    pub fn has_seconds_until_shutdown(&self) -> bool {
        self.seconds_until_shutdown.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_until_shutdown(&mut self, v: u32) {
        self.seconds_until_shutdown = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_relay_session_id",
            |m: &CMsgSteamDatagramNoSessionRelayToClient| { &m.legacy_relay_session_id },
            |m: &mut CMsgSteamDatagramNoSessionRelayToClient| { &mut m.legacy_relay_session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamDatagramNoSessionRelayToClient| { &m.connection_id },
            |m: &mut CMsgSteamDatagramNoSessionRelayToClient| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "your_public_ip",
            |m: &CMsgSteamDatagramNoSessionRelayToClient| { &m.your_public_ip },
            |m: &mut CMsgSteamDatagramNoSessionRelayToClient| { &mut m.your_public_ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_time",
            |m: &CMsgSteamDatagramNoSessionRelayToClient| { &m.server_time },
            |m: &mut CMsgSteamDatagramNoSessionRelayToClient| { &mut m.server_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge",
            |m: &CMsgSteamDatagramNoSessionRelayToClient| { &m.challenge },
            |m: &mut CMsgSteamDatagramNoSessionRelayToClient| { &mut m.challenge },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_until_shutdown",
            |m: &CMsgSteamDatagramNoSessionRelayToClient| { &m.seconds_until_shutdown },
            |m: &mut CMsgSteamDatagramNoSessionRelayToClient| { &mut m.seconds_until_shutdown },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramNoSessionRelayToClient>(
            "CMsgSteamDatagramNoSessionRelayToClient",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramNoSessionRelayToClient {
    const NAME: &'static str = "CMsgSteamDatagramNoSessionRelayToClient";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.legacy_relay_session_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                61 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                21 => {
                    self.your_public_ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                29 => {
                    self.server_time = ::std::option::Option::Some(is.read_fixed32()?);
                },
                33 => {
                    self.challenge = ::std::option::Option::Some(is.read_fixed64()?);
                },
                40 => {
                    self.seconds_until_shutdown = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.legacy_relay_session_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.your_public_ip {
            my_size += 1 + 4;
        }
        if let Some(v) = self.server_time {
            my_size += 1 + 4;
        }
        if let Some(v) = self.challenge {
            my_size += 1 + 8;
        }
        if let Some(v) = self.seconds_until_shutdown {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.legacy_relay_session_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.connection_id {
            os.write_fixed32(7, v)?;
        }
        if let Some(v) = self.your_public_ip {
            os.write_fixed32(2, v)?;
        }
        if let Some(v) = self.server_time {
            os.write_fixed32(3, v)?;
        }
        if let Some(v) = self.challenge {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.seconds_until_shutdown {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramNoSessionRelayToClient {
        CMsgSteamDatagramNoSessionRelayToClient::new()
    }

    fn clear(&mut self) {
        self.legacy_relay_session_id = ::std::option::Option::None;
        self.connection_id = ::std::option::Option::None;
        self.your_public_ip = ::std::option::Option::None;
        self.server_time = ::std::option::Option::None;
        self.challenge = ::std::option::Option::None;
        self.seconds_until_shutdown = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramNoSessionRelayToClient {
        static instance: CMsgSteamDatagramNoSessionRelayToClient = CMsgSteamDatagramNoSessionRelayToClient {
            legacy_relay_session_id: ::std::option::Option::None,
            connection_id: ::std::option::Option::None,
            your_public_ip: ::std::option::Option::None,
            server_time: ::std::option::Option::None,
            challenge: ::std::option::Option::None,
            seconds_until_shutdown: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramNoSessionRelayToClient {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramNoSessionRelayToClient").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramNoSessionRelayToClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramNoSessionRelayToClient {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramNoSessionRelayToServer)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramNoSessionRelayToServer {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoSessionRelayToServer.relay_session_id)
    pub relay_session_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoSessionRelayToServer.client_connection_id)
    pub client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoSessionRelayToServer.server_connection_id)
    pub server_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoSessionRelayToServer.kludge_pad)
    pub kludge_pad: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramNoSessionRelayToServer.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramNoSessionRelayToServer {
    fn default() -> &'a CMsgSteamDatagramNoSessionRelayToServer {
        <CMsgSteamDatagramNoSessionRelayToServer as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramNoSessionRelayToServer {
    pub fn new() -> CMsgSteamDatagramNoSessionRelayToServer {
        ::std::default::Default::default()
    }

    // optional uint32 relay_session_id = 1;

    pub fn relay_session_id(&self) -> u32 {
        self.relay_session_id.unwrap_or(0)
    }

    pub fn clear_relay_session_id(&mut self) {
        self.relay_session_id = ::std::option::Option::None;
    }

    pub fn has_relay_session_id(&self) -> bool {
        self.relay_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_relay_session_id(&mut self, v: u32) {
        self.relay_session_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 client_connection_id = 7;

    pub fn client_connection_id(&self) -> u32 {
        self.client_connection_id.unwrap_or(0)
    }

    pub fn clear_client_connection_id(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
    }

    pub fn has_client_connection_id(&self) -> bool {
        self.client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_connection_id(&mut self, v: u32) {
        self.client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 server_connection_id = 8;

    pub fn server_connection_id(&self) -> u32 {
        self.server_connection_id.unwrap_or(0)
    }

    pub fn clear_server_connection_id(&mut self) {
        self.server_connection_id = ::std::option::Option::None;
    }

    pub fn has_server_connection_id(&self) -> bool {
        self.server_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_connection_id(&mut self, v: u32) {
        self.server_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 kludge_pad = 99;

    pub fn kludge_pad(&self) -> u64 {
        self.kludge_pad.unwrap_or(0)
    }

    pub fn clear_kludge_pad(&mut self) {
        self.kludge_pad = ::std::option::Option::None;
    }

    pub fn has_kludge_pad(&self) -> bool {
        self.kludge_pad.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kludge_pad(&mut self, v: u64) {
        self.kludge_pad = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "relay_session_id",
            |m: &CMsgSteamDatagramNoSessionRelayToServer| { &m.relay_session_id },
            |m: &mut CMsgSteamDatagramNoSessionRelayToServer| { &mut m.relay_session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_connection_id",
            |m: &CMsgSteamDatagramNoSessionRelayToServer| { &m.client_connection_id },
            |m: &mut CMsgSteamDatagramNoSessionRelayToServer| { &mut m.client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_connection_id",
            |m: &CMsgSteamDatagramNoSessionRelayToServer| { &m.server_connection_id },
            |m: &mut CMsgSteamDatagramNoSessionRelayToServer| { &mut m.server_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "kludge_pad",
            |m: &CMsgSteamDatagramNoSessionRelayToServer| { &m.kludge_pad },
            |m: &mut CMsgSteamDatagramNoSessionRelayToServer| { &mut m.kludge_pad },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramNoSessionRelayToServer>(
            "CMsgSteamDatagramNoSessionRelayToServer",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramNoSessionRelayToServer {
    const NAME: &'static str = "CMsgSteamDatagramNoSessionRelayToServer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.relay_session_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                61 => {
                    self.client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                69 => {
                    self.server_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                793 => {
                    self.kludge_pad = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.relay_session_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.server_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.kludge_pad {
            my_size += 2 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.relay_session_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.client_connection_id {
            os.write_fixed32(7, v)?;
        }
        if let Some(v) = self.server_connection_id {
            os.write_fixed32(8, v)?;
        }
        if let Some(v) = self.kludge_pad {
            os.write_fixed64(99, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramNoSessionRelayToServer {
        CMsgSteamDatagramNoSessionRelayToServer::new()
    }

    fn clear(&mut self) {
        self.relay_session_id = ::std::option::Option::None;
        self.client_connection_id = ::std::option::Option::None;
        self.server_connection_id = ::std::option::Option::None;
        self.kludge_pad = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramNoSessionRelayToServer {
        static instance: CMsgSteamDatagramNoSessionRelayToServer = CMsgSteamDatagramNoSessionRelayToServer {
            relay_session_id: ::std::option::Option::None,
            client_connection_id: ::std::option::Option::None,
            server_connection_id: ::std::option::Option::None,
            kludge_pad: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramNoSessionRelayToServer {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramNoSessionRelayToServer").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramNoSessionRelayToServer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramNoSessionRelayToServer {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramDiagnostic)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramDiagnostic {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramDiagnostic.severity)
    pub severity: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramDiagnostic.text)
    pub text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramDiagnostic.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramDiagnostic {
    fn default() -> &'a CMsgSteamDatagramDiagnostic {
        <CMsgSteamDatagramDiagnostic as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramDiagnostic {
    pub fn new() -> CMsgSteamDatagramDiagnostic {
        ::std::default::Default::default()
    }

    // optional uint32 severity = 1;

    pub fn severity(&self) -> u32 {
        self.severity.unwrap_or(0)
    }

    pub fn clear_severity(&mut self) {
        self.severity = ::std::option::Option::None;
    }

    pub fn has_severity(&self) -> bool {
        self.severity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_severity(&mut self, v: u32) {
        self.severity = ::std::option::Option::Some(v);
    }

    // optional string text = 2;

    pub fn text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_text(&mut self) {
        self.text = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "severity",
            |m: &CMsgSteamDatagramDiagnostic| { &m.severity },
            |m: &mut CMsgSteamDatagramDiagnostic| { &mut m.severity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "text",
            |m: &CMsgSteamDatagramDiagnostic| { &m.text },
            |m: &mut CMsgSteamDatagramDiagnostic| { &mut m.text },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramDiagnostic>(
            "CMsgSteamDatagramDiagnostic",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramDiagnostic {
    const NAME: &'static str = "CMsgSteamDatagramDiagnostic";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.severity = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.severity {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.severity {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.text.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramDiagnostic {
        CMsgSteamDatagramDiagnostic::new()
    }

    fn clear(&mut self) {
        self.severity = ::std::option::Option::None;
        self.text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramDiagnostic {
        static instance: CMsgSteamDatagramDiagnostic = CMsgSteamDatagramDiagnostic {
            severity: ::std::option::Option::None,
            text: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramDiagnostic {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramDiagnostic").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramDiagnostic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramDiagnostic {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramDataCenterState)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramDataCenterState {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramDataCenterState.data_centers)
    pub data_centers: ::std::vec::Vec<cmsg_steam_datagram_data_center_state::DataCenter>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramDataCenterState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramDataCenterState {
    fn default() -> &'a CMsgSteamDatagramDataCenterState {
        <CMsgSteamDatagramDataCenterState as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramDataCenterState {
    pub fn new() -> CMsgSteamDatagramDataCenterState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data_centers",
            |m: &CMsgSteamDatagramDataCenterState| { &m.data_centers },
            |m: &mut CMsgSteamDatagramDataCenterState| { &mut m.data_centers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramDataCenterState>(
            "CMsgSteamDatagramDataCenterState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramDataCenterState {
    const NAME: &'static str = "CMsgSteamDatagramDataCenterState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_centers.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.data_centers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.data_centers {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramDataCenterState {
        CMsgSteamDatagramDataCenterState::new()
    }

    fn clear(&mut self) {
        self.data_centers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramDataCenterState {
        static instance: CMsgSteamDatagramDataCenterState = CMsgSteamDatagramDataCenterState {
            data_centers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramDataCenterState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramDataCenterState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramDataCenterState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramDataCenterState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramDataCenterState`
pub mod cmsg_steam_datagram_data_center_state {
    // @@protoc_insertion_point(message:CMsgSteamDatagramDataCenterState.Server)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Server {
        // message fields
        // @@protoc_insertion_point(field:CMsgSteamDatagramDataCenterState.Server.address)
        pub address: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramDataCenterState.Server.ping_ms)
        pub ping_ms: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgSteamDatagramDataCenterState.Server.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Server {
        fn default() -> &'a Server {
            <Server as ::protobuf::Message>::default_instance()
        }
    }

    impl Server {
        pub fn new() -> Server {
            ::std::default::Default::default()
        }

        // optional string address = 1;

        pub fn address(&self) -> &str {
            match self.address.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_address(&mut self) {
            self.address = ::std::option::Option::None;
        }

        pub fn has_address(&self) -> bool {
            self.address.is_some()
        }

        // Param is passed by value, moved
        pub fn set_address(&mut self, v: ::std::string::String) {
            self.address = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_address(&mut self) -> &mut ::std::string::String {
            if self.address.is_none() {
                self.address = ::std::option::Option::Some(::std::string::String::new());
            }
            self.address.as_mut().unwrap()
        }

        // Take field
        pub fn take_address(&mut self) -> ::std::string::String {
            self.address.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 ping_ms = 2;

        pub fn ping_ms(&self) -> u32 {
            self.ping_ms.unwrap_or(0)
        }

        pub fn clear_ping_ms(&mut self) {
            self.ping_ms = ::std::option::Option::None;
        }

        pub fn has_ping_ms(&self) -> bool {
            self.ping_ms.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ping_ms(&mut self, v: u32) {
            self.ping_ms = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "address",
                |m: &Server| { &m.address },
                |m: &mut Server| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "ping_ms",
                |m: &Server| { &m.ping_ms },
                |m: &mut Server| { &mut m.ping_ms },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Server>(
                "CMsgSteamDatagramDataCenterState.Server",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Server {
        const NAME: &'static str = "Server";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.address = ::std::option::Option::Some(is.read_string()?);
                    },
                    16 => {
                        self.ping_ms = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.address.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.ping_ms {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.address.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.ping_ms {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Server {
            Server::new()
        }

        fn clear(&mut self) {
            self.address = ::std::option::Option::None;
            self.ping_ms = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Server {
            static instance: Server = Server {
                address: ::std::option::Option::None,
                ping_ms: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Server {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgSteamDatagramDataCenterState.Server").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Server {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Server {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CMsgSteamDatagramDataCenterState.DataCenter)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DataCenter {
        // message fields
        // @@protoc_insertion_point(field:CMsgSteamDatagramDataCenterState.DataCenter.code)
        pub code: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramDataCenterState.DataCenter.server_sample)
        pub server_sample: ::std::vec::Vec<Server>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramDataCenterState.DataCenter.relay_sample)
        pub relay_sample: ::std::vec::Vec<Server>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgSteamDatagramDataCenterState.DataCenter.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DataCenter {
        fn default() -> &'a DataCenter {
            <DataCenter as ::protobuf::Message>::default_instance()
        }
    }

    impl DataCenter {
        pub fn new() -> DataCenter {
            ::std::default::Default::default()
        }

        // optional string code = 1;

        pub fn code(&self) -> &str {
            match self.code.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_code(&mut self) {
            self.code = ::std::option::Option::None;
        }

        pub fn has_code(&self) -> bool {
            self.code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_code(&mut self, v: ::std::string::String) {
            self.code = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_code(&mut self) -> &mut ::std::string::String {
            if self.code.is_none() {
                self.code = ::std::option::Option::Some(::std::string::String::new());
            }
            self.code.as_mut().unwrap()
        }

        // Take field
        pub fn take_code(&mut self) -> ::std::string::String {
            self.code.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "code",
                |m: &DataCenter| { &m.code },
                |m: &mut DataCenter| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "server_sample",
                |m: &DataCenter| { &m.server_sample },
                |m: &mut DataCenter| { &mut m.server_sample },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "relay_sample",
                |m: &DataCenter| { &m.relay_sample },
                |m: &mut DataCenter| { &mut m.relay_sample },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataCenter>(
                "CMsgSteamDatagramDataCenterState.DataCenter",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for DataCenter {
        const NAME: &'static str = "DataCenter";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.code = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.server_sample.push(is.read_message()?);
                    },
                    26 => {
                        self.relay_sample.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.code.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            for value in &self.server_sample {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            for value in &self.relay_sample {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.code.as_ref() {
                os.write_string(1, v)?;
            }
            for v in &self.server_sample {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            for v in &self.relay_sample {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DataCenter {
            DataCenter::new()
        }

        fn clear(&mut self) {
            self.code = ::std::option::Option::None;
            self.server_sample.clear();
            self.relay_sample.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DataCenter {
            static instance: DataCenter = DataCenter {
                code: ::std::option::Option::None,
                server_sample: ::std::vec::Vec::new(),
                relay_sample: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for DataCenter {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgSteamDatagramDataCenterState.DataCenter").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for DataCenter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DataCenter {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramLinkInstantaneousStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramLinkInstantaneousStats {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkInstantaneousStats.out_packets_per_sec_x10)
    pub out_packets_per_sec_x10: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkInstantaneousStats.out_bytes_per_sec)
    pub out_bytes_per_sec: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkInstantaneousStats.in_packets_per_sec_x10)
    pub in_packets_per_sec_x10: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkInstantaneousStats.in_bytes_per_sec)
    pub in_bytes_per_sec: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkInstantaneousStats.ping_ms)
    pub ping_ms: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkInstantaneousStats.packets_dropped_pct)
    pub packets_dropped_pct: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkInstantaneousStats.packets_weird_sequence_pct)
    pub packets_weird_sequence_pct: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkInstantaneousStats.peak_jitter_usec)
    pub peak_jitter_usec: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramLinkInstantaneousStats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramLinkInstantaneousStats {
    fn default() -> &'a CMsgSteamDatagramLinkInstantaneousStats {
        <CMsgSteamDatagramLinkInstantaneousStats as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramLinkInstantaneousStats {
    pub fn new() -> CMsgSteamDatagramLinkInstantaneousStats {
        ::std::default::Default::default()
    }

    // optional uint32 out_packets_per_sec_x10 = 1;

    pub fn out_packets_per_sec_x10(&self) -> u32 {
        self.out_packets_per_sec_x10.unwrap_or(0)
    }

    pub fn clear_out_packets_per_sec_x10(&mut self) {
        self.out_packets_per_sec_x10 = ::std::option::Option::None;
    }

    pub fn has_out_packets_per_sec_x10(&self) -> bool {
        self.out_packets_per_sec_x10.is_some()
    }

    // Param is passed by value, moved
    pub fn set_out_packets_per_sec_x10(&mut self, v: u32) {
        self.out_packets_per_sec_x10 = ::std::option::Option::Some(v);
    }

    // optional uint32 out_bytes_per_sec = 2;

    pub fn out_bytes_per_sec(&self) -> u32 {
        self.out_bytes_per_sec.unwrap_or(0)
    }

    pub fn clear_out_bytes_per_sec(&mut self) {
        self.out_bytes_per_sec = ::std::option::Option::None;
    }

    pub fn has_out_bytes_per_sec(&self) -> bool {
        self.out_bytes_per_sec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_out_bytes_per_sec(&mut self, v: u32) {
        self.out_bytes_per_sec = ::std::option::Option::Some(v);
    }

    // optional uint32 in_packets_per_sec_x10 = 3;

    pub fn in_packets_per_sec_x10(&self) -> u32 {
        self.in_packets_per_sec_x10.unwrap_or(0)
    }

    pub fn clear_in_packets_per_sec_x10(&mut self) {
        self.in_packets_per_sec_x10 = ::std::option::Option::None;
    }

    pub fn has_in_packets_per_sec_x10(&self) -> bool {
        self.in_packets_per_sec_x10.is_some()
    }

    // Param is passed by value, moved
    pub fn set_in_packets_per_sec_x10(&mut self, v: u32) {
        self.in_packets_per_sec_x10 = ::std::option::Option::Some(v);
    }

    // optional uint32 in_bytes_per_sec = 4;

    pub fn in_bytes_per_sec(&self) -> u32 {
        self.in_bytes_per_sec.unwrap_or(0)
    }

    pub fn clear_in_bytes_per_sec(&mut self) {
        self.in_bytes_per_sec = ::std::option::Option::None;
    }

    pub fn has_in_bytes_per_sec(&self) -> bool {
        self.in_bytes_per_sec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_in_bytes_per_sec(&mut self, v: u32) {
        self.in_bytes_per_sec = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_ms = 5;

    pub fn ping_ms(&self) -> u32 {
        self.ping_ms.unwrap_or(0)
    }

    pub fn clear_ping_ms(&mut self) {
        self.ping_ms = ::std::option::Option::None;
    }

    pub fn has_ping_ms(&self) -> bool {
        self.ping_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_ms(&mut self, v: u32) {
        self.ping_ms = ::std::option::Option::Some(v);
    }

    // optional uint32 packets_dropped_pct = 6;

    pub fn packets_dropped_pct(&self) -> u32 {
        self.packets_dropped_pct.unwrap_or(0)
    }

    pub fn clear_packets_dropped_pct(&mut self) {
        self.packets_dropped_pct = ::std::option::Option::None;
    }

    pub fn has_packets_dropped_pct(&self) -> bool {
        self.packets_dropped_pct.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packets_dropped_pct(&mut self, v: u32) {
        self.packets_dropped_pct = ::std::option::Option::Some(v);
    }

    // optional uint32 packets_weird_sequence_pct = 7;

    pub fn packets_weird_sequence_pct(&self) -> u32 {
        self.packets_weird_sequence_pct.unwrap_or(0)
    }

    pub fn clear_packets_weird_sequence_pct(&mut self) {
        self.packets_weird_sequence_pct = ::std::option::Option::None;
    }

    pub fn has_packets_weird_sequence_pct(&self) -> bool {
        self.packets_weird_sequence_pct.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packets_weird_sequence_pct(&mut self, v: u32) {
        self.packets_weird_sequence_pct = ::std::option::Option::Some(v);
    }

    // optional uint32 peak_jitter_usec = 8;

    pub fn peak_jitter_usec(&self) -> u32 {
        self.peak_jitter_usec.unwrap_or(0)
    }

    pub fn clear_peak_jitter_usec(&mut self) {
        self.peak_jitter_usec = ::std::option::Option::None;
    }

    pub fn has_peak_jitter_usec(&self) -> bool {
        self.peak_jitter_usec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_peak_jitter_usec(&mut self, v: u32) {
        self.peak_jitter_usec = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "out_packets_per_sec_x10",
            |m: &CMsgSteamDatagramLinkInstantaneousStats| { &m.out_packets_per_sec_x10 },
            |m: &mut CMsgSteamDatagramLinkInstantaneousStats| { &mut m.out_packets_per_sec_x10 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "out_bytes_per_sec",
            |m: &CMsgSteamDatagramLinkInstantaneousStats| { &m.out_bytes_per_sec },
            |m: &mut CMsgSteamDatagramLinkInstantaneousStats| { &mut m.out_bytes_per_sec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "in_packets_per_sec_x10",
            |m: &CMsgSteamDatagramLinkInstantaneousStats| { &m.in_packets_per_sec_x10 },
            |m: &mut CMsgSteamDatagramLinkInstantaneousStats| { &mut m.in_packets_per_sec_x10 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "in_bytes_per_sec",
            |m: &CMsgSteamDatagramLinkInstantaneousStats| { &m.in_bytes_per_sec },
            |m: &mut CMsgSteamDatagramLinkInstantaneousStats| { &mut m.in_bytes_per_sec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_ms",
            |m: &CMsgSteamDatagramLinkInstantaneousStats| { &m.ping_ms },
            |m: &mut CMsgSteamDatagramLinkInstantaneousStats| { &mut m.ping_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "packets_dropped_pct",
            |m: &CMsgSteamDatagramLinkInstantaneousStats| { &m.packets_dropped_pct },
            |m: &mut CMsgSteamDatagramLinkInstantaneousStats| { &mut m.packets_dropped_pct },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "packets_weird_sequence_pct",
            |m: &CMsgSteamDatagramLinkInstantaneousStats| { &m.packets_weird_sequence_pct },
            |m: &mut CMsgSteamDatagramLinkInstantaneousStats| { &mut m.packets_weird_sequence_pct },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "peak_jitter_usec",
            |m: &CMsgSteamDatagramLinkInstantaneousStats| { &m.peak_jitter_usec },
            |m: &mut CMsgSteamDatagramLinkInstantaneousStats| { &mut m.peak_jitter_usec },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramLinkInstantaneousStats>(
            "CMsgSteamDatagramLinkInstantaneousStats",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramLinkInstantaneousStats {
    const NAME: &'static str = "CMsgSteamDatagramLinkInstantaneousStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.out_packets_per_sec_x10 = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.out_bytes_per_sec = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.in_packets_per_sec_x10 = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.in_bytes_per_sec = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.ping_ms = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.packets_dropped_pct = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.packets_weird_sequence_pct = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.peak_jitter_usec = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.out_packets_per_sec_x10 {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.out_bytes_per_sec {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.in_packets_per_sec_x10 {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.in_bytes_per_sec {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.ping_ms {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.packets_dropped_pct {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.packets_weird_sequence_pct {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.peak_jitter_usec {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.out_packets_per_sec_x10 {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.out_bytes_per_sec {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.in_packets_per_sec_x10 {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.in_bytes_per_sec {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.ping_ms {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.packets_dropped_pct {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.packets_weird_sequence_pct {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.peak_jitter_usec {
            os.write_uint32(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramLinkInstantaneousStats {
        CMsgSteamDatagramLinkInstantaneousStats::new()
    }

    fn clear(&mut self) {
        self.out_packets_per_sec_x10 = ::std::option::Option::None;
        self.out_bytes_per_sec = ::std::option::Option::None;
        self.in_packets_per_sec_x10 = ::std::option::Option::None;
        self.in_bytes_per_sec = ::std::option::Option::None;
        self.ping_ms = ::std::option::Option::None;
        self.packets_dropped_pct = ::std::option::Option::None;
        self.packets_weird_sequence_pct = ::std::option::Option::None;
        self.peak_jitter_usec = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramLinkInstantaneousStats {
        static instance: CMsgSteamDatagramLinkInstantaneousStats = CMsgSteamDatagramLinkInstantaneousStats {
            out_packets_per_sec_x10: ::std::option::Option::None,
            out_bytes_per_sec: ::std::option::Option::None,
            in_packets_per_sec_x10: ::std::option::Option::None,
            in_bytes_per_sec: ::std::option::Option::None,
            ping_ms: ::std::option::Option::None,
            packets_dropped_pct: ::std::option::Option::None,
            packets_weird_sequence_pct: ::std::option::Option::None,
            peak_jitter_usec: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramLinkInstantaneousStats {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramLinkInstantaneousStats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramLinkInstantaneousStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramLinkInstantaneousStats {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramLinkLifetimeStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramLinkLifetimeStats {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.packets_sent)
    pub packets_sent: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.kb_sent)
    pub kb_sent: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.packets_recv)
    pub packets_recv: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.kb_recv)
    pub kb_recv: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.packets_recv_sequenced)
    pub packets_recv_sequenced: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.packets_recv_dropped)
    pub packets_recv_dropped: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.packets_recv_out_of_order)
    pub packets_recv_out_of_order: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.packets_recv_duplicate)
    pub packets_recv_duplicate: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.packets_recv_lurch)
    pub packets_recv_lurch: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_100)
    pub quality_histogram_100: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_99)
    pub quality_histogram_99: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_97)
    pub quality_histogram_97: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_95)
    pub quality_histogram_95: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_90)
    pub quality_histogram_90: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_75)
    pub quality_histogram_75: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_50)
    pub quality_histogram_50: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_1)
    pub quality_histogram_1: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_dead)
    pub quality_histogram_dead: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.quality_ntile_2nd)
    pub quality_ntile_2nd: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.quality_ntile_5th)
    pub quality_ntile_5th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.quality_ntile_25th)
    pub quality_ntile_25th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.quality_ntile_50th)
    pub quality_ntile_50th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_25)
    pub ping_histogram_25: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_50)
    pub ping_histogram_50: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_75)
    pub ping_histogram_75: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_100)
    pub ping_histogram_100: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_125)
    pub ping_histogram_125: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_150)
    pub ping_histogram_150: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_200)
    pub ping_histogram_200: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_300)
    pub ping_histogram_300: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_max)
    pub ping_histogram_max: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_5th)
    pub ping_ntile_5th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_50th)
    pub ping_ntile_50th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_75th)
    pub ping_ntile_75th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_95th)
    pub ping_ntile_95th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_98th)
    pub ping_ntile_98th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_negligible)
    pub jitter_histogram_negligible: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_1)
    pub jitter_histogram_1: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_2)
    pub jitter_histogram_2: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_5)
    pub jitter_histogram_5: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_10)
    pub jitter_histogram_10: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_20)
    pub jitter_histogram_20: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_max)
    pub txspeed_max: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_16)
    pub txspeed_histogram_16: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_32)
    pub txspeed_histogram_32: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_64)
    pub txspeed_histogram_64: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_128)
    pub txspeed_histogram_128: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_256)
    pub txspeed_histogram_256: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_512)
    pub txspeed_histogram_512: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_1024)
    pub txspeed_histogram_1024: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_max)
    pub txspeed_histogram_max: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_5th)
    pub txspeed_ntile_5th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_50th)
    pub txspeed_ntile_50th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_75th)
    pub txspeed_ntile_75th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_95th)
    pub txspeed_ntile_95th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_98th)
    pub txspeed_ntile_98th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_max)
    pub rxspeed_max: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_16)
    pub rxspeed_histogram_16: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_32)
    pub rxspeed_histogram_32: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_64)
    pub rxspeed_histogram_64: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_128)
    pub rxspeed_histogram_128: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_256)
    pub rxspeed_histogram_256: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_512)
    pub rxspeed_histogram_512: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_1024)
    pub rxspeed_histogram_1024: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_max)
    pub rxspeed_histogram_max: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_5th)
    pub rxspeed_ntile_5th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_50th)
    pub rxspeed_ntile_50th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_75th)
    pub rxspeed_ntile_75th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_95th)
    pub rxspeed_ntile_95th: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_98th)
    pub rxspeed_ntile_98th: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramLinkLifetimeStats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramLinkLifetimeStats {
    fn default() -> &'a CMsgSteamDatagramLinkLifetimeStats {
        <CMsgSteamDatagramLinkLifetimeStats as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramLinkLifetimeStats {
    pub fn new() -> CMsgSteamDatagramLinkLifetimeStats {
        ::std::default::Default::default()
    }

    // optional uint64 packets_sent = 3;

    pub fn packets_sent(&self) -> u64 {
        self.packets_sent.unwrap_or(0)
    }

    pub fn clear_packets_sent(&mut self) {
        self.packets_sent = ::std::option::Option::None;
    }

    pub fn has_packets_sent(&self) -> bool {
        self.packets_sent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packets_sent(&mut self, v: u64) {
        self.packets_sent = ::std::option::Option::Some(v);
    }

    // optional uint64 kb_sent = 4;

    pub fn kb_sent(&self) -> u64 {
        self.kb_sent.unwrap_or(0)
    }

    pub fn clear_kb_sent(&mut self) {
        self.kb_sent = ::std::option::Option::None;
    }

    pub fn has_kb_sent(&self) -> bool {
        self.kb_sent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kb_sent(&mut self, v: u64) {
        self.kb_sent = ::std::option::Option::Some(v);
    }

    // optional uint64 packets_recv = 5;

    pub fn packets_recv(&self) -> u64 {
        self.packets_recv.unwrap_or(0)
    }

    pub fn clear_packets_recv(&mut self) {
        self.packets_recv = ::std::option::Option::None;
    }

    pub fn has_packets_recv(&self) -> bool {
        self.packets_recv.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packets_recv(&mut self, v: u64) {
        self.packets_recv = ::std::option::Option::Some(v);
    }

    // optional uint64 kb_recv = 6;

    pub fn kb_recv(&self) -> u64 {
        self.kb_recv.unwrap_or(0)
    }

    pub fn clear_kb_recv(&mut self) {
        self.kb_recv = ::std::option::Option::None;
    }

    pub fn has_kb_recv(&self) -> bool {
        self.kb_recv.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kb_recv(&mut self, v: u64) {
        self.kb_recv = ::std::option::Option::Some(v);
    }

    // optional uint64 packets_recv_sequenced = 7;

    pub fn packets_recv_sequenced(&self) -> u64 {
        self.packets_recv_sequenced.unwrap_or(0)
    }

    pub fn clear_packets_recv_sequenced(&mut self) {
        self.packets_recv_sequenced = ::std::option::Option::None;
    }

    pub fn has_packets_recv_sequenced(&self) -> bool {
        self.packets_recv_sequenced.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packets_recv_sequenced(&mut self, v: u64) {
        self.packets_recv_sequenced = ::std::option::Option::Some(v);
    }

    // optional uint64 packets_recv_dropped = 8;

    pub fn packets_recv_dropped(&self) -> u64 {
        self.packets_recv_dropped.unwrap_or(0)
    }

    pub fn clear_packets_recv_dropped(&mut self) {
        self.packets_recv_dropped = ::std::option::Option::None;
    }

    pub fn has_packets_recv_dropped(&self) -> bool {
        self.packets_recv_dropped.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packets_recv_dropped(&mut self, v: u64) {
        self.packets_recv_dropped = ::std::option::Option::Some(v);
    }

    // optional uint64 packets_recv_out_of_order = 9;

    pub fn packets_recv_out_of_order(&self) -> u64 {
        self.packets_recv_out_of_order.unwrap_or(0)
    }

    pub fn clear_packets_recv_out_of_order(&mut self) {
        self.packets_recv_out_of_order = ::std::option::Option::None;
    }

    pub fn has_packets_recv_out_of_order(&self) -> bool {
        self.packets_recv_out_of_order.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packets_recv_out_of_order(&mut self, v: u64) {
        self.packets_recv_out_of_order = ::std::option::Option::Some(v);
    }

    // optional uint64 packets_recv_duplicate = 10;

    pub fn packets_recv_duplicate(&self) -> u64 {
        self.packets_recv_duplicate.unwrap_or(0)
    }

    pub fn clear_packets_recv_duplicate(&mut self) {
        self.packets_recv_duplicate = ::std::option::Option::None;
    }

    pub fn has_packets_recv_duplicate(&self) -> bool {
        self.packets_recv_duplicate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packets_recv_duplicate(&mut self, v: u64) {
        self.packets_recv_duplicate = ::std::option::Option::Some(v);
    }

    // optional uint64 packets_recv_lurch = 11;

    pub fn packets_recv_lurch(&self) -> u64 {
        self.packets_recv_lurch.unwrap_or(0)
    }

    pub fn clear_packets_recv_lurch(&mut self) {
        self.packets_recv_lurch = ::std::option::Option::None;
    }

    pub fn has_packets_recv_lurch(&self) -> bool {
        self.packets_recv_lurch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packets_recv_lurch(&mut self, v: u64) {
        self.packets_recv_lurch = ::std::option::Option::Some(v);
    }

    // optional uint32 quality_histogram_100 = 21;

    pub fn quality_histogram_100(&self) -> u32 {
        self.quality_histogram_100.unwrap_or(0)
    }

    pub fn clear_quality_histogram_100(&mut self) {
        self.quality_histogram_100 = ::std::option::Option::None;
    }

    pub fn has_quality_histogram_100(&self) -> bool {
        self.quality_histogram_100.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quality_histogram_100(&mut self, v: u32) {
        self.quality_histogram_100 = ::std::option::Option::Some(v);
    }

    // optional uint32 quality_histogram_99 = 22;

    pub fn quality_histogram_99(&self) -> u32 {
        self.quality_histogram_99.unwrap_or(0)
    }

    pub fn clear_quality_histogram_99(&mut self) {
        self.quality_histogram_99 = ::std::option::Option::None;
    }

    pub fn has_quality_histogram_99(&self) -> bool {
        self.quality_histogram_99.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quality_histogram_99(&mut self, v: u32) {
        self.quality_histogram_99 = ::std::option::Option::Some(v);
    }

    // optional uint32 quality_histogram_97 = 23;

    pub fn quality_histogram_97(&self) -> u32 {
        self.quality_histogram_97.unwrap_or(0)
    }

    pub fn clear_quality_histogram_97(&mut self) {
        self.quality_histogram_97 = ::std::option::Option::None;
    }

    pub fn has_quality_histogram_97(&self) -> bool {
        self.quality_histogram_97.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quality_histogram_97(&mut self, v: u32) {
        self.quality_histogram_97 = ::std::option::Option::Some(v);
    }

    // optional uint32 quality_histogram_95 = 24;

    pub fn quality_histogram_95(&self) -> u32 {
        self.quality_histogram_95.unwrap_or(0)
    }

    pub fn clear_quality_histogram_95(&mut self) {
        self.quality_histogram_95 = ::std::option::Option::None;
    }

    pub fn has_quality_histogram_95(&self) -> bool {
        self.quality_histogram_95.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quality_histogram_95(&mut self, v: u32) {
        self.quality_histogram_95 = ::std::option::Option::Some(v);
    }

    // optional uint32 quality_histogram_90 = 25;

    pub fn quality_histogram_90(&self) -> u32 {
        self.quality_histogram_90.unwrap_or(0)
    }

    pub fn clear_quality_histogram_90(&mut self) {
        self.quality_histogram_90 = ::std::option::Option::None;
    }

    pub fn has_quality_histogram_90(&self) -> bool {
        self.quality_histogram_90.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quality_histogram_90(&mut self, v: u32) {
        self.quality_histogram_90 = ::std::option::Option::Some(v);
    }

    // optional uint32 quality_histogram_75 = 26;

    pub fn quality_histogram_75(&self) -> u32 {
        self.quality_histogram_75.unwrap_or(0)
    }

    pub fn clear_quality_histogram_75(&mut self) {
        self.quality_histogram_75 = ::std::option::Option::None;
    }

    pub fn has_quality_histogram_75(&self) -> bool {
        self.quality_histogram_75.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quality_histogram_75(&mut self, v: u32) {
        self.quality_histogram_75 = ::std::option::Option::Some(v);
    }

    // optional uint32 quality_histogram_50 = 27;

    pub fn quality_histogram_50(&self) -> u32 {
        self.quality_histogram_50.unwrap_or(0)
    }

    pub fn clear_quality_histogram_50(&mut self) {
        self.quality_histogram_50 = ::std::option::Option::None;
    }

    pub fn has_quality_histogram_50(&self) -> bool {
        self.quality_histogram_50.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quality_histogram_50(&mut self, v: u32) {
        self.quality_histogram_50 = ::std::option::Option::Some(v);
    }

    // optional uint32 quality_histogram_1 = 28;

    pub fn quality_histogram_1(&self) -> u32 {
        self.quality_histogram_1.unwrap_or(0)
    }

    pub fn clear_quality_histogram_1(&mut self) {
        self.quality_histogram_1 = ::std::option::Option::None;
    }

    pub fn has_quality_histogram_1(&self) -> bool {
        self.quality_histogram_1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quality_histogram_1(&mut self, v: u32) {
        self.quality_histogram_1 = ::std::option::Option::Some(v);
    }

    // optional uint32 quality_histogram_dead = 29;

    pub fn quality_histogram_dead(&self) -> u32 {
        self.quality_histogram_dead.unwrap_or(0)
    }

    pub fn clear_quality_histogram_dead(&mut self) {
        self.quality_histogram_dead = ::std::option::Option::None;
    }

    pub fn has_quality_histogram_dead(&self) -> bool {
        self.quality_histogram_dead.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quality_histogram_dead(&mut self, v: u32) {
        self.quality_histogram_dead = ::std::option::Option::Some(v);
    }

    // optional uint32 quality_ntile_2nd = 30;

    pub fn quality_ntile_2nd(&self) -> u32 {
        self.quality_ntile_2nd.unwrap_or(0)
    }

    pub fn clear_quality_ntile_2nd(&mut self) {
        self.quality_ntile_2nd = ::std::option::Option::None;
    }

    pub fn has_quality_ntile_2nd(&self) -> bool {
        self.quality_ntile_2nd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quality_ntile_2nd(&mut self, v: u32) {
        self.quality_ntile_2nd = ::std::option::Option::Some(v);
    }

    // optional uint32 quality_ntile_5th = 31;

    pub fn quality_ntile_5th(&self) -> u32 {
        self.quality_ntile_5th.unwrap_or(0)
    }

    pub fn clear_quality_ntile_5th(&mut self) {
        self.quality_ntile_5th = ::std::option::Option::None;
    }

    pub fn has_quality_ntile_5th(&self) -> bool {
        self.quality_ntile_5th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quality_ntile_5th(&mut self, v: u32) {
        self.quality_ntile_5th = ::std::option::Option::Some(v);
    }

    // optional uint32 quality_ntile_25th = 32;

    pub fn quality_ntile_25th(&self) -> u32 {
        self.quality_ntile_25th.unwrap_or(0)
    }

    pub fn clear_quality_ntile_25th(&mut self) {
        self.quality_ntile_25th = ::std::option::Option::None;
    }

    pub fn has_quality_ntile_25th(&self) -> bool {
        self.quality_ntile_25th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quality_ntile_25th(&mut self, v: u32) {
        self.quality_ntile_25th = ::std::option::Option::Some(v);
    }

    // optional uint32 quality_ntile_50th = 33;

    pub fn quality_ntile_50th(&self) -> u32 {
        self.quality_ntile_50th.unwrap_or(0)
    }

    pub fn clear_quality_ntile_50th(&mut self) {
        self.quality_ntile_50th = ::std::option::Option::None;
    }

    pub fn has_quality_ntile_50th(&self) -> bool {
        self.quality_ntile_50th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quality_ntile_50th(&mut self, v: u32) {
        self.quality_ntile_50th = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_histogram_25 = 41;

    pub fn ping_histogram_25(&self) -> u32 {
        self.ping_histogram_25.unwrap_or(0)
    }

    pub fn clear_ping_histogram_25(&mut self) {
        self.ping_histogram_25 = ::std::option::Option::None;
    }

    pub fn has_ping_histogram_25(&self) -> bool {
        self.ping_histogram_25.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_histogram_25(&mut self, v: u32) {
        self.ping_histogram_25 = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_histogram_50 = 42;

    pub fn ping_histogram_50(&self) -> u32 {
        self.ping_histogram_50.unwrap_or(0)
    }

    pub fn clear_ping_histogram_50(&mut self) {
        self.ping_histogram_50 = ::std::option::Option::None;
    }

    pub fn has_ping_histogram_50(&self) -> bool {
        self.ping_histogram_50.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_histogram_50(&mut self, v: u32) {
        self.ping_histogram_50 = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_histogram_75 = 43;

    pub fn ping_histogram_75(&self) -> u32 {
        self.ping_histogram_75.unwrap_or(0)
    }

    pub fn clear_ping_histogram_75(&mut self) {
        self.ping_histogram_75 = ::std::option::Option::None;
    }

    pub fn has_ping_histogram_75(&self) -> bool {
        self.ping_histogram_75.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_histogram_75(&mut self, v: u32) {
        self.ping_histogram_75 = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_histogram_100 = 44;

    pub fn ping_histogram_100(&self) -> u32 {
        self.ping_histogram_100.unwrap_or(0)
    }

    pub fn clear_ping_histogram_100(&mut self) {
        self.ping_histogram_100 = ::std::option::Option::None;
    }

    pub fn has_ping_histogram_100(&self) -> bool {
        self.ping_histogram_100.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_histogram_100(&mut self, v: u32) {
        self.ping_histogram_100 = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_histogram_125 = 45;

    pub fn ping_histogram_125(&self) -> u32 {
        self.ping_histogram_125.unwrap_or(0)
    }

    pub fn clear_ping_histogram_125(&mut self) {
        self.ping_histogram_125 = ::std::option::Option::None;
    }

    pub fn has_ping_histogram_125(&self) -> bool {
        self.ping_histogram_125.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_histogram_125(&mut self, v: u32) {
        self.ping_histogram_125 = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_histogram_150 = 46;

    pub fn ping_histogram_150(&self) -> u32 {
        self.ping_histogram_150.unwrap_or(0)
    }

    pub fn clear_ping_histogram_150(&mut self) {
        self.ping_histogram_150 = ::std::option::Option::None;
    }

    pub fn has_ping_histogram_150(&self) -> bool {
        self.ping_histogram_150.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_histogram_150(&mut self, v: u32) {
        self.ping_histogram_150 = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_histogram_200 = 47;

    pub fn ping_histogram_200(&self) -> u32 {
        self.ping_histogram_200.unwrap_or(0)
    }

    pub fn clear_ping_histogram_200(&mut self) {
        self.ping_histogram_200 = ::std::option::Option::None;
    }

    pub fn has_ping_histogram_200(&self) -> bool {
        self.ping_histogram_200.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_histogram_200(&mut self, v: u32) {
        self.ping_histogram_200 = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_histogram_300 = 48;

    pub fn ping_histogram_300(&self) -> u32 {
        self.ping_histogram_300.unwrap_or(0)
    }

    pub fn clear_ping_histogram_300(&mut self) {
        self.ping_histogram_300 = ::std::option::Option::None;
    }

    pub fn has_ping_histogram_300(&self) -> bool {
        self.ping_histogram_300.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_histogram_300(&mut self, v: u32) {
        self.ping_histogram_300 = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_histogram_max = 49;

    pub fn ping_histogram_max(&self) -> u32 {
        self.ping_histogram_max.unwrap_or(0)
    }

    pub fn clear_ping_histogram_max(&mut self) {
        self.ping_histogram_max = ::std::option::Option::None;
    }

    pub fn has_ping_histogram_max(&self) -> bool {
        self.ping_histogram_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_histogram_max(&mut self, v: u32) {
        self.ping_histogram_max = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_ntile_5th = 50;

    pub fn ping_ntile_5th(&self) -> u32 {
        self.ping_ntile_5th.unwrap_or(0)
    }

    pub fn clear_ping_ntile_5th(&mut self) {
        self.ping_ntile_5th = ::std::option::Option::None;
    }

    pub fn has_ping_ntile_5th(&self) -> bool {
        self.ping_ntile_5th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_ntile_5th(&mut self, v: u32) {
        self.ping_ntile_5th = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_ntile_50th = 51;

    pub fn ping_ntile_50th(&self) -> u32 {
        self.ping_ntile_50th.unwrap_or(0)
    }

    pub fn clear_ping_ntile_50th(&mut self) {
        self.ping_ntile_50th = ::std::option::Option::None;
    }

    pub fn has_ping_ntile_50th(&self) -> bool {
        self.ping_ntile_50th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_ntile_50th(&mut self, v: u32) {
        self.ping_ntile_50th = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_ntile_75th = 52;

    pub fn ping_ntile_75th(&self) -> u32 {
        self.ping_ntile_75th.unwrap_or(0)
    }

    pub fn clear_ping_ntile_75th(&mut self) {
        self.ping_ntile_75th = ::std::option::Option::None;
    }

    pub fn has_ping_ntile_75th(&self) -> bool {
        self.ping_ntile_75th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_ntile_75th(&mut self, v: u32) {
        self.ping_ntile_75th = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_ntile_95th = 53;

    pub fn ping_ntile_95th(&self) -> u32 {
        self.ping_ntile_95th.unwrap_or(0)
    }

    pub fn clear_ping_ntile_95th(&mut self) {
        self.ping_ntile_95th = ::std::option::Option::None;
    }

    pub fn has_ping_ntile_95th(&self) -> bool {
        self.ping_ntile_95th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_ntile_95th(&mut self, v: u32) {
        self.ping_ntile_95th = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_ntile_98th = 54;

    pub fn ping_ntile_98th(&self) -> u32 {
        self.ping_ntile_98th.unwrap_or(0)
    }

    pub fn clear_ping_ntile_98th(&mut self) {
        self.ping_ntile_98th = ::std::option::Option::None;
    }

    pub fn has_ping_ntile_98th(&self) -> bool {
        self.ping_ntile_98th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_ntile_98th(&mut self, v: u32) {
        self.ping_ntile_98th = ::std::option::Option::Some(v);
    }

    // optional uint32 jitter_histogram_negligible = 61;

    pub fn jitter_histogram_negligible(&self) -> u32 {
        self.jitter_histogram_negligible.unwrap_or(0)
    }

    pub fn clear_jitter_histogram_negligible(&mut self) {
        self.jitter_histogram_negligible = ::std::option::Option::None;
    }

    pub fn has_jitter_histogram_negligible(&self) -> bool {
        self.jitter_histogram_negligible.is_some()
    }

    // Param is passed by value, moved
    pub fn set_jitter_histogram_negligible(&mut self, v: u32) {
        self.jitter_histogram_negligible = ::std::option::Option::Some(v);
    }

    // optional uint32 jitter_histogram_1 = 62;

    pub fn jitter_histogram_1(&self) -> u32 {
        self.jitter_histogram_1.unwrap_or(0)
    }

    pub fn clear_jitter_histogram_1(&mut self) {
        self.jitter_histogram_1 = ::std::option::Option::None;
    }

    pub fn has_jitter_histogram_1(&self) -> bool {
        self.jitter_histogram_1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_jitter_histogram_1(&mut self, v: u32) {
        self.jitter_histogram_1 = ::std::option::Option::Some(v);
    }

    // optional uint32 jitter_histogram_2 = 63;

    pub fn jitter_histogram_2(&self) -> u32 {
        self.jitter_histogram_2.unwrap_or(0)
    }

    pub fn clear_jitter_histogram_2(&mut self) {
        self.jitter_histogram_2 = ::std::option::Option::None;
    }

    pub fn has_jitter_histogram_2(&self) -> bool {
        self.jitter_histogram_2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_jitter_histogram_2(&mut self, v: u32) {
        self.jitter_histogram_2 = ::std::option::Option::Some(v);
    }

    // optional uint32 jitter_histogram_5 = 64;

    pub fn jitter_histogram_5(&self) -> u32 {
        self.jitter_histogram_5.unwrap_or(0)
    }

    pub fn clear_jitter_histogram_5(&mut self) {
        self.jitter_histogram_5 = ::std::option::Option::None;
    }

    pub fn has_jitter_histogram_5(&self) -> bool {
        self.jitter_histogram_5.is_some()
    }

    // Param is passed by value, moved
    pub fn set_jitter_histogram_5(&mut self, v: u32) {
        self.jitter_histogram_5 = ::std::option::Option::Some(v);
    }

    // optional uint32 jitter_histogram_10 = 65;

    pub fn jitter_histogram_10(&self) -> u32 {
        self.jitter_histogram_10.unwrap_or(0)
    }

    pub fn clear_jitter_histogram_10(&mut self) {
        self.jitter_histogram_10 = ::std::option::Option::None;
    }

    pub fn has_jitter_histogram_10(&self) -> bool {
        self.jitter_histogram_10.is_some()
    }

    // Param is passed by value, moved
    pub fn set_jitter_histogram_10(&mut self, v: u32) {
        self.jitter_histogram_10 = ::std::option::Option::Some(v);
    }

    // optional uint32 jitter_histogram_20 = 66;

    pub fn jitter_histogram_20(&self) -> u32 {
        self.jitter_histogram_20.unwrap_or(0)
    }

    pub fn clear_jitter_histogram_20(&mut self) {
        self.jitter_histogram_20 = ::std::option::Option::None;
    }

    pub fn has_jitter_histogram_20(&self) -> bool {
        self.jitter_histogram_20.is_some()
    }

    // Param is passed by value, moved
    pub fn set_jitter_histogram_20(&mut self, v: u32) {
        self.jitter_histogram_20 = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_max = 67;

    pub fn txspeed_max(&self) -> u32 {
        self.txspeed_max.unwrap_or(0)
    }

    pub fn clear_txspeed_max(&mut self) {
        self.txspeed_max = ::std::option::Option::None;
    }

    pub fn has_txspeed_max(&self) -> bool {
        self.txspeed_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_max(&mut self, v: u32) {
        self.txspeed_max = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_histogram_16 = 68;

    pub fn txspeed_histogram_16(&self) -> u32 {
        self.txspeed_histogram_16.unwrap_or(0)
    }

    pub fn clear_txspeed_histogram_16(&mut self) {
        self.txspeed_histogram_16 = ::std::option::Option::None;
    }

    pub fn has_txspeed_histogram_16(&self) -> bool {
        self.txspeed_histogram_16.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_histogram_16(&mut self, v: u32) {
        self.txspeed_histogram_16 = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_histogram_32 = 69;

    pub fn txspeed_histogram_32(&self) -> u32 {
        self.txspeed_histogram_32.unwrap_or(0)
    }

    pub fn clear_txspeed_histogram_32(&mut self) {
        self.txspeed_histogram_32 = ::std::option::Option::None;
    }

    pub fn has_txspeed_histogram_32(&self) -> bool {
        self.txspeed_histogram_32.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_histogram_32(&mut self, v: u32) {
        self.txspeed_histogram_32 = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_histogram_64 = 70;

    pub fn txspeed_histogram_64(&self) -> u32 {
        self.txspeed_histogram_64.unwrap_or(0)
    }

    pub fn clear_txspeed_histogram_64(&mut self) {
        self.txspeed_histogram_64 = ::std::option::Option::None;
    }

    pub fn has_txspeed_histogram_64(&self) -> bool {
        self.txspeed_histogram_64.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_histogram_64(&mut self, v: u32) {
        self.txspeed_histogram_64 = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_histogram_128 = 71;

    pub fn txspeed_histogram_128(&self) -> u32 {
        self.txspeed_histogram_128.unwrap_or(0)
    }

    pub fn clear_txspeed_histogram_128(&mut self) {
        self.txspeed_histogram_128 = ::std::option::Option::None;
    }

    pub fn has_txspeed_histogram_128(&self) -> bool {
        self.txspeed_histogram_128.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_histogram_128(&mut self, v: u32) {
        self.txspeed_histogram_128 = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_histogram_256 = 72;

    pub fn txspeed_histogram_256(&self) -> u32 {
        self.txspeed_histogram_256.unwrap_or(0)
    }

    pub fn clear_txspeed_histogram_256(&mut self) {
        self.txspeed_histogram_256 = ::std::option::Option::None;
    }

    pub fn has_txspeed_histogram_256(&self) -> bool {
        self.txspeed_histogram_256.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_histogram_256(&mut self, v: u32) {
        self.txspeed_histogram_256 = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_histogram_512 = 73;

    pub fn txspeed_histogram_512(&self) -> u32 {
        self.txspeed_histogram_512.unwrap_or(0)
    }

    pub fn clear_txspeed_histogram_512(&mut self) {
        self.txspeed_histogram_512 = ::std::option::Option::None;
    }

    pub fn has_txspeed_histogram_512(&self) -> bool {
        self.txspeed_histogram_512.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_histogram_512(&mut self, v: u32) {
        self.txspeed_histogram_512 = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_histogram_1024 = 74;

    pub fn txspeed_histogram_1024(&self) -> u32 {
        self.txspeed_histogram_1024.unwrap_or(0)
    }

    pub fn clear_txspeed_histogram_1024(&mut self) {
        self.txspeed_histogram_1024 = ::std::option::Option::None;
    }

    pub fn has_txspeed_histogram_1024(&self) -> bool {
        self.txspeed_histogram_1024.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_histogram_1024(&mut self, v: u32) {
        self.txspeed_histogram_1024 = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_histogram_max = 75;

    pub fn txspeed_histogram_max(&self) -> u32 {
        self.txspeed_histogram_max.unwrap_or(0)
    }

    pub fn clear_txspeed_histogram_max(&mut self) {
        self.txspeed_histogram_max = ::std::option::Option::None;
    }

    pub fn has_txspeed_histogram_max(&self) -> bool {
        self.txspeed_histogram_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_histogram_max(&mut self, v: u32) {
        self.txspeed_histogram_max = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_ntile_5th = 76;

    pub fn txspeed_ntile_5th(&self) -> u32 {
        self.txspeed_ntile_5th.unwrap_or(0)
    }

    pub fn clear_txspeed_ntile_5th(&mut self) {
        self.txspeed_ntile_5th = ::std::option::Option::None;
    }

    pub fn has_txspeed_ntile_5th(&self) -> bool {
        self.txspeed_ntile_5th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_ntile_5th(&mut self, v: u32) {
        self.txspeed_ntile_5th = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_ntile_50th = 77;

    pub fn txspeed_ntile_50th(&self) -> u32 {
        self.txspeed_ntile_50th.unwrap_or(0)
    }

    pub fn clear_txspeed_ntile_50th(&mut self) {
        self.txspeed_ntile_50th = ::std::option::Option::None;
    }

    pub fn has_txspeed_ntile_50th(&self) -> bool {
        self.txspeed_ntile_50th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_ntile_50th(&mut self, v: u32) {
        self.txspeed_ntile_50th = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_ntile_75th = 78;

    pub fn txspeed_ntile_75th(&self) -> u32 {
        self.txspeed_ntile_75th.unwrap_or(0)
    }

    pub fn clear_txspeed_ntile_75th(&mut self) {
        self.txspeed_ntile_75th = ::std::option::Option::None;
    }

    pub fn has_txspeed_ntile_75th(&self) -> bool {
        self.txspeed_ntile_75th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_ntile_75th(&mut self, v: u32) {
        self.txspeed_ntile_75th = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_ntile_95th = 79;

    pub fn txspeed_ntile_95th(&self) -> u32 {
        self.txspeed_ntile_95th.unwrap_or(0)
    }

    pub fn clear_txspeed_ntile_95th(&mut self) {
        self.txspeed_ntile_95th = ::std::option::Option::None;
    }

    pub fn has_txspeed_ntile_95th(&self) -> bool {
        self.txspeed_ntile_95th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_ntile_95th(&mut self, v: u32) {
        self.txspeed_ntile_95th = ::std::option::Option::Some(v);
    }

    // optional uint32 txspeed_ntile_98th = 80;

    pub fn txspeed_ntile_98th(&self) -> u32 {
        self.txspeed_ntile_98th.unwrap_or(0)
    }

    pub fn clear_txspeed_ntile_98th(&mut self) {
        self.txspeed_ntile_98th = ::std::option::Option::None;
    }

    pub fn has_txspeed_ntile_98th(&self) -> bool {
        self.txspeed_ntile_98th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txspeed_ntile_98th(&mut self, v: u32) {
        self.txspeed_ntile_98th = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_max = 81;

    pub fn rxspeed_max(&self) -> u32 {
        self.rxspeed_max.unwrap_or(0)
    }

    pub fn clear_rxspeed_max(&mut self) {
        self.rxspeed_max = ::std::option::Option::None;
    }

    pub fn has_rxspeed_max(&self) -> bool {
        self.rxspeed_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_max(&mut self, v: u32) {
        self.rxspeed_max = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_histogram_16 = 82;

    pub fn rxspeed_histogram_16(&self) -> u32 {
        self.rxspeed_histogram_16.unwrap_or(0)
    }

    pub fn clear_rxspeed_histogram_16(&mut self) {
        self.rxspeed_histogram_16 = ::std::option::Option::None;
    }

    pub fn has_rxspeed_histogram_16(&self) -> bool {
        self.rxspeed_histogram_16.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_histogram_16(&mut self, v: u32) {
        self.rxspeed_histogram_16 = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_histogram_32 = 83;

    pub fn rxspeed_histogram_32(&self) -> u32 {
        self.rxspeed_histogram_32.unwrap_or(0)
    }

    pub fn clear_rxspeed_histogram_32(&mut self) {
        self.rxspeed_histogram_32 = ::std::option::Option::None;
    }

    pub fn has_rxspeed_histogram_32(&self) -> bool {
        self.rxspeed_histogram_32.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_histogram_32(&mut self, v: u32) {
        self.rxspeed_histogram_32 = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_histogram_64 = 84;

    pub fn rxspeed_histogram_64(&self) -> u32 {
        self.rxspeed_histogram_64.unwrap_or(0)
    }

    pub fn clear_rxspeed_histogram_64(&mut self) {
        self.rxspeed_histogram_64 = ::std::option::Option::None;
    }

    pub fn has_rxspeed_histogram_64(&self) -> bool {
        self.rxspeed_histogram_64.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_histogram_64(&mut self, v: u32) {
        self.rxspeed_histogram_64 = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_histogram_128 = 85;

    pub fn rxspeed_histogram_128(&self) -> u32 {
        self.rxspeed_histogram_128.unwrap_or(0)
    }

    pub fn clear_rxspeed_histogram_128(&mut self) {
        self.rxspeed_histogram_128 = ::std::option::Option::None;
    }

    pub fn has_rxspeed_histogram_128(&self) -> bool {
        self.rxspeed_histogram_128.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_histogram_128(&mut self, v: u32) {
        self.rxspeed_histogram_128 = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_histogram_256 = 86;

    pub fn rxspeed_histogram_256(&self) -> u32 {
        self.rxspeed_histogram_256.unwrap_or(0)
    }

    pub fn clear_rxspeed_histogram_256(&mut self) {
        self.rxspeed_histogram_256 = ::std::option::Option::None;
    }

    pub fn has_rxspeed_histogram_256(&self) -> bool {
        self.rxspeed_histogram_256.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_histogram_256(&mut self, v: u32) {
        self.rxspeed_histogram_256 = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_histogram_512 = 87;

    pub fn rxspeed_histogram_512(&self) -> u32 {
        self.rxspeed_histogram_512.unwrap_or(0)
    }

    pub fn clear_rxspeed_histogram_512(&mut self) {
        self.rxspeed_histogram_512 = ::std::option::Option::None;
    }

    pub fn has_rxspeed_histogram_512(&self) -> bool {
        self.rxspeed_histogram_512.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_histogram_512(&mut self, v: u32) {
        self.rxspeed_histogram_512 = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_histogram_1024 = 88;

    pub fn rxspeed_histogram_1024(&self) -> u32 {
        self.rxspeed_histogram_1024.unwrap_or(0)
    }

    pub fn clear_rxspeed_histogram_1024(&mut self) {
        self.rxspeed_histogram_1024 = ::std::option::Option::None;
    }

    pub fn has_rxspeed_histogram_1024(&self) -> bool {
        self.rxspeed_histogram_1024.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_histogram_1024(&mut self, v: u32) {
        self.rxspeed_histogram_1024 = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_histogram_max = 89;

    pub fn rxspeed_histogram_max(&self) -> u32 {
        self.rxspeed_histogram_max.unwrap_or(0)
    }

    pub fn clear_rxspeed_histogram_max(&mut self) {
        self.rxspeed_histogram_max = ::std::option::Option::None;
    }

    pub fn has_rxspeed_histogram_max(&self) -> bool {
        self.rxspeed_histogram_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_histogram_max(&mut self, v: u32) {
        self.rxspeed_histogram_max = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_ntile_5th = 90;

    pub fn rxspeed_ntile_5th(&self) -> u32 {
        self.rxspeed_ntile_5th.unwrap_or(0)
    }

    pub fn clear_rxspeed_ntile_5th(&mut self) {
        self.rxspeed_ntile_5th = ::std::option::Option::None;
    }

    pub fn has_rxspeed_ntile_5th(&self) -> bool {
        self.rxspeed_ntile_5th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_ntile_5th(&mut self, v: u32) {
        self.rxspeed_ntile_5th = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_ntile_50th = 91;

    pub fn rxspeed_ntile_50th(&self) -> u32 {
        self.rxspeed_ntile_50th.unwrap_or(0)
    }

    pub fn clear_rxspeed_ntile_50th(&mut self) {
        self.rxspeed_ntile_50th = ::std::option::Option::None;
    }

    pub fn has_rxspeed_ntile_50th(&self) -> bool {
        self.rxspeed_ntile_50th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_ntile_50th(&mut self, v: u32) {
        self.rxspeed_ntile_50th = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_ntile_75th = 92;

    pub fn rxspeed_ntile_75th(&self) -> u32 {
        self.rxspeed_ntile_75th.unwrap_or(0)
    }

    pub fn clear_rxspeed_ntile_75th(&mut self) {
        self.rxspeed_ntile_75th = ::std::option::Option::None;
    }

    pub fn has_rxspeed_ntile_75th(&self) -> bool {
        self.rxspeed_ntile_75th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_ntile_75th(&mut self, v: u32) {
        self.rxspeed_ntile_75th = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_ntile_95th = 93;

    pub fn rxspeed_ntile_95th(&self) -> u32 {
        self.rxspeed_ntile_95th.unwrap_or(0)
    }

    pub fn clear_rxspeed_ntile_95th(&mut self) {
        self.rxspeed_ntile_95th = ::std::option::Option::None;
    }

    pub fn has_rxspeed_ntile_95th(&self) -> bool {
        self.rxspeed_ntile_95th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_ntile_95th(&mut self, v: u32) {
        self.rxspeed_ntile_95th = ::std::option::Option::Some(v);
    }

    // optional uint32 rxspeed_ntile_98th = 94;

    pub fn rxspeed_ntile_98th(&self) -> u32 {
        self.rxspeed_ntile_98th.unwrap_or(0)
    }

    pub fn clear_rxspeed_ntile_98th(&mut self) {
        self.rxspeed_ntile_98th = ::std::option::Option::None;
    }

    pub fn has_rxspeed_ntile_98th(&self) -> bool {
        self.rxspeed_ntile_98th.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rxspeed_ntile_98th(&mut self, v: u32) {
        self.rxspeed_ntile_98th = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(70);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "packets_sent",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.packets_sent },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.packets_sent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "kb_sent",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.kb_sent },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.kb_sent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "packets_recv",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.packets_recv },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.packets_recv },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "kb_recv",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.kb_recv },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.kb_recv },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "packets_recv_sequenced",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.packets_recv_sequenced },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.packets_recv_sequenced },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "packets_recv_dropped",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.packets_recv_dropped },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.packets_recv_dropped },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "packets_recv_out_of_order",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.packets_recv_out_of_order },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.packets_recv_out_of_order },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "packets_recv_duplicate",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.packets_recv_duplicate },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.packets_recv_duplicate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "packets_recv_lurch",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.packets_recv_lurch },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.packets_recv_lurch },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quality_histogram_100",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.quality_histogram_100 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.quality_histogram_100 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quality_histogram_99",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.quality_histogram_99 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.quality_histogram_99 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quality_histogram_97",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.quality_histogram_97 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.quality_histogram_97 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quality_histogram_95",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.quality_histogram_95 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.quality_histogram_95 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quality_histogram_90",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.quality_histogram_90 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.quality_histogram_90 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quality_histogram_75",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.quality_histogram_75 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.quality_histogram_75 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quality_histogram_50",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.quality_histogram_50 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.quality_histogram_50 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quality_histogram_1",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.quality_histogram_1 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.quality_histogram_1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quality_histogram_dead",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.quality_histogram_dead },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.quality_histogram_dead },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quality_ntile_2nd",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.quality_ntile_2nd },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.quality_ntile_2nd },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quality_ntile_5th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.quality_ntile_5th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.quality_ntile_5th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quality_ntile_25th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.quality_ntile_25th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.quality_ntile_25th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "quality_ntile_50th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.quality_ntile_50th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.quality_ntile_50th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_histogram_25",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_histogram_25 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_histogram_25 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_histogram_50",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_histogram_50 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_histogram_50 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_histogram_75",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_histogram_75 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_histogram_75 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_histogram_100",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_histogram_100 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_histogram_100 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_histogram_125",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_histogram_125 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_histogram_125 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_histogram_150",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_histogram_150 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_histogram_150 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_histogram_200",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_histogram_200 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_histogram_200 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_histogram_300",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_histogram_300 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_histogram_300 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_histogram_max",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_histogram_max },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_histogram_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_ntile_5th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_ntile_5th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_ntile_5th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_ntile_50th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_ntile_50th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_ntile_50th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_ntile_75th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_ntile_75th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_ntile_75th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_ntile_95th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_ntile_95th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_ntile_95th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_ntile_98th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.ping_ntile_98th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.ping_ntile_98th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "jitter_histogram_negligible",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.jitter_histogram_negligible },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.jitter_histogram_negligible },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "jitter_histogram_1",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.jitter_histogram_1 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.jitter_histogram_1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "jitter_histogram_2",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.jitter_histogram_2 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.jitter_histogram_2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "jitter_histogram_5",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.jitter_histogram_5 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.jitter_histogram_5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "jitter_histogram_10",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.jitter_histogram_10 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.jitter_histogram_10 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "jitter_histogram_20",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.jitter_histogram_20 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.jitter_histogram_20 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_max",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_max },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_histogram_16",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_histogram_16 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_histogram_16 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_histogram_32",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_histogram_32 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_histogram_32 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_histogram_64",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_histogram_64 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_histogram_64 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_histogram_128",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_histogram_128 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_histogram_128 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_histogram_256",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_histogram_256 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_histogram_256 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_histogram_512",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_histogram_512 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_histogram_512 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_histogram_1024",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_histogram_1024 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_histogram_1024 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_histogram_max",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_histogram_max },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_histogram_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_ntile_5th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_ntile_5th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_ntile_5th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_ntile_50th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_ntile_50th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_ntile_50th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_ntile_75th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_ntile_75th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_ntile_75th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_ntile_95th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_ntile_95th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_ntile_95th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "txspeed_ntile_98th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.txspeed_ntile_98th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.txspeed_ntile_98th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_max",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_max },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_histogram_16",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_histogram_16 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_histogram_16 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_histogram_32",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_histogram_32 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_histogram_32 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_histogram_64",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_histogram_64 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_histogram_64 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_histogram_128",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_histogram_128 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_histogram_128 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_histogram_256",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_histogram_256 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_histogram_256 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_histogram_512",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_histogram_512 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_histogram_512 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_histogram_1024",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_histogram_1024 },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_histogram_1024 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_histogram_max",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_histogram_max },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_histogram_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_ntile_5th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_ntile_5th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_ntile_5th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_ntile_50th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_ntile_50th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_ntile_50th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_ntile_75th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_ntile_75th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_ntile_75th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_ntile_95th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_ntile_95th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_ntile_95th },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rxspeed_ntile_98th",
            |m: &CMsgSteamDatagramLinkLifetimeStats| { &m.rxspeed_ntile_98th },
            |m: &mut CMsgSteamDatagramLinkLifetimeStats| { &mut m.rxspeed_ntile_98th },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramLinkLifetimeStats>(
            "CMsgSteamDatagramLinkLifetimeStats",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramLinkLifetimeStats {
    const NAME: &'static str = "CMsgSteamDatagramLinkLifetimeStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.packets_sent = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.kb_sent = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.packets_recv = ::std::option::Option::Some(is.read_uint64()?);
                },
                48 => {
                    self.kb_recv = ::std::option::Option::Some(is.read_uint64()?);
                },
                56 => {
                    self.packets_recv_sequenced = ::std::option::Option::Some(is.read_uint64()?);
                },
                64 => {
                    self.packets_recv_dropped = ::std::option::Option::Some(is.read_uint64()?);
                },
                72 => {
                    self.packets_recv_out_of_order = ::std::option::Option::Some(is.read_uint64()?);
                },
                80 => {
                    self.packets_recv_duplicate = ::std::option::Option::Some(is.read_uint64()?);
                },
                88 => {
                    self.packets_recv_lurch = ::std::option::Option::Some(is.read_uint64()?);
                },
                168 => {
                    self.quality_histogram_100 = ::std::option::Option::Some(is.read_uint32()?);
                },
                176 => {
                    self.quality_histogram_99 = ::std::option::Option::Some(is.read_uint32()?);
                },
                184 => {
                    self.quality_histogram_97 = ::std::option::Option::Some(is.read_uint32()?);
                },
                192 => {
                    self.quality_histogram_95 = ::std::option::Option::Some(is.read_uint32()?);
                },
                200 => {
                    self.quality_histogram_90 = ::std::option::Option::Some(is.read_uint32()?);
                },
                208 => {
                    self.quality_histogram_75 = ::std::option::Option::Some(is.read_uint32()?);
                },
                216 => {
                    self.quality_histogram_50 = ::std::option::Option::Some(is.read_uint32()?);
                },
                224 => {
                    self.quality_histogram_1 = ::std::option::Option::Some(is.read_uint32()?);
                },
                232 => {
                    self.quality_histogram_dead = ::std::option::Option::Some(is.read_uint32()?);
                },
                240 => {
                    self.quality_ntile_2nd = ::std::option::Option::Some(is.read_uint32()?);
                },
                248 => {
                    self.quality_ntile_5th = ::std::option::Option::Some(is.read_uint32()?);
                },
                256 => {
                    self.quality_ntile_25th = ::std::option::Option::Some(is.read_uint32()?);
                },
                264 => {
                    self.quality_ntile_50th = ::std::option::Option::Some(is.read_uint32()?);
                },
                328 => {
                    self.ping_histogram_25 = ::std::option::Option::Some(is.read_uint32()?);
                },
                336 => {
                    self.ping_histogram_50 = ::std::option::Option::Some(is.read_uint32()?);
                },
                344 => {
                    self.ping_histogram_75 = ::std::option::Option::Some(is.read_uint32()?);
                },
                352 => {
                    self.ping_histogram_100 = ::std::option::Option::Some(is.read_uint32()?);
                },
                360 => {
                    self.ping_histogram_125 = ::std::option::Option::Some(is.read_uint32()?);
                },
                368 => {
                    self.ping_histogram_150 = ::std::option::Option::Some(is.read_uint32()?);
                },
                376 => {
                    self.ping_histogram_200 = ::std::option::Option::Some(is.read_uint32()?);
                },
                384 => {
                    self.ping_histogram_300 = ::std::option::Option::Some(is.read_uint32()?);
                },
                392 => {
                    self.ping_histogram_max = ::std::option::Option::Some(is.read_uint32()?);
                },
                400 => {
                    self.ping_ntile_5th = ::std::option::Option::Some(is.read_uint32()?);
                },
                408 => {
                    self.ping_ntile_50th = ::std::option::Option::Some(is.read_uint32()?);
                },
                416 => {
                    self.ping_ntile_75th = ::std::option::Option::Some(is.read_uint32()?);
                },
                424 => {
                    self.ping_ntile_95th = ::std::option::Option::Some(is.read_uint32()?);
                },
                432 => {
                    self.ping_ntile_98th = ::std::option::Option::Some(is.read_uint32()?);
                },
                488 => {
                    self.jitter_histogram_negligible = ::std::option::Option::Some(is.read_uint32()?);
                },
                496 => {
                    self.jitter_histogram_1 = ::std::option::Option::Some(is.read_uint32()?);
                },
                504 => {
                    self.jitter_histogram_2 = ::std::option::Option::Some(is.read_uint32()?);
                },
                512 => {
                    self.jitter_histogram_5 = ::std::option::Option::Some(is.read_uint32()?);
                },
                520 => {
                    self.jitter_histogram_10 = ::std::option::Option::Some(is.read_uint32()?);
                },
                528 => {
                    self.jitter_histogram_20 = ::std::option::Option::Some(is.read_uint32()?);
                },
                536 => {
                    self.txspeed_max = ::std::option::Option::Some(is.read_uint32()?);
                },
                544 => {
                    self.txspeed_histogram_16 = ::std::option::Option::Some(is.read_uint32()?);
                },
                552 => {
                    self.txspeed_histogram_32 = ::std::option::Option::Some(is.read_uint32()?);
                },
                560 => {
                    self.txspeed_histogram_64 = ::std::option::Option::Some(is.read_uint32()?);
                },
                568 => {
                    self.txspeed_histogram_128 = ::std::option::Option::Some(is.read_uint32()?);
                },
                576 => {
                    self.txspeed_histogram_256 = ::std::option::Option::Some(is.read_uint32()?);
                },
                584 => {
                    self.txspeed_histogram_512 = ::std::option::Option::Some(is.read_uint32()?);
                },
                592 => {
                    self.txspeed_histogram_1024 = ::std::option::Option::Some(is.read_uint32()?);
                },
                600 => {
                    self.txspeed_histogram_max = ::std::option::Option::Some(is.read_uint32()?);
                },
                608 => {
                    self.txspeed_ntile_5th = ::std::option::Option::Some(is.read_uint32()?);
                },
                616 => {
                    self.txspeed_ntile_50th = ::std::option::Option::Some(is.read_uint32()?);
                },
                624 => {
                    self.txspeed_ntile_75th = ::std::option::Option::Some(is.read_uint32()?);
                },
                632 => {
                    self.txspeed_ntile_95th = ::std::option::Option::Some(is.read_uint32()?);
                },
                640 => {
                    self.txspeed_ntile_98th = ::std::option::Option::Some(is.read_uint32()?);
                },
                648 => {
                    self.rxspeed_max = ::std::option::Option::Some(is.read_uint32()?);
                },
                656 => {
                    self.rxspeed_histogram_16 = ::std::option::Option::Some(is.read_uint32()?);
                },
                664 => {
                    self.rxspeed_histogram_32 = ::std::option::Option::Some(is.read_uint32()?);
                },
                672 => {
                    self.rxspeed_histogram_64 = ::std::option::Option::Some(is.read_uint32()?);
                },
                680 => {
                    self.rxspeed_histogram_128 = ::std::option::Option::Some(is.read_uint32()?);
                },
                688 => {
                    self.rxspeed_histogram_256 = ::std::option::Option::Some(is.read_uint32()?);
                },
                696 => {
                    self.rxspeed_histogram_512 = ::std::option::Option::Some(is.read_uint32()?);
                },
                704 => {
                    self.rxspeed_histogram_1024 = ::std::option::Option::Some(is.read_uint32()?);
                },
                712 => {
                    self.rxspeed_histogram_max = ::std::option::Option::Some(is.read_uint32()?);
                },
                720 => {
                    self.rxspeed_ntile_5th = ::std::option::Option::Some(is.read_uint32()?);
                },
                728 => {
                    self.rxspeed_ntile_50th = ::std::option::Option::Some(is.read_uint32()?);
                },
                736 => {
                    self.rxspeed_ntile_75th = ::std::option::Option::Some(is.read_uint32()?);
                },
                744 => {
                    self.rxspeed_ntile_95th = ::std::option::Option::Some(is.read_uint32()?);
                },
                752 => {
                    self.rxspeed_ntile_98th = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.packets_sent {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.kb_sent {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.packets_recv {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.kb_recv {
            my_size += ::protobuf::rt::uint64_size(6, v);
        }
        if let Some(v) = self.packets_recv_sequenced {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        if let Some(v) = self.packets_recv_dropped {
            my_size += ::protobuf::rt::uint64_size(8, v);
        }
        if let Some(v) = self.packets_recv_out_of_order {
            my_size += ::protobuf::rt::uint64_size(9, v);
        }
        if let Some(v) = self.packets_recv_duplicate {
            my_size += ::protobuf::rt::uint64_size(10, v);
        }
        if let Some(v) = self.packets_recv_lurch {
            my_size += ::protobuf::rt::uint64_size(11, v);
        }
        if let Some(v) = self.quality_histogram_100 {
            my_size += ::protobuf::rt::uint32_size(21, v);
        }
        if let Some(v) = self.quality_histogram_99 {
            my_size += ::protobuf::rt::uint32_size(22, v);
        }
        if let Some(v) = self.quality_histogram_97 {
            my_size += ::protobuf::rt::uint32_size(23, v);
        }
        if let Some(v) = self.quality_histogram_95 {
            my_size += ::protobuf::rt::uint32_size(24, v);
        }
        if let Some(v) = self.quality_histogram_90 {
            my_size += ::protobuf::rt::uint32_size(25, v);
        }
        if let Some(v) = self.quality_histogram_75 {
            my_size += ::protobuf::rt::uint32_size(26, v);
        }
        if let Some(v) = self.quality_histogram_50 {
            my_size += ::protobuf::rt::uint32_size(27, v);
        }
        if let Some(v) = self.quality_histogram_1 {
            my_size += ::protobuf::rt::uint32_size(28, v);
        }
        if let Some(v) = self.quality_histogram_dead {
            my_size += ::protobuf::rt::uint32_size(29, v);
        }
        if let Some(v) = self.quality_ntile_2nd {
            my_size += ::protobuf::rt::uint32_size(30, v);
        }
        if let Some(v) = self.quality_ntile_5th {
            my_size += ::protobuf::rt::uint32_size(31, v);
        }
        if let Some(v) = self.quality_ntile_25th {
            my_size += ::protobuf::rt::uint32_size(32, v);
        }
        if let Some(v) = self.quality_ntile_50th {
            my_size += ::protobuf::rt::uint32_size(33, v);
        }
        if let Some(v) = self.ping_histogram_25 {
            my_size += ::protobuf::rt::uint32_size(41, v);
        }
        if let Some(v) = self.ping_histogram_50 {
            my_size += ::protobuf::rt::uint32_size(42, v);
        }
        if let Some(v) = self.ping_histogram_75 {
            my_size += ::protobuf::rt::uint32_size(43, v);
        }
        if let Some(v) = self.ping_histogram_100 {
            my_size += ::protobuf::rt::uint32_size(44, v);
        }
        if let Some(v) = self.ping_histogram_125 {
            my_size += ::protobuf::rt::uint32_size(45, v);
        }
        if let Some(v) = self.ping_histogram_150 {
            my_size += ::protobuf::rt::uint32_size(46, v);
        }
        if let Some(v) = self.ping_histogram_200 {
            my_size += ::protobuf::rt::uint32_size(47, v);
        }
        if let Some(v) = self.ping_histogram_300 {
            my_size += ::protobuf::rt::uint32_size(48, v);
        }
        if let Some(v) = self.ping_histogram_max {
            my_size += ::protobuf::rt::uint32_size(49, v);
        }
        if let Some(v) = self.ping_ntile_5th {
            my_size += ::protobuf::rt::uint32_size(50, v);
        }
        if let Some(v) = self.ping_ntile_50th {
            my_size += ::protobuf::rt::uint32_size(51, v);
        }
        if let Some(v) = self.ping_ntile_75th {
            my_size += ::protobuf::rt::uint32_size(52, v);
        }
        if let Some(v) = self.ping_ntile_95th {
            my_size += ::protobuf::rt::uint32_size(53, v);
        }
        if let Some(v) = self.ping_ntile_98th {
            my_size += ::protobuf::rt::uint32_size(54, v);
        }
        if let Some(v) = self.jitter_histogram_negligible {
            my_size += ::protobuf::rt::uint32_size(61, v);
        }
        if let Some(v) = self.jitter_histogram_1 {
            my_size += ::protobuf::rt::uint32_size(62, v);
        }
        if let Some(v) = self.jitter_histogram_2 {
            my_size += ::protobuf::rt::uint32_size(63, v);
        }
        if let Some(v) = self.jitter_histogram_5 {
            my_size += ::protobuf::rt::uint32_size(64, v);
        }
        if let Some(v) = self.jitter_histogram_10 {
            my_size += ::protobuf::rt::uint32_size(65, v);
        }
        if let Some(v) = self.jitter_histogram_20 {
            my_size += ::protobuf::rt::uint32_size(66, v);
        }
        if let Some(v) = self.txspeed_max {
            my_size += ::protobuf::rt::uint32_size(67, v);
        }
        if let Some(v) = self.txspeed_histogram_16 {
            my_size += ::protobuf::rt::uint32_size(68, v);
        }
        if let Some(v) = self.txspeed_histogram_32 {
            my_size += ::protobuf::rt::uint32_size(69, v);
        }
        if let Some(v) = self.txspeed_histogram_64 {
            my_size += ::protobuf::rt::uint32_size(70, v);
        }
        if let Some(v) = self.txspeed_histogram_128 {
            my_size += ::protobuf::rt::uint32_size(71, v);
        }
        if let Some(v) = self.txspeed_histogram_256 {
            my_size += ::protobuf::rt::uint32_size(72, v);
        }
        if let Some(v) = self.txspeed_histogram_512 {
            my_size += ::protobuf::rt::uint32_size(73, v);
        }
        if let Some(v) = self.txspeed_histogram_1024 {
            my_size += ::protobuf::rt::uint32_size(74, v);
        }
        if let Some(v) = self.txspeed_histogram_max {
            my_size += ::protobuf::rt::uint32_size(75, v);
        }
        if let Some(v) = self.txspeed_ntile_5th {
            my_size += ::protobuf::rt::uint32_size(76, v);
        }
        if let Some(v) = self.txspeed_ntile_50th {
            my_size += ::protobuf::rt::uint32_size(77, v);
        }
        if let Some(v) = self.txspeed_ntile_75th {
            my_size += ::protobuf::rt::uint32_size(78, v);
        }
        if let Some(v) = self.txspeed_ntile_95th {
            my_size += ::protobuf::rt::uint32_size(79, v);
        }
        if let Some(v) = self.txspeed_ntile_98th {
            my_size += ::protobuf::rt::uint32_size(80, v);
        }
        if let Some(v) = self.rxspeed_max {
            my_size += ::protobuf::rt::uint32_size(81, v);
        }
        if let Some(v) = self.rxspeed_histogram_16 {
            my_size += ::protobuf::rt::uint32_size(82, v);
        }
        if let Some(v) = self.rxspeed_histogram_32 {
            my_size += ::protobuf::rt::uint32_size(83, v);
        }
        if let Some(v) = self.rxspeed_histogram_64 {
            my_size += ::protobuf::rt::uint32_size(84, v);
        }
        if let Some(v) = self.rxspeed_histogram_128 {
            my_size += ::protobuf::rt::uint32_size(85, v);
        }
        if let Some(v) = self.rxspeed_histogram_256 {
            my_size += ::protobuf::rt::uint32_size(86, v);
        }
        if let Some(v) = self.rxspeed_histogram_512 {
            my_size += ::protobuf::rt::uint32_size(87, v);
        }
        if let Some(v) = self.rxspeed_histogram_1024 {
            my_size += ::protobuf::rt::uint32_size(88, v);
        }
        if let Some(v) = self.rxspeed_histogram_max {
            my_size += ::protobuf::rt::uint32_size(89, v);
        }
        if let Some(v) = self.rxspeed_ntile_5th {
            my_size += ::protobuf::rt::uint32_size(90, v);
        }
        if let Some(v) = self.rxspeed_ntile_50th {
            my_size += ::protobuf::rt::uint32_size(91, v);
        }
        if let Some(v) = self.rxspeed_ntile_75th {
            my_size += ::protobuf::rt::uint32_size(92, v);
        }
        if let Some(v) = self.rxspeed_ntile_95th {
            my_size += ::protobuf::rt::uint32_size(93, v);
        }
        if let Some(v) = self.rxspeed_ntile_98th {
            my_size += ::protobuf::rt::uint32_size(94, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.packets_sent {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.kb_sent {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.packets_recv {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.kb_recv {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.packets_recv_sequenced {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.packets_recv_dropped {
            os.write_uint64(8, v)?;
        }
        if let Some(v) = self.packets_recv_out_of_order {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.packets_recv_duplicate {
            os.write_uint64(10, v)?;
        }
        if let Some(v) = self.packets_recv_lurch {
            os.write_uint64(11, v)?;
        }
        if let Some(v) = self.quality_histogram_100 {
            os.write_uint32(21, v)?;
        }
        if let Some(v) = self.quality_histogram_99 {
            os.write_uint32(22, v)?;
        }
        if let Some(v) = self.quality_histogram_97 {
            os.write_uint32(23, v)?;
        }
        if let Some(v) = self.quality_histogram_95 {
            os.write_uint32(24, v)?;
        }
        if let Some(v) = self.quality_histogram_90 {
            os.write_uint32(25, v)?;
        }
        if let Some(v) = self.quality_histogram_75 {
            os.write_uint32(26, v)?;
        }
        if let Some(v) = self.quality_histogram_50 {
            os.write_uint32(27, v)?;
        }
        if let Some(v) = self.quality_histogram_1 {
            os.write_uint32(28, v)?;
        }
        if let Some(v) = self.quality_histogram_dead {
            os.write_uint32(29, v)?;
        }
        if let Some(v) = self.quality_ntile_2nd {
            os.write_uint32(30, v)?;
        }
        if let Some(v) = self.quality_ntile_5th {
            os.write_uint32(31, v)?;
        }
        if let Some(v) = self.quality_ntile_25th {
            os.write_uint32(32, v)?;
        }
        if let Some(v) = self.quality_ntile_50th {
            os.write_uint32(33, v)?;
        }
        if let Some(v) = self.ping_histogram_25 {
            os.write_uint32(41, v)?;
        }
        if let Some(v) = self.ping_histogram_50 {
            os.write_uint32(42, v)?;
        }
        if let Some(v) = self.ping_histogram_75 {
            os.write_uint32(43, v)?;
        }
        if let Some(v) = self.ping_histogram_100 {
            os.write_uint32(44, v)?;
        }
        if let Some(v) = self.ping_histogram_125 {
            os.write_uint32(45, v)?;
        }
        if let Some(v) = self.ping_histogram_150 {
            os.write_uint32(46, v)?;
        }
        if let Some(v) = self.ping_histogram_200 {
            os.write_uint32(47, v)?;
        }
        if let Some(v) = self.ping_histogram_300 {
            os.write_uint32(48, v)?;
        }
        if let Some(v) = self.ping_histogram_max {
            os.write_uint32(49, v)?;
        }
        if let Some(v) = self.ping_ntile_5th {
            os.write_uint32(50, v)?;
        }
        if let Some(v) = self.ping_ntile_50th {
            os.write_uint32(51, v)?;
        }
        if let Some(v) = self.ping_ntile_75th {
            os.write_uint32(52, v)?;
        }
        if let Some(v) = self.ping_ntile_95th {
            os.write_uint32(53, v)?;
        }
        if let Some(v) = self.ping_ntile_98th {
            os.write_uint32(54, v)?;
        }
        if let Some(v) = self.jitter_histogram_negligible {
            os.write_uint32(61, v)?;
        }
        if let Some(v) = self.jitter_histogram_1 {
            os.write_uint32(62, v)?;
        }
        if let Some(v) = self.jitter_histogram_2 {
            os.write_uint32(63, v)?;
        }
        if let Some(v) = self.jitter_histogram_5 {
            os.write_uint32(64, v)?;
        }
        if let Some(v) = self.jitter_histogram_10 {
            os.write_uint32(65, v)?;
        }
        if let Some(v) = self.jitter_histogram_20 {
            os.write_uint32(66, v)?;
        }
        if let Some(v) = self.txspeed_max {
            os.write_uint32(67, v)?;
        }
        if let Some(v) = self.txspeed_histogram_16 {
            os.write_uint32(68, v)?;
        }
        if let Some(v) = self.txspeed_histogram_32 {
            os.write_uint32(69, v)?;
        }
        if let Some(v) = self.txspeed_histogram_64 {
            os.write_uint32(70, v)?;
        }
        if let Some(v) = self.txspeed_histogram_128 {
            os.write_uint32(71, v)?;
        }
        if let Some(v) = self.txspeed_histogram_256 {
            os.write_uint32(72, v)?;
        }
        if let Some(v) = self.txspeed_histogram_512 {
            os.write_uint32(73, v)?;
        }
        if let Some(v) = self.txspeed_histogram_1024 {
            os.write_uint32(74, v)?;
        }
        if let Some(v) = self.txspeed_histogram_max {
            os.write_uint32(75, v)?;
        }
        if let Some(v) = self.txspeed_ntile_5th {
            os.write_uint32(76, v)?;
        }
        if let Some(v) = self.txspeed_ntile_50th {
            os.write_uint32(77, v)?;
        }
        if let Some(v) = self.txspeed_ntile_75th {
            os.write_uint32(78, v)?;
        }
        if let Some(v) = self.txspeed_ntile_95th {
            os.write_uint32(79, v)?;
        }
        if let Some(v) = self.txspeed_ntile_98th {
            os.write_uint32(80, v)?;
        }
        if let Some(v) = self.rxspeed_max {
            os.write_uint32(81, v)?;
        }
        if let Some(v) = self.rxspeed_histogram_16 {
            os.write_uint32(82, v)?;
        }
        if let Some(v) = self.rxspeed_histogram_32 {
            os.write_uint32(83, v)?;
        }
        if let Some(v) = self.rxspeed_histogram_64 {
            os.write_uint32(84, v)?;
        }
        if let Some(v) = self.rxspeed_histogram_128 {
            os.write_uint32(85, v)?;
        }
        if let Some(v) = self.rxspeed_histogram_256 {
            os.write_uint32(86, v)?;
        }
        if let Some(v) = self.rxspeed_histogram_512 {
            os.write_uint32(87, v)?;
        }
        if let Some(v) = self.rxspeed_histogram_1024 {
            os.write_uint32(88, v)?;
        }
        if let Some(v) = self.rxspeed_histogram_max {
            os.write_uint32(89, v)?;
        }
        if let Some(v) = self.rxspeed_ntile_5th {
            os.write_uint32(90, v)?;
        }
        if let Some(v) = self.rxspeed_ntile_50th {
            os.write_uint32(91, v)?;
        }
        if let Some(v) = self.rxspeed_ntile_75th {
            os.write_uint32(92, v)?;
        }
        if let Some(v) = self.rxspeed_ntile_95th {
            os.write_uint32(93, v)?;
        }
        if let Some(v) = self.rxspeed_ntile_98th {
            os.write_uint32(94, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramLinkLifetimeStats {
        CMsgSteamDatagramLinkLifetimeStats::new()
    }

    fn clear(&mut self) {
        self.packets_sent = ::std::option::Option::None;
        self.kb_sent = ::std::option::Option::None;
        self.packets_recv = ::std::option::Option::None;
        self.kb_recv = ::std::option::Option::None;
        self.packets_recv_sequenced = ::std::option::Option::None;
        self.packets_recv_dropped = ::std::option::Option::None;
        self.packets_recv_out_of_order = ::std::option::Option::None;
        self.packets_recv_duplicate = ::std::option::Option::None;
        self.packets_recv_lurch = ::std::option::Option::None;
        self.quality_histogram_100 = ::std::option::Option::None;
        self.quality_histogram_99 = ::std::option::Option::None;
        self.quality_histogram_97 = ::std::option::Option::None;
        self.quality_histogram_95 = ::std::option::Option::None;
        self.quality_histogram_90 = ::std::option::Option::None;
        self.quality_histogram_75 = ::std::option::Option::None;
        self.quality_histogram_50 = ::std::option::Option::None;
        self.quality_histogram_1 = ::std::option::Option::None;
        self.quality_histogram_dead = ::std::option::Option::None;
        self.quality_ntile_2nd = ::std::option::Option::None;
        self.quality_ntile_5th = ::std::option::Option::None;
        self.quality_ntile_25th = ::std::option::Option::None;
        self.quality_ntile_50th = ::std::option::Option::None;
        self.ping_histogram_25 = ::std::option::Option::None;
        self.ping_histogram_50 = ::std::option::Option::None;
        self.ping_histogram_75 = ::std::option::Option::None;
        self.ping_histogram_100 = ::std::option::Option::None;
        self.ping_histogram_125 = ::std::option::Option::None;
        self.ping_histogram_150 = ::std::option::Option::None;
        self.ping_histogram_200 = ::std::option::Option::None;
        self.ping_histogram_300 = ::std::option::Option::None;
        self.ping_histogram_max = ::std::option::Option::None;
        self.ping_ntile_5th = ::std::option::Option::None;
        self.ping_ntile_50th = ::std::option::Option::None;
        self.ping_ntile_75th = ::std::option::Option::None;
        self.ping_ntile_95th = ::std::option::Option::None;
        self.ping_ntile_98th = ::std::option::Option::None;
        self.jitter_histogram_negligible = ::std::option::Option::None;
        self.jitter_histogram_1 = ::std::option::Option::None;
        self.jitter_histogram_2 = ::std::option::Option::None;
        self.jitter_histogram_5 = ::std::option::Option::None;
        self.jitter_histogram_10 = ::std::option::Option::None;
        self.jitter_histogram_20 = ::std::option::Option::None;
        self.txspeed_max = ::std::option::Option::None;
        self.txspeed_histogram_16 = ::std::option::Option::None;
        self.txspeed_histogram_32 = ::std::option::Option::None;
        self.txspeed_histogram_64 = ::std::option::Option::None;
        self.txspeed_histogram_128 = ::std::option::Option::None;
        self.txspeed_histogram_256 = ::std::option::Option::None;
        self.txspeed_histogram_512 = ::std::option::Option::None;
        self.txspeed_histogram_1024 = ::std::option::Option::None;
        self.txspeed_histogram_max = ::std::option::Option::None;
        self.txspeed_ntile_5th = ::std::option::Option::None;
        self.txspeed_ntile_50th = ::std::option::Option::None;
        self.txspeed_ntile_75th = ::std::option::Option::None;
        self.txspeed_ntile_95th = ::std::option::Option::None;
        self.txspeed_ntile_98th = ::std::option::Option::None;
        self.rxspeed_max = ::std::option::Option::None;
        self.rxspeed_histogram_16 = ::std::option::Option::None;
        self.rxspeed_histogram_32 = ::std::option::Option::None;
        self.rxspeed_histogram_64 = ::std::option::Option::None;
        self.rxspeed_histogram_128 = ::std::option::Option::None;
        self.rxspeed_histogram_256 = ::std::option::Option::None;
        self.rxspeed_histogram_512 = ::std::option::Option::None;
        self.rxspeed_histogram_1024 = ::std::option::Option::None;
        self.rxspeed_histogram_max = ::std::option::Option::None;
        self.rxspeed_ntile_5th = ::std::option::Option::None;
        self.rxspeed_ntile_50th = ::std::option::Option::None;
        self.rxspeed_ntile_75th = ::std::option::Option::None;
        self.rxspeed_ntile_95th = ::std::option::Option::None;
        self.rxspeed_ntile_98th = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramLinkLifetimeStats {
        static instance: CMsgSteamDatagramLinkLifetimeStats = CMsgSteamDatagramLinkLifetimeStats {
            packets_sent: ::std::option::Option::None,
            kb_sent: ::std::option::Option::None,
            packets_recv: ::std::option::Option::None,
            kb_recv: ::std::option::Option::None,
            packets_recv_sequenced: ::std::option::Option::None,
            packets_recv_dropped: ::std::option::Option::None,
            packets_recv_out_of_order: ::std::option::Option::None,
            packets_recv_duplicate: ::std::option::Option::None,
            packets_recv_lurch: ::std::option::Option::None,
            quality_histogram_100: ::std::option::Option::None,
            quality_histogram_99: ::std::option::Option::None,
            quality_histogram_97: ::std::option::Option::None,
            quality_histogram_95: ::std::option::Option::None,
            quality_histogram_90: ::std::option::Option::None,
            quality_histogram_75: ::std::option::Option::None,
            quality_histogram_50: ::std::option::Option::None,
            quality_histogram_1: ::std::option::Option::None,
            quality_histogram_dead: ::std::option::Option::None,
            quality_ntile_2nd: ::std::option::Option::None,
            quality_ntile_5th: ::std::option::Option::None,
            quality_ntile_25th: ::std::option::Option::None,
            quality_ntile_50th: ::std::option::Option::None,
            ping_histogram_25: ::std::option::Option::None,
            ping_histogram_50: ::std::option::Option::None,
            ping_histogram_75: ::std::option::Option::None,
            ping_histogram_100: ::std::option::Option::None,
            ping_histogram_125: ::std::option::Option::None,
            ping_histogram_150: ::std::option::Option::None,
            ping_histogram_200: ::std::option::Option::None,
            ping_histogram_300: ::std::option::Option::None,
            ping_histogram_max: ::std::option::Option::None,
            ping_ntile_5th: ::std::option::Option::None,
            ping_ntile_50th: ::std::option::Option::None,
            ping_ntile_75th: ::std::option::Option::None,
            ping_ntile_95th: ::std::option::Option::None,
            ping_ntile_98th: ::std::option::Option::None,
            jitter_histogram_negligible: ::std::option::Option::None,
            jitter_histogram_1: ::std::option::Option::None,
            jitter_histogram_2: ::std::option::Option::None,
            jitter_histogram_5: ::std::option::Option::None,
            jitter_histogram_10: ::std::option::Option::None,
            jitter_histogram_20: ::std::option::Option::None,
            txspeed_max: ::std::option::Option::None,
            txspeed_histogram_16: ::std::option::Option::None,
            txspeed_histogram_32: ::std::option::Option::None,
            txspeed_histogram_64: ::std::option::Option::None,
            txspeed_histogram_128: ::std::option::Option::None,
            txspeed_histogram_256: ::std::option::Option::None,
            txspeed_histogram_512: ::std::option::Option::None,
            txspeed_histogram_1024: ::std::option::Option::None,
            txspeed_histogram_max: ::std::option::Option::None,
            txspeed_ntile_5th: ::std::option::Option::None,
            txspeed_ntile_50th: ::std::option::Option::None,
            txspeed_ntile_75th: ::std::option::Option::None,
            txspeed_ntile_95th: ::std::option::Option::None,
            txspeed_ntile_98th: ::std::option::Option::None,
            rxspeed_max: ::std::option::Option::None,
            rxspeed_histogram_16: ::std::option::Option::None,
            rxspeed_histogram_32: ::std::option::Option::None,
            rxspeed_histogram_64: ::std::option::Option::None,
            rxspeed_histogram_128: ::std::option::Option::None,
            rxspeed_histogram_256: ::std::option::Option::None,
            rxspeed_histogram_512: ::std::option::Option::None,
            rxspeed_histogram_1024: ::std::option::Option::None,
            rxspeed_histogram_max: ::std::option::Option::None,
            rxspeed_ntile_5th: ::std::option::Option::None,
            rxspeed_ntile_50th: ::std::option::Option::None,
            rxspeed_ntile_75th: ::std::option::Option::None,
            rxspeed_ntile_95th: ::std::option::Option::None,
            rxspeed_ntile_98th: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramLinkLifetimeStats {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramLinkLifetimeStats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramLinkLifetimeStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramLinkLifetimeStats {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramConnectionQuality)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramConnectionQuality {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionQuality.instantaneous)
    pub instantaneous: ::protobuf::MessageField<CMsgSteamDatagramLinkInstantaneousStats>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionQuality.lifetime)
    pub lifetime: ::protobuf::MessageField<CMsgSteamDatagramLinkLifetimeStats>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramConnectionQuality.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramConnectionQuality {
    fn default() -> &'a CMsgSteamDatagramConnectionQuality {
        <CMsgSteamDatagramConnectionQuality as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramConnectionQuality {
    pub fn new() -> CMsgSteamDatagramConnectionQuality {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramLinkInstantaneousStats>(
            "instantaneous",
            |m: &CMsgSteamDatagramConnectionQuality| { &m.instantaneous },
            |m: &mut CMsgSteamDatagramConnectionQuality| { &mut m.instantaneous },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramLinkLifetimeStats>(
            "lifetime",
            |m: &CMsgSteamDatagramConnectionQuality| { &m.lifetime },
            |m: &mut CMsgSteamDatagramConnectionQuality| { &mut m.lifetime },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramConnectionQuality>(
            "CMsgSteamDatagramConnectionQuality",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramConnectionQuality {
    const NAME: &'static str = "CMsgSteamDatagramConnectionQuality";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.instantaneous)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lifetime)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.instantaneous.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lifetime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.instantaneous.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.lifetime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramConnectionQuality {
        CMsgSteamDatagramConnectionQuality::new()
    }

    fn clear(&mut self) {
        self.instantaneous.clear();
        self.lifetime.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramConnectionQuality {
        static instance: CMsgSteamDatagramConnectionQuality = CMsgSteamDatagramConnectionQuality {
            instantaneous: ::protobuf::MessageField::none(),
            lifetime: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramConnectionQuality {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramConnectionQuality").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramConnectionQuality {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramConnectionQuality {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramConnectionStatsClientToRouter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramConnectionStatsClientToRouter {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsClientToRouter.c2r)
    pub c2r: ::protobuf::MessageField<CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsClientToRouter.c2s)
    pub c2s: ::protobuf::MessageField<CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsClientToRouter.legacy_client_timestamp)
    pub legacy_client_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsClientToRouter.ack_relay)
    pub ack_relay: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsClientToRouter.ack_e2e)
    pub ack_e2e: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsClientToRouter.flags)
    pub flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsClientToRouter.client_connection_id)
    pub client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsClientToRouter.seq_num_c2r)
    pub seq_num_c2r: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsClientToRouter.seq_num_c2s)
    pub seq_num_c2s: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramConnectionStatsClientToRouter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramConnectionStatsClientToRouter {
    fn default() -> &'a CMsgSteamDatagramConnectionStatsClientToRouter {
        <CMsgSteamDatagramConnectionStatsClientToRouter as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramConnectionStatsClientToRouter {
    pub fn new() -> CMsgSteamDatagramConnectionStatsClientToRouter {
        ::std::default::Default::default()
    }

    // optional fixed32 legacy_client_timestamp = 3;

    pub fn legacy_client_timestamp(&self) -> u32 {
        self.legacy_client_timestamp.unwrap_or(0)
    }

    pub fn clear_legacy_client_timestamp(&mut self) {
        self.legacy_client_timestamp = ::std::option::Option::None;
    }

    pub fn has_legacy_client_timestamp(&self) -> bool {
        self.legacy_client_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_client_timestamp(&mut self, v: u32) {
        self.legacy_client_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 flags = 6;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional fixed32 client_connection_id = 8;

    pub fn client_connection_id(&self) -> u32 {
        self.client_connection_id.unwrap_or(0)
    }

    pub fn clear_client_connection_id(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
    }

    pub fn has_client_connection_id(&self) -> bool {
        self.client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_connection_id(&mut self, v: u32) {
        self.client_connection_id = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_c2r = 9;

    pub fn seq_num_c2r(&self) -> u32 {
        self.seq_num_c2r.unwrap_or(0)
    }

    pub fn clear_seq_num_c2r(&mut self) {
        self.seq_num_c2r = ::std::option::Option::None;
    }

    pub fn has_seq_num_c2r(&self) -> bool {
        self.seq_num_c2r.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_c2r(&mut self, v: u32) {
        self.seq_num_c2r = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_c2s = 10;

    pub fn seq_num_c2s(&self) -> u32 {
        self.seq_num_c2s.unwrap_or(0)
    }

    pub fn clear_seq_num_c2s(&mut self) {
        self.seq_num_c2s = ::std::option::Option::None;
    }

    pub fn has_seq_num_c2s(&self) -> bool {
        self.seq_num_c2s.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_c2s(&mut self, v: u32) {
        self.seq_num_c2s = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionQuality>(
            "c2r",
            |m: &CMsgSteamDatagramConnectionStatsClientToRouter| { &m.c2r },
            |m: &mut CMsgSteamDatagramConnectionStatsClientToRouter| { &mut m.c2r },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionQuality>(
            "c2s",
            |m: &CMsgSteamDatagramConnectionStatsClientToRouter| { &m.c2s },
            |m: &mut CMsgSteamDatagramConnectionStatsClientToRouter| { &mut m.c2s },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_client_timestamp",
            |m: &CMsgSteamDatagramConnectionStatsClientToRouter| { &m.legacy_client_timestamp },
            |m: &mut CMsgSteamDatagramConnectionStatsClientToRouter| { &mut m.legacy_client_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_relay",
            |m: &CMsgSteamDatagramConnectionStatsClientToRouter| { &m.ack_relay },
            |m: &mut CMsgSteamDatagramConnectionStatsClientToRouter| { &mut m.ack_relay },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_e2e",
            |m: &CMsgSteamDatagramConnectionStatsClientToRouter| { &m.ack_e2e },
            |m: &mut CMsgSteamDatagramConnectionStatsClientToRouter| { &mut m.ack_e2e },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "flags",
            |m: &CMsgSteamDatagramConnectionStatsClientToRouter| { &m.flags },
            |m: &mut CMsgSteamDatagramConnectionStatsClientToRouter| { &mut m.flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_connection_id",
            |m: &CMsgSteamDatagramConnectionStatsClientToRouter| { &m.client_connection_id },
            |m: &mut CMsgSteamDatagramConnectionStatsClientToRouter| { &mut m.client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_c2r",
            |m: &CMsgSteamDatagramConnectionStatsClientToRouter| { &m.seq_num_c2r },
            |m: &mut CMsgSteamDatagramConnectionStatsClientToRouter| { &mut m.seq_num_c2r },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_c2s",
            |m: &CMsgSteamDatagramConnectionStatsClientToRouter| { &m.seq_num_c2s },
            |m: &mut CMsgSteamDatagramConnectionStatsClientToRouter| { &mut m.seq_num_c2s },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramConnectionStatsClientToRouter>(
            "CMsgSteamDatagramConnectionStatsClientToRouter",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramConnectionStatsClientToRouter {
    const NAME: &'static str = "CMsgSteamDatagramConnectionStatsClientToRouter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.c2r)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.c2s)?;
                },
                29 => {
                    self.legacy_client_timestamp = ::std::option::Option::Some(is.read_fixed32()?);
                },
                34 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ack_relay)?;
                },
                37 => {
                    self.ack_relay.push(is.read_fixed32()?);
                },
                42 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ack_e2e)?;
                },
                45 => {
                    self.ack_e2e.push(is.read_fixed32()?);
                },
                48 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                69 => {
                    self.client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                72 => {
                    self.seq_num_c2r = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.seq_num_c2s = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.c2r.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.c2s.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.legacy_client_timestamp {
            my_size += 1 + 4;
        }
        my_size += 5 * self.ack_relay.len() as u64;
        my_size += 5 * self.ack_e2e.len() as u64;
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.seq_num_c2r {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.seq_num_c2s {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.c2r.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.c2s.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.legacy_client_timestamp {
            os.write_fixed32(3, v)?;
        }
        for v in &self.ack_relay {
            os.write_fixed32(4, *v)?;
        };
        for v in &self.ack_e2e {
            os.write_fixed32(5, *v)?;
        };
        if let Some(v) = self.flags {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.client_connection_id {
            os.write_fixed32(8, v)?;
        }
        if let Some(v) = self.seq_num_c2r {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.seq_num_c2s {
            os.write_uint32(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramConnectionStatsClientToRouter {
        CMsgSteamDatagramConnectionStatsClientToRouter::new()
    }

    fn clear(&mut self) {
        self.c2r.clear();
        self.c2s.clear();
        self.legacy_client_timestamp = ::std::option::Option::None;
        self.ack_relay.clear();
        self.ack_e2e.clear();
        self.flags = ::std::option::Option::None;
        self.client_connection_id = ::std::option::Option::None;
        self.seq_num_c2r = ::std::option::Option::None;
        self.seq_num_c2s = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramConnectionStatsClientToRouter {
        static instance: CMsgSteamDatagramConnectionStatsClientToRouter = CMsgSteamDatagramConnectionStatsClientToRouter {
            c2r: ::protobuf::MessageField::none(),
            c2s: ::protobuf::MessageField::none(),
            legacy_client_timestamp: ::std::option::Option::None,
            ack_relay: ::std::vec::Vec::new(),
            ack_e2e: ::std::vec::Vec::new(),
            flags: ::std::option::Option::None,
            client_connection_id: ::std::option::Option::None,
            seq_num_c2r: ::std::option::Option::None,
            seq_num_c2s: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramConnectionStatsClientToRouter {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramConnectionStatsClientToRouter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramConnectionStatsClientToRouter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramConnectionStatsClientToRouter {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramConnectionStatsClientToRouter`
pub mod cmsg_steam_datagram_connection_stats_client_to_router {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgSteamDatagramConnectionStatsClientToRouter.Flags)
    pub enum Flags {
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsClientToRouter.Flags.ACK_REQUEST_RELAY)
        ACK_REQUEST_RELAY = 1,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsClientToRouter.Flags.ACK_REQUEST_E2E)
        ACK_REQUEST_E2E = 2,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsClientToRouter.Flags.ACK_REQUEST_IMMEDIATE)
        ACK_REQUEST_IMMEDIATE = 4,
    }

    impl ::protobuf::Enum for Flags {
        const NAME: &'static str = "Flags";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Flags> {
            match value {
                1 => ::std::option::Option::Some(Flags::ACK_REQUEST_RELAY),
                2 => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                4 => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Flags> {
            match str {
                "ACK_REQUEST_RELAY" => ::std::option::Option::Some(Flags::ACK_REQUEST_RELAY),
                "ACK_REQUEST_E2E" => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                "ACK_REQUEST_IMMEDIATE" => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Flags] = &[
            Flags::ACK_REQUEST_RELAY,
            Flags::ACK_REQUEST_E2E,
            Flags::ACK_REQUEST_IMMEDIATE,
        ];
    }

    impl ::protobuf::EnumFull for Flags {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgSteamDatagramConnectionStatsClientToRouter.Flags").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Flags::ACK_REQUEST_RELAY => 0,
                Flags::ACK_REQUEST_E2E => 1,
                Flags::ACK_REQUEST_IMMEDIATE => 2,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Flags {
        fn default() -> Self {
            Flags::ACK_REQUEST_RELAY
        }
    }

    impl Flags {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Flags>("CMsgSteamDatagramConnectionStatsClientToRouter.Flags")
        }
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramConnectionStatsRouterToClient)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramConnectionStatsRouterToClient {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.r2c)
    pub r2c: ::protobuf::MessageField<CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.s2c)
    pub s2c: ::protobuf::MessageField<CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.legacy_client_timestamp_from_router)
    pub legacy_client_timestamp_from_router: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.legacy_client_timestamp_from_server)
    pub legacy_client_timestamp_from_server: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.router_gameserver_latency)
    pub router_gameserver_latency: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.seconds_until_shutdown)
    pub seconds_until_shutdown: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.migrate_request_ip)
    pub migrate_request_ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.migrate_request_port)
    pub migrate_request_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.scoring_penalty_relay_cluster)
    pub scoring_penalty_relay_cluster: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.ack_relay)
    pub ack_relay: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.ack_e2e)
    pub ack_e2e: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.flags)
    pub flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.client_connection_id)
    pub client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.seq_num_r2c)
    pub seq_num_r2c: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToClient.seq_num_s2c)
    pub seq_num_s2c: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramConnectionStatsRouterToClient.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramConnectionStatsRouterToClient {
    fn default() -> &'a CMsgSteamDatagramConnectionStatsRouterToClient {
        <CMsgSteamDatagramConnectionStatsRouterToClient as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramConnectionStatsRouterToClient {
    pub fn new() -> CMsgSteamDatagramConnectionStatsRouterToClient {
        ::std::default::Default::default()
    }

    // optional fixed32 legacy_client_timestamp_from_router = 3;

    pub fn legacy_client_timestamp_from_router(&self) -> u32 {
        self.legacy_client_timestamp_from_router.unwrap_or(0)
    }

    pub fn clear_legacy_client_timestamp_from_router(&mut self) {
        self.legacy_client_timestamp_from_router = ::std::option::Option::None;
    }

    pub fn has_legacy_client_timestamp_from_router(&self) -> bool {
        self.legacy_client_timestamp_from_router.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_client_timestamp_from_router(&mut self, v: u32) {
        self.legacy_client_timestamp_from_router = ::std::option::Option::Some(v);
    }

    // optional fixed32 legacy_client_timestamp_from_server = 4;

    pub fn legacy_client_timestamp_from_server(&self) -> u32 {
        self.legacy_client_timestamp_from_server.unwrap_or(0)
    }

    pub fn clear_legacy_client_timestamp_from_server(&mut self) {
        self.legacy_client_timestamp_from_server = ::std::option::Option::None;
    }

    pub fn has_legacy_client_timestamp_from_server(&self) -> bool {
        self.legacy_client_timestamp_from_server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_client_timestamp_from_server(&mut self, v: u32) {
        self.legacy_client_timestamp_from_server = ::std::option::Option::Some(v);
    }

    // optional uint32 router_gameserver_latency = 5;

    pub fn router_gameserver_latency(&self) -> u32 {
        self.router_gameserver_latency.unwrap_or(0)
    }

    pub fn clear_router_gameserver_latency(&mut self) {
        self.router_gameserver_latency = ::std::option::Option::None;
    }

    pub fn has_router_gameserver_latency(&self) -> bool {
        self.router_gameserver_latency.is_some()
    }

    // Param is passed by value, moved
    pub fn set_router_gameserver_latency(&mut self, v: u32) {
        self.router_gameserver_latency = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_until_shutdown = 6;

    pub fn seconds_until_shutdown(&self) -> u32 {
        self.seconds_until_shutdown.unwrap_or(0)
    }

    pub fn clear_seconds_until_shutdown(&mut self) {
        self.seconds_until_shutdown = ::std::option::Option::None;
    }

    pub fn has_seconds_until_shutdown(&self) -> bool {
        self.seconds_until_shutdown.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_until_shutdown(&mut self, v: u32) {
        self.seconds_until_shutdown = ::std::option::Option::Some(v);
    }

    // optional fixed32 migrate_request_ip = 10;

    pub fn migrate_request_ip(&self) -> u32 {
        self.migrate_request_ip.unwrap_or(0)
    }

    pub fn clear_migrate_request_ip(&mut self) {
        self.migrate_request_ip = ::std::option::Option::None;
    }

    pub fn has_migrate_request_ip(&self) -> bool {
        self.migrate_request_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_migrate_request_ip(&mut self, v: u32) {
        self.migrate_request_ip = ::std::option::Option::Some(v);
    }

    // optional uint32 migrate_request_port = 11;

    pub fn migrate_request_port(&self) -> u32 {
        self.migrate_request_port.unwrap_or(0)
    }

    pub fn clear_migrate_request_port(&mut self) {
        self.migrate_request_port = ::std::option::Option::None;
    }

    pub fn has_migrate_request_port(&self) -> bool {
        self.migrate_request_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_migrate_request_port(&mut self, v: u32) {
        self.migrate_request_port = ::std::option::Option::Some(v);
    }

    // optional uint32 scoring_penalty_relay_cluster = 12;

    pub fn scoring_penalty_relay_cluster(&self) -> u32 {
        self.scoring_penalty_relay_cluster.unwrap_or(0)
    }

    pub fn clear_scoring_penalty_relay_cluster(&mut self) {
        self.scoring_penalty_relay_cluster = ::std::option::Option::None;
    }

    pub fn has_scoring_penalty_relay_cluster(&self) -> bool {
        self.scoring_penalty_relay_cluster.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scoring_penalty_relay_cluster(&mut self, v: u32) {
        self.scoring_penalty_relay_cluster = ::std::option::Option::Some(v);
    }

    // optional uint32 flags = 15;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional fixed32 client_connection_id = 7;

    pub fn client_connection_id(&self) -> u32 {
        self.client_connection_id.unwrap_or(0)
    }

    pub fn clear_client_connection_id(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
    }

    pub fn has_client_connection_id(&self) -> bool {
        self.client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_connection_id(&mut self, v: u32) {
        self.client_connection_id = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_r2c = 8;

    pub fn seq_num_r2c(&self) -> u32 {
        self.seq_num_r2c.unwrap_or(0)
    }

    pub fn clear_seq_num_r2c(&mut self) {
        self.seq_num_r2c = ::std::option::Option::None;
    }

    pub fn has_seq_num_r2c(&self) -> bool {
        self.seq_num_r2c.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_r2c(&mut self, v: u32) {
        self.seq_num_r2c = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_s2c = 9;

    pub fn seq_num_s2c(&self) -> u32 {
        self.seq_num_s2c.unwrap_or(0)
    }

    pub fn clear_seq_num_s2c(&mut self) {
        self.seq_num_s2c = ::std::option::Option::None;
    }

    pub fn has_seq_num_s2c(&self) -> bool {
        self.seq_num_s2c.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_s2c(&mut self, v: u32) {
        self.seq_num_s2c = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionQuality>(
            "r2c",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.r2c },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.r2c },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionQuality>(
            "s2c",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.s2c },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.s2c },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_client_timestamp_from_router",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.legacy_client_timestamp_from_router },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.legacy_client_timestamp_from_router },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_client_timestamp_from_server",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.legacy_client_timestamp_from_server },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.legacy_client_timestamp_from_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "router_gameserver_latency",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.router_gameserver_latency },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.router_gameserver_latency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_until_shutdown",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.seconds_until_shutdown },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.seconds_until_shutdown },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "migrate_request_ip",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.migrate_request_ip },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.migrate_request_ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "migrate_request_port",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.migrate_request_port },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.migrate_request_port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "scoring_penalty_relay_cluster",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.scoring_penalty_relay_cluster },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.scoring_penalty_relay_cluster },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_relay",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.ack_relay },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.ack_relay },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_e2e",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.ack_e2e },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.ack_e2e },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "flags",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.flags },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_connection_id",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.client_connection_id },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_r2c",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.seq_num_r2c },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.seq_num_r2c },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_s2c",
            |m: &CMsgSteamDatagramConnectionStatsRouterToClient| { &m.seq_num_s2c },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToClient| { &mut m.seq_num_s2c },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramConnectionStatsRouterToClient>(
            "CMsgSteamDatagramConnectionStatsRouterToClient",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramConnectionStatsRouterToClient {
    const NAME: &'static str = "CMsgSteamDatagramConnectionStatsRouterToClient";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.r2c)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.s2c)?;
                },
                29 => {
                    self.legacy_client_timestamp_from_router = ::std::option::Option::Some(is.read_fixed32()?);
                },
                37 => {
                    self.legacy_client_timestamp_from_server = ::std::option::Option::Some(is.read_fixed32()?);
                },
                40 => {
                    self.router_gameserver_latency = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.seconds_until_shutdown = ::std::option::Option::Some(is.read_uint32()?);
                },
                85 => {
                    self.migrate_request_ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                88 => {
                    self.migrate_request_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                96 => {
                    self.scoring_penalty_relay_cluster = ::std::option::Option::Some(is.read_uint32()?);
                },
                106 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ack_relay)?;
                },
                109 => {
                    self.ack_relay.push(is.read_fixed32()?);
                },
                114 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ack_e2e)?;
                },
                117 => {
                    self.ack_e2e.push(is.read_fixed32()?);
                },
                120 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                61 => {
                    self.client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                64 => {
                    self.seq_num_r2c = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.seq_num_s2c = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.r2c.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.s2c.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.legacy_client_timestamp_from_router {
            my_size += 1 + 4;
        }
        if let Some(v) = self.legacy_client_timestamp_from_server {
            my_size += 1 + 4;
        }
        if let Some(v) = self.router_gameserver_latency {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.seconds_until_shutdown {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.migrate_request_ip {
            my_size += 1 + 4;
        }
        if let Some(v) = self.migrate_request_port {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.scoring_penalty_relay_cluster {
            my_size += ::protobuf::rt::uint32_size(12, v);
        }
        my_size += 5 * self.ack_relay.len() as u64;
        my_size += 5 * self.ack_e2e.len() as u64;
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::uint32_size(15, v);
        }
        if let Some(v) = self.client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.seq_num_r2c {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.seq_num_s2c {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.r2c.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.s2c.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.legacy_client_timestamp_from_router {
            os.write_fixed32(3, v)?;
        }
        if let Some(v) = self.legacy_client_timestamp_from_server {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.router_gameserver_latency {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.seconds_until_shutdown {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.migrate_request_ip {
            os.write_fixed32(10, v)?;
        }
        if let Some(v) = self.migrate_request_port {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.scoring_penalty_relay_cluster {
            os.write_uint32(12, v)?;
        }
        for v in &self.ack_relay {
            os.write_fixed32(13, *v)?;
        };
        for v in &self.ack_e2e {
            os.write_fixed32(14, *v)?;
        };
        if let Some(v) = self.flags {
            os.write_uint32(15, v)?;
        }
        if let Some(v) = self.client_connection_id {
            os.write_fixed32(7, v)?;
        }
        if let Some(v) = self.seq_num_r2c {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.seq_num_s2c {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramConnectionStatsRouterToClient {
        CMsgSteamDatagramConnectionStatsRouterToClient::new()
    }

    fn clear(&mut self) {
        self.r2c.clear();
        self.s2c.clear();
        self.legacy_client_timestamp_from_router = ::std::option::Option::None;
        self.legacy_client_timestamp_from_server = ::std::option::Option::None;
        self.router_gameserver_latency = ::std::option::Option::None;
        self.seconds_until_shutdown = ::std::option::Option::None;
        self.migrate_request_ip = ::std::option::Option::None;
        self.migrate_request_port = ::std::option::Option::None;
        self.scoring_penalty_relay_cluster = ::std::option::Option::None;
        self.ack_relay.clear();
        self.ack_e2e.clear();
        self.flags = ::std::option::Option::None;
        self.client_connection_id = ::std::option::Option::None;
        self.seq_num_r2c = ::std::option::Option::None;
        self.seq_num_s2c = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramConnectionStatsRouterToClient {
        static instance: CMsgSteamDatagramConnectionStatsRouterToClient = CMsgSteamDatagramConnectionStatsRouterToClient {
            r2c: ::protobuf::MessageField::none(),
            s2c: ::protobuf::MessageField::none(),
            legacy_client_timestamp_from_router: ::std::option::Option::None,
            legacy_client_timestamp_from_server: ::std::option::Option::None,
            router_gameserver_latency: ::std::option::Option::None,
            seconds_until_shutdown: ::std::option::Option::None,
            migrate_request_ip: ::std::option::Option::None,
            migrate_request_port: ::std::option::Option::None,
            scoring_penalty_relay_cluster: ::std::option::Option::None,
            ack_relay: ::std::vec::Vec::new(),
            ack_e2e: ::std::vec::Vec::new(),
            flags: ::std::option::Option::None,
            client_connection_id: ::std::option::Option::None,
            seq_num_r2c: ::std::option::Option::None,
            seq_num_s2c: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramConnectionStatsRouterToClient {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramConnectionStatsRouterToClient").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramConnectionStatsRouterToClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramConnectionStatsRouterToClient {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramConnectionStatsRouterToClient`
pub mod cmsg_steam_datagram_connection_stats_router_to_client {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgSteamDatagramConnectionStatsRouterToClient.Flags)
    pub enum Flags {
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsRouterToClient.Flags.ACK_REQUEST_RELAY)
        ACK_REQUEST_RELAY = 1,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsRouterToClient.Flags.ACK_REQUEST_E2E)
        ACK_REQUEST_E2E = 2,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsRouterToClient.Flags.ACK_REQUEST_IMMEDIATE)
        ACK_REQUEST_IMMEDIATE = 4,
    }

    impl ::protobuf::Enum for Flags {
        const NAME: &'static str = "Flags";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Flags> {
            match value {
                1 => ::std::option::Option::Some(Flags::ACK_REQUEST_RELAY),
                2 => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                4 => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Flags> {
            match str {
                "ACK_REQUEST_RELAY" => ::std::option::Option::Some(Flags::ACK_REQUEST_RELAY),
                "ACK_REQUEST_E2E" => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                "ACK_REQUEST_IMMEDIATE" => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Flags] = &[
            Flags::ACK_REQUEST_RELAY,
            Flags::ACK_REQUEST_E2E,
            Flags::ACK_REQUEST_IMMEDIATE,
        ];
    }

    impl ::protobuf::EnumFull for Flags {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgSteamDatagramConnectionStatsRouterToClient.Flags").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Flags::ACK_REQUEST_RELAY => 0,
                Flags::ACK_REQUEST_E2E => 1,
                Flags::ACK_REQUEST_IMMEDIATE => 2,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Flags {
        fn default() -> Self {
            Flags::ACK_REQUEST_RELAY
        }
    }

    impl Flags {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Flags>("CMsgSteamDatagramConnectionStatsRouterToClient.Flags")
        }
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramConnectionStatsRouterToServer)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramConnectionStatsRouterToServer {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToServer.r2s)
    pub r2s: ::protobuf::MessageField<CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToServer.c2s)
    pub c2s: ::protobuf::MessageField<CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToServer.legacy_client_timestamp)
    pub legacy_client_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToServer.legacy_router_timestamp)
    pub legacy_router_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToServer.ack_relay)
    pub ack_relay: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToServer.ack_e2e)
    pub ack_e2e: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToServer.flags)
    pub flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToServer.seq_num_r2s)
    pub seq_num_r2s: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToServer.seq_num_c2s)
    pub seq_num_c2s: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToServer.client_steam_id)
    pub client_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToServer.relay_session_id)
    pub relay_session_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToServer.client_connection_id)
    pub client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsRouterToServer.server_connection_id)
    pub server_connection_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramConnectionStatsRouterToServer.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramConnectionStatsRouterToServer {
    fn default() -> &'a CMsgSteamDatagramConnectionStatsRouterToServer {
        <CMsgSteamDatagramConnectionStatsRouterToServer as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramConnectionStatsRouterToServer {
    pub fn new() -> CMsgSteamDatagramConnectionStatsRouterToServer {
        ::std::default::Default::default()
    }

    // optional fixed32 legacy_client_timestamp = 3;

    pub fn legacy_client_timestamp(&self) -> u32 {
        self.legacy_client_timestamp.unwrap_or(0)
    }

    pub fn clear_legacy_client_timestamp(&mut self) {
        self.legacy_client_timestamp = ::std::option::Option::None;
    }

    pub fn has_legacy_client_timestamp(&self) -> bool {
        self.legacy_client_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_client_timestamp(&mut self, v: u32) {
        self.legacy_client_timestamp = ::std::option::Option::Some(v);
    }

    // optional fixed32 legacy_router_timestamp = 4;

    pub fn legacy_router_timestamp(&self) -> u32 {
        self.legacy_router_timestamp.unwrap_or(0)
    }

    pub fn clear_legacy_router_timestamp(&mut self) {
        self.legacy_router_timestamp = ::std::option::Option::None;
    }

    pub fn has_legacy_router_timestamp(&self) -> bool {
        self.legacy_router_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_router_timestamp(&mut self, v: u32) {
        self.legacy_router_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 flags = 12;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_r2s = 5;

    pub fn seq_num_r2s(&self) -> u32 {
        self.seq_num_r2s.unwrap_or(0)
    }

    pub fn clear_seq_num_r2s(&mut self) {
        self.seq_num_r2s = ::std::option::Option::None;
    }

    pub fn has_seq_num_r2s(&self) -> bool {
        self.seq_num_r2s.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_r2s(&mut self, v: u32) {
        self.seq_num_r2s = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_c2s = 6;

    pub fn seq_num_c2s(&self) -> u32 {
        self.seq_num_c2s.unwrap_or(0)
    }

    pub fn clear_seq_num_c2s(&mut self) {
        self.seq_num_c2s = ::std::option::Option::None;
    }

    pub fn has_seq_num_c2s(&self) -> bool {
        self.seq_num_c2s.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_c2s(&mut self, v: u32) {
        self.seq_num_c2s = ::std::option::Option::Some(v);
    }

    // optional fixed64 client_steam_id = 7;

    pub fn client_steam_id(&self) -> u64 {
        self.client_steam_id.unwrap_or(0)
    }

    pub fn clear_client_steam_id(&mut self) {
        self.client_steam_id = ::std::option::Option::None;
    }

    pub fn has_client_steam_id(&self) -> bool {
        self.client_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_steam_id(&mut self, v: u64) {
        self.client_steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 relay_session_id = 8;

    pub fn relay_session_id(&self) -> u32 {
        self.relay_session_id.unwrap_or(0)
    }

    pub fn clear_relay_session_id(&mut self) {
        self.relay_session_id = ::std::option::Option::None;
    }

    pub fn has_relay_session_id(&self) -> bool {
        self.relay_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_relay_session_id(&mut self, v: u32) {
        self.relay_session_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 client_connection_id = 9;

    pub fn client_connection_id(&self) -> u32 {
        self.client_connection_id.unwrap_or(0)
    }

    pub fn clear_client_connection_id(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
    }

    pub fn has_client_connection_id(&self) -> bool {
        self.client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_connection_id(&mut self, v: u32) {
        self.client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 server_connection_id = 13;

    pub fn server_connection_id(&self) -> u32 {
        self.server_connection_id.unwrap_or(0)
    }

    pub fn clear_server_connection_id(&mut self) {
        self.server_connection_id = ::std::option::Option::None;
    }

    pub fn has_server_connection_id(&self) -> bool {
        self.server_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_connection_id(&mut self, v: u32) {
        self.server_connection_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionQuality>(
            "r2s",
            |m: &CMsgSteamDatagramConnectionStatsRouterToServer| { &m.r2s },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToServer| { &mut m.r2s },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionQuality>(
            "c2s",
            |m: &CMsgSteamDatagramConnectionStatsRouterToServer| { &m.c2s },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToServer| { &mut m.c2s },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_client_timestamp",
            |m: &CMsgSteamDatagramConnectionStatsRouterToServer| { &m.legacy_client_timestamp },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToServer| { &mut m.legacy_client_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_router_timestamp",
            |m: &CMsgSteamDatagramConnectionStatsRouterToServer| { &m.legacy_router_timestamp },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToServer| { &mut m.legacy_router_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_relay",
            |m: &CMsgSteamDatagramConnectionStatsRouterToServer| { &m.ack_relay },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToServer| { &mut m.ack_relay },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_e2e",
            |m: &CMsgSteamDatagramConnectionStatsRouterToServer| { &m.ack_e2e },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToServer| { &mut m.ack_e2e },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "flags",
            |m: &CMsgSteamDatagramConnectionStatsRouterToServer| { &m.flags },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToServer| { &mut m.flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_r2s",
            |m: &CMsgSteamDatagramConnectionStatsRouterToServer| { &m.seq_num_r2s },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToServer| { &mut m.seq_num_r2s },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_c2s",
            |m: &CMsgSteamDatagramConnectionStatsRouterToServer| { &m.seq_num_c2s },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToServer| { &mut m.seq_num_c2s },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_steam_id",
            |m: &CMsgSteamDatagramConnectionStatsRouterToServer| { &m.client_steam_id },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToServer| { &mut m.client_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "relay_session_id",
            |m: &CMsgSteamDatagramConnectionStatsRouterToServer| { &m.relay_session_id },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToServer| { &mut m.relay_session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_connection_id",
            |m: &CMsgSteamDatagramConnectionStatsRouterToServer| { &m.client_connection_id },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToServer| { &mut m.client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_connection_id",
            |m: &CMsgSteamDatagramConnectionStatsRouterToServer| { &m.server_connection_id },
            |m: &mut CMsgSteamDatagramConnectionStatsRouterToServer| { &mut m.server_connection_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramConnectionStatsRouterToServer>(
            "CMsgSteamDatagramConnectionStatsRouterToServer",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramConnectionStatsRouterToServer {
    const NAME: &'static str = "CMsgSteamDatagramConnectionStatsRouterToServer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.r2s)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.c2s)?;
                },
                29 => {
                    self.legacy_client_timestamp = ::std::option::Option::Some(is.read_fixed32()?);
                },
                37 => {
                    self.legacy_router_timestamp = ::std::option::Option::Some(is.read_fixed32()?);
                },
                82 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ack_relay)?;
                },
                85 => {
                    self.ack_relay.push(is.read_fixed32()?);
                },
                90 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ack_e2e)?;
                },
                93 => {
                    self.ack_e2e.push(is.read_fixed32()?);
                },
                96 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.seq_num_r2s = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.seq_num_c2s = ::std::option::Option::Some(is.read_uint32()?);
                },
                57 => {
                    self.client_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                64 => {
                    self.relay_session_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                77 => {
                    self.client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                109 => {
                    self.server_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.r2s.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.c2s.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.legacy_client_timestamp {
            my_size += 1 + 4;
        }
        if let Some(v) = self.legacy_router_timestamp {
            my_size += 1 + 4;
        }
        my_size += 5 * self.ack_relay.len() as u64;
        my_size += 5 * self.ack_e2e.len() as u64;
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::uint32_size(12, v);
        }
        if let Some(v) = self.seq_num_r2s {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.seq_num_c2s {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.client_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.relay_session_id {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.server_connection_id {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.r2s.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.c2s.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.legacy_client_timestamp {
            os.write_fixed32(3, v)?;
        }
        if let Some(v) = self.legacy_router_timestamp {
            os.write_fixed32(4, v)?;
        }
        for v in &self.ack_relay {
            os.write_fixed32(10, *v)?;
        };
        for v in &self.ack_e2e {
            os.write_fixed32(11, *v)?;
        };
        if let Some(v) = self.flags {
            os.write_uint32(12, v)?;
        }
        if let Some(v) = self.seq_num_r2s {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.seq_num_c2s {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.client_steam_id {
            os.write_fixed64(7, v)?;
        }
        if let Some(v) = self.relay_session_id {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.client_connection_id {
            os.write_fixed32(9, v)?;
        }
        if let Some(v) = self.server_connection_id {
            os.write_fixed32(13, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramConnectionStatsRouterToServer {
        CMsgSteamDatagramConnectionStatsRouterToServer::new()
    }

    fn clear(&mut self) {
        self.r2s.clear();
        self.c2s.clear();
        self.legacy_client_timestamp = ::std::option::Option::None;
        self.legacy_router_timestamp = ::std::option::Option::None;
        self.ack_relay.clear();
        self.ack_e2e.clear();
        self.flags = ::std::option::Option::None;
        self.seq_num_r2s = ::std::option::Option::None;
        self.seq_num_c2s = ::std::option::Option::None;
        self.client_steam_id = ::std::option::Option::None;
        self.relay_session_id = ::std::option::Option::None;
        self.client_connection_id = ::std::option::Option::None;
        self.server_connection_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramConnectionStatsRouterToServer {
        static instance: CMsgSteamDatagramConnectionStatsRouterToServer = CMsgSteamDatagramConnectionStatsRouterToServer {
            r2s: ::protobuf::MessageField::none(),
            c2s: ::protobuf::MessageField::none(),
            legacy_client_timestamp: ::std::option::Option::None,
            legacy_router_timestamp: ::std::option::Option::None,
            ack_relay: ::std::vec::Vec::new(),
            ack_e2e: ::std::vec::Vec::new(),
            flags: ::std::option::Option::None,
            seq_num_r2s: ::std::option::Option::None,
            seq_num_c2s: ::std::option::Option::None,
            client_steam_id: ::std::option::Option::None,
            relay_session_id: ::std::option::Option::None,
            client_connection_id: ::std::option::Option::None,
            server_connection_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramConnectionStatsRouterToServer {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramConnectionStatsRouterToServer").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramConnectionStatsRouterToServer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramConnectionStatsRouterToServer {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramConnectionStatsRouterToServer`
pub mod cmsg_steam_datagram_connection_stats_router_to_server {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgSteamDatagramConnectionStatsRouterToServer.Flags)
    pub enum Flags {
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsRouterToServer.Flags.ACK_REQUEST_RELAY)
        ACK_REQUEST_RELAY = 1,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsRouterToServer.Flags.ACK_REQUEST_E2E)
        ACK_REQUEST_E2E = 2,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsRouterToServer.Flags.ACK_REQUEST_IMMEDIATE)
        ACK_REQUEST_IMMEDIATE = 4,
    }

    impl ::protobuf::Enum for Flags {
        const NAME: &'static str = "Flags";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Flags> {
            match value {
                1 => ::std::option::Option::Some(Flags::ACK_REQUEST_RELAY),
                2 => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                4 => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Flags> {
            match str {
                "ACK_REQUEST_RELAY" => ::std::option::Option::Some(Flags::ACK_REQUEST_RELAY),
                "ACK_REQUEST_E2E" => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                "ACK_REQUEST_IMMEDIATE" => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Flags] = &[
            Flags::ACK_REQUEST_RELAY,
            Flags::ACK_REQUEST_E2E,
            Flags::ACK_REQUEST_IMMEDIATE,
        ];
    }

    impl ::protobuf::EnumFull for Flags {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgSteamDatagramConnectionStatsRouterToServer.Flags").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Flags::ACK_REQUEST_RELAY => 0,
                Flags::ACK_REQUEST_E2E => 1,
                Flags::ACK_REQUEST_IMMEDIATE => 2,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Flags {
        fn default() -> Self {
            Flags::ACK_REQUEST_RELAY
        }
    }

    impl Flags {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Flags>("CMsgSteamDatagramConnectionStatsRouterToServer.Flags")
        }
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramConnectionStatsServerToRouter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramConnectionStatsServerToRouter {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsServerToRouter.s2r)
    pub s2r: ::protobuf::MessageField<CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsServerToRouter.s2c)
    pub s2c: ::protobuf::MessageField<CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsServerToRouter.ack_relay)
    pub ack_relay: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsServerToRouter.ack_e2e)
    pub ack_e2e: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsServerToRouter.flags)
    pub flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsServerToRouter.seq_num_s2r)
    pub seq_num_s2r: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsServerToRouter.seq_num_s2c)
    pub seq_num_s2c: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsServerToRouter.client_steam_id)
    pub client_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsServerToRouter.relay_session_id)
    pub relay_session_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsServerToRouter.client_connection_id)
    pub client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsServerToRouter.server_connection_id)
    pub server_connection_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramConnectionStatsServerToRouter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramConnectionStatsServerToRouter {
    fn default() -> &'a CMsgSteamDatagramConnectionStatsServerToRouter {
        <CMsgSteamDatagramConnectionStatsServerToRouter as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramConnectionStatsServerToRouter {
    pub fn new() -> CMsgSteamDatagramConnectionStatsServerToRouter {
        ::std::default::Default::default()
    }

    // optional uint32 flags = 10;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_s2r = 3;

    pub fn seq_num_s2r(&self) -> u32 {
        self.seq_num_s2r.unwrap_or(0)
    }

    pub fn clear_seq_num_s2r(&mut self) {
        self.seq_num_s2r = ::std::option::Option::None;
    }

    pub fn has_seq_num_s2r(&self) -> bool {
        self.seq_num_s2r.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_s2r(&mut self, v: u32) {
        self.seq_num_s2r = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_s2c = 4;

    pub fn seq_num_s2c(&self) -> u32 {
        self.seq_num_s2c.unwrap_or(0)
    }

    pub fn clear_seq_num_s2c(&mut self) {
        self.seq_num_s2c = ::std::option::Option::None;
    }

    pub fn has_seq_num_s2c(&self) -> bool {
        self.seq_num_s2c.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_s2c(&mut self, v: u32) {
        self.seq_num_s2c = ::std::option::Option::Some(v);
    }

    // optional fixed64 client_steam_id = 5;

    pub fn client_steam_id(&self) -> u64 {
        self.client_steam_id.unwrap_or(0)
    }

    pub fn clear_client_steam_id(&mut self) {
        self.client_steam_id = ::std::option::Option::None;
    }

    pub fn has_client_steam_id(&self) -> bool {
        self.client_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_steam_id(&mut self, v: u64) {
        self.client_steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 relay_session_id = 6;

    pub fn relay_session_id(&self) -> u32 {
        self.relay_session_id.unwrap_or(0)
    }

    pub fn clear_relay_session_id(&mut self) {
        self.relay_session_id = ::std::option::Option::None;
    }

    pub fn has_relay_session_id(&self) -> bool {
        self.relay_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_relay_session_id(&mut self, v: u32) {
        self.relay_session_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 client_connection_id = 7;

    pub fn client_connection_id(&self) -> u32 {
        self.client_connection_id.unwrap_or(0)
    }

    pub fn clear_client_connection_id(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
    }

    pub fn has_client_connection_id(&self) -> bool {
        self.client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_connection_id(&mut self, v: u32) {
        self.client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 server_connection_id = 11;

    pub fn server_connection_id(&self) -> u32 {
        self.server_connection_id.unwrap_or(0)
    }

    pub fn clear_server_connection_id(&mut self) {
        self.server_connection_id = ::std::option::Option::None;
    }

    pub fn has_server_connection_id(&self) -> bool {
        self.server_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_connection_id(&mut self, v: u32) {
        self.server_connection_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionQuality>(
            "s2r",
            |m: &CMsgSteamDatagramConnectionStatsServerToRouter| { &m.s2r },
            |m: &mut CMsgSteamDatagramConnectionStatsServerToRouter| { &mut m.s2r },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionQuality>(
            "s2c",
            |m: &CMsgSteamDatagramConnectionStatsServerToRouter| { &m.s2c },
            |m: &mut CMsgSteamDatagramConnectionStatsServerToRouter| { &mut m.s2c },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_relay",
            |m: &CMsgSteamDatagramConnectionStatsServerToRouter| { &m.ack_relay },
            |m: &mut CMsgSteamDatagramConnectionStatsServerToRouter| { &mut m.ack_relay },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_e2e",
            |m: &CMsgSteamDatagramConnectionStatsServerToRouter| { &m.ack_e2e },
            |m: &mut CMsgSteamDatagramConnectionStatsServerToRouter| { &mut m.ack_e2e },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "flags",
            |m: &CMsgSteamDatagramConnectionStatsServerToRouter| { &m.flags },
            |m: &mut CMsgSteamDatagramConnectionStatsServerToRouter| { &mut m.flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_s2r",
            |m: &CMsgSteamDatagramConnectionStatsServerToRouter| { &m.seq_num_s2r },
            |m: &mut CMsgSteamDatagramConnectionStatsServerToRouter| { &mut m.seq_num_s2r },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_s2c",
            |m: &CMsgSteamDatagramConnectionStatsServerToRouter| { &m.seq_num_s2c },
            |m: &mut CMsgSteamDatagramConnectionStatsServerToRouter| { &mut m.seq_num_s2c },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_steam_id",
            |m: &CMsgSteamDatagramConnectionStatsServerToRouter| { &m.client_steam_id },
            |m: &mut CMsgSteamDatagramConnectionStatsServerToRouter| { &mut m.client_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "relay_session_id",
            |m: &CMsgSteamDatagramConnectionStatsServerToRouter| { &m.relay_session_id },
            |m: &mut CMsgSteamDatagramConnectionStatsServerToRouter| { &mut m.relay_session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_connection_id",
            |m: &CMsgSteamDatagramConnectionStatsServerToRouter| { &m.client_connection_id },
            |m: &mut CMsgSteamDatagramConnectionStatsServerToRouter| { &mut m.client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_connection_id",
            |m: &CMsgSteamDatagramConnectionStatsServerToRouter| { &m.server_connection_id },
            |m: &mut CMsgSteamDatagramConnectionStatsServerToRouter| { &mut m.server_connection_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramConnectionStatsServerToRouter>(
            "CMsgSteamDatagramConnectionStatsServerToRouter",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramConnectionStatsServerToRouter {
    const NAME: &'static str = "CMsgSteamDatagramConnectionStatsServerToRouter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.s2r)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.s2c)?;
                },
                66 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ack_relay)?;
                },
                69 => {
                    self.ack_relay.push(is.read_fixed32()?);
                },
                74 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ack_e2e)?;
                },
                77 => {
                    self.ack_e2e.push(is.read_fixed32()?);
                },
                80 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.seq_num_s2r = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.seq_num_s2c = ::std::option::Option::Some(is.read_uint32()?);
                },
                41 => {
                    self.client_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                48 => {
                    self.relay_session_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                61 => {
                    self.client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                93 => {
                    self.server_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.s2r.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.s2c.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += 5 * self.ack_relay.len() as u64;
        my_size += 5 * self.ack_e2e.len() as u64;
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.seq_num_s2r {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.seq_num_s2c {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.client_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.relay_session_id {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.server_connection_id {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.s2r.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.s2c.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.ack_relay {
            os.write_fixed32(8, *v)?;
        };
        for v in &self.ack_e2e {
            os.write_fixed32(9, *v)?;
        };
        if let Some(v) = self.flags {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.seq_num_s2r {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.seq_num_s2c {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.client_steam_id {
            os.write_fixed64(5, v)?;
        }
        if let Some(v) = self.relay_session_id {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.client_connection_id {
            os.write_fixed32(7, v)?;
        }
        if let Some(v) = self.server_connection_id {
            os.write_fixed32(11, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramConnectionStatsServerToRouter {
        CMsgSteamDatagramConnectionStatsServerToRouter::new()
    }

    fn clear(&mut self) {
        self.s2r.clear();
        self.s2c.clear();
        self.ack_relay.clear();
        self.ack_e2e.clear();
        self.flags = ::std::option::Option::None;
        self.seq_num_s2r = ::std::option::Option::None;
        self.seq_num_s2c = ::std::option::Option::None;
        self.client_steam_id = ::std::option::Option::None;
        self.relay_session_id = ::std::option::Option::None;
        self.client_connection_id = ::std::option::Option::None;
        self.server_connection_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramConnectionStatsServerToRouter {
        static instance: CMsgSteamDatagramConnectionStatsServerToRouter = CMsgSteamDatagramConnectionStatsServerToRouter {
            s2r: ::protobuf::MessageField::none(),
            s2c: ::protobuf::MessageField::none(),
            ack_relay: ::std::vec::Vec::new(),
            ack_e2e: ::std::vec::Vec::new(),
            flags: ::std::option::Option::None,
            seq_num_s2r: ::std::option::Option::None,
            seq_num_s2c: ::std::option::Option::None,
            client_steam_id: ::std::option::Option::None,
            relay_session_id: ::std::option::Option::None,
            client_connection_id: ::std::option::Option::None,
            server_connection_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramConnectionStatsServerToRouter {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramConnectionStatsServerToRouter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramConnectionStatsServerToRouter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramConnectionStatsServerToRouter {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramConnectionStatsServerToRouter`
pub mod cmsg_steam_datagram_connection_stats_server_to_router {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgSteamDatagramConnectionStatsServerToRouter.Flags)
    pub enum Flags {
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsServerToRouter.Flags.ACK_REQUEST_RELAY)
        ACK_REQUEST_RELAY = 1,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsServerToRouter.Flags.ACK_REQUEST_E2E)
        ACK_REQUEST_E2E = 2,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsServerToRouter.Flags.ACK_REQUEST_IMMEDIATE)
        ACK_REQUEST_IMMEDIATE = 4,
    }

    impl ::protobuf::Enum for Flags {
        const NAME: &'static str = "Flags";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Flags> {
            match value {
                1 => ::std::option::Option::Some(Flags::ACK_REQUEST_RELAY),
                2 => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                4 => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Flags> {
            match str {
                "ACK_REQUEST_RELAY" => ::std::option::Option::Some(Flags::ACK_REQUEST_RELAY),
                "ACK_REQUEST_E2E" => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                "ACK_REQUEST_IMMEDIATE" => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Flags] = &[
            Flags::ACK_REQUEST_RELAY,
            Flags::ACK_REQUEST_E2E,
            Flags::ACK_REQUEST_IMMEDIATE,
        ];
    }

    impl ::protobuf::EnumFull for Flags {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgSteamDatagramConnectionStatsServerToRouter.Flags").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Flags::ACK_REQUEST_RELAY => 0,
                Flags::ACK_REQUEST_E2E => 1,
                Flags::ACK_REQUEST_IMMEDIATE => 2,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Flags {
        fn default() -> Self {
            Flags::ACK_REQUEST_RELAY
        }
    }

    impl Flags {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Flags>("CMsgSteamDatagramConnectionStatsServerToRouter.Flags")
        }
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramClientPingSampleRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramClientPingSampleRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientPingSampleRequest.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramClientPingSampleRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramClientPingSampleRequest {
    fn default() -> &'a CMsgSteamDatagramClientPingSampleRequest {
        <CMsgSteamDatagramClientPingSampleRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramClientPingSampleRequest {
    pub fn new() -> CMsgSteamDatagramClientPingSampleRequest {
        ::std::default::Default::default()
    }

    // optional fixed32 connection_id = 1;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamDatagramClientPingSampleRequest| { &m.connection_id },
            |m: &mut CMsgSteamDatagramClientPingSampleRequest| { &mut m.connection_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramClientPingSampleRequest>(
            "CMsgSteamDatagramClientPingSampleRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramClientPingSampleRequest {
    const NAME: &'static str = "CMsgSteamDatagramClientPingSampleRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.connection_id {
            os.write_fixed32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramClientPingSampleRequest {
        CMsgSteamDatagramClientPingSampleRequest::new()
    }

    fn clear(&mut self) {
        self.connection_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramClientPingSampleRequest {
        static instance: CMsgSteamDatagramClientPingSampleRequest = CMsgSteamDatagramClientPingSampleRequest {
            connection_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramClientPingSampleRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramClientPingSampleRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramClientPingSampleRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramClientPingSampleRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramClientPingSampleReply)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramClientPingSampleReply {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientPingSampleReply.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientPingSampleReply.routing_clusters)
    pub routing_clusters: ::std::vec::Vec<cmsg_steam_datagram_client_ping_sample_reply::RoutingCluster>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientPingSampleReply.data_centers)
    pub data_centers: ::std::vec::Vec<cmsg_steam_datagram_client_ping_sample_reply::DataCenter>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramClientPingSampleReply.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramClientPingSampleReply {
    fn default() -> &'a CMsgSteamDatagramClientPingSampleReply {
        <CMsgSteamDatagramClientPingSampleReply as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramClientPingSampleReply {
    pub fn new() -> CMsgSteamDatagramClientPingSampleReply {
        ::std::default::Default::default()
    }

    // optional fixed32 connection_id = 1;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamDatagramClientPingSampleReply| { &m.connection_id },
            |m: &mut CMsgSteamDatagramClientPingSampleReply| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "routing_clusters",
            |m: &CMsgSteamDatagramClientPingSampleReply| { &m.routing_clusters },
            |m: &mut CMsgSteamDatagramClientPingSampleReply| { &mut m.routing_clusters },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data_centers",
            |m: &CMsgSteamDatagramClientPingSampleReply| { &m.data_centers },
            |m: &mut CMsgSteamDatagramClientPingSampleReply| { &mut m.data_centers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramClientPingSampleReply>(
            "CMsgSteamDatagramClientPingSampleReply",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramClientPingSampleReply {
    const NAME: &'static str = "CMsgSteamDatagramClientPingSampleReply";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                18 => {
                    self.routing_clusters.push(is.read_message()?);
                },
                26 => {
                    self.data_centers.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        for value in &self.routing_clusters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.data_centers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.connection_id {
            os.write_fixed32(1, v)?;
        }
        for v in &self.routing_clusters {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.data_centers {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramClientPingSampleReply {
        CMsgSteamDatagramClientPingSampleReply::new()
    }

    fn clear(&mut self) {
        self.connection_id = ::std::option::Option::None;
        self.routing_clusters.clear();
        self.data_centers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramClientPingSampleReply {
        static instance: CMsgSteamDatagramClientPingSampleReply = CMsgSteamDatagramClientPingSampleReply {
            connection_id: ::std::option::Option::None,
            routing_clusters: ::std::vec::Vec::new(),
            data_centers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramClientPingSampleReply {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramClientPingSampleReply").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramClientPingSampleReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramClientPingSampleReply {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramClientPingSampleReply`
pub mod cmsg_steam_datagram_client_ping_sample_reply {
    // @@protoc_insertion_point(message:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RoutingCluster {
        // message fields
        // @@protoc_insertion_point(field:CMsgSteamDatagramClientPingSampleReply.RoutingCluster.id)
        pub id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramClientPingSampleReply.RoutingCluster.front_ping_ms)
        pub front_ping_ms: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramClientPingSampleReply.RoutingCluster.e2e_ping_ms)
        pub e2e_ping_ms: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgSteamDatagramClientPingSampleReply.RoutingCluster.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RoutingCluster {
        fn default() -> &'a RoutingCluster {
            <RoutingCluster as ::protobuf::Message>::default_instance()
        }
    }

    impl RoutingCluster {
        pub fn new() -> RoutingCluster {
            ::std::default::Default::default()
        }

        // optional fixed32 id = 1;

        pub fn id(&self) -> u32 {
            self.id.unwrap_or(0)
        }

        pub fn clear_id(&mut self) {
            self.id = ::std::option::Option::None;
        }

        pub fn has_id(&self) -> bool {
            self.id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_id(&mut self, v: u32) {
            self.id = ::std::option::Option::Some(v);
        }

        // optional uint32 front_ping_ms = 2;

        pub fn front_ping_ms(&self) -> u32 {
            self.front_ping_ms.unwrap_or(0)
        }

        pub fn clear_front_ping_ms(&mut self) {
            self.front_ping_ms = ::std::option::Option::None;
        }

        pub fn has_front_ping_ms(&self) -> bool {
            self.front_ping_ms.is_some()
        }

        // Param is passed by value, moved
        pub fn set_front_ping_ms(&mut self, v: u32) {
            self.front_ping_ms = ::std::option::Option::Some(v);
        }

        // optional uint32 e2e_ping_ms = 3;

        pub fn e2e_ping_ms(&self) -> u32 {
            self.e2e_ping_ms.unwrap_or(0)
        }

        pub fn clear_e2e_ping_ms(&mut self) {
            self.e2e_ping_ms = ::std::option::Option::None;
        }

        pub fn has_e2e_ping_ms(&self) -> bool {
            self.e2e_ping_ms.is_some()
        }

        // Param is passed by value, moved
        pub fn set_e2e_ping_ms(&mut self, v: u32) {
            self.e2e_ping_ms = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "id",
                |m: &RoutingCluster| { &m.id },
                |m: &mut RoutingCluster| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "front_ping_ms",
                |m: &RoutingCluster| { &m.front_ping_ms },
                |m: &mut RoutingCluster| { &mut m.front_ping_ms },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "e2e_ping_ms",
                |m: &RoutingCluster| { &m.e2e_ping_ms },
                |m: &mut RoutingCluster| { &mut m.e2e_ping_ms },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RoutingCluster>(
                "CMsgSteamDatagramClientPingSampleReply.RoutingCluster",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RoutingCluster {
        const NAME: &'static str = "RoutingCluster";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.id = ::std::option::Option::Some(is.read_fixed32()?);
                    },
                    16 => {
                        self.front_ping_ms = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.e2e_ping_ms = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.id {
                my_size += 1 + 4;
            }
            if let Some(v) = self.front_ping_ms {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.e2e_ping_ms {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.id {
                os.write_fixed32(1, v)?;
            }
            if let Some(v) = self.front_ping_ms {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.e2e_ping_ms {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RoutingCluster {
            RoutingCluster::new()
        }

        fn clear(&mut self) {
            self.id = ::std::option::Option::None;
            self.front_ping_ms = ::std::option::Option::None;
            self.e2e_ping_ms = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RoutingCluster {
            static instance: RoutingCluster = RoutingCluster {
                id: ::std::option::Option::None,
                front_ping_ms: ::std::option::Option::None,
                e2e_ping_ms: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RoutingCluster {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgSteamDatagramClientPingSampleReply.RoutingCluster").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RoutingCluster {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RoutingCluster {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CMsgSteamDatagramClientPingSampleReply.DataCenter)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DataCenter {
        // message fields
        // @@protoc_insertion_point(field:CMsgSteamDatagramClientPingSampleReply.DataCenter.data_center_id)
        pub data_center_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramClientPingSampleReply.DataCenter.via_relay_id)
        pub via_relay_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramClientPingSampleReply.DataCenter.e2e_ping_ms)
        pub e2e_ping_ms: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgSteamDatagramClientPingSampleReply.DataCenter.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DataCenter {
        fn default() -> &'a DataCenter {
            <DataCenter as ::protobuf::Message>::default_instance()
        }
    }

    impl DataCenter {
        pub fn new() -> DataCenter {
            ::std::default::Default::default()
        }

        // optional fixed32 data_center_id = 1;

        pub fn data_center_id(&self) -> u32 {
            self.data_center_id.unwrap_or(0)
        }

        pub fn clear_data_center_id(&mut self) {
            self.data_center_id = ::std::option::Option::None;
        }

        pub fn has_data_center_id(&self) -> bool {
            self.data_center_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_data_center_id(&mut self, v: u32) {
            self.data_center_id = ::std::option::Option::Some(v);
        }

        // optional fixed32 via_relay_id = 2;

        pub fn via_relay_id(&self) -> u32 {
            self.via_relay_id.unwrap_or(0)
        }

        pub fn clear_via_relay_id(&mut self) {
            self.via_relay_id = ::std::option::Option::None;
        }

        pub fn has_via_relay_id(&self) -> bool {
            self.via_relay_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_via_relay_id(&mut self, v: u32) {
            self.via_relay_id = ::std::option::Option::Some(v);
        }

        // optional uint32 e2e_ping_ms = 3;

        pub fn e2e_ping_ms(&self) -> u32 {
            self.e2e_ping_ms.unwrap_or(0)
        }

        pub fn clear_e2e_ping_ms(&mut self) {
            self.e2e_ping_ms = ::std::option::Option::None;
        }

        pub fn has_e2e_ping_ms(&self) -> bool {
            self.e2e_ping_ms.is_some()
        }

        // Param is passed by value, moved
        pub fn set_e2e_ping_ms(&mut self, v: u32) {
            self.e2e_ping_ms = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "data_center_id",
                |m: &DataCenter| { &m.data_center_id },
                |m: &mut DataCenter| { &mut m.data_center_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "via_relay_id",
                |m: &DataCenter| { &m.via_relay_id },
                |m: &mut DataCenter| { &mut m.via_relay_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "e2e_ping_ms",
                |m: &DataCenter| { &m.e2e_ping_ms },
                |m: &mut DataCenter| { &mut m.e2e_ping_ms },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataCenter>(
                "CMsgSteamDatagramClientPingSampleReply.DataCenter",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for DataCenter {
        const NAME: &'static str = "DataCenter";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.data_center_id = ::std::option::Option::Some(is.read_fixed32()?);
                    },
                    21 => {
                        self.via_relay_id = ::std::option::Option::Some(is.read_fixed32()?);
                    },
                    24 => {
                        self.e2e_ping_ms = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.data_center_id {
                my_size += 1 + 4;
            }
            if let Some(v) = self.via_relay_id {
                my_size += 1 + 4;
            }
            if let Some(v) = self.e2e_ping_ms {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.data_center_id {
                os.write_fixed32(1, v)?;
            }
            if let Some(v) = self.via_relay_id {
                os.write_fixed32(2, v)?;
            }
            if let Some(v) = self.e2e_ping_ms {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DataCenter {
            DataCenter::new()
        }

        fn clear(&mut self) {
            self.data_center_id = ::std::option::Option::None;
            self.via_relay_id = ::std::option::Option::None;
            self.e2e_ping_ms = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DataCenter {
            static instance: DataCenter = DataCenter {
                data_center_id: ::std::option::Option::None,
                via_relay_id: ::std::option::Option::None,
                e2e_ping_ms: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for DataCenter {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgSteamDatagramClientPingSampleReply.DataCenter").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for DataCenter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DataCenter {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramClientSwitchedPrimary)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramClientSwitchedPrimary {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.from_ip)
    pub from_ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.from_port)
    pub from_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.from_router_cluster)
    pub from_router_cluster: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.from_active_time)
    pub from_active_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.from_active_packets_recv)
    pub from_active_packets_recv: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason)
    pub from_dropped_reason: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.gap_ms)
    pub gap_ms: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.from_quality_now)
    pub from_quality_now: ::protobuf::MessageField<cmsg_steam_datagram_client_switched_primary::RouterQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.to_quality_now)
    pub to_quality_now: ::protobuf::MessageField<cmsg_steam_datagram_client_switched_primary::RouterQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.from_quality_then)
    pub from_quality_then: ::protobuf::MessageField<cmsg_steam_datagram_client_switched_primary::RouterQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.to_quality_then)
    pub to_quality_then: ::protobuf::MessageField<cmsg_steam_datagram_client_switched_primary::RouterQuality>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramClientSwitchedPrimary.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramClientSwitchedPrimary {
    fn default() -> &'a CMsgSteamDatagramClientSwitchedPrimary {
        <CMsgSteamDatagramClientSwitchedPrimary as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramClientSwitchedPrimary {
    pub fn new() -> CMsgSteamDatagramClientSwitchedPrimary {
        ::std::default::Default::default()
    }

    // optional fixed32 connection_id = 1;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 from_ip = 2;

    pub fn from_ip(&self) -> u32 {
        self.from_ip.unwrap_or(0)
    }

    pub fn clear_from_ip(&mut self) {
        self.from_ip = ::std::option::Option::None;
    }

    pub fn has_from_ip(&self) -> bool {
        self.from_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_ip(&mut self, v: u32) {
        self.from_ip = ::std::option::Option::Some(v);
    }

    // optional uint32 from_port = 3;

    pub fn from_port(&self) -> u32 {
        self.from_port.unwrap_or(0)
    }

    pub fn clear_from_port(&mut self) {
        self.from_port = ::std::option::Option::None;
    }

    pub fn has_from_port(&self) -> bool {
        self.from_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_port(&mut self, v: u32) {
        self.from_port = ::std::option::Option::Some(v);
    }

    // optional fixed32 from_router_cluster = 4;

    pub fn from_router_cluster(&self) -> u32 {
        self.from_router_cluster.unwrap_or(0)
    }

    pub fn clear_from_router_cluster(&mut self) {
        self.from_router_cluster = ::std::option::Option::None;
    }

    pub fn has_from_router_cluster(&self) -> bool {
        self.from_router_cluster.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_router_cluster(&mut self, v: u32) {
        self.from_router_cluster = ::std::option::Option::Some(v);
    }

    // optional uint32 from_active_time = 5;

    pub fn from_active_time(&self) -> u32 {
        self.from_active_time.unwrap_or(0)
    }

    pub fn clear_from_active_time(&mut self) {
        self.from_active_time = ::std::option::Option::None;
    }

    pub fn has_from_active_time(&self) -> bool {
        self.from_active_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_active_time(&mut self, v: u32) {
        self.from_active_time = ::std::option::Option::Some(v);
    }

    // optional uint32 from_active_packets_recv = 6;

    pub fn from_active_packets_recv(&self) -> u32 {
        self.from_active_packets_recv.unwrap_or(0)
    }

    pub fn clear_from_active_packets_recv(&mut self) {
        self.from_active_packets_recv = ::std::option::Option::None;
    }

    pub fn has_from_active_packets_recv(&self) -> bool {
        self.from_active_packets_recv.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_active_packets_recv(&mut self, v: u32) {
        self.from_active_packets_recv = ::std::option::Option::Some(v);
    }

    // optional string from_dropped_reason = 7;

    pub fn from_dropped_reason(&self) -> &str {
        match self.from_dropped_reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_from_dropped_reason(&mut self) {
        self.from_dropped_reason = ::std::option::Option::None;
    }

    pub fn has_from_dropped_reason(&self) -> bool {
        self.from_dropped_reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_dropped_reason(&mut self, v: ::std::string::String) {
        self.from_dropped_reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from_dropped_reason(&mut self) -> &mut ::std::string::String {
        if self.from_dropped_reason.is_none() {
            self.from_dropped_reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.from_dropped_reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_from_dropped_reason(&mut self) -> ::std::string::String {
        self.from_dropped_reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 gap_ms = 8;

    pub fn gap_ms(&self) -> u32 {
        self.gap_ms.unwrap_or(0)
    }

    pub fn clear_gap_ms(&mut self) {
        self.gap_ms = ::std::option::Option::None;
    }

    pub fn has_gap_ms(&self) -> bool {
        self.gap_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gap_ms(&mut self, v: u32) {
        self.gap_ms = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamDatagramClientSwitchedPrimary| { &m.connection_id },
            |m: &mut CMsgSteamDatagramClientSwitchedPrimary| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_ip",
            |m: &CMsgSteamDatagramClientSwitchedPrimary| { &m.from_ip },
            |m: &mut CMsgSteamDatagramClientSwitchedPrimary| { &mut m.from_ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_port",
            |m: &CMsgSteamDatagramClientSwitchedPrimary| { &m.from_port },
            |m: &mut CMsgSteamDatagramClientSwitchedPrimary| { &mut m.from_port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_router_cluster",
            |m: &CMsgSteamDatagramClientSwitchedPrimary| { &m.from_router_cluster },
            |m: &mut CMsgSteamDatagramClientSwitchedPrimary| { &mut m.from_router_cluster },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_active_time",
            |m: &CMsgSteamDatagramClientSwitchedPrimary| { &m.from_active_time },
            |m: &mut CMsgSteamDatagramClientSwitchedPrimary| { &mut m.from_active_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_active_packets_recv",
            |m: &CMsgSteamDatagramClientSwitchedPrimary| { &m.from_active_packets_recv },
            |m: &mut CMsgSteamDatagramClientSwitchedPrimary| { &mut m.from_active_packets_recv },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_dropped_reason",
            |m: &CMsgSteamDatagramClientSwitchedPrimary| { &m.from_dropped_reason },
            |m: &mut CMsgSteamDatagramClientSwitchedPrimary| { &mut m.from_dropped_reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gap_ms",
            |m: &CMsgSteamDatagramClientSwitchedPrimary| { &m.gap_ms },
            |m: &mut CMsgSteamDatagramClientSwitchedPrimary| { &mut m.gap_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_steam_datagram_client_switched_primary::RouterQuality>(
            "from_quality_now",
            |m: &CMsgSteamDatagramClientSwitchedPrimary| { &m.from_quality_now },
            |m: &mut CMsgSteamDatagramClientSwitchedPrimary| { &mut m.from_quality_now },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_steam_datagram_client_switched_primary::RouterQuality>(
            "to_quality_now",
            |m: &CMsgSteamDatagramClientSwitchedPrimary| { &m.to_quality_now },
            |m: &mut CMsgSteamDatagramClientSwitchedPrimary| { &mut m.to_quality_now },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_steam_datagram_client_switched_primary::RouterQuality>(
            "from_quality_then",
            |m: &CMsgSteamDatagramClientSwitchedPrimary| { &m.from_quality_then },
            |m: &mut CMsgSteamDatagramClientSwitchedPrimary| { &mut m.from_quality_then },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cmsg_steam_datagram_client_switched_primary::RouterQuality>(
            "to_quality_then",
            |m: &CMsgSteamDatagramClientSwitchedPrimary| { &m.to_quality_then },
            |m: &mut CMsgSteamDatagramClientSwitchedPrimary| { &mut m.to_quality_then },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramClientSwitchedPrimary>(
            "CMsgSteamDatagramClientSwitchedPrimary",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramClientSwitchedPrimary {
    const NAME: &'static str = "CMsgSteamDatagramClientSwitchedPrimary";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                21 => {
                    self.from_ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                24 => {
                    self.from_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                37 => {
                    self.from_router_cluster = ::std::option::Option::Some(is.read_fixed32()?);
                },
                40 => {
                    self.from_active_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.from_active_packets_recv = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.from_dropped_reason = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.gap_ms = ::std::option::Option::Some(is.read_uint32()?);
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.from_quality_now)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.to_quality_now)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.from_quality_then)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.to_quality_then)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.from_ip {
            my_size += 1 + 4;
        }
        if let Some(v) = self.from_port {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.from_router_cluster {
            my_size += 1 + 4;
        }
        if let Some(v) = self.from_active_time {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.from_active_packets_recv {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.from_dropped_reason.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.gap_ms {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.from_quality_now.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.to_quality_now.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.from_quality_then.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.to_quality_then.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.from_ip {
            os.write_fixed32(2, v)?;
        }
        if let Some(v) = self.from_port {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.from_router_cluster {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.from_active_time {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.from_active_packets_recv {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.from_dropped_reason.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.gap_ms {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.from_quality_now.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.to_quality_now.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.from_quality_then.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.to_quality_then.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramClientSwitchedPrimary {
        CMsgSteamDatagramClientSwitchedPrimary::new()
    }

    fn clear(&mut self) {
        self.connection_id = ::std::option::Option::None;
        self.from_ip = ::std::option::Option::None;
        self.from_port = ::std::option::Option::None;
        self.from_router_cluster = ::std::option::Option::None;
        self.from_active_time = ::std::option::Option::None;
        self.from_active_packets_recv = ::std::option::Option::None;
        self.from_dropped_reason = ::std::option::Option::None;
        self.gap_ms = ::std::option::Option::None;
        self.from_quality_now.clear();
        self.to_quality_now.clear();
        self.from_quality_then.clear();
        self.to_quality_then.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramClientSwitchedPrimary {
        static instance: CMsgSteamDatagramClientSwitchedPrimary = CMsgSteamDatagramClientSwitchedPrimary {
            connection_id: ::std::option::Option::None,
            from_ip: ::std::option::Option::None,
            from_port: ::std::option::Option::None,
            from_router_cluster: ::std::option::Option::None,
            from_active_time: ::std::option::Option::None,
            from_active_packets_recv: ::std::option::Option::None,
            from_dropped_reason: ::std::option::Option::None,
            gap_ms: ::std::option::Option::None,
            from_quality_now: ::protobuf::MessageField::none(),
            to_quality_now: ::protobuf::MessageField::none(),
            from_quality_then: ::protobuf::MessageField::none(),
            to_quality_then: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramClientSwitchedPrimary {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramClientSwitchedPrimary").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramClientSwitchedPrimary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramClientSwitchedPrimary {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramClientSwitchedPrimary`
pub mod cmsg_steam_datagram_client_switched_primary {
    // @@protoc_insertion_point(message:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RouterQuality {
        // message fields
        // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.score)
        pub score: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.front_ping)
        pub front_ping: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.back_ping)
        pub back_ping: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.seconds_until_down)
        pub seconds_until_down: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RouterQuality {
        fn default() -> &'a RouterQuality {
            <RouterQuality as ::protobuf::Message>::default_instance()
        }
    }

    impl RouterQuality {
        pub fn new() -> RouterQuality {
            ::std::default::Default::default()
        }

        // optional uint32 score = 1;

        pub fn score(&self) -> u32 {
            self.score.unwrap_or(0)
        }

        pub fn clear_score(&mut self) {
            self.score = ::std::option::Option::None;
        }

        pub fn has_score(&self) -> bool {
            self.score.is_some()
        }

        // Param is passed by value, moved
        pub fn set_score(&mut self, v: u32) {
            self.score = ::std::option::Option::Some(v);
        }

        // optional uint32 front_ping = 2;

        pub fn front_ping(&self) -> u32 {
            self.front_ping.unwrap_or(0)
        }

        pub fn clear_front_ping(&mut self) {
            self.front_ping = ::std::option::Option::None;
        }

        pub fn has_front_ping(&self) -> bool {
            self.front_ping.is_some()
        }

        // Param is passed by value, moved
        pub fn set_front_ping(&mut self, v: u32) {
            self.front_ping = ::std::option::Option::Some(v);
        }

        // optional uint32 back_ping = 3;

        pub fn back_ping(&self) -> u32 {
            self.back_ping.unwrap_or(0)
        }

        pub fn clear_back_ping(&mut self) {
            self.back_ping = ::std::option::Option::None;
        }

        pub fn has_back_ping(&self) -> bool {
            self.back_ping.is_some()
        }

        // Param is passed by value, moved
        pub fn set_back_ping(&mut self, v: u32) {
            self.back_ping = ::std::option::Option::Some(v);
        }

        // optional uint32 seconds_until_down = 4;

        pub fn seconds_until_down(&self) -> u32 {
            self.seconds_until_down.unwrap_or(0)
        }

        pub fn clear_seconds_until_down(&mut self) {
            self.seconds_until_down = ::std::option::Option::None;
        }

        pub fn has_seconds_until_down(&self) -> bool {
            self.seconds_until_down.is_some()
        }

        // Param is passed by value, moved
        pub fn set_seconds_until_down(&mut self, v: u32) {
            self.seconds_until_down = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "score",
                |m: &RouterQuality| { &m.score },
                |m: &mut RouterQuality| { &mut m.score },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "front_ping",
                |m: &RouterQuality| { &m.front_ping },
                |m: &mut RouterQuality| { &mut m.front_ping },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "back_ping",
                |m: &RouterQuality| { &m.back_ping },
                |m: &mut RouterQuality| { &mut m.back_ping },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "seconds_until_down",
                |m: &RouterQuality| { &m.seconds_until_down },
                |m: &mut RouterQuality| { &mut m.seconds_until_down },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RouterQuality>(
                "CMsgSteamDatagramClientSwitchedPrimary.RouterQuality",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RouterQuality {
        const NAME: &'static str = "RouterQuality";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.score = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.front_ping = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.back_ping = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.seconds_until_down = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.score {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.front_ping {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.back_ping {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.seconds_until_down {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.score {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.front_ping {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.back_ping {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.seconds_until_down {
                os.write_uint32(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RouterQuality {
            RouterQuality::new()
        }

        fn clear(&mut self) {
            self.score = ::std::option::Option::None;
            self.front_ping = ::std::option::Option::None;
            self.back_ping = ::std::option::Option::None;
            self.seconds_until_down = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RouterQuality {
            static instance: RouterQuality = RouterQuality {
                score: ::std::option::Option::None,
                front_ping: ::std::option::Option::None,
                back_ping: ::std::option::Option::None,
                seconds_until_down: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RouterQuality {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgSteamDatagramClientSwitchedPrimary.RouterQuality").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RouterQuality {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RouterQuality {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramRouterHealth)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramRouterHealth {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterHealth.cpu_load)
    pub cpu_load: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterHealth.active_sessions)
    pub active_sessions: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterHealth.data_pkts_sec)
    pub data_pkts_sec: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterHealth.other_pkts_sec)
    pub other_pkts_sec: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterHealth.seconds_until_shutdown)
    pub seconds_until_shutdown: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterHealth.cpu_cost_per_user)
    pub cpu_cost_per_user: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterHealth.cpu_cost_per_packet)
    pub cpu_cost_per_packet: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterHealth.data_centers)
    pub data_centers: ::std::vec::Vec<cmsg_steam_datagram_router_health::DataCenter>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRouterHealth.magic)
    pub magic: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramRouterHealth.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramRouterHealth {
    fn default() -> &'a CMsgSteamDatagramRouterHealth {
        <CMsgSteamDatagramRouterHealth as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramRouterHealth {
    pub fn new() -> CMsgSteamDatagramRouterHealth {
        ::std::default::Default::default()
    }

    // optional float cpu_load = 1;

    pub fn cpu_load(&self) -> f32 {
        self.cpu_load.unwrap_or(0.)
    }

    pub fn clear_cpu_load(&mut self) {
        self.cpu_load = ::std::option::Option::None;
    }

    pub fn has_cpu_load(&self) -> bool {
        self.cpu_load.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cpu_load(&mut self, v: f32) {
        self.cpu_load = ::std::option::Option::Some(v);
    }

    // optional uint32 active_sessions = 2;

    pub fn active_sessions(&self) -> u32 {
        self.active_sessions.unwrap_or(0)
    }

    pub fn clear_active_sessions(&mut self) {
        self.active_sessions = ::std::option::Option::None;
    }

    pub fn has_active_sessions(&self) -> bool {
        self.active_sessions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_active_sessions(&mut self, v: u32) {
        self.active_sessions = ::std::option::Option::Some(v);
    }

    // optional uint32 data_pkts_sec = 3;

    pub fn data_pkts_sec(&self) -> u32 {
        self.data_pkts_sec.unwrap_or(0)
    }

    pub fn clear_data_pkts_sec(&mut self) {
        self.data_pkts_sec = ::std::option::Option::None;
    }

    pub fn has_data_pkts_sec(&self) -> bool {
        self.data_pkts_sec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_pkts_sec(&mut self, v: u32) {
        self.data_pkts_sec = ::std::option::Option::Some(v);
    }

    // optional uint32 other_pkts_sec = 4;

    pub fn other_pkts_sec(&self) -> u32 {
        self.other_pkts_sec.unwrap_or(0)
    }

    pub fn clear_other_pkts_sec(&mut self) {
        self.other_pkts_sec = ::std::option::Option::None;
    }

    pub fn has_other_pkts_sec(&self) -> bool {
        self.other_pkts_sec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_other_pkts_sec(&mut self, v: u32) {
        self.other_pkts_sec = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_until_shutdown = 5;

    pub fn seconds_until_shutdown(&self) -> u32 {
        self.seconds_until_shutdown.unwrap_or(0)
    }

    pub fn clear_seconds_until_shutdown(&mut self) {
        self.seconds_until_shutdown = ::std::option::Option::None;
    }

    pub fn has_seconds_until_shutdown(&self) -> bool {
        self.seconds_until_shutdown.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_until_shutdown(&mut self, v: u32) {
        self.seconds_until_shutdown = ::std::option::Option::Some(v);
    }

    // optional float cpu_cost_per_user = 8;

    pub fn cpu_cost_per_user(&self) -> f32 {
        self.cpu_cost_per_user.unwrap_or(0.)
    }

    pub fn clear_cpu_cost_per_user(&mut self) {
        self.cpu_cost_per_user = ::std::option::Option::None;
    }

    pub fn has_cpu_cost_per_user(&self) -> bool {
        self.cpu_cost_per_user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cpu_cost_per_user(&mut self, v: f32) {
        self.cpu_cost_per_user = ::std::option::Option::Some(v);
    }

    // optional float cpu_cost_per_packet = 9;

    pub fn cpu_cost_per_packet(&self) -> f32 {
        self.cpu_cost_per_packet.unwrap_or(0.)
    }

    pub fn clear_cpu_cost_per_packet(&mut self) {
        self.cpu_cost_per_packet = ::std::option::Option::None;
    }

    pub fn has_cpu_cost_per_packet(&self) -> bool {
        self.cpu_cost_per_packet.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cpu_cost_per_packet(&mut self, v: f32) {
        self.cpu_cost_per_packet = ::std::option::Option::Some(v);
    }

    // optional fixed64 magic = 7;

    pub fn magic(&self) -> u64 {
        self.magic.unwrap_or(0)
    }

    pub fn clear_magic(&mut self) {
        self.magic = ::std::option::Option::None;
    }

    pub fn has_magic(&self) -> bool {
        self.magic.is_some()
    }

    // Param is passed by value, moved
    pub fn set_magic(&mut self, v: u64) {
        self.magic = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cpu_load",
            |m: &CMsgSteamDatagramRouterHealth| { &m.cpu_load },
            |m: &mut CMsgSteamDatagramRouterHealth| { &mut m.cpu_load },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "active_sessions",
            |m: &CMsgSteamDatagramRouterHealth| { &m.active_sessions },
            |m: &mut CMsgSteamDatagramRouterHealth| { &mut m.active_sessions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data_pkts_sec",
            |m: &CMsgSteamDatagramRouterHealth| { &m.data_pkts_sec },
            |m: &mut CMsgSteamDatagramRouterHealth| { &mut m.data_pkts_sec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "other_pkts_sec",
            |m: &CMsgSteamDatagramRouterHealth| { &m.other_pkts_sec },
            |m: &mut CMsgSteamDatagramRouterHealth| { &mut m.other_pkts_sec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_until_shutdown",
            |m: &CMsgSteamDatagramRouterHealth| { &m.seconds_until_shutdown },
            |m: &mut CMsgSteamDatagramRouterHealth| { &mut m.seconds_until_shutdown },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cpu_cost_per_user",
            |m: &CMsgSteamDatagramRouterHealth| { &m.cpu_cost_per_user },
            |m: &mut CMsgSteamDatagramRouterHealth| { &mut m.cpu_cost_per_user },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cpu_cost_per_packet",
            |m: &CMsgSteamDatagramRouterHealth| { &m.cpu_cost_per_packet },
            |m: &mut CMsgSteamDatagramRouterHealth| { &mut m.cpu_cost_per_packet },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data_centers",
            |m: &CMsgSteamDatagramRouterHealth| { &m.data_centers },
            |m: &mut CMsgSteamDatagramRouterHealth| { &mut m.data_centers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "magic",
            |m: &CMsgSteamDatagramRouterHealth| { &m.magic },
            |m: &mut CMsgSteamDatagramRouterHealth| { &mut m.magic },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramRouterHealth>(
            "CMsgSteamDatagramRouterHealth",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramRouterHealth {
    const NAME: &'static str = "CMsgSteamDatagramRouterHealth";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.cpu_load = ::std::option::Option::Some(is.read_float()?);
                },
                16 => {
                    self.active_sessions = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.data_pkts_sec = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.other_pkts_sec = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.seconds_until_shutdown = ::std::option::Option::Some(is.read_uint32()?);
                },
                69 => {
                    self.cpu_cost_per_user = ::std::option::Option::Some(is.read_float()?);
                },
                77 => {
                    self.cpu_cost_per_packet = ::std::option::Option::Some(is.read_float()?);
                },
                50 => {
                    self.data_centers.push(is.read_message()?);
                },
                57 => {
                    self.magic = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cpu_load {
            my_size += 1 + 4;
        }
        if let Some(v) = self.active_sessions {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.data_pkts_sec {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.other_pkts_sec {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.seconds_until_shutdown {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.cpu_cost_per_user {
            my_size += 1 + 4;
        }
        if let Some(v) = self.cpu_cost_per_packet {
            my_size += 1 + 4;
        }
        for value in &self.data_centers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.magic {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.cpu_load {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.active_sessions {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.data_pkts_sec {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.other_pkts_sec {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.seconds_until_shutdown {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.cpu_cost_per_user {
            os.write_float(8, v)?;
        }
        if let Some(v) = self.cpu_cost_per_packet {
            os.write_float(9, v)?;
        }
        for v in &self.data_centers {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if let Some(v) = self.magic {
            os.write_fixed64(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramRouterHealth {
        CMsgSteamDatagramRouterHealth::new()
    }

    fn clear(&mut self) {
        self.cpu_load = ::std::option::Option::None;
        self.active_sessions = ::std::option::Option::None;
        self.data_pkts_sec = ::std::option::Option::None;
        self.other_pkts_sec = ::std::option::Option::None;
        self.seconds_until_shutdown = ::std::option::Option::None;
        self.cpu_cost_per_user = ::std::option::Option::None;
        self.cpu_cost_per_packet = ::std::option::Option::None;
        self.data_centers.clear();
        self.magic = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramRouterHealth {
        static instance: CMsgSteamDatagramRouterHealth = CMsgSteamDatagramRouterHealth {
            cpu_load: ::std::option::Option::None,
            active_sessions: ::std::option::Option::None,
            data_pkts_sec: ::std::option::Option::None,
            other_pkts_sec: ::std::option::Option::None,
            seconds_until_shutdown: ::std::option::Option::None,
            cpu_cost_per_user: ::std::option::Option::None,
            cpu_cost_per_packet: ::std::option::Option::None,
            data_centers: ::std::vec::Vec::new(),
            magic: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramRouterHealth {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramRouterHealth").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramRouterHealth {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramRouterHealth {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramRouterHealth`
pub mod cmsg_steam_datagram_router_health {
    // @@protoc_insertion_point(message:CMsgSteamDatagramRouterHealth.DataCenter)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DataCenter {
        // message fields
        // @@protoc_insertion_point(field:CMsgSteamDatagramRouterHealth.DataCenter.datacenter_id)
        pub datacenter_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramRouterHealth.DataCenter.state)
        pub state: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgSteamDatagramRouterHealth.DataCenter.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DataCenter {
        fn default() -> &'a DataCenter {
            <DataCenter as ::protobuf::Message>::default_instance()
        }
    }

    impl DataCenter {
        pub fn new() -> DataCenter {
            ::std::default::Default::default()
        }

        // optional fixed32 datacenter_id = 1;

        pub fn datacenter_id(&self) -> u32 {
            self.datacenter_id.unwrap_or(0)
        }

        pub fn clear_datacenter_id(&mut self) {
            self.datacenter_id = ::std::option::Option::None;
        }

        pub fn has_datacenter_id(&self) -> bool {
            self.datacenter_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_datacenter_id(&mut self, v: u32) {
            self.datacenter_id = ::std::option::Option::Some(v);
        }

        // optional uint32 state = 2;

        pub fn state(&self) -> u32 {
            self.state.unwrap_or(0)
        }

        pub fn clear_state(&mut self) {
            self.state = ::std::option::Option::None;
        }

        pub fn has_state(&self) -> bool {
            self.state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_state(&mut self, v: u32) {
            self.state = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "datacenter_id",
                |m: &DataCenter| { &m.datacenter_id },
                |m: &mut DataCenter| { &mut m.datacenter_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "state",
                |m: &DataCenter| { &m.state },
                |m: &mut DataCenter| { &mut m.state },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataCenter>(
                "CMsgSteamDatagramRouterHealth.DataCenter",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for DataCenter {
        const NAME: &'static str = "DataCenter";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.datacenter_id = ::std::option::Option::Some(is.read_fixed32()?);
                    },
                    16 => {
                        self.state = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.datacenter_id {
                my_size += 1 + 4;
            }
            if let Some(v) = self.state {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.datacenter_id {
                os.write_fixed32(1, v)?;
            }
            if let Some(v) = self.state {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DataCenter {
            DataCenter::new()
        }

        fn clear(&mut self) {
            self.datacenter_id = ::std::option::Option::None;
            self.state = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DataCenter {
            static instance: DataCenter = DataCenter {
                datacenter_id: ::std::option::Option::None,
                state: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for DataCenter {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgSteamDatagramRouterHealth.DataCenter").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for DataCenter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DataCenter {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramConnectRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramConnectRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectRequest.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectRequest.client_steam_id)
    pub client_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectRequest.my_timestamp)
    pub my_timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectRequest.ping_est_ms)
    pub ping_est_ms: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectRequest.virtual_port)
    pub virtual_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectRequest.gameserver_relay_session_id)
    pub gameserver_relay_session_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectRequest.crypt)
    pub crypt: ::protobuf::MessageField<CMsgSteamDatagramSessionCryptInfoSigned>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectRequest.cert)
    pub cert: ::protobuf::MessageField<super::steamdatagram_auth_messages::CMsgSteamDatagramCertificateSigned>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectRequest.protocol_version)
    pub protocol_version: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramConnectRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramConnectRequest {
    fn default() -> &'a CMsgSteamDatagramConnectRequest {
        <CMsgSteamDatagramConnectRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramConnectRequest {
    pub fn new() -> CMsgSteamDatagramConnectRequest {
        ::std::default::Default::default()
    }

    // optional fixed32 connection_id = 1;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 client_steam_id = 3;

    pub fn client_steam_id(&self) -> u64 {
        self.client_steam_id.unwrap_or(0)
    }

    pub fn clear_client_steam_id(&mut self) {
        self.client_steam_id = ::std::option::Option::None;
    }

    pub fn has_client_steam_id(&self) -> bool {
        self.client_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_steam_id(&mut self, v: u64) {
        self.client_steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 my_timestamp = 4;

    pub fn my_timestamp(&self) -> u64 {
        self.my_timestamp.unwrap_or(0)
    }

    pub fn clear_my_timestamp(&mut self) {
        self.my_timestamp = ::std::option::Option::None;
    }

    pub fn has_my_timestamp(&self) -> bool {
        self.my_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_my_timestamp(&mut self, v: u64) {
        self.my_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_est_ms = 5;

    pub fn ping_est_ms(&self) -> u32 {
        self.ping_est_ms.unwrap_or(0)
    }

    pub fn clear_ping_est_ms(&mut self) {
        self.ping_est_ms = ::std::option::Option::None;
    }

    pub fn has_ping_est_ms(&self) -> bool {
        self.ping_est_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_est_ms(&mut self, v: u32) {
        self.ping_est_ms = ::std::option::Option::Some(v);
    }

    // optional uint32 virtual_port = 9;

    pub fn virtual_port(&self) -> u32 {
        self.virtual_port.unwrap_or(0)
    }

    pub fn clear_virtual_port(&mut self) {
        self.virtual_port = ::std::option::Option::None;
    }

    pub fn has_virtual_port(&self) -> bool {
        self.virtual_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_virtual_port(&mut self, v: u32) {
        self.virtual_port = ::std::option::Option::Some(v);
    }

    // optional uint32 gameserver_relay_session_id = 2;

    pub fn gameserver_relay_session_id(&self) -> u32 {
        self.gameserver_relay_session_id.unwrap_or(0)
    }

    pub fn clear_gameserver_relay_session_id(&mut self) {
        self.gameserver_relay_session_id = ::std::option::Option::None;
    }

    pub fn has_gameserver_relay_session_id(&self) -> bool {
        self.gameserver_relay_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameserver_relay_session_id(&mut self, v: u32) {
        self.gameserver_relay_session_id = ::std::option::Option::Some(v);
    }

    // optional uint32 protocol_version = 8;

    pub fn protocol_version(&self) -> u32 {
        self.protocol_version.unwrap_or(0)
    }

    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = ::std::option::Option::None;
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: u32) {
        self.protocol_version = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamDatagramConnectRequest| { &m.connection_id },
            |m: &mut CMsgSteamDatagramConnectRequest| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_steam_id",
            |m: &CMsgSteamDatagramConnectRequest| { &m.client_steam_id },
            |m: &mut CMsgSteamDatagramConnectRequest| { &mut m.client_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "my_timestamp",
            |m: &CMsgSteamDatagramConnectRequest| { &m.my_timestamp },
            |m: &mut CMsgSteamDatagramConnectRequest| { &mut m.my_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_est_ms",
            |m: &CMsgSteamDatagramConnectRequest| { &m.ping_est_ms },
            |m: &mut CMsgSteamDatagramConnectRequest| { &mut m.ping_est_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "virtual_port",
            |m: &CMsgSteamDatagramConnectRequest| { &m.virtual_port },
            |m: &mut CMsgSteamDatagramConnectRequest| { &mut m.virtual_port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gameserver_relay_session_id",
            |m: &CMsgSteamDatagramConnectRequest| { &m.gameserver_relay_session_id },
            |m: &mut CMsgSteamDatagramConnectRequest| { &mut m.gameserver_relay_session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramSessionCryptInfoSigned>(
            "crypt",
            |m: &CMsgSteamDatagramConnectRequest| { &m.crypt },
            |m: &mut CMsgSteamDatagramConnectRequest| { &mut m.crypt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::steamdatagram_auth_messages::CMsgSteamDatagramCertificateSigned>(
            "cert",
            |m: &CMsgSteamDatagramConnectRequest| { &m.cert },
            |m: &mut CMsgSteamDatagramConnectRequest| { &mut m.cert },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "protocol_version",
            |m: &CMsgSteamDatagramConnectRequest| { &m.protocol_version },
            |m: &mut CMsgSteamDatagramConnectRequest| { &mut m.protocol_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramConnectRequest>(
            "CMsgSteamDatagramConnectRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramConnectRequest {
    const NAME: &'static str = "CMsgSteamDatagramConnectRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                25 => {
                    self.client_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                33 => {
                    self.my_timestamp = ::std::option::Option::Some(is.read_fixed64()?);
                },
                40 => {
                    self.ping_est_ms = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.virtual_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.gameserver_relay_session_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.crypt)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cert)?;
                },
                64 => {
                    self.protocol_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.client_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.my_timestamp {
            my_size += 1 + 8;
        }
        if let Some(v) = self.ping_est_ms {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.virtual_port {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.gameserver_relay_session_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.crypt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.cert.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.protocol_version {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.client_steam_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.my_timestamp {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.ping_est_ms {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.virtual_port {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.gameserver_relay_session_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.crypt.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.cert.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.protocol_version {
            os.write_uint32(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramConnectRequest {
        CMsgSteamDatagramConnectRequest::new()
    }

    fn clear(&mut self) {
        self.connection_id = ::std::option::Option::None;
        self.client_steam_id = ::std::option::Option::None;
        self.my_timestamp = ::std::option::Option::None;
        self.ping_est_ms = ::std::option::Option::None;
        self.virtual_port = ::std::option::Option::None;
        self.gameserver_relay_session_id = ::std::option::Option::None;
        self.crypt.clear();
        self.cert.clear();
        self.protocol_version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramConnectRequest {
        static instance: CMsgSteamDatagramConnectRequest = CMsgSteamDatagramConnectRequest {
            connection_id: ::std::option::Option::None,
            client_steam_id: ::std::option::Option::None,
            my_timestamp: ::std::option::Option::None,
            ping_est_ms: ::std::option::Option::None,
            virtual_port: ::std::option::Option::None,
            gameserver_relay_session_id: ::std::option::Option::None,
            crypt: ::protobuf::MessageField::none(),
            cert: ::protobuf::MessageField::none(),
            protocol_version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramConnectRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramConnectRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramConnectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramConnectRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramConnectOK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramConnectOK {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectOK.client_connection_id)
    pub client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectOK.server_connection_id)
    pub server_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectOK.your_timestamp)
    pub your_timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectOK.delay_time_usec)
    pub delay_time_usec: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectOK.gameserver_relay_session_id)
    pub gameserver_relay_session_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectOK.crypt)
    pub crypt: ::protobuf::MessageField<CMsgSteamDatagramSessionCryptInfoSigned>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectOK.cert)
    pub cert: ::protobuf::MessageField<super::steamdatagram_auth_messages::CMsgSteamDatagramCertificateSigned>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectOK.protocol_version)
    pub protocol_version: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramConnectOK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramConnectOK {
    fn default() -> &'a CMsgSteamDatagramConnectOK {
        <CMsgSteamDatagramConnectOK as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramConnectOK {
    pub fn new() -> CMsgSteamDatagramConnectOK {
        ::std::default::Default::default()
    }

    // optional fixed32 client_connection_id = 1;

    pub fn client_connection_id(&self) -> u32 {
        self.client_connection_id.unwrap_or(0)
    }

    pub fn clear_client_connection_id(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
    }

    pub fn has_client_connection_id(&self) -> bool {
        self.client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_connection_id(&mut self, v: u32) {
        self.client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 server_connection_id = 7;

    pub fn server_connection_id(&self) -> u32 {
        self.server_connection_id.unwrap_or(0)
    }

    pub fn clear_server_connection_id(&mut self) {
        self.server_connection_id = ::std::option::Option::None;
    }

    pub fn has_server_connection_id(&self) -> bool {
        self.server_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_connection_id(&mut self, v: u32) {
        self.server_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 your_timestamp = 3;

    pub fn your_timestamp(&self) -> u64 {
        self.your_timestamp.unwrap_or(0)
    }

    pub fn clear_your_timestamp(&mut self) {
        self.your_timestamp = ::std::option::Option::None;
    }

    pub fn has_your_timestamp(&self) -> bool {
        self.your_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_your_timestamp(&mut self, v: u64) {
        self.your_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 delay_time_usec = 4;

    pub fn delay_time_usec(&self) -> u32 {
        self.delay_time_usec.unwrap_or(0)
    }

    pub fn clear_delay_time_usec(&mut self) {
        self.delay_time_usec = ::std::option::Option::None;
    }

    pub fn has_delay_time_usec(&self) -> bool {
        self.delay_time_usec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay_time_usec(&mut self, v: u32) {
        self.delay_time_usec = ::std::option::Option::Some(v);
    }

    // optional uint32 gameserver_relay_session_id = 2;

    pub fn gameserver_relay_session_id(&self) -> u32 {
        self.gameserver_relay_session_id.unwrap_or(0)
    }

    pub fn clear_gameserver_relay_session_id(&mut self) {
        self.gameserver_relay_session_id = ::std::option::Option::None;
    }

    pub fn has_gameserver_relay_session_id(&self) -> bool {
        self.gameserver_relay_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameserver_relay_session_id(&mut self, v: u32) {
        self.gameserver_relay_session_id = ::std::option::Option::Some(v);
    }

    // optional uint32 protocol_version = 8;

    pub fn protocol_version(&self) -> u32 {
        self.protocol_version.unwrap_or(0)
    }

    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = ::std::option::Option::None;
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: u32) {
        self.protocol_version = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_connection_id",
            |m: &CMsgSteamDatagramConnectOK| { &m.client_connection_id },
            |m: &mut CMsgSteamDatagramConnectOK| { &mut m.client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_connection_id",
            |m: &CMsgSteamDatagramConnectOK| { &m.server_connection_id },
            |m: &mut CMsgSteamDatagramConnectOK| { &mut m.server_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "your_timestamp",
            |m: &CMsgSteamDatagramConnectOK| { &m.your_timestamp },
            |m: &mut CMsgSteamDatagramConnectOK| { &mut m.your_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "delay_time_usec",
            |m: &CMsgSteamDatagramConnectOK| { &m.delay_time_usec },
            |m: &mut CMsgSteamDatagramConnectOK| { &mut m.delay_time_usec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gameserver_relay_session_id",
            |m: &CMsgSteamDatagramConnectOK| { &m.gameserver_relay_session_id },
            |m: &mut CMsgSteamDatagramConnectOK| { &mut m.gameserver_relay_session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramSessionCryptInfoSigned>(
            "crypt",
            |m: &CMsgSteamDatagramConnectOK| { &m.crypt },
            |m: &mut CMsgSteamDatagramConnectOK| { &mut m.crypt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::steamdatagram_auth_messages::CMsgSteamDatagramCertificateSigned>(
            "cert",
            |m: &CMsgSteamDatagramConnectOK| { &m.cert },
            |m: &mut CMsgSteamDatagramConnectOK| { &mut m.cert },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "protocol_version",
            |m: &CMsgSteamDatagramConnectOK| { &m.protocol_version },
            |m: &mut CMsgSteamDatagramConnectOK| { &mut m.protocol_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramConnectOK>(
            "CMsgSteamDatagramConnectOK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramConnectOK {
    const NAME: &'static str = "CMsgSteamDatagramConnectOK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                61 => {
                    self.server_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                25 => {
                    self.your_timestamp = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.delay_time_usec = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.gameserver_relay_session_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.crypt)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cert)?;
                },
                64 => {
                    self.protocol_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.server_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.your_timestamp {
            my_size += 1 + 8;
        }
        if let Some(v) = self.delay_time_usec {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.gameserver_relay_session_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.crypt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.cert.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.protocol_version {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.client_connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.server_connection_id {
            os.write_fixed32(7, v)?;
        }
        if let Some(v) = self.your_timestamp {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.delay_time_usec {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.gameserver_relay_session_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.crypt.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.cert.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.protocol_version {
            os.write_uint32(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramConnectOK {
        CMsgSteamDatagramConnectOK::new()
    }

    fn clear(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
        self.server_connection_id = ::std::option::Option::None;
        self.your_timestamp = ::std::option::Option::None;
        self.delay_time_usec = ::std::option::Option::None;
        self.gameserver_relay_session_id = ::std::option::Option::None;
        self.crypt.clear();
        self.cert.clear();
        self.protocol_version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramConnectOK {
        static instance: CMsgSteamDatagramConnectOK = CMsgSteamDatagramConnectOK {
            client_connection_id: ::std::option::Option::None,
            server_connection_id: ::std::option::Option::None,
            your_timestamp: ::std::option::Option::None,
            delay_time_usec: ::std::option::Option::None,
            gameserver_relay_session_id: ::std::option::Option::None,
            crypt: ::protobuf::MessageField::none(),
            cert: ::protobuf::MessageField::none(),
            protocol_version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramConnectOK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramConnectOK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramConnectOK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramConnectOK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramConnectionClosed)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramConnectionClosed {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionClosed.legacy_client_connection_id)
    pub legacy_client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionClosed.to_connection_id)
    pub to_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionClosed.from_connection_id)
    pub from_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionClosed.peer_steam_id)
    pub peer_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionClosed.gameserver_relay_session_id)
    pub gameserver_relay_session_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionClosed.relay_mode)
    pub relay_mode: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_steam_datagram_connection_closed::ERelayMode>>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionClosed.debug)
    pub debug: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionClosed.reason_code)
    pub reason_code: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramConnectionClosed.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramConnectionClosed {
    fn default() -> &'a CMsgSteamDatagramConnectionClosed {
        <CMsgSteamDatagramConnectionClosed as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramConnectionClosed {
    pub fn new() -> CMsgSteamDatagramConnectionClosed {
        ::std::default::Default::default()
    }

    // optional fixed32 legacy_client_connection_id = 1;

    pub fn legacy_client_connection_id(&self) -> u32 {
        self.legacy_client_connection_id.unwrap_or(0)
    }

    pub fn clear_legacy_client_connection_id(&mut self) {
        self.legacy_client_connection_id = ::std::option::Option::None;
    }

    pub fn has_legacy_client_connection_id(&self) -> bool {
        self.legacy_client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_client_connection_id(&mut self, v: u32) {
        self.legacy_client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 to_connection_id = 7;

    pub fn to_connection_id(&self) -> u32 {
        self.to_connection_id.unwrap_or(0)
    }

    pub fn clear_to_connection_id(&mut self) {
        self.to_connection_id = ::std::option::Option::None;
    }

    pub fn has_to_connection_id(&self) -> bool {
        self.to_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_connection_id(&mut self, v: u32) {
        self.to_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 from_connection_id = 8;

    pub fn from_connection_id(&self) -> u32 {
        self.from_connection_id.unwrap_or(0)
    }

    pub fn clear_from_connection_id(&mut self) {
        self.from_connection_id = ::std::option::Option::None;
    }

    pub fn has_from_connection_id(&self) -> bool {
        self.from_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_connection_id(&mut self, v: u32) {
        self.from_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 peer_steam_id = 3;

    pub fn peer_steam_id(&self) -> u64 {
        self.peer_steam_id.unwrap_or(0)
    }

    pub fn clear_peer_steam_id(&mut self) {
        self.peer_steam_id = ::std::option::Option::None;
    }

    pub fn has_peer_steam_id(&self) -> bool {
        self.peer_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_peer_steam_id(&mut self, v: u64) {
        self.peer_steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 gameserver_relay_session_id = 2;

    pub fn gameserver_relay_session_id(&self) -> u32 {
        self.gameserver_relay_session_id.unwrap_or(0)
    }

    pub fn clear_gameserver_relay_session_id(&mut self) {
        self.gameserver_relay_session_id = ::std::option::Option::None;
    }

    pub fn has_gameserver_relay_session_id(&self) -> bool {
        self.gameserver_relay_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameserver_relay_session_id(&mut self, v: u32) {
        self.gameserver_relay_session_id = ::std::option::Option::Some(v);
    }

    // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4;

    pub fn relay_mode(&self) -> cmsg_steam_datagram_connection_closed::ERelayMode {
        match self.relay_mode {
            Some(e) => e.enum_value_or(cmsg_steam_datagram_connection_closed::ERelayMode::None),
            None => cmsg_steam_datagram_connection_closed::ERelayMode::None,
        }
    }

    pub fn clear_relay_mode(&mut self) {
        self.relay_mode = ::std::option::Option::None;
    }

    pub fn has_relay_mode(&self) -> bool {
        self.relay_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_relay_mode(&mut self, v: cmsg_steam_datagram_connection_closed::ERelayMode) {
        self.relay_mode = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional string debug = 5;

    pub fn debug(&self) -> &str {
        match self.debug.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_debug(&mut self) {
        self.debug = ::std::option::Option::None;
    }

    pub fn has_debug(&self) -> bool {
        self.debug.is_some()
    }

    // Param is passed by value, moved
    pub fn set_debug(&mut self, v: ::std::string::String) {
        self.debug = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_debug(&mut self) -> &mut ::std::string::String {
        if self.debug.is_none() {
            self.debug = ::std::option::Option::Some(::std::string::String::new());
        }
        self.debug.as_mut().unwrap()
    }

    // Take field
    pub fn take_debug(&mut self) -> ::std::string::String {
        self.debug.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 reason_code = 6;

    pub fn reason_code(&self) -> u32 {
        self.reason_code.unwrap_or(0)
    }

    pub fn clear_reason_code(&mut self) {
        self.reason_code = ::std::option::Option::None;
    }

    pub fn has_reason_code(&self) -> bool {
        self.reason_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason_code(&mut self, v: u32) {
        self.reason_code = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_client_connection_id",
            |m: &CMsgSteamDatagramConnectionClosed| { &m.legacy_client_connection_id },
            |m: &mut CMsgSteamDatagramConnectionClosed| { &mut m.legacy_client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "to_connection_id",
            |m: &CMsgSteamDatagramConnectionClosed| { &m.to_connection_id },
            |m: &mut CMsgSteamDatagramConnectionClosed| { &mut m.to_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_connection_id",
            |m: &CMsgSteamDatagramConnectionClosed| { &m.from_connection_id },
            |m: &mut CMsgSteamDatagramConnectionClosed| { &mut m.from_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "peer_steam_id",
            |m: &CMsgSteamDatagramConnectionClosed| { &m.peer_steam_id },
            |m: &mut CMsgSteamDatagramConnectionClosed| { &mut m.peer_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gameserver_relay_session_id",
            |m: &CMsgSteamDatagramConnectionClosed| { &m.gameserver_relay_session_id },
            |m: &mut CMsgSteamDatagramConnectionClosed| { &mut m.gameserver_relay_session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "relay_mode",
            |m: &CMsgSteamDatagramConnectionClosed| { &m.relay_mode },
            |m: &mut CMsgSteamDatagramConnectionClosed| { &mut m.relay_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "debug",
            |m: &CMsgSteamDatagramConnectionClosed| { &m.debug },
            |m: &mut CMsgSteamDatagramConnectionClosed| { &mut m.debug },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason_code",
            |m: &CMsgSteamDatagramConnectionClosed| { &m.reason_code },
            |m: &mut CMsgSteamDatagramConnectionClosed| { &mut m.reason_code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramConnectionClosed>(
            "CMsgSteamDatagramConnectionClosed",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramConnectionClosed {
    const NAME: &'static str = "CMsgSteamDatagramConnectionClosed";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.legacy_client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                61 => {
                    self.to_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                69 => {
                    self.from_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                25 => {
                    self.peer_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.gameserver_relay_session_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.relay_mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                42 => {
                    self.debug = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.reason_code = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.legacy_client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.to_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.from_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.peer_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.gameserver_relay_session_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.relay_mode {
            my_size += ::protobuf::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.debug.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.reason_code {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.legacy_client_connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.to_connection_id {
            os.write_fixed32(7, v)?;
        }
        if let Some(v) = self.from_connection_id {
            os.write_fixed32(8, v)?;
        }
        if let Some(v) = self.peer_steam_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.gameserver_relay_session_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.relay_mode {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.debug.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.reason_code {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramConnectionClosed {
        CMsgSteamDatagramConnectionClosed::new()
    }

    fn clear(&mut self) {
        self.legacy_client_connection_id = ::std::option::Option::None;
        self.to_connection_id = ::std::option::Option::None;
        self.from_connection_id = ::std::option::Option::None;
        self.peer_steam_id = ::std::option::Option::None;
        self.gameserver_relay_session_id = ::std::option::Option::None;
        self.relay_mode = ::std::option::Option::None;
        self.debug = ::std::option::Option::None;
        self.reason_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramConnectionClosed {
        static instance: CMsgSteamDatagramConnectionClosed = CMsgSteamDatagramConnectionClosed {
            legacy_client_connection_id: ::std::option::Option::None,
            to_connection_id: ::std::option::Option::None,
            from_connection_id: ::std::option::Option::None,
            peer_steam_id: ::std::option::Option::None,
            gameserver_relay_session_id: ::std::option::Option::None,
            relay_mode: ::std::option::Option::None,
            debug: ::std::option::Option::None,
            reason_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramConnectionClosed {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramConnectionClosed").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramConnectionClosed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramConnectionClosed {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramConnectionClosed`
pub mod cmsg_steam_datagram_connection_closed {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgSteamDatagramConnectionClosed.ERelayMode)
    pub enum ERelayMode {
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionClosed.ERelayMode.None)
        None = 0,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionClosed.ERelayMode.EndToEnd)
        EndToEnd = 1,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionClosed.ERelayMode.ClosedByPeer)
        ClosedByPeer = 2,
    }

    impl ::protobuf::Enum for ERelayMode {
        const NAME: &'static str = "ERelayMode";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ERelayMode> {
            match value {
                0 => ::std::option::Option::Some(ERelayMode::None),
                1 => ::std::option::Option::Some(ERelayMode::EndToEnd),
                2 => ::std::option::Option::Some(ERelayMode::ClosedByPeer),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ERelayMode> {
            match str {
                "None" => ::std::option::Option::Some(ERelayMode::None),
                "EndToEnd" => ::std::option::Option::Some(ERelayMode::EndToEnd),
                "ClosedByPeer" => ::std::option::Option::Some(ERelayMode::ClosedByPeer),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ERelayMode] = &[
            ERelayMode::None,
            ERelayMode::EndToEnd,
            ERelayMode::ClosedByPeer,
        ];
    }

    impl ::protobuf::EnumFull for ERelayMode {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgSteamDatagramConnectionClosed.ERelayMode").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ERelayMode {
        fn default() -> Self {
            ERelayMode::None
        }
    }

    impl ERelayMode {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ERelayMode>("CMsgSteamDatagramConnectionClosed.ERelayMode")
        }
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramNoConnection)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramNoConnection {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoConnection.legacy_client_connection_id)
    pub legacy_client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoConnection.to_connection_id)
    pub to_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoConnection.from_connection_id)
    pub from_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoConnection.gameserver_relay_session_id)
    pub gameserver_relay_session_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoConnection.peer_steam_id)
    pub peer_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoConnection.end_to_end)
    pub end_to_end: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramNoConnection.dummy_pad)
    pub dummy_pad: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramNoConnection.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramNoConnection {
    fn default() -> &'a CMsgSteamDatagramNoConnection {
        <CMsgSteamDatagramNoConnection as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramNoConnection {
    pub fn new() -> CMsgSteamDatagramNoConnection {
        ::std::default::Default::default()
    }

    // optional fixed32 legacy_client_connection_id = 1;

    pub fn legacy_client_connection_id(&self) -> u32 {
        self.legacy_client_connection_id.unwrap_or(0)
    }

    pub fn clear_legacy_client_connection_id(&mut self) {
        self.legacy_client_connection_id = ::std::option::Option::None;
    }

    pub fn has_legacy_client_connection_id(&self) -> bool {
        self.legacy_client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_client_connection_id(&mut self, v: u32) {
        self.legacy_client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 to_connection_id = 5;

    pub fn to_connection_id(&self) -> u32 {
        self.to_connection_id.unwrap_or(0)
    }

    pub fn clear_to_connection_id(&mut self) {
        self.to_connection_id = ::std::option::Option::None;
    }

    pub fn has_to_connection_id(&self) -> bool {
        self.to_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_connection_id(&mut self, v: u32) {
        self.to_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 from_connection_id = 6;

    pub fn from_connection_id(&self) -> u32 {
        self.from_connection_id.unwrap_or(0)
    }

    pub fn clear_from_connection_id(&mut self) {
        self.from_connection_id = ::std::option::Option::None;
    }

    pub fn has_from_connection_id(&self) -> bool {
        self.from_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_connection_id(&mut self, v: u32) {
        self.from_connection_id = ::std::option::Option::Some(v);
    }

    // optional uint32 gameserver_relay_session_id = 2;

    pub fn gameserver_relay_session_id(&self) -> u32 {
        self.gameserver_relay_session_id.unwrap_or(0)
    }

    pub fn clear_gameserver_relay_session_id(&mut self) {
        self.gameserver_relay_session_id = ::std::option::Option::None;
    }

    pub fn has_gameserver_relay_session_id(&self) -> bool {
        self.gameserver_relay_session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameserver_relay_session_id(&mut self, v: u32) {
        self.gameserver_relay_session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 peer_steam_id = 3;

    pub fn peer_steam_id(&self) -> u64 {
        self.peer_steam_id.unwrap_or(0)
    }

    pub fn clear_peer_steam_id(&mut self) {
        self.peer_steam_id = ::std::option::Option::None;
    }

    pub fn has_peer_steam_id(&self) -> bool {
        self.peer_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_peer_steam_id(&mut self, v: u64) {
        self.peer_steam_id = ::std::option::Option::Some(v);
    }

    // optional bool end_to_end = 4;

    pub fn end_to_end(&self) -> bool {
        self.end_to_end.unwrap_or(false)
    }

    pub fn clear_end_to_end(&mut self) {
        self.end_to_end = ::std::option::Option::None;
    }

    pub fn has_end_to_end(&self) -> bool {
        self.end_to_end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_to_end(&mut self, v: bool) {
        self.end_to_end = ::std::option::Option::Some(v);
    }

    // optional fixed32 dummy_pad = 1023;

    pub fn dummy_pad(&self) -> u32 {
        self.dummy_pad.unwrap_or(0)
    }

    pub fn clear_dummy_pad(&mut self) {
        self.dummy_pad = ::std::option::Option::None;
    }

    pub fn has_dummy_pad(&self) -> bool {
        self.dummy_pad.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dummy_pad(&mut self, v: u32) {
        self.dummy_pad = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_client_connection_id",
            |m: &CMsgSteamDatagramNoConnection| { &m.legacy_client_connection_id },
            |m: &mut CMsgSteamDatagramNoConnection| { &mut m.legacy_client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "to_connection_id",
            |m: &CMsgSteamDatagramNoConnection| { &m.to_connection_id },
            |m: &mut CMsgSteamDatagramNoConnection| { &mut m.to_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_connection_id",
            |m: &CMsgSteamDatagramNoConnection| { &m.from_connection_id },
            |m: &mut CMsgSteamDatagramNoConnection| { &mut m.from_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gameserver_relay_session_id",
            |m: &CMsgSteamDatagramNoConnection| { &m.gameserver_relay_session_id },
            |m: &mut CMsgSteamDatagramNoConnection| { &mut m.gameserver_relay_session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "peer_steam_id",
            |m: &CMsgSteamDatagramNoConnection| { &m.peer_steam_id },
            |m: &mut CMsgSteamDatagramNoConnection| { &mut m.peer_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "end_to_end",
            |m: &CMsgSteamDatagramNoConnection| { &m.end_to_end },
            |m: &mut CMsgSteamDatagramNoConnection| { &mut m.end_to_end },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "dummy_pad",
            |m: &CMsgSteamDatagramNoConnection| { &m.dummy_pad },
            |m: &mut CMsgSteamDatagramNoConnection| { &mut m.dummy_pad },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramNoConnection>(
            "CMsgSteamDatagramNoConnection",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramNoConnection {
    const NAME: &'static str = "CMsgSteamDatagramNoConnection";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.legacy_client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                45 => {
                    self.to_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                53 => {
                    self.from_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                16 => {
                    self.gameserver_relay_session_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                25 => {
                    self.peer_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.end_to_end = ::std::option::Option::Some(is.read_bool()?);
                },
                8189 => {
                    self.dummy_pad = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.legacy_client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.to_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.from_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.gameserver_relay_session_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.peer_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.end_to_end {
            my_size += 1 + 1;
        }
        if let Some(v) = self.dummy_pad {
            my_size += 2 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.legacy_client_connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.to_connection_id {
            os.write_fixed32(5, v)?;
        }
        if let Some(v) = self.from_connection_id {
            os.write_fixed32(6, v)?;
        }
        if let Some(v) = self.gameserver_relay_session_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.peer_steam_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.end_to_end {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.dummy_pad {
            os.write_fixed32(1023, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramNoConnection {
        CMsgSteamDatagramNoConnection::new()
    }

    fn clear(&mut self) {
        self.legacy_client_connection_id = ::std::option::Option::None;
        self.to_connection_id = ::std::option::Option::None;
        self.from_connection_id = ::std::option::Option::None;
        self.gameserver_relay_session_id = ::std::option::Option::None;
        self.peer_steam_id = ::std::option::Option::None;
        self.end_to_end = ::std::option::Option::None;
        self.dummy_pad = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramNoConnection {
        static instance: CMsgSteamDatagramNoConnection = CMsgSteamDatagramNoConnection {
            legacy_client_connection_id: ::std::option::Option::None,
            to_connection_id: ::std::option::Option::None,
            from_connection_id: ::std::option::Option::None,
            gameserver_relay_session_id: ::std::option::Option::None,
            peer_steam_id: ::std::option::Option::None,
            end_to_end: ::std::option::Option::None,
            dummy_pad: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramNoConnection {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramNoConnection").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramNoConnection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramNoConnection {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramP2PSessionRequestBody)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramP2PSessionRequestBody {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionRequestBody.challenge_time)
    pub challenge_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionRequestBody.challenge)
    pub challenge: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionRequestBody.my_connection_id)
    pub my_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionRequestBody.peer_steam_id)
    pub peer_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionRequestBody.peer_connection_id)
    pub peer_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionRequestBody.protocol_version)
    pub protocol_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionRequestBody.network_config_version)
    pub network_config_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionRequestBody.public_ip)
    pub public_ip: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramP2PSessionRequestBody.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramP2PSessionRequestBody {
    fn default() -> &'a CMsgSteamDatagramP2PSessionRequestBody {
        <CMsgSteamDatagramP2PSessionRequestBody as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramP2PSessionRequestBody {
    pub fn new() -> CMsgSteamDatagramP2PSessionRequestBody {
        ::std::default::Default::default()
    }

    // optional fixed32 challenge_time = 1;

    pub fn challenge_time(&self) -> u32 {
        self.challenge_time.unwrap_or(0)
    }

    pub fn clear_challenge_time(&mut self) {
        self.challenge_time = ::std::option::Option::None;
    }

    pub fn has_challenge_time(&self) -> bool {
        self.challenge_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge_time(&mut self, v: u32) {
        self.challenge_time = ::std::option::Option::Some(v);
    }

    // optional fixed64 challenge = 2;

    pub fn challenge(&self) -> u64 {
        self.challenge.unwrap_or(0)
    }

    pub fn clear_challenge(&mut self) {
        self.challenge = ::std::option::Option::None;
    }

    pub fn has_challenge(&self) -> bool {
        self.challenge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: u64) {
        self.challenge = ::std::option::Option::Some(v);
    }

    // optional fixed32 my_connection_id = 3;

    pub fn my_connection_id(&self) -> u32 {
        self.my_connection_id.unwrap_or(0)
    }

    pub fn clear_my_connection_id(&mut self) {
        self.my_connection_id = ::std::option::Option::None;
    }

    pub fn has_my_connection_id(&self) -> bool {
        self.my_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_my_connection_id(&mut self, v: u32) {
        self.my_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 peer_steam_id = 4;

    pub fn peer_steam_id(&self) -> u64 {
        self.peer_steam_id.unwrap_or(0)
    }

    pub fn clear_peer_steam_id(&mut self) {
        self.peer_steam_id = ::std::option::Option::None;
    }

    pub fn has_peer_steam_id(&self) -> bool {
        self.peer_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_peer_steam_id(&mut self, v: u64) {
        self.peer_steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 peer_connection_id = 5;

    pub fn peer_connection_id(&self) -> u32 {
        self.peer_connection_id.unwrap_or(0)
    }

    pub fn clear_peer_connection_id(&mut self) {
        self.peer_connection_id = ::std::option::Option::None;
    }

    pub fn has_peer_connection_id(&self) -> bool {
        self.peer_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_peer_connection_id(&mut self, v: u32) {
        self.peer_connection_id = ::std::option::Option::Some(v);
    }

    // optional uint32 protocol_version = 8;

    pub fn protocol_version(&self) -> u32 {
        self.protocol_version.unwrap_or(0)
    }

    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = ::std::option::Option::None;
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: u32) {
        self.protocol_version = ::std::option::Option::Some(v);
    }

    // optional uint32 network_config_version = 9;

    pub fn network_config_version(&self) -> u32 {
        self.network_config_version.unwrap_or(0)
    }

    pub fn clear_network_config_version(&mut self) {
        self.network_config_version = ::std::option::Option::None;
    }

    pub fn has_network_config_version(&self) -> bool {
        self.network_config_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_network_config_version(&mut self, v: u32) {
        self.network_config_version = ::std::option::Option::Some(v);
    }

    // optional fixed32 public_ip = 10;

    pub fn public_ip(&self) -> u32 {
        self.public_ip.unwrap_or(0)
    }

    pub fn clear_public_ip(&mut self) {
        self.public_ip = ::std::option::Option::None;
    }

    pub fn has_public_ip(&self) -> bool {
        self.public_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_ip(&mut self, v: u32) {
        self.public_ip = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge_time",
            |m: &CMsgSteamDatagramP2PSessionRequestBody| { &m.challenge_time },
            |m: &mut CMsgSteamDatagramP2PSessionRequestBody| { &mut m.challenge_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge",
            |m: &CMsgSteamDatagramP2PSessionRequestBody| { &m.challenge },
            |m: &mut CMsgSteamDatagramP2PSessionRequestBody| { &mut m.challenge },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "my_connection_id",
            |m: &CMsgSteamDatagramP2PSessionRequestBody| { &m.my_connection_id },
            |m: &mut CMsgSteamDatagramP2PSessionRequestBody| { &mut m.my_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "peer_steam_id",
            |m: &CMsgSteamDatagramP2PSessionRequestBody| { &m.peer_steam_id },
            |m: &mut CMsgSteamDatagramP2PSessionRequestBody| { &mut m.peer_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "peer_connection_id",
            |m: &CMsgSteamDatagramP2PSessionRequestBody| { &m.peer_connection_id },
            |m: &mut CMsgSteamDatagramP2PSessionRequestBody| { &mut m.peer_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "protocol_version",
            |m: &CMsgSteamDatagramP2PSessionRequestBody| { &m.protocol_version },
            |m: &mut CMsgSteamDatagramP2PSessionRequestBody| { &mut m.protocol_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "network_config_version",
            |m: &CMsgSteamDatagramP2PSessionRequestBody| { &m.network_config_version },
            |m: &mut CMsgSteamDatagramP2PSessionRequestBody| { &mut m.network_config_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "public_ip",
            |m: &CMsgSteamDatagramP2PSessionRequestBody| { &m.public_ip },
            |m: &mut CMsgSteamDatagramP2PSessionRequestBody| { &mut m.public_ip },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramP2PSessionRequestBody>(
            "CMsgSteamDatagramP2PSessionRequestBody",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramP2PSessionRequestBody {
    const NAME: &'static str = "CMsgSteamDatagramP2PSessionRequestBody";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.challenge_time = ::std::option::Option::Some(is.read_fixed32()?);
                },
                17 => {
                    self.challenge = ::std::option::Option::Some(is.read_fixed64()?);
                },
                29 => {
                    self.my_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                33 => {
                    self.peer_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                45 => {
                    self.peer_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                64 => {
                    self.protocol_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.network_config_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                85 => {
                    self.public_ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.challenge_time {
            my_size += 1 + 4;
        }
        if let Some(v) = self.challenge {
            my_size += 1 + 8;
        }
        if let Some(v) = self.my_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.peer_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.peer_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.protocol_version {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.network_config_version {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.public_ip {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.challenge_time {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.challenge {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.my_connection_id {
            os.write_fixed32(3, v)?;
        }
        if let Some(v) = self.peer_steam_id {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.peer_connection_id {
            os.write_fixed32(5, v)?;
        }
        if let Some(v) = self.protocol_version {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.network_config_version {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.public_ip {
            os.write_fixed32(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramP2PSessionRequestBody {
        CMsgSteamDatagramP2PSessionRequestBody::new()
    }

    fn clear(&mut self) {
        self.challenge_time = ::std::option::Option::None;
        self.challenge = ::std::option::Option::None;
        self.my_connection_id = ::std::option::Option::None;
        self.peer_steam_id = ::std::option::Option::None;
        self.peer_connection_id = ::std::option::Option::None;
        self.protocol_version = ::std::option::Option::None;
        self.network_config_version = ::std::option::Option::None;
        self.public_ip = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramP2PSessionRequestBody {
        static instance: CMsgSteamDatagramP2PSessionRequestBody = CMsgSteamDatagramP2PSessionRequestBody {
            challenge_time: ::std::option::Option::None,
            challenge: ::std::option::Option::None,
            my_connection_id: ::std::option::Option::None,
            peer_steam_id: ::std::option::Option::None,
            peer_connection_id: ::std::option::Option::None,
            protocol_version: ::std::option::Option::None,
            network_config_version: ::std::option::Option::None,
            public_ip: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramP2PSessionRequestBody {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramP2PSessionRequestBody").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramP2PSessionRequestBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramP2PSessionRequestBody {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramP2PSessionRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramP2PSessionRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionRequest.cert)
    pub cert: ::protobuf::MessageField<super::steamdatagram_auth_messages::CMsgSteamDatagramCertificateSigned>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionRequest.body)
    pub body: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionRequest.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramP2PSessionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramP2PSessionRequest {
    fn default() -> &'a CMsgSteamDatagramP2PSessionRequest {
        <CMsgSteamDatagramP2PSessionRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramP2PSessionRequest {
    pub fn new() -> CMsgSteamDatagramP2PSessionRequest {
        ::std::default::Default::default()
    }

    // optional bytes body = 2;

    pub fn body(&self) -> &[u8] {
        match self.body.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.body.is_none() {
            self.body = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        self.body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 3;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::steamdatagram_auth_messages::CMsgSteamDatagramCertificateSigned>(
            "cert",
            |m: &CMsgSteamDatagramP2PSessionRequest| { &m.cert },
            |m: &mut CMsgSteamDatagramP2PSessionRequest| { &mut m.cert },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "body",
            |m: &CMsgSteamDatagramP2PSessionRequest| { &m.body },
            |m: &mut CMsgSteamDatagramP2PSessionRequest| { &mut m.body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &CMsgSteamDatagramP2PSessionRequest| { &m.signature },
            |m: &mut CMsgSteamDatagramP2PSessionRequest| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramP2PSessionRequest>(
            "CMsgSteamDatagramP2PSessionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramP2PSessionRequest {
    const NAME: &'static str = "CMsgSteamDatagramP2PSessionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cert)?;
                },
                18 => {
                    self.body = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cert.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.body.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.cert.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.body.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramP2PSessionRequest {
        CMsgSteamDatagramP2PSessionRequest::new()
    }

    fn clear(&mut self) {
        self.cert.clear();
        self.body = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramP2PSessionRequest {
        static instance: CMsgSteamDatagramP2PSessionRequest = CMsgSteamDatagramP2PSessionRequest {
            cert: ::protobuf::MessageField::none(),
            body: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramP2PSessionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramP2PSessionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramP2PSessionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramP2PSessionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramP2PSessionEstablished)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramP2PSessionEstablished {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionEstablished.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionEstablished.seconds_until_shutdown)
    pub seconds_until_shutdown: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionEstablished.relay_routing_id)
    pub relay_routing_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PSessionEstablished.seq_num_r2c)
    pub seq_num_r2c: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramP2PSessionEstablished.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramP2PSessionEstablished {
    fn default() -> &'a CMsgSteamDatagramP2PSessionEstablished {
        <CMsgSteamDatagramP2PSessionEstablished as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramP2PSessionEstablished {
    pub fn new() -> CMsgSteamDatagramP2PSessionEstablished {
        ::std::default::Default::default()
    }

    // optional fixed32 connection_id = 1;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_until_shutdown = 3;

    pub fn seconds_until_shutdown(&self) -> u32 {
        self.seconds_until_shutdown.unwrap_or(0)
    }

    pub fn clear_seconds_until_shutdown(&mut self) {
        self.seconds_until_shutdown = ::std::option::Option::None;
    }

    pub fn has_seconds_until_shutdown(&self) -> bool {
        self.seconds_until_shutdown.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_until_shutdown(&mut self, v: u32) {
        self.seconds_until_shutdown = ::std::option::Option::Some(v);
    }

    // optional fixed64 relay_routing_id = 4;

    pub fn relay_routing_id(&self) -> u64 {
        self.relay_routing_id.unwrap_or(0)
    }

    pub fn clear_relay_routing_id(&mut self) {
        self.relay_routing_id = ::std::option::Option::None;
    }

    pub fn has_relay_routing_id(&self) -> bool {
        self.relay_routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_relay_routing_id(&mut self, v: u64) {
        self.relay_routing_id = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_r2c = 5;

    pub fn seq_num_r2c(&self) -> u32 {
        self.seq_num_r2c.unwrap_or(0)
    }

    pub fn clear_seq_num_r2c(&mut self) {
        self.seq_num_r2c = ::std::option::Option::None;
    }

    pub fn has_seq_num_r2c(&self) -> bool {
        self.seq_num_r2c.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_r2c(&mut self, v: u32) {
        self.seq_num_r2c = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamDatagramP2PSessionEstablished| { &m.connection_id },
            |m: &mut CMsgSteamDatagramP2PSessionEstablished| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_until_shutdown",
            |m: &CMsgSteamDatagramP2PSessionEstablished| { &m.seconds_until_shutdown },
            |m: &mut CMsgSteamDatagramP2PSessionEstablished| { &mut m.seconds_until_shutdown },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "relay_routing_id",
            |m: &CMsgSteamDatagramP2PSessionEstablished| { &m.relay_routing_id },
            |m: &mut CMsgSteamDatagramP2PSessionEstablished| { &mut m.relay_routing_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_r2c",
            |m: &CMsgSteamDatagramP2PSessionEstablished| { &m.seq_num_r2c },
            |m: &mut CMsgSteamDatagramP2PSessionEstablished| { &mut m.seq_num_r2c },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramP2PSessionEstablished>(
            "CMsgSteamDatagramP2PSessionEstablished",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramP2PSessionEstablished {
    const NAME: &'static str = "CMsgSteamDatagramP2PSessionEstablished";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                24 => {
                    self.seconds_until_shutdown = ::std::option::Option::Some(is.read_uint32()?);
                },
                33 => {
                    self.relay_routing_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                40 => {
                    self.seq_num_r2c = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.seconds_until_shutdown {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.relay_routing_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.seq_num_r2c {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.seconds_until_shutdown {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.relay_routing_id {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.seq_num_r2c {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramP2PSessionEstablished {
        CMsgSteamDatagramP2PSessionEstablished::new()
    }

    fn clear(&mut self) {
        self.connection_id = ::std::option::Option::None;
        self.seconds_until_shutdown = ::std::option::Option::None;
        self.relay_routing_id = ::std::option::Option::None;
        self.seq_num_r2c = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramP2PSessionEstablished {
        static instance: CMsgSteamDatagramP2PSessionEstablished = CMsgSteamDatagramP2PSessionEstablished {
            connection_id: ::std::option::Option::None,
            seconds_until_shutdown: ::std::option::Option::None,
            relay_routing_id: ::std::option::Option::None,
            seq_num_r2c: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramP2PSessionEstablished {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramP2PSessionEstablished").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramP2PSessionEstablished {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramP2PSessionEstablished {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramP2PRoutes)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramP2PRoutes {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRoutes.relay_clusters)
    pub relay_clusters: ::std::vec::Vec<cmsg_steam_datagram_p2proutes::RelayCluster>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRoutes.routes)
    pub routes: ::std::vec::Vec<cmsg_steam_datagram_p2proutes::Route>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRoutes.revision)
    pub revision: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramP2PRoutes.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramP2PRoutes {
    fn default() -> &'a CMsgSteamDatagramP2PRoutes {
        <CMsgSteamDatagramP2PRoutes as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramP2PRoutes {
    pub fn new() -> CMsgSteamDatagramP2PRoutes {
        ::std::default::Default::default()
    }

    // optional uint32 revision = 3;

    pub fn revision(&self) -> u32 {
        self.revision.unwrap_or(0)
    }

    pub fn clear_revision(&mut self) {
        self.revision = ::std::option::Option::None;
    }

    pub fn has_revision(&self) -> bool {
        self.revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: u32) {
        self.revision = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "relay_clusters",
            |m: &CMsgSteamDatagramP2PRoutes| { &m.relay_clusters },
            |m: &mut CMsgSteamDatagramP2PRoutes| { &mut m.relay_clusters },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "routes",
            |m: &CMsgSteamDatagramP2PRoutes| { &m.routes },
            |m: &mut CMsgSteamDatagramP2PRoutes| { &mut m.routes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "revision",
            |m: &CMsgSteamDatagramP2PRoutes| { &m.revision },
            |m: &mut CMsgSteamDatagramP2PRoutes| { &mut m.revision },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramP2PRoutes>(
            "CMsgSteamDatagramP2PRoutes",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramP2PRoutes {
    const NAME: &'static str = "CMsgSteamDatagramP2PRoutes";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.relay_clusters.push(is.read_message()?);
                },
                18 => {
                    self.routes.push(is.read_message()?);
                },
                24 => {
                    self.revision = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.relay_clusters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.routes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.revision {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.relay_clusters {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.routes {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.revision {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramP2PRoutes {
        CMsgSteamDatagramP2PRoutes::new()
    }

    fn clear(&mut self) {
        self.relay_clusters.clear();
        self.routes.clear();
        self.revision = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramP2PRoutes {
        static instance: CMsgSteamDatagramP2PRoutes = CMsgSteamDatagramP2PRoutes {
            relay_clusters: ::std::vec::Vec::new(),
            routes: ::std::vec::Vec::new(),
            revision: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramP2PRoutes {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramP2PRoutes").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramP2PRoutes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramP2PRoutes {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramP2PRoutes`
pub mod cmsg_steam_datagram_p2proutes {
    // @@protoc_insertion_point(message:CMsgSteamDatagramP2PRoutes.RelayCluster)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RelayCluster {
        // message fields
        // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRoutes.RelayCluster.pop_id)
        pub pop_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRoutes.RelayCluster.ping_ms)
        pub ping_ms: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRoutes.RelayCluster.score_penalty)
        pub score_penalty: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRoutes.RelayCluster.session_relay_routing_id)
        pub session_relay_routing_id: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgSteamDatagramP2PRoutes.RelayCluster.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RelayCluster {
        fn default() -> &'a RelayCluster {
            <RelayCluster as ::protobuf::Message>::default_instance()
        }
    }

    impl RelayCluster {
        pub fn new() -> RelayCluster {
            ::std::default::Default::default()
        }

        // optional fixed32 pop_id = 1;

        pub fn pop_id(&self) -> u32 {
            self.pop_id.unwrap_or(0)
        }

        pub fn clear_pop_id(&mut self) {
            self.pop_id = ::std::option::Option::None;
        }

        pub fn has_pop_id(&self) -> bool {
            self.pop_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_pop_id(&mut self, v: u32) {
            self.pop_id = ::std::option::Option::Some(v);
        }

        // optional uint32 ping_ms = 2;

        pub fn ping_ms(&self) -> u32 {
            self.ping_ms.unwrap_or(0)
        }

        pub fn clear_ping_ms(&mut self) {
            self.ping_ms = ::std::option::Option::None;
        }

        pub fn has_ping_ms(&self) -> bool {
            self.ping_ms.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ping_ms(&mut self, v: u32) {
            self.ping_ms = ::std::option::Option::Some(v);
        }

        // optional uint32 score_penalty = 3;

        pub fn score_penalty(&self) -> u32 {
            self.score_penalty.unwrap_or(0)
        }

        pub fn clear_score_penalty(&mut self) {
            self.score_penalty = ::std::option::Option::None;
        }

        pub fn has_score_penalty(&self) -> bool {
            self.score_penalty.is_some()
        }

        // Param is passed by value, moved
        pub fn set_score_penalty(&mut self, v: u32) {
            self.score_penalty = ::std::option::Option::Some(v);
        }

        // optional fixed64 session_relay_routing_id = 4;

        pub fn session_relay_routing_id(&self) -> u64 {
            self.session_relay_routing_id.unwrap_or(0)
        }

        pub fn clear_session_relay_routing_id(&mut self) {
            self.session_relay_routing_id = ::std::option::Option::None;
        }

        pub fn has_session_relay_routing_id(&self) -> bool {
            self.session_relay_routing_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_session_relay_routing_id(&mut self, v: u64) {
            self.session_relay_routing_id = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "pop_id",
                |m: &RelayCluster| { &m.pop_id },
                |m: &mut RelayCluster| { &mut m.pop_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "ping_ms",
                |m: &RelayCluster| { &m.ping_ms },
                |m: &mut RelayCluster| { &mut m.ping_ms },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "score_penalty",
                |m: &RelayCluster| { &m.score_penalty },
                |m: &mut RelayCluster| { &mut m.score_penalty },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "session_relay_routing_id",
                |m: &RelayCluster| { &m.session_relay_routing_id },
                |m: &mut RelayCluster| { &mut m.session_relay_routing_id },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RelayCluster>(
                "CMsgSteamDatagramP2PRoutes.RelayCluster",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RelayCluster {
        const NAME: &'static str = "RelayCluster";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.pop_id = ::std::option::Option::Some(is.read_fixed32()?);
                    },
                    16 => {
                        self.ping_ms = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.score_penalty = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    33 => {
                        self.session_relay_routing_id = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.pop_id {
                my_size += 1 + 4;
            }
            if let Some(v) = self.ping_ms {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.score_penalty {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.session_relay_routing_id {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.pop_id {
                os.write_fixed32(1, v)?;
            }
            if let Some(v) = self.ping_ms {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.score_penalty {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.session_relay_routing_id {
                os.write_fixed64(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RelayCluster {
            RelayCluster::new()
        }

        fn clear(&mut self) {
            self.pop_id = ::std::option::Option::None;
            self.ping_ms = ::std::option::Option::None;
            self.score_penalty = ::std::option::Option::None;
            self.session_relay_routing_id = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RelayCluster {
            static instance: RelayCluster = RelayCluster {
                pop_id: ::std::option::Option::None,
                ping_ms: ::std::option::Option::None,
                score_penalty: ::std::option::Option::None,
                session_relay_routing_id: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RelayCluster {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgSteamDatagramP2PRoutes.RelayCluster").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RelayCluster {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RelayCluster {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CMsgSteamDatagramP2PRoutes.Route)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Route {
        // message fields
        // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRoutes.Route.my_pop_id)
        pub my_pop_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRoutes.Route.your_pop_id)
        pub your_pop_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRoutes.Route.score)
        pub score: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgSteamDatagramP2PRoutes.Route.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Route {
        fn default() -> &'a Route {
            <Route as ::protobuf::Message>::default_instance()
        }
    }

    impl Route {
        pub fn new() -> Route {
            ::std::default::Default::default()
        }

        // optional fixed32 my_pop_id = 1;

        pub fn my_pop_id(&self) -> u32 {
            self.my_pop_id.unwrap_or(0)
        }

        pub fn clear_my_pop_id(&mut self) {
            self.my_pop_id = ::std::option::Option::None;
        }

        pub fn has_my_pop_id(&self) -> bool {
            self.my_pop_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_my_pop_id(&mut self, v: u32) {
            self.my_pop_id = ::std::option::Option::Some(v);
        }

        // optional fixed32 your_pop_id = 2;

        pub fn your_pop_id(&self) -> u32 {
            self.your_pop_id.unwrap_or(0)
        }

        pub fn clear_your_pop_id(&mut self) {
            self.your_pop_id = ::std::option::Option::None;
        }

        pub fn has_your_pop_id(&self) -> bool {
            self.your_pop_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_your_pop_id(&mut self, v: u32) {
            self.your_pop_id = ::std::option::Option::Some(v);
        }

        // optional uint32 score = 3;

        pub fn score(&self) -> u32 {
            self.score.unwrap_or(0)
        }

        pub fn clear_score(&mut self) {
            self.score = ::std::option::Option::None;
        }

        pub fn has_score(&self) -> bool {
            self.score.is_some()
        }

        // Param is passed by value, moved
        pub fn set_score(&mut self, v: u32) {
            self.score = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "my_pop_id",
                |m: &Route| { &m.my_pop_id },
                |m: &mut Route| { &mut m.my_pop_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "your_pop_id",
                |m: &Route| { &m.your_pop_id },
                |m: &mut Route| { &mut m.your_pop_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "score",
                |m: &Route| { &m.score },
                |m: &mut Route| { &mut m.score },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Route>(
                "CMsgSteamDatagramP2PRoutes.Route",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Route {
        const NAME: &'static str = "Route";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.my_pop_id = ::std::option::Option::Some(is.read_fixed32()?);
                    },
                    21 => {
                        self.your_pop_id = ::std::option::Option::Some(is.read_fixed32()?);
                    },
                    24 => {
                        self.score = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.my_pop_id {
                my_size += 1 + 4;
            }
            if let Some(v) = self.your_pop_id {
                my_size += 1 + 4;
            }
            if let Some(v) = self.score {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.my_pop_id {
                os.write_fixed32(1, v)?;
            }
            if let Some(v) = self.your_pop_id {
                os.write_fixed32(2, v)?;
            }
            if let Some(v) = self.score {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Route {
            Route::new()
        }

        fn clear(&mut self) {
            self.my_pop_id = ::std::option::Option::None;
            self.your_pop_id = ::std::option::Option::None;
            self.score = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Route {
            static instance: Route = Route {
                my_pop_id: ::std::option::Option::None,
                your_pop_id: ::std::option::Option::None,
                score: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Route {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgSteamDatagramP2PRoutes.Route").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Route {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Route {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramP2PRendezvous)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramP2PRendezvous {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRendezvous.to_connection_id)
    pub to_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRendezvous.routes)
    pub routes: ::protobuf::MessageField<CMsgSteamDatagramP2PRoutes>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRendezvous.ack_peer_routes_revision)
    pub ack_peer_routes_revision: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRendezvous.connect_request)
    pub connect_request: ::protobuf::MessageField<CMsgSteamDatagramConnectRequest>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRendezvous.connect_ok)
    pub connect_ok: ::protobuf::MessageField<CMsgSteamDatagramConnectOK>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramP2PRendezvous.connection_closed)
    pub connection_closed: ::protobuf::MessageField<CMsgSteamDatagramConnectionClosed>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramP2PRendezvous.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramP2PRendezvous {
    fn default() -> &'a CMsgSteamDatagramP2PRendezvous {
        <CMsgSteamDatagramP2PRendezvous as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramP2PRendezvous {
    pub fn new() -> CMsgSteamDatagramP2PRendezvous {
        ::std::default::Default::default()
    }

    // optional fixed32 to_connection_id = 1;

    pub fn to_connection_id(&self) -> u32 {
        self.to_connection_id.unwrap_or(0)
    }

    pub fn clear_to_connection_id(&mut self) {
        self.to_connection_id = ::std::option::Option::None;
    }

    pub fn has_to_connection_id(&self) -> bool {
        self.to_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_connection_id(&mut self, v: u32) {
        self.to_connection_id = ::std::option::Option::Some(v);
    }

    // optional uint32 ack_peer_routes_revision = 3;

    pub fn ack_peer_routes_revision(&self) -> u32 {
        self.ack_peer_routes_revision.unwrap_or(0)
    }

    pub fn clear_ack_peer_routes_revision(&mut self) {
        self.ack_peer_routes_revision = ::std::option::Option::None;
    }

    pub fn has_ack_peer_routes_revision(&self) -> bool {
        self.ack_peer_routes_revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ack_peer_routes_revision(&mut self, v: u32) {
        self.ack_peer_routes_revision = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "to_connection_id",
            |m: &CMsgSteamDatagramP2PRendezvous| { &m.to_connection_id },
            |m: &mut CMsgSteamDatagramP2PRendezvous| { &mut m.to_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramP2PRoutes>(
            "routes",
            |m: &CMsgSteamDatagramP2PRendezvous| { &m.routes },
            |m: &mut CMsgSteamDatagramP2PRendezvous| { &mut m.routes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ack_peer_routes_revision",
            |m: &CMsgSteamDatagramP2PRendezvous| { &m.ack_peer_routes_revision },
            |m: &mut CMsgSteamDatagramP2PRendezvous| { &mut m.ack_peer_routes_revision },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectRequest>(
            "connect_request",
            |m: &CMsgSteamDatagramP2PRendezvous| { &m.connect_request },
            |m: &mut CMsgSteamDatagramP2PRendezvous| { &mut m.connect_request },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectOK>(
            "connect_ok",
            |m: &CMsgSteamDatagramP2PRendezvous| { &m.connect_ok },
            |m: &mut CMsgSteamDatagramP2PRendezvous| { &mut m.connect_ok },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionClosed>(
            "connection_closed",
            |m: &CMsgSteamDatagramP2PRendezvous| { &m.connection_closed },
            |m: &mut CMsgSteamDatagramP2PRendezvous| { &mut m.connection_closed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramP2PRendezvous>(
            "CMsgSteamDatagramP2PRendezvous",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramP2PRendezvous {
    const NAME: &'static str = "CMsgSteamDatagramP2PRendezvous";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.to_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.routes)?;
                },
                24 => {
                    self.ack_peer_routes_revision = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.connect_request)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.connect_ok)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.connection_closed)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.to_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.routes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ack_peer_routes_revision {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.connect_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.connect_ok.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.connection_closed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.to_connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.routes.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.ack_peer_routes_revision {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.connect_request.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.connect_ok.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.connection_closed.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramP2PRendezvous {
        CMsgSteamDatagramP2PRendezvous::new()
    }

    fn clear(&mut self) {
        self.to_connection_id = ::std::option::Option::None;
        self.routes.clear();
        self.ack_peer_routes_revision = ::std::option::Option::None;
        self.connect_request.clear();
        self.connect_ok.clear();
        self.connection_closed.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramP2PRendezvous {
        static instance: CMsgSteamDatagramP2PRendezvous = CMsgSteamDatagramP2PRendezvous {
            to_connection_id: ::std::option::Option::None,
            routes: ::protobuf::MessageField::none(),
            ack_peer_routes_revision: ::std::option::Option::None,
            connect_request: ::protobuf::MessageField::none(),
            connect_ok: ::protobuf::MessageField::none(),
            connection_closed: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramP2PRendezvous {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramP2PRendezvous").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramP2PRendezvous {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramP2PRendezvous {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramConnectionStatsP2PClientToRouter {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PClientToRouter.c2r)
    pub c2r: ::protobuf::MessageField<CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PClientToRouter.c2s)
    pub c2s: ::protobuf::MessageField<CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PClientToRouter.ack_relay)
    pub ack_relay: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PClientToRouter.ack_e2e)
    pub ack_e2e: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PClientToRouter.flags)
    pub flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PClientToRouter.forward_target_relay_routing_id)
    pub forward_target_relay_routing_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PClientToRouter.forward_target_revision)
    pub forward_target_revision: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PClientToRouter.routes)
    pub routes: ::protobuf::MessageField<CMsgSteamDatagramP2PRoutes>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PClientToRouter.ack_peer_routes_revision)
    pub ack_peer_routes_revision: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PClientToRouter.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PClientToRouter.seq_num_c2r)
    pub seq_num_c2r: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PClientToRouter.seq_num_c2s)
    pub seq_num_c2s: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramConnectionStatsP2PClientToRouter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramConnectionStatsP2PClientToRouter {
    fn default() -> &'a CMsgSteamDatagramConnectionStatsP2PClientToRouter {
        <CMsgSteamDatagramConnectionStatsP2PClientToRouter as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramConnectionStatsP2PClientToRouter {
    pub fn new() -> CMsgSteamDatagramConnectionStatsP2PClientToRouter {
        ::std::default::Default::default()
    }

    // optional uint32 flags = 5;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional fixed64 forward_target_relay_routing_id = 6;

    pub fn forward_target_relay_routing_id(&self) -> u64 {
        self.forward_target_relay_routing_id.unwrap_or(0)
    }

    pub fn clear_forward_target_relay_routing_id(&mut self) {
        self.forward_target_relay_routing_id = ::std::option::Option::None;
    }

    pub fn has_forward_target_relay_routing_id(&self) -> bool {
        self.forward_target_relay_routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_forward_target_relay_routing_id(&mut self, v: u64) {
        self.forward_target_relay_routing_id = ::std::option::Option::Some(v);
    }

    // optional uint32 forward_target_revision = 7;

    pub fn forward_target_revision(&self) -> u32 {
        self.forward_target_revision.unwrap_or(0)
    }

    pub fn clear_forward_target_revision(&mut self) {
        self.forward_target_revision = ::std::option::Option::None;
    }

    pub fn has_forward_target_revision(&self) -> bool {
        self.forward_target_revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_forward_target_revision(&mut self, v: u32) {
        self.forward_target_revision = ::std::option::Option::Some(v);
    }

    // optional uint32 ack_peer_routes_revision = 9;

    pub fn ack_peer_routes_revision(&self) -> u32 {
        self.ack_peer_routes_revision.unwrap_or(0)
    }

    pub fn clear_ack_peer_routes_revision(&mut self) {
        self.ack_peer_routes_revision = ::std::option::Option::None;
    }

    pub fn has_ack_peer_routes_revision(&self) -> bool {
        self.ack_peer_routes_revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ack_peer_routes_revision(&mut self, v: u32) {
        self.ack_peer_routes_revision = ::std::option::Option::Some(v);
    }

    // optional fixed32 connection_id = 10;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_c2r = 11;

    pub fn seq_num_c2r(&self) -> u32 {
        self.seq_num_c2r.unwrap_or(0)
    }

    pub fn clear_seq_num_c2r(&mut self) {
        self.seq_num_c2r = ::std::option::Option::None;
    }

    pub fn has_seq_num_c2r(&self) -> bool {
        self.seq_num_c2r.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_c2r(&mut self, v: u32) {
        self.seq_num_c2r = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_c2s = 12;

    pub fn seq_num_c2s(&self) -> u32 {
        self.seq_num_c2s.unwrap_or(0)
    }

    pub fn clear_seq_num_c2s(&mut self) {
        self.seq_num_c2s = ::std::option::Option::None;
    }

    pub fn has_seq_num_c2s(&self) -> bool {
        self.seq_num_c2s.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_c2s(&mut self, v: u32) {
        self.seq_num_c2s = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionQuality>(
            "c2r",
            |m: &CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &m.c2r },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &mut m.c2r },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionQuality>(
            "c2s",
            |m: &CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &m.c2s },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &mut m.c2s },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_relay",
            |m: &CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &m.ack_relay },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &mut m.ack_relay },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_e2e",
            |m: &CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &m.ack_e2e },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &mut m.ack_e2e },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "flags",
            |m: &CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &m.flags },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &mut m.flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "forward_target_relay_routing_id",
            |m: &CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &m.forward_target_relay_routing_id },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &mut m.forward_target_relay_routing_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "forward_target_revision",
            |m: &CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &m.forward_target_revision },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &mut m.forward_target_revision },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramP2PRoutes>(
            "routes",
            |m: &CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &m.routes },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &mut m.routes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ack_peer_routes_revision",
            |m: &CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &m.ack_peer_routes_revision },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &mut m.ack_peer_routes_revision },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &m.connection_id },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_c2r",
            |m: &CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &m.seq_num_c2r },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &mut m.seq_num_c2r },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_c2s",
            |m: &CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &m.seq_num_c2s },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PClientToRouter| { &mut m.seq_num_c2s },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramConnectionStatsP2PClientToRouter>(
            "CMsgSteamDatagramConnectionStatsP2PClientToRouter",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramConnectionStatsP2PClientToRouter {
    const NAME: &'static str = "CMsgSteamDatagramConnectionStatsP2PClientToRouter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.c2r)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.c2s)?;
                },
                26 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ack_relay)?;
                },
                29 => {
                    self.ack_relay.push(is.read_fixed32()?);
                },
                34 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ack_e2e)?;
                },
                37 => {
                    self.ack_e2e.push(is.read_fixed32()?);
                },
                40 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                49 => {
                    self.forward_target_relay_routing_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                56 => {
                    self.forward_target_revision = ::std::option::Option::Some(is.read_uint32()?);
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.routes)?;
                },
                72 => {
                    self.ack_peer_routes_revision = ::std::option::Option::Some(is.read_uint32()?);
                },
                85 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                88 => {
                    self.seq_num_c2r = ::std::option::Option::Some(is.read_uint32()?);
                },
                96 => {
                    self.seq_num_c2s = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.c2r.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.c2s.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += 5 * self.ack_relay.len() as u64;
        my_size += 5 * self.ack_e2e.len() as u64;
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.forward_target_relay_routing_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.forward_target_revision {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.routes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ack_peer_routes_revision {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.seq_num_c2r {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.seq_num_c2s {
            my_size += ::protobuf::rt::uint32_size(12, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.c2r.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.c2s.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.ack_relay {
            os.write_fixed32(3, *v)?;
        };
        for v in &self.ack_e2e {
            os.write_fixed32(4, *v)?;
        };
        if let Some(v) = self.flags {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.forward_target_relay_routing_id {
            os.write_fixed64(6, v)?;
        }
        if let Some(v) = self.forward_target_revision {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.routes.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.ack_peer_routes_revision {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.connection_id {
            os.write_fixed32(10, v)?;
        }
        if let Some(v) = self.seq_num_c2r {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.seq_num_c2s {
            os.write_uint32(12, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramConnectionStatsP2PClientToRouter {
        CMsgSteamDatagramConnectionStatsP2PClientToRouter::new()
    }

    fn clear(&mut self) {
        self.c2r.clear();
        self.c2s.clear();
        self.ack_relay.clear();
        self.ack_e2e.clear();
        self.flags = ::std::option::Option::None;
        self.forward_target_relay_routing_id = ::std::option::Option::None;
        self.forward_target_revision = ::std::option::Option::None;
        self.routes.clear();
        self.ack_peer_routes_revision = ::std::option::Option::None;
        self.connection_id = ::std::option::Option::None;
        self.seq_num_c2r = ::std::option::Option::None;
        self.seq_num_c2s = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramConnectionStatsP2PClientToRouter {
        static instance: CMsgSteamDatagramConnectionStatsP2PClientToRouter = CMsgSteamDatagramConnectionStatsP2PClientToRouter {
            c2r: ::protobuf::MessageField::none(),
            c2s: ::protobuf::MessageField::none(),
            ack_relay: ::std::vec::Vec::new(),
            ack_e2e: ::std::vec::Vec::new(),
            flags: ::std::option::Option::None,
            forward_target_relay_routing_id: ::std::option::Option::None,
            forward_target_revision: ::std::option::Option::None,
            routes: ::protobuf::MessageField::none(),
            ack_peer_routes_revision: ::std::option::Option::None,
            connection_id: ::std::option::Option::None,
            seq_num_c2r: ::std::option::Option::None,
            seq_num_c2s: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramConnectionStatsP2PClientToRouter {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramConnectionStatsP2PClientToRouter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramConnectionStatsP2PClientToRouter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramConnectionStatsP2PClientToRouter {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramConnectionStatsP2PClientToRouter`
pub mod cmsg_steam_datagram_connection_stats_p2pclient_to_router {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgSteamDatagramConnectionStatsP2PClientToRouter.Flags)
    pub enum Flags {
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsP2PClientToRouter.Flags.ACK_REQUEST_RELAY)
        ACK_REQUEST_RELAY = 1,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsP2PClientToRouter.Flags.ACK_REQUEST_E2E)
        ACK_REQUEST_E2E = 2,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsP2PClientToRouter.Flags.ACK_REQUEST_IMMEDIATE)
        ACK_REQUEST_IMMEDIATE = 4,
    }

    impl ::protobuf::Enum for Flags {
        const NAME: &'static str = "Flags";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Flags> {
            match value {
                1 => ::std::option::Option::Some(Flags::ACK_REQUEST_RELAY),
                2 => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                4 => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Flags> {
            match str {
                "ACK_REQUEST_RELAY" => ::std::option::Option::Some(Flags::ACK_REQUEST_RELAY),
                "ACK_REQUEST_E2E" => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                "ACK_REQUEST_IMMEDIATE" => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Flags] = &[
            Flags::ACK_REQUEST_RELAY,
            Flags::ACK_REQUEST_E2E,
            Flags::ACK_REQUEST_IMMEDIATE,
        ];
    }

    impl ::protobuf::EnumFull for Flags {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgSteamDatagramConnectionStatsP2PClientToRouter.Flags").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Flags::ACK_REQUEST_RELAY => 0,
                Flags::ACK_REQUEST_E2E => 1,
                Flags::ACK_REQUEST_IMMEDIATE => 2,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Flags {
        fn default() -> Self {
            Flags::ACK_REQUEST_RELAY
        }
    }

    impl Flags {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Flags>("CMsgSteamDatagramConnectionStatsP2PClientToRouter.Flags")
        }
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramConnectionStatsP2PRouterToClient {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.r2c)
    pub r2c: ::protobuf::MessageField<CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.p2c)
    pub p2c: ::protobuf::MessageField<CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.seconds_until_shutdown)
    pub seconds_until_shutdown: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.migrate_request_ip)
    pub migrate_request_ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.migrate_request_port)
    pub migrate_request_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.scoring_penalty_relay_cluster)
    pub scoring_penalty_relay_cluster: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_relay)
    pub ack_relay: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_e2e)
    pub ack_e2e: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.flags)
    pub flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_forward_target_revision)
    pub ack_forward_target_revision: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.routes)
    pub routes: ::protobuf::MessageField<CMsgSteamDatagramP2PRoutes>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_peer_routes_revision)
    pub ack_peer_routes_revision: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.seq_num_r2c)
    pub seq_num_r2c: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.seq_num_p2c)
    pub seq_num_p2c: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramConnectionStatsP2PRouterToClient.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramConnectionStatsP2PRouterToClient {
    fn default() -> &'a CMsgSteamDatagramConnectionStatsP2PRouterToClient {
        <CMsgSteamDatagramConnectionStatsP2PRouterToClient as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramConnectionStatsP2PRouterToClient {
    pub fn new() -> CMsgSteamDatagramConnectionStatsP2PRouterToClient {
        ::std::default::Default::default()
    }

    // optional uint32 seconds_until_shutdown = 3;

    pub fn seconds_until_shutdown(&self) -> u32 {
        self.seconds_until_shutdown.unwrap_or(0)
    }

    pub fn clear_seconds_until_shutdown(&mut self) {
        self.seconds_until_shutdown = ::std::option::Option::None;
    }

    pub fn has_seconds_until_shutdown(&self) -> bool {
        self.seconds_until_shutdown.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_until_shutdown(&mut self, v: u32) {
        self.seconds_until_shutdown = ::std::option::Option::Some(v);
    }

    // optional fixed32 migrate_request_ip = 4;

    pub fn migrate_request_ip(&self) -> u32 {
        self.migrate_request_ip.unwrap_or(0)
    }

    pub fn clear_migrate_request_ip(&mut self) {
        self.migrate_request_ip = ::std::option::Option::None;
    }

    pub fn has_migrate_request_ip(&self) -> bool {
        self.migrate_request_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_migrate_request_ip(&mut self, v: u32) {
        self.migrate_request_ip = ::std::option::Option::Some(v);
    }

    // optional uint32 migrate_request_port = 5;

    pub fn migrate_request_port(&self) -> u32 {
        self.migrate_request_port.unwrap_or(0)
    }

    pub fn clear_migrate_request_port(&mut self) {
        self.migrate_request_port = ::std::option::Option::None;
    }

    pub fn has_migrate_request_port(&self) -> bool {
        self.migrate_request_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_migrate_request_port(&mut self, v: u32) {
        self.migrate_request_port = ::std::option::Option::Some(v);
    }

    // optional uint32 scoring_penalty_relay_cluster = 6;

    pub fn scoring_penalty_relay_cluster(&self) -> u32 {
        self.scoring_penalty_relay_cluster.unwrap_or(0)
    }

    pub fn clear_scoring_penalty_relay_cluster(&mut self) {
        self.scoring_penalty_relay_cluster = ::std::option::Option::None;
    }

    pub fn has_scoring_penalty_relay_cluster(&self) -> bool {
        self.scoring_penalty_relay_cluster.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scoring_penalty_relay_cluster(&mut self, v: u32) {
        self.scoring_penalty_relay_cluster = ::std::option::Option::Some(v);
    }

    // optional uint32 flags = 9;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional uint32 ack_forward_target_revision = 10;

    pub fn ack_forward_target_revision(&self) -> u32 {
        self.ack_forward_target_revision.unwrap_or(0)
    }

    pub fn clear_ack_forward_target_revision(&mut self) {
        self.ack_forward_target_revision = ::std::option::Option::None;
    }

    pub fn has_ack_forward_target_revision(&self) -> bool {
        self.ack_forward_target_revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ack_forward_target_revision(&mut self, v: u32) {
        self.ack_forward_target_revision = ::std::option::Option::Some(v);
    }

    // optional uint32 ack_peer_routes_revision = 12;

    pub fn ack_peer_routes_revision(&self) -> u32 {
        self.ack_peer_routes_revision.unwrap_or(0)
    }

    pub fn clear_ack_peer_routes_revision(&mut self) {
        self.ack_peer_routes_revision = ::std::option::Option::None;
    }

    pub fn has_ack_peer_routes_revision(&self) -> bool {
        self.ack_peer_routes_revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ack_peer_routes_revision(&mut self, v: u32) {
        self.ack_peer_routes_revision = ::std::option::Option::Some(v);
    }

    // optional fixed32 connection_id = 13;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_r2c = 14;

    pub fn seq_num_r2c(&self) -> u32 {
        self.seq_num_r2c.unwrap_or(0)
    }

    pub fn clear_seq_num_r2c(&mut self) {
        self.seq_num_r2c = ::std::option::Option::None;
    }

    pub fn has_seq_num_r2c(&self) -> bool {
        self.seq_num_r2c.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_r2c(&mut self, v: u32) {
        self.seq_num_r2c = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num_p2c = 15;

    pub fn seq_num_p2c(&self) -> u32 {
        self.seq_num_p2c.unwrap_or(0)
    }

    pub fn clear_seq_num_p2c(&mut self) {
        self.seq_num_p2c = ::std::option::Option::None;
    }

    pub fn has_seq_num_p2c(&self) -> bool {
        self.seq_num_p2c.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num_p2c(&mut self, v: u32) {
        self.seq_num_p2c = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionQuality>(
            "r2c",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.r2c },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.r2c },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionQuality>(
            "p2c",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.p2c },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.p2c },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_until_shutdown",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.seconds_until_shutdown },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.seconds_until_shutdown },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "migrate_request_ip",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.migrate_request_ip },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.migrate_request_ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "migrate_request_port",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.migrate_request_port },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.migrate_request_port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "scoring_penalty_relay_cluster",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.scoring_penalty_relay_cluster },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.scoring_penalty_relay_cluster },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_relay",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.ack_relay },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.ack_relay },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_e2e",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.ack_e2e },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.ack_e2e },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "flags",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.flags },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ack_forward_target_revision",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.ack_forward_target_revision },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.ack_forward_target_revision },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramP2PRoutes>(
            "routes",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.routes },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.routes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ack_peer_routes_revision",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.ack_peer_routes_revision },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.ack_peer_routes_revision },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.connection_id },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_r2c",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.seq_num_r2c },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.seq_num_r2c },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num_p2c",
            |m: &CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &m.seq_num_p2c },
            |m: &mut CMsgSteamDatagramConnectionStatsP2PRouterToClient| { &mut m.seq_num_p2c },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramConnectionStatsP2PRouterToClient>(
            "CMsgSteamDatagramConnectionStatsP2PRouterToClient",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramConnectionStatsP2PRouterToClient {
    const NAME: &'static str = "CMsgSteamDatagramConnectionStatsP2PRouterToClient";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.r2c)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.p2c)?;
                },
                24 => {
                    self.seconds_until_shutdown = ::std::option::Option::Some(is.read_uint32()?);
                },
                37 => {
                    self.migrate_request_ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                40 => {
                    self.migrate_request_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.scoring_penalty_relay_cluster = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ack_relay)?;
                },
                61 => {
                    self.ack_relay.push(is.read_fixed32()?);
                },
                66 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ack_e2e)?;
                },
                69 => {
                    self.ack_e2e.push(is.read_fixed32()?);
                },
                72 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.ack_forward_target_revision = ::std::option::Option::Some(is.read_uint32()?);
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.routes)?;
                },
                96 => {
                    self.ack_peer_routes_revision = ::std::option::Option::Some(is.read_uint32()?);
                },
                109 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                112 => {
                    self.seq_num_r2c = ::std::option::Option::Some(is.read_uint32()?);
                },
                120 => {
                    self.seq_num_p2c = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.r2c.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.p2c.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.seconds_until_shutdown {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.migrate_request_ip {
            my_size += 1 + 4;
        }
        if let Some(v) = self.migrate_request_port {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.scoring_penalty_relay_cluster {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        my_size += 5 * self.ack_relay.len() as u64;
        my_size += 5 * self.ack_e2e.len() as u64;
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.ack_forward_target_revision {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.routes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ack_peer_routes_revision {
            my_size += ::protobuf::rt::uint32_size(12, v);
        }
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.seq_num_r2c {
            my_size += ::protobuf::rt::uint32_size(14, v);
        }
        if let Some(v) = self.seq_num_p2c {
            my_size += ::protobuf::rt::uint32_size(15, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.r2c.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.p2c.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.seconds_until_shutdown {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.migrate_request_ip {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.migrate_request_port {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.scoring_penalty_relay_cluster {
            os.write_uint32(6, v)?;
        }
        for v in &self.ack_relay {
            os.write_fixed32(7, *v)?;
        };
        for v in &self.ack_e2e {
            os.write_fixed32(8, *v)?;
        };
        if let Some(v) = self.flags {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.ack_forward_target_revision {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.routes.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.ack_peer_routes_revision {
            os.write_uint32(12, v)?;
        }
        if let Some(v) = self.connection_id {
            os.write_fixed32(13, v)?;
        }
        if let Some(v) = self.seq_num_r2c {
            os.write_uint32(14, v)?;
        }
        if let Some(v) = self.seq_num_p2c {
            os.write_uint32(15, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramConnectionStatsP2PRouterToClient {
        CMsgSteamDatagramConnectionStatsP2PRouterToClient::new()
    }

    fn clear(&mut self) {
        self.r2c.clear();
        self.p2c.clear();
        self.seconds_until_shutdown = ::std::option::Option::None;
        self.migrate_request_ip = ::std::option::Option::None;
        self.migrate_request_port = ::std::option::Option::None;
        self.scoring_penalty_relay_cluster = ::std::option::Option::None;
        self.ack_relay.clear();
        self.ack_e2e.clear();
        self.flags = ::std::option::Option::None;
        self.ack_forward_target_revision = ::std::option::Option::None;
        self.routes.clear();
        self.ack_peer_routes_revision = ::std::option::Option::None;
        self.connection_id = ::std::option::Option::None;
        self.seq_num_r2c = ::std::option::Option::None;
        self.seq_num_p2c = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramConnectionStatsP2PRouterToClient {
        static instance: CMsgSteamDatagramConnectionStatsP2PRouterToClient = CMsgSteamDatagramConnectionStatsP2PRouterToClient {
            r2c: ::protobuf::MessageField::none(),
            p2c: ::protobuf::MessageField::none(),
            seconds_until_shutdown: ::std::option::Option::None,
            migrate_request_ip: ::std::option::Option::None,
            migrate_request_port: ::std::option::Option::None,
            scoring_penalty_relay_cluster: ::std::option::Option::None,
            ack_relay: ::std::vec::Vec::new(),
            ack_e2e: ::std::vec::Vec::new(),
            flags: ::std::option::Option::None,
            ack_forward_target_revision: ::std::option::Option::None,
            routes: ::protobuf::MessageField::none(),
            ack_peer_routes_revision: ::std::option::Option::None,
            connection_id: ::std::option::Option::None,
            seq_num_r2c: ::std::option::Option::None,
            seq_num_p2c: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramConnectionStatsP2PRouterToClient {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramConnectionStatsP2PRouterToClient").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramConnectionStatsP2PRouterToClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramConnectionStatsP2PRouterToClient {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramConnectionStatsP2PRouterToClient`
pub mod cmsg_steam_datagram_connection_stats_p2prouter_to_client {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgSteamDatagramConnectionStatsP2PRouterToClient.Flags)
    pub enum Flags {
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsP2PRouterToClient.Flags.ACK_REQUEST_RELAY)
        ACK_REQUEST_RELAY = 1,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsP2PRouterToClient.Flags.ACK_REQUEST_E2E)
        ACK_REQUEST_E2E = 2,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramConnectionStatsP2PRouterToClient.Flags.ACK_REQUEST_IMMEDIATE)
        ACK_REQUEST_IMMEDIATE = 4,
    }

    impl ::protobuf::Enum for Flags {
        const NAME: &'static str = "Flags";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Flags> {
            match value {
                1 => ::std::option::Option::Some(Flags::ACK_REQUEST_RELAY),
                2 => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                4 => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Flags> {
            match str {
                "ACK_REQUEST_RELAY" => ::std::option::Option::Some(Flags::ACK_REQUEST_RELAY),
                "ACK_REQUEST_E2E" => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                "ACK_REQUEST_IMMEDIATE" => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Flags] = &[
            Flags::ACK_REQUEST_RELAY,
            Flags::ACK_REQUEST_E2E,
            Flags::ACK_REQUEST_IMMEDIATE,
        ];
    }

    impl ::protobuf::EnumFull for Flags {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgSteamDatagramConnectionStatsP2PRouterToClient.Flags").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Flags::ACK_REQUEST_RELAY => 0,
                Flags::ACK_REQUEST_E2E => 1,
                Flags::ACK_REQUEST_IMMEDIATE => 2,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Flags {
        fn default() -> Self {
            Flags::ACK_REQUEST_RELAY
        }
    }

    impl Flags {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Flags>("CMsgSteamDatagramConnectionStatsP2PRouterToClient.Flags")
        }
    }
}

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_ChallengeRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_ChallengeRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeRequest.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeRequest.my_timestamp)
    pub my_timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeRequest.protocol_version)
    pub protocol_version: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_ChallengeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_ChallengeRequest {
    fn default() -> &'a CMsgSteamSockets_UDP_ChallengeRequest {
        <CMsgSteamSockets_UDP_ChallengeRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_ChallengeRequest {
    pub fn new() -> CMsgSteamSockets_UDP_ChallengeRequest {
        ::std::default::Default::default()
    }

    // optional fixed32 connection_id = 1;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 my_timestamp = 3;

    pub fn my_timestamp(&self) -> u64 {
        self.my_timestamp.unwrap_or(0)
    }

    pub fn clear_my_timestamp(&mut self) {
        self.my_timestamp = ::std::option::Option::None;
    }

    pub fn has_my_timestamp(&self) -> bool {
        self.my_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_my_timestamp(&mut self, v: u64) {
        self.my_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 protocol_version = 4;

    pub fn protocol_version(&self) -> u32 {
        self.protocol_version.unwrap_or(0)
    }

    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = ::std::option::Option::None;
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: u32) {
        self.protocol_version = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamSockets_UDP_ChallengeRequest| { &m.connection_id },
            |m: &mut CMsgSteamSockets_UDP_ChallengeRequest| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "my_timestamp",
            |m: &CMsgSteamSockets_UDP_ChallengeRequest| { &m.my_timestamp },
            |m: &mut CMsgSteamSockets_UDP_ChallengeRequest| { &mut m.my_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "protocol_version",
            |m: &CMsgSteamSockets_UDP_ChallengeRequest| { &m.protocol_version },
            |m: &mut CMsgSteamSockets_UDP_ChallengeRequest| { &mut m.protocol_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_ChallengeRequest>(
            "CMsgSteamSockets_UDP_ChallengeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamSockets_UDP_ChallengeRequest {
    const NAME: &'static str = "CMsgSteamSockets_UDP_ChallengeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                25 => {
                    self.my_timestamp = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.protocol_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.my_timestamp {
            my_size += 1 + 8;
        }
        if let Some(v) = self.protocol_version {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.my_timestamp {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.protocol_version {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_ChallengeRequest {
        CMsgSteamSockets_UDP_ChallengeRequest::new()
    }

    fn clear(&mut self) {
        self.connection_id = ::std::option::Option::None;
        self.my_timestamp = ::std::option::Option::None;
        self.protocol_version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_ChallengeRequest {
        static instance: CMsgSteamSockets_UDP_ChallengeRequest = CMsgSteamSockets_UDP_ChallengeRequest {
            connection_id: ::std::option::Option::None,
            my_timestamp: ::std::option::Option::None,
            protocol_version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamSockets_UDP_ChallengeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_ChallengeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_ChallengeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamSockets_UDP_ChallengeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_ChallengeReply)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_ChallengeReply {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeReply.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeReply.challenge)
    pub challenge: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeReply.your_timestamp)
    pub your_timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeReply.protocol_version)
    pub protocol_version: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_ChallengeReply.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_ChallengeReply {
    fn default() -> &'a CMsgSteamSockets_UDP_ChallengeReply {
        <CMsgSteamSockets_UDP_ChallengeReply as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_ChallengeReply {
    pub fn new() -> CMsgSteamSockets_UDP_ChallengeReply {
        ::std::default::Default::default()
    }

    // optional fixed32 connection_id = 1;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 challenge = 2;

    pub fn challenge(&self) -> u64 {
        self.challenge.unwrap_or(0)
    }

    pub fn clear_challenge(&mut self) {
        self.challenge = ::std::option::Option::None;
    }

    pub fn has_challenge(&self) -> bool {
        self.challenge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: u64) {
        self.challenge = ::std::option::Option::Some(v);
    }

    // optional fixed64 your_timestamp = 3;

    pub fn your_timestamp(&self) -> u64 {
        self.your_timestamp.unwrap_or(0)
    }

    pub fn clear_your_timestamp(&mut self) {
        self.your_timestamp = ::std::option::Option::None;
    }

    pub fn has_your_timestamp(&self) -> bool {
        self.your_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_your_timestamp(&mut self, v: u64) {
        self.your_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 protocol_version = 4;

    pub fn protocol_version(&self) -> u32 {
        self.protocol_version.unwrap_or(0)
    }

    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = ::std::option::Option::None;
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: u32) {
        self.protocol_version = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamSockets_UDP_ChallengeReply| { &m.connection_id },
            |m: &mut CMsgSteamSockets_UDP_ChallengeReply| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge",
            |m: &CMsgSteamSockets_UDP_ChallengeReply| { &m.challenge },
            |m: &mut CMsgSteamSockets_UDP_ChallengeReply| { &mut m.challenge },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "your_timestamp",
            |m: &CMsgSteamSockets_UDP_ChallengeReply| { &m.your_timestamp },
            |m: &mut CMsgSteamSockets_UDP_ChallengeReply| { &mut m.your_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "protocol_version",
            |m: &CMsgSteamSockets_UDP_ChallengeReply| { &m.protocol_version },
            |m: &mut CMsgSteamSockets_UDP_ChallengeReply| { &mut m.protocol_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_ChallengeReply>(
            "CMsgSteamSockets_UDP_ChallengeReply",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamSockets_UDP_ChallengeReply {
    const NAME: &'static str = "CMsgSteamSockets_UDP_ChallengeReply";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                17 => {
                    self.challenge = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.your_timestamp = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.protocol_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.challenge {
            my_size += 1 + 8;
        }
        if let Some(v) = self.your_timestamp {
            my_size += 1 + 8;
        }
        if let Some(v) = self.protocol_version {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.challenge {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.your_timestamp {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.protocol_version {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_ChallengeReply {
        CMsgSteamSockets_UDP_ChallengeReply::new()
    }

    fn clear(&mut self) {
        self.connection_id = ::std::option::Option::None;
        self.challenge = ::std::option::Option::None;
        self.your_timestamp = ::std::option::Option::None;
        self.protocol_version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_ChallengeReply {
        static instance: CMsgSteamSockets_UDP_ChallengeReply = CMsgSteamSockets_UDP_ChallengeReply {
            connection_id: ::std::option::Option::None,
            challenge: ::std::option::Option::None,
            your_timestamp: ::std::option::Option::None,
            protocol_version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamSockets_UDP_ChallengeReply {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_ChallengeReply").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_ChallengeReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamSockets_UDP_ChallengeReply {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_ConnectRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_ConnectRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.client_connection_id)
    pub client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.challenge)
    pub challenge: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.client_steam_id)
    pub client_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.my_timestamp)
    pub my_timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.ping_est_ms)
    pub ping_est_ms: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.crypt)
    pub crypt: ::protobuf::MessageField<CMsgSteamDatagramSessionCryptInfoSigned>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.cert)
    pub cert: ::protobuf::MessageField<super::steamdatagram_auth_messages::CMsgSteamDatagramCertificateSigned>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.protocol_version)
    pub protocol_version: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_ConnectRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_ConnectRequest {
    fn default() -> &'a CMsgSteamSockets_UDP_ConnectRequest {
        <CMsgSteamSockets_UDP_ConnectRequest as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_ConnectRequest {
    pub fn new() -> CMsgSteamSockets_UDP_ConnectRequest {
        ::std::default::Default::default()
    }

    // optional fixed32 client_connection_id = 1;

    pub fn client_connection_id(&self) -> u32 {
        self.client_connection_id.unwrap_or(0)
    }

    pub fn clear_client_connection_id(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
    }

    pub fn has_client_connection_id(&self) -> bool {
        self.client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_connection_id(&mut self, v: u32) {
        self.client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 challenge = 2;

    pub fn challenge(&self) -> u64 {
        self.challenge.unwrap_or(0)
    }

    pub fn clear_challenge(&mut self) {
        self.challenge = ::std::option::Option::None;
    }

    pub fn has_challenge(&self) -> bool {
        self.challenge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: u64) {
        self.challenge = ::std::option::Option::Some(v);
    }

    // optional fixed64 client_steam_id = 3;

    pub fn client_steam_id(&self) -> u64 {
        self.client_steam_id.unwrap_or(0)
    }

    pub fn clear_client_steam_id(&mut self) {
        self.client_steam_id = ::std::option::Option::None;
    }

    pub fn has_client_steam_id(&self) -> bool {
        self.client_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_steam_id(&mut self, v: u64) {
        self.client_steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 my_timestamp = 5;

    pub fn my_timestamp(&self) -> u64 {
        self.my_timestamp.unwrap_or(0)
    }

    pub fn clear_my_timestamp(&mut self) {
        self.my_timestamp = ::std::option::Option::None;
    }

    pub fn has_my_timestamp(&self) -> bool {
        self.my_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_my_timestamp(&mut self, v: u64) {
        self.my_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_est_ms = 6;

    pub fn ping_est_ms(&self) -> u32 {
        self.ping_est_ms.unwrap_or(0)
    }

    pub fn clear_ping_est_ms(&mut self) {
        self.ping_est_ms = ::std::option::Option::None;
    }

    pub fn has_ping_est_ms(&self) -> bool {
        self.ping_est_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_est_ms(&mut self, v: u32) {
        self.ping_est_ms = ::std::option::Option::Some(v);
    }

    // optional uint32 protocol_version = 8;

    pub fn protocol_version(&self) -> u32 {
        self.protocol_version.unwrap_or(0)
    }

    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = ::std::option::Option::None;
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: u32) {
        self.protocol_version = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_connection_id",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.client_connection_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.challenge },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.challenge },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_steam_id",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.client_steam_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.client_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "my_timestamp",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.my_timestamp },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.my_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_est_ms",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.ping_est_ms },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.ping_est_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramSessionCryptInfoSigned>(
            "crypt",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.crypt },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.crypt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::steamdatagram_auth_messages::CMsgSteamDatagramCertificateSigned>(
            "cert",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.cert },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.cert },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "protocol_version",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.protocol_version },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.protocol_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_ConnectRequest>(
            "CMsgSteamSockets_UDP_ConnectRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamSockets_UDP_ConnectRequest {
    const NAME: &'static str = "CMsgSteamSockets_UDP_ConnectRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                17 => {
                    self.challenge = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.client_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                41 => {
                    self.my_timestamp = ::std::option::Option::Some(is.read_fixed64()?);
                },
                48 => {
                    self.ping_est_ms = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.crypt)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cert)?;
                },
                64 => {
                    self.protocol_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.challenge {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.my_timestamp {
            my_size += 1 + 8;
        }
        if let Some(v) = self.ping_est_ms {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.crypt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.cert.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.protocol_version {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.client_connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.challenge {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.client_steam_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.my_timestamp {
            os.write_fixed64(5, v)?;
        }
        if let Some(v) = self.ping_est_ms {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.crypt.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.cert.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.protocol_version {
            os.write_uint32(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_ConnectRequest {
        CMsgSteamSockets_UDP_ConnectRequest::new()
    }

    fn clear(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
        self.challenge = ::std::option::Option::None;
        self.client_steam_id = ::std::option::Option::None;
        self.my_timestamp = ::std::option::Option::None;
        self.ping_est_ms = ::std::option::Option::None;
        self.crypt.clear();
        self.cert.clear();
        self.protocol_version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_ConnectRequest {
        static instance: CMsgSteamSockets_UDP_ConnectRequest = CMsgSteamSockets_UDP_ConnectRequest {
            client_connection_id: ::std::option::Option::None,
            challenge: ::std::option::Option::None,
            client_steam_id: ::std::option::Option::None,
            my_timestamp: ::std::option::Option::None,
            ping_est_ms: ::std::option::Option::None,
            crypt: ::protobuf::MessageField::none(),
            cert: ::protobuf::MessageField::none(),
            protocol_version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamSockets_UDP_ConnectRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_ConnectRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_ConnectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamSockets_UDP_ConnectRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_ConnectOK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_ConnectOK {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.client_connection_id)
    pub client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.server_connection_id)
    pub server_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.server_steam_id)
    pub server_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.your_timestamp)
    pub your_timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.delay_time_usec)
    pub delay_time_usec: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.crypt)
    pub crypt: ::protobuf::MessageField<CMsgSteamDatagramSessionCryptInfoSigned>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.cert)
    pub cert: ::protobuf::MessageField<super::steamdatagram_auth_messages::CMsgSteamDatagramCertificateSigned>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.protocol_version)
    pub protocol_version: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_ConnectOK.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_ConnectOK {
    fn default() -> &'a CMsgSteamSockets_UDP_ConnectOK {
        <CMsgSteamSockets_UDP_ConnectOK as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_ConnectOK {
    pub fn new() -> CMsgSteamSockets_UDP_ConnectOK {
        ::std::default::Default::default()
    }

    // optional fixed32 client_connection_id = 1;

    pub fn client_connection_id(&self) -> u32 {
        self.client_connection_id.unwrap_or(0)
    }

    pub fn clear_client_connection_id(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
    }

    pub fn has_client_connection_id(&self) -> bool {
        self.client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_connection_id(&mut self, v: u32) {
        self.client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 server_connection_id = 5;

    pub fn server_connection_id(&self) -> u32 {
        self.server_connection_id.unwrap_or(0)
    }

    pub fn clear_server_connection_id(&mut self) {
        self.server_connection_id = ::std::option::Option::None;
    }

    pub fn has_server_connection_id(&self) -> bool {
        self.server_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_connection_id(&mut self, v: u32) {
        self.server_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 server_steam_id = 2;

    pub fn server_steam_id(&self) -> u64 {
        self.server_steam_id.unwrap_or(0)
    }

    pub fn clear_server_steam_id(&mut self) {
        self.server_steam_id = ::std::option::Option::None;
    }

    pub fn has_server_steam_id(&self) -> bool {
        self.server_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_steam_id(&mut self, v: u64) {
        self.server_steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 your_timestamp = 3;

    pub fn your_timestamp(&self) -> u64 {
        self.your_timestamp.unwrap_or(0)
    }

    pub fn clear_your_timestamp(&mut self) {
        self.your_timestamp = ::std::option::Option::None;
    }

    pub fn has_your_timestamp(&self) -> bool {
        self.your_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_your_timestamp(&mut self, v: u64) {
        self.your_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 delay_time_usec = 4;

    pub fn delay_time_usec(&self) -> u32 {
        self.delay_time_usec.unwrap_or(0)
    }

    pub fn clear_delay_time_usec(&mut self) {
        self.delay_time_usec = ::std::option::Option::None;
    }

    pub fn has_delay_time_usec(&self) -> bool {
        self.delay_time_usec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay_time_usec(&mut self, v: u32) {
        self.delay_time_usec = ::std::option::Option::Some(v);
    }

    // optional uint32 protocol_version = 9;

    pub fn protocol_version(&self) -> u32 {
        self.protocol_version.unwrap_or(0)
    }

    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = ::std::option::Option::None;
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: u32) {
        self.protocol_version = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_connection_id",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.client_connection_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_connection_id",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.server_connection_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.server_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_steam_id",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.server_steam_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.server_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "your_timestamp",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.your_timestamp },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.your_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "delay_time_usec",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.delay_time_usec },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.delay_time_usec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramSessionCryptInfoSigned>(
            "crypt",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.crypt },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.crypt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::steamdatagram_auth_messages::CMsgSteamDatagramCertificateSigned>(
            "cert",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.cert },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.cert },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "protocol_version",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.protocol_version },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.protocol_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_ConnectOK>(
            "CMsgSteamSockets_UDP_ConnectOK",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamSockets_UDP_ConnectOK {
    const NAME: &'static str = "CMsgSteamSockets_UDP_ConnectOK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                45 => {
                    self.server_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                17 => {
                    self.server_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.your_timestamp = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.delay_time_usec = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.crypt)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cert)?;
                },
                72 => {
                    self.protocol_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.server_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.server_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.your_timestamp {
            my_size += 1 + 8;
        }
        if let Some(v) = self.delay_time_usec {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.crypt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.cert.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.protocol_version {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.client_connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.server_connection_id {
            os.write_fixed32(5, v)?;
        }
        if let Some(v) = self.server_steam_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.your_timestamp {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.delay_time_usec {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.crypt.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.cert.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.protocol_version {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_ConnectOK {
        CMsgSteamSockets_UDP_ConnectOK::new()
    }

    fn clear(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
        self.server_connection_id = ::std::option::Option::None;
        self.server_steam_id = ::std::option::Option::None;
        self.your_timestamp = ::std::option::Option::None;
        self.delay_time_usec = ::std::option::Option::None;
        self.crypt.clear();
        self.cert.clear();
        self.protocol_version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_ConnectOK {
        static instance: CMsgSteamSockets_UDP_ConnectOK = CMsgSteamSockets_UDP_ConnectOK {
            client_connection_id: ::std::option::Option::None,
            server_connection_id: ::std::option::Option::None,
            server_steam_id: ::std::option::Option::None,
            your_timestamp: ::std::option::Option::None,
            delay_time_usec: ::std::option::Option::None,
            crypt: ::protobuf::MessageField::none(),
            cert: ::protobuf::MessageField::none(),
            protocol_version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamSockets_UDP_ConnectOK {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_ConnectOK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_ConnectOK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamSockets_UDP_ConnectOK {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_ConnectionClosed)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_ConnectionClosed {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectionClosed.legacy_client_connection_id)
    pub legacy_client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectionClosed.to_connection_id)
    pub to_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectionClosed.from_connection_id)
    pub from_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectionClosed.debug)
    pub debug: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectionClosed.reason_code)
    pub reason_code: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_ConnectionClosed.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_ConnectionClosed {
    fn default() -> &'a CMsgSteamSockets_UDP_ConnectionClosed {
        <CMsgSteamSockets_UDP_ConnectionClosed as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_ConnectionClosed {
    pub fn new() -> CMsgSteamSockets_UDP_ConnectionClosed {
        ::std::default::Default::default()
    }

    // optional fixed32 legacy_client_connection_id = 1;

    pub fn legacy_client_connection_id(&self) -> u32 {
        self.legacy_client_connection_id.unwrap_or(0)
    }

    pub fn clear_legacy_client_connection_id(&mut self) {
        self.legacy_client_connection_id = ::std::option::Option::None;
    }

    pub fn has_legacy_client_connection_id(&self) -> bool {
        self.legacy_client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_client_connection_id(&mut self, v: u32) {
        self.legacy_client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 to_connection_id = 4;

    pub fn to_connection_id(&self) -> u32 {
        self.to_connection_id.unwrap_or(0)
    }

    pub fn clear_to_connection_id(&mut self) {
        self.to_connection_id = ::std::option::Option::None;
    }

    pub fn has_to_connection_id(&self) -> bool {
        self.to_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_connection_id(&mut self, v: u32) {
        self.to_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 from_connection_id = 5;

    pub fn from_connection_id(&self) -> u32 {
        self.from_connection_id.unwrap_or(0)
    }

    pub fn clear_from_connection_id(&mut self) {
        self.from_connection_id = ::std::option::Option::None;
    }

    pub fn has_from_connection_id(&self) -> bool {
        self.from_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_connection_id(&mut self, v: u32) {
        self.from_connection_id = ::std::option::Option::Some(v);
    }

    // optional string debug = 2;

    pub fn debug(&self) -> &str {
        match self.debug.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_debug(&mut self) {
        self.debug = ::std::option::Option::None;
    }

    pub fn has_debug(&self) -> bool {
        self.debug.is_some()
    }

    // Param is passed by value, moved
    pub fn set_debug(&mut self, v: ::std::string::String) {
        self.debug = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_debug(&mut self) -> &mut ::std::string::String {
        if self.debug.is_none() {
            self.debug = ::std::option::Option::Some(::std::string::String::new());
        }
        self.debug.as_mut().unwrap()
    }

    // Take field
    pub fn take_debug(&mut self) -> ::std::string::String {
        self.debug.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 reason_code = 3;

    pub fn reason_code(&self) -> u32 {
        self.reason_code.unwrap_or(0)
    }

    pub fn clear_reason_code(&mut self) {
        self.reason_code = ::std::option::Option::None;
    }

    pub fn has_reason_code(&self) -> bool {
        self.reason_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason_code(&mut self, v: u32) {
        self.reason_code = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_client_connection_id",
            |m: &CMsgSteamSockets_UDP_ConnectionClosed| { &m.legacy_client_connection_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectionClosed| { &mut m.legacy_client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "to_connection_id",
            |m: &CMsgSteamSockets_UDP_ConnectionClosed| { &m.to_connection_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectionClosed| { &mut m.to_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_connection_id",
            |m: &CMsgSteamSockets_UDP_ConnectionClosed| { &m.from_connection_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectionClosed| { &mut m.from_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "debug",
            |m: &CMsgSteamSockets_UDP_ConnectionClosed| { &m.debug },
            |m: &mut CMsgSteamSockets_UDP_ConnectionClosed| { &mut m.debug },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason_code",
            |m: &CMsgSteamSockets_UDP_ConnectionClosed| { &m.reason_code },
            |m: &mut CMsgSteamSockets_UDP_ConnectionClosed| { &mut m.reason_code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_ConnectionClosed>(
            "CMsgSteamSockets_UDP_ConnectionClosed",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamSockets_UDP_ConnectionClosed {
    const NAME: &'static str = "CMsgSteamSockets_UDP_ConnectionClosed";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.legacy_client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                37 => {
                    self.to_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                45 => {
                    self.from_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                18 => {
                    self.debug = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.reason_code = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.legacy_client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.to_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.from_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.debug.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.reason_code {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.legacy_client_connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.to_connection_id {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.from_connection_id {
            os.write_fixed32(5, v)?;
        }
        if let Some(v) = self.debug.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.reason_code {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_ConnectionClosed {
        CMsgSteamSockets_UDP_ConnectionClosed::new()
    }

    fn clear(&mut self) {
        self.legacy_client_connection_id = ::std::option::Option::None;
        self.to_connection_id = ::std::option::Option::None;
        self.from_connection_id = ::std::option::Option::None;
        self.debug = ::std::option::Option::None;
        self.reason_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_ConnectionClosed {
        static instance: CMsgSteamSockets_UDP_ConnectionClosed = CMsgSteamSockets_UDP_ConnectionClosed {
            legacy_client_connection_id: ::std::option::Option::None,
            to_connection_id: ::std::option::Option::None,
            from_connection_id: ::std::option::Option::None,
            debug: ::std::option::Option::None,
            reason_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamSockets_UDP_ConnectionClosed {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_ConnectionClosed").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_ConnectionClosed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamSockets_UDP_ConnectionClosed {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_NoConnection)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_NoConnection {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_NoConnection.legacy_client_connection_id)
    pub legacy_client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_NoConnection.from_connection_id)
    pub from_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_NoConnection.to_connection_id)
    pub to_connection_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_NoConnection.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_NoConnection {
    fn default() -> &'a CMsgSteamSockets_UDP_NoConnection {
        <CMsgSteamSockets_UDP_NoConnection as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_NoConnection {
    pub fn new() -> CMsgSteamSockets_UDP_NoConnection {
        ::std::default::Default::default()
    }

    // optional fixed32 legacy_client_connection_id = 1;

    pub fn legacy_client_connection_id(&self) -> u32 {
        self.legacy_client_connection_id.unwrap_or(0)
    }

    pub fn clear_legacy_client_connection_id(&mut self) {
        self.legacy_client_connection_id = ::std::option::Option::None;
    }

    pub fn has_legacy_client_connection_id(&self) -> bool {
        self.legacy_client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_client_connection_id(&mut self, v: u32) {
        self.legacy_client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 from_connection_id = 2;

    pub fn from_connection_id(&self) -> u32 {
        self.from_connection_id.unwrap_or(0)
    }

    pub fn clear_from_connection_id(&mut self) {
        self.from_connection_id = ::std::option::Option::None;
    }

    pub fn has_from_connection_id(&self) -> bool {
        self.from_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_connection_id(&mut self, v: u32) {
        self.from_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 to_connection_id = 3;

    pub fn to_connection_id(&self) -> u32 {
        self.to_connection_id.unwrap_or(0)
    }

    pub fn clear_to_connection_id(&mut self) {
        self.to_connection_id = ::std::option::Option::None;
    }

    pub fn has_to_connection_id(&self) -> bool {
        self.to_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_connection_id(&mut self, v: u32) {
        self.to_connection_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_client_connection_id",
            |m: &CMsgSteamSockets_UDP_NoConnection| { &m.legacy_client_connection_id },
            |m: &mut CMsgSteamSockets_UDP_NoConnection| { &mut m.legacy_client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_connection_id",
            |m: &CMsgSteamSockets_UDP_NoConnection| { &m.from_connection_id },
            |m: &mut CMsgSteamSockets_UDP_NoConnection| { &mut m.from_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "to_connection_id",
            |m: &CMsgSteamSockets_UDP_NoConnection| { &m.to_connection_id },
            |m: &mut CMsgSteamSockets_UDP_NoConnection| { &mut m.to_connection_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_NoConnection>(
            "CMsgSteamSockets_UDP_NoConnection",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamSockets_UDP_NoConnection {
    const NAME: &'static str = "CMsgSteamSockets_UDP_NoConnection";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.legacy_client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                21 => {
                    self.from_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                29 => {
                    self.to_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.legacy_client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.from_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.to_connection_id {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.legacy_client_connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.from_connection_id {
            os.write_fixed32(2, v)?;
        }
        if let Some(v) = self.to_connection_id {
            os.write_fixed32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_NoConnection {
        CMsgSteamSockets_UDP_NoConnection::new()
    }

    fn clear(&mut self) {
        self.legacy_client_connection_id = ::std::option::Option::None;
        self.from_connection_id = ::std::option::Option::None;
        self.to_connection_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_NoConnection {
        static instance: CMsgSteamSockets_UDP_NoConnection = CMsgSteamSockets_UDP_NoConnection {
            legacy_client_connection_id: ::std::option::Option::None,
            from_connection_id: ::std::option::Option::None,
            to_connection_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamSockets_UDP_NoConnection {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_NoConnection").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_NoConnection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamSockets_UDP_NoConnection {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_Stats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_Stats {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_Stats.stats)
    pub stats: ::protobuf::MessageField<CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_Stats.ack_e2e)
    pub ack_e2e: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_Stats.flags)
    pub flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_Stats.legacy_client_connection_id)
    pub legacy_client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_Stats.to_connection_id)
    pub to_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_Stats.from_connection_id)
    pub from_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_Stats.seq_num)
    pub seq_num: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_Stats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_Stats {
    fn default() -> &'a CMsgSteamSockets_UDP_Stats {
        <CMsgSteamSockets_UDP_Stats as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_Stats {
    pub fn new() -> CMsgSteamSockets_UDP_Stats {
        ::std::default::Default::default()
    }

    // optional uint32 flags = 3;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional fixed32 legacy_client_connection_id = 8;

    pub fn legacy_client_connection_id(&self) -> u32 {
        self.legacy_client_connection_id.unwrap_or(0)
    }

    pub fn clear_legacy_client_connection_id(&mut self) {
        self.legacy_client_connection_id = ::std::option::Option::None;
    }

    pub fn has_legacy_client_connection_id(&self) -> bool {
        self.legacy_client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_client_connection_id(&mut self, v: u32) {
        self.legacy_client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 to_connection_id = 9;

    pub fn to_connection_id(&self) -> u32 {
        self.to_connection_id.unwrap_or(0)
    }

    pub fn clear_to_connection_id(&mut self) {
        self.to_connection_id = ::std::option::Option::None;
    }

    pub fn has_to_connection_id(&self) -> bool {
        self.to_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_connection_id(&mut self, v: u32) {
        self.to_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 from_connection_id = 10;

    pub fn from_connection_id(&self) -> u32 {
        self.from_connection_id.unwrap_or(0)
    }

    pub fn clear_from_connection_id(&mut self) {
        self.from_connection_id = ::std::option::Option::None;
    }

    pub fn has_from_connection_id(&self) -> bool {
        self.from_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_connection_id(&mut self, v: u32) {
        self.from_connection_id = ::std::option::Option::Some(v);
    }

    // optional uint32 seq_num = 4;

    pub fn seq_num(&self) -> u32 {
        self.seq_num.unwrap_or(0)
    }

    pub fn clear_seq_num(&mut self) {
        self.seq_num = ::std::option::Option::None;
    }

    pub fn has_seq_num(&self) -> bool {
        self.seq_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_num(&mut self, v: u32) {
        self.seq_num = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CMsgSteamDatagramConnectionQuality>(
            "stats",
            |m: &CMsgSteamSockets_UDP_Stats| { &m.stats },
            |m: &mut CMsgSteamSockets_UDP_Stats| { &mut m.stats },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_e2e",
            |m: &CMsgSteamSockets_UDP_Stats| { &m.ack_e2e },
            |m: &mut CMsgSteamSockets_UDP_Stats| { &mut m.ack_e2e },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "flags",
            |m: &CMsgSteamSockets_UDP_Stats| { &m.flags },
            |m: &mut CMsgSteamSockets_UDP_Stats| { &mut m.flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_client_connection_id",
            |m: &CMsgSteamSockets_UDP_Stats| { &m.legacy_client_connection_id },
            |m: &mut CMsgSteamSockets_UDP_Stats| { &mut m.legacy_client_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "to_connection_id",
            |m: &CMsgSteamSockets_UDP_Stats| { &m.to_connection_id },
            |m: &mut CMsgSteamSockets_UDP_Stats| { &mut m.to_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_connection_id",
            |m: &CMsgSteamSockets_UDP_Stats| { &m.from_connection_id },
            |m: &mut CMsgSteamSockets_UDP_Stats| { &mut m.from_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seq_num",
            |m: &CMsgSteamSockets_UDP_Stats| { &m.seq_num },
            |m: &mut CMsgSteamSockets_UDP_Stats| { &mut m.seq_num },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_Stats>(
            "CMsgSteamSockets_UDP_Stats",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamSockets_UDP_Stats {
    const NAME: &'static str = "CMsgSteamSockets_UDP_Stats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.stats)?;
                },
                18 => {
                    is.read_repeated_packed_fixed32_into(&mut self.ack_e2e)?;
                },
                21 => {
                    self.ack_e2e.push(is.read_fixed32()?);
                },
                24 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                69 => {
                    self.legacy_client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                77 => {
                    self.to_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                85 => {
                    self.from_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                32 => {
                    self.seq_num = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += 5 * self.ack_e2e.len() as u64;
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.legacy_client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.to_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.from_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.seq_num {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.stats.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.ack_e2e {
            os.write_fixed32(2, *v)?;
        };
        if let Some(v) = self.flags {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.legacy_client_connection_id {
            os.write_fixed32(8, v)?;
        }
        if let Some(v) = self.to_connection_id {
            os.write_fixed32(9, v)?;
        }
        if let Some(v) = self.from_connection_id {
            os.write_fixed32(10, v)?;
        }
        if let Some(v) = self.seq_num {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_Stats {
        CMsgSteamSockets_UDP_Stats::new()
    }

    fn clear(&mut self) {
        self.stats.clear();
        self.ack_e2e.clear();
        self.flags = ::std::option::Option::None;
        self.legacy_client_connection_id = ::std::option::Option::None;
        self.to_connection_id = ::std::option::Option::None;
        self.from_connection_id = ::std::option::Option::None;
        self.seq_num = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_Stats {
        static instance: CMsgSteamSockets_UDP_Stats = CMsgSteamSockets_UDP_Stats {
            stats: ::protobuf::MessageField::none(),
            ack_e2e: ::std::vec::Vec::new(),
            flags: ::std::option::Option::None,
            legacy_client_connection_id: ::std::option::Option::None,
            to_connection_id: ::std::option::Option::None,
            from_connection_id: ::std::option::Option::None,
            seq_num: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamSockets_UDP_Stats {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_Stats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_Stats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamSockets_UDP_Stats {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamSockets_UDP_Stats`
pub mod cmsg_steam_sockets_udp_stats {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgSteamSockets_UDP_Stats.Flags)
    pub enum Flags {
        // @@protoc_insertion_point(enum_value:CMsgSteamSockets_UDP_Stats.Flags.ACK_REQUEST_E2E)
        ACK_REQUEST_E2E = 2,
        // @@protoc_insertion_point(enum_value:CMsgSteamSockets_UDP_Stats.Flags.ACK_REQUEST_IMMEDIATE)
        ACK_REQUEST_IMMEDIATE = 4,
    }

    impl ::protobuf::Enum for Flags {
        const NAME: &'static str = "Flags";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Flags> {
            match value {
                2 => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                4 => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Flags> {
            match str {
                "ACK_REQUEST_E2E" => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                "ACK_REQUEST_IMMEDIATE" => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Flags] = &[
            Flags::ACK_REQUEST_E2E,
            Flags::ACK_REQUEST_IMMEDIATE,
        ];
    }

    impl ::protobuf::EnumFull for Flags {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgSteamSockets_UDP_Stats.Flags").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Flags::ACK_REQUEST_E2E => 0,
                Flags::ACK_REQUEST_IMMEDIATE => 1,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Flags {
        fn default() -> Self {
            Flags::ACK_REQUEST_E2E
        }
    }

    impl Flags {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Flags>("CMsgSteamSockets_UDP_Stats.Flags")
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ESteamDatagramMsgID)
pub enum ESteamDatagramMsgID {
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_Invalid)
    k_ESteamDatagramMsg_Invalid = 0,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_RouterPingRequest)
    k_ESteamDatagramMsg_RouterPingRequest = 1,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_RouterPingReply)
    k_ESteamDatagramMsg_RouterPingReply = 2,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_GameserverPingRequest)
    k_ESteamDatagramMsg_GameserverPingRequest = 3,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_GameserverPingReply)
    k_ESteamDatagramMsg_GameserverPingReply = 4,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_GameserverSessionRequest)
    k_ESteamDatagramMsg_GameserverSessionRequest = 5,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_GameserverSessionEstablished)
    k_ESteamDatagramMsg_GameserverSessionEstablished = 6,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_NoSession)
    k_ESteamDatagramMsg_NoSession = 7,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_Diagnostic)
    k_ESteamDatagramMsg_Diagnostic = 8,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_DataClientToRouter)
    k_ESteamDatagramMsg_DataClientToRouter = 9,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_DataRouterToServer)
    k_ESteamDatagramMsg_DataRouterToServer = 10,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_DataServerToRouter)
    k_ESteamDatagramMsg_DataServerToRouter = 11,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_DataRouterToClient)
    k_ESteamDatagramMsg_DataRouterToClient = 12,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_Stats)
    k_ESteamDatagramMsg_Stats = 13,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_ClientPingSampleRequest)
    k_ESteamDatagramMsg_ClientPingSampleRequest = 14,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_ClientPingSampleReply)
    k_ESteamDatagramMsg_ClientPingSampleReply = 15,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary)
    k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary = 16,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_RelayHealth)
    k_ESteamDatagramMsg_RelayHealth = 17,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_ConnectRequest)
    k_ESteamDatagramMsg_ConnectRequest = 18,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_ConnectOK)
    k_ESteamDatagramMsg_ConnectOK = 19,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_ConnectionClosed)
    k_ESteamDatagramMsg_ConnectionClosed = 20,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_NoConnection)
    k_ESteamDatagramMsg_NoConnection = 21,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_RelayToRelayPingRequest)
    k_ESteamDatagramMsg_RelayToRelayPingRequest = 22,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_RelayToRelayPingReply)
    k_ESteamDatagramMsg_RelayToRelayPingReply = 23,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_P2PSessionRequest)
    k_ESteamDatagramMsg_P2PSessionRequest = 24,
    // @@protoc_insertion_point(enum_value:ESteamDatagramMsgID.k_ESteamDatagramMsg_P2PSessionEstablished)
    k_ESteamDatagramMsg_P2PSessionEstablished = 25,
}

impl ::protobuf::Enum for ESteamDatagramMsgID {
    const NAME: &'static str = "ESteamDatagramMsgID";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ESteamDatagramMsgID> {
        match value {
            0 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_Invalid),
            1 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_RouterPingRequest),
            2 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_RouterPingReply),
            3 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_GameserverPingRequest),
            4 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_GameserverPingReply),
            5 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_GameserverSessionRequest),
            6 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_GameserverSessionEstablished),
            7 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_NoSession),
            8 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_Diagnostic),
            9 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_DataClientToRouter),
            10 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_DataRouterToServer),
            11 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_DataServerToRouter),
            12 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_DataRouterToClient),
            13 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_Stats),
            14 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_ClientPingSampleRequest),
            15 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_ClientPingSampleReply),
            16 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary),
            17 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_RelayHealth),
            18 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_ConnectRequest),
            19 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_ConnectOK),
            20 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_ConnectionClosed),
            21 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_NoConnection),
            22 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_RelayToRelayPingRequest),
            23 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_RelayToRelayPingReply),
            24 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_P2PSessionRequest),
            25 => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_P2PSessionEstablished),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ESteamDatagramMsgID> {
        match str {
            "k_ESteamDatagramMsg_Invalid" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_Invalid),
            "k_ESteamDatagramMsg_RouterPingRequest" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_RouterPingRequest),
            "k_ESteamDatagramMsg_RouterPingReply" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_RouterPingReply),
            "k_ESteamDatagramMsg_GameserverPingRequest" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_GameserverPingRequest),
            "k_ESteamDatagramMsg_GameserverPingReply" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_GameserverPingReply),
            "k_ESteamDatagramMsg_GameserverSessionRequest" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_GameserverSessionRequest),
            "k_ESteamDatagramMsg_GameserverSessionEstablished" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_GameserverSessionEstablished),
            "k_ESteamDatagramMsg_NoSession" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_NoSession),
            "k_ESteamDatagramMsg_Diagnostic" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_Diagnostic),
            "k_ESteamDatagramMsg_DataClientToRouter" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_DataClientToRouter),
            "k_ESteamDatagramMsg_DataRouterToServer" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_DataRouterToServer),
            "k_ESteamDatagramMsg_DataServerToRouter" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_DataServerToRouter),
            "k_ESteamDatagramMsg_DataRouterToClient" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_DataRouterToClient),
            "k_ESteamDatagramMsg_Stats" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_Stats),
            "k_ESteamDatagramMsg_ClientPingSampleRequest" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_ClientPingSampleRequest),
            "k_ESteamDatagramMsg_ClientPingSampleReply" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_ClientPingSampleReply),
            "k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary),
            "k_ESteamDatagramMsg_RelayHealth" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_RelayHealth),
            "k_ESteamDatagramMsg_ConnectRequest" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_ConnectRequest),
            "k_ESteamDatagramMsg_ConnectOK" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_ConnectOK),
            "k_ESteamDatagramMsg_ConnectionClosed" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_ConnectionClosed),
            "k_ESteamDatagramMsg_NoConnection" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_NoConnection),
            "k_ESteamDatagramMsg_RelayToRelayPingRequest" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_RelayToRelayPingRequest),
            "k_ESteamDatagramMsg_RelayToRelayPingReply" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_RelayToRelayPingReply),
            "k_ESteamDatagramMsg_P2PSessionRequest" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_P2PSessionRequest),
            "k_ESteamDatagramMsg_P2PSessionEstablished" => ::std::option::Option::Some(ESteamDatagramMsgID::k_ESteamDatagramMsg_P2PSessionEstablished),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ESteamDatagramMsgID] = &[
        ESteamDatagramMsgID::k_ESteamDatagramMsg_Invalid,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_RouterPingRequest,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_RouterPingReply,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_GameserverPingRequest,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_GameserverPingReply,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_GameserverSessionRequest,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_GameserverSessionEstablished,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_NoSession,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_Diagnostic,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_DataClientToRouter,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_DataRouterToServer,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_DataServerToRouter,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_DataRouterToClient,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_Stats,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_ClientPingSampleRequest,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_ClientPingSampleReply,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_RelayHealth,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_ConnectRequest,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_ConnectOK,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_ConnectionClosed,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_NoConnection,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_RelayToRelayPingRequest,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_RelayToRelayPingReply,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_P2PSessionRequest,
        ESteamDatagramMsgID::k_ESteamDatagramMsg_P2PSessionEstablished,
    ];
}

impl ::protobuf::EnumFull for ESteamDatagramMsgID {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ESteamDatagramMsgID").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ESteamDatagramMsgID {
    fn default() -> Self {
        ESteamDatagramMsgID::k_ESteamDatagramMsg_Invalid
    }
}

impl ESteamDatagramMsgID {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ESteamDatagramMsgID>("ESteamDatagramMsgID")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ESteamNetworkingUDPMsgID)
pub enum ESteamNetworkingUDPMsgID {
    // @@protoc_insertion_point(enum_value:ESteamNetworkingUDPMsgID.k_ESteamNetworkingUDPMsg_ChallengeRequest)
    k_ESteamNetworkingUDPMsg_ChallengeRequest = 32,
    // @@protoc_insertion_point(enum_value:ESteamNetworkingUDPMsgID.k_ESteamNetworkingUDPMsg_ChallengeReply)
    k_ESteamNetworkingUDPMsg_ChallengeReply = 33,
    // @@protoc_insertion_point(enum_value:ESteamNetworkingUDPMsgID.k_ESteamNetworkingUDPMsg_ConnectRequest)
    k_ESteamNetworkingUDPMsg_ConnectRequest = 34,
    // @@protoc_insertion_point(enum_value:ESteamNetworkingUDPMsgID.k_ESteamNetworkingUDPMsg_ConnectOK)
    k_ESteamNetworkingUDPMsg_ConnectOK = 35,
    // @@protoc_insertion_point(enum_value:ESteamNetworkingUDPMsgID.k_ESteamNetworkingUDPMsg_ConnectionClosed)
    k_ESteamNetworkingUDPMsg_ConnectionClosed = 36,
    // @@protoc_insertion_point(enum_value:ESteamNetworkingUDPMsgID.k_ESteamNetworkingUDPMsg_NoConnection)
    k_ESteamNetworkingUDPMsg_NoConnection = 37,
    // @@protoc_insertion_point(enum_value:ESteamNetworkingUDPMsgID.k_ESteamNetworkingUDPMsg_Stats)
    k_ESteamNetworkingUDPMsg_Stats = 38,
}

impl ::protobuf::Enum for ESteamNetworkingUDPMsgID {
    const NAME: &'static str = "ESteamNetworkingUDPMsgID";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ESteamNetworkingUDPMsgID> {
        match value {
            32 => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeRequest),
            33 => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeReply),
            34 => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectRequest),
            35 => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectOK),
            36 => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectionClosed),
            37 => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_NoConnection),
            38 => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_Stats),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ESteamNetworkingUDPMsgID> {
        match str {
            "k_ESteamNetworkingUDPMsg_ChallengeRequest" => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeRequest),
            "k_ESteamNetworkingUDPMsg_ChallengeReply" => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeReply),
            "k_ESteamNetworkingUDPMsg_ConnectRequest" => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectRequest),
            "k_ESteamNetworkingUDPMsg_ConnectOK" => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectOK),
            "k_ESteamNetworkingUDPMsg_ConnectionClosed" => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectionClosed),
            "k_ESteamNetworkingUDPMsg_NoConnection" => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_NoConnection),
            "k_ESteamNetworkingUDPMsg_Stats" => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_Stats),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ESteamNetworkingUDPMsgID] = &[
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeRequest,
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeReply,
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectRequest,
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectOK,
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectionClosed,
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_NoConnection,
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_Stats,
    ];
}

impl ::protobuf::EnumFull for ESteamNetworkingUDPMsgID {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ESteamNetworkingUDPMsgID").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeRequest => 0,
            ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeReply => 1,
            ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectRequest => 2,
            ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectOK => 3,
            ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectionClosed => 4,
            ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_NoConnection => 5,
            ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_Stats => 6,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ESteamNetworkingUDPMsgID {
    fn default() -> Self {
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeRequest
    }
}

impl ESteamNetworkingUDPMsgID {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ESteamNetworkingUDPMsgID>("ESteamNetworkingUDPMsgID")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20tf2/steamdatagram_messages.proto\x1a!steamdatagram_auth_messages.p\
    roto\"\xfb\x04\n\x20CMsgSteamDatagramRouterPingReply\x12)\n\x10client_ti\
    mestamp\x18\x01\x20\x01(\x07R\x0fclientTimestamp\x128\n\x16latency_datac\
    enter_ids\x18\x02\x20\x03(\x07R\x14latencyDatacenterIdsB\x02\x10\x01\x12\
    *\n\x0flatency_ping_ms\x18\x03\x20\x03(\rR\rlatencyPingMsB\x02\x10\x01\
    \x12$\n\x0eyour_public_ip\x18\x04\x20\x01(\x07R\x0cyourPublicIp\x12\x1f\
    \n\x0bserver_time\x18\x05\x20\x01(\x07R\nserverTime\x12\x1c\n\tchallenge\
    \x18\x06\x20\x01(\x06R\tchallenge\x124\n\x16seconds_until_shutdown\x18\
    \x07\x20\x01(\rR\x14secondsUntilShutdown\x12#\n\rclient_cookie\x18\x08\
    \x20\x01(\x07R\x0cclientCookie\x12A\n\x1dscoring_penalty_relay_cluster\
    \x18\t\x20\x01(\rR\x1ascoringPenaltyRelayCluster\x12[\n\x10route_excepti\
    ons\x18\n\x20\x03(\x0b20.CMsgSteamDatagramRouterPingReply.RouteException\
    R\x0frouteExceptions\x1af\n\x0eRouteException\x12$\n\x0edata_center_id\
    \x18\x01\x20\x01(\x07R\x0cdataCenterId\x12\x14\n\x05flags\x18\x02\x20\
    \x01(\rR\x05flags\x12\x18\n\x07penalty\x18\x03\x20\x01(\rR\x07penalty\"\
    \xb0\x03\n\x1fCMsgSteamDatagramGameserverPing\x122\n\x15legacy_client_se\
    ssion\x18\x01\x20\x01(\rR\x13legacyClientSession\x12&\n\x0fclient_steam_\
    id\x18\x02\x20\x01(\x06R\rclientSteamId\x12)\n\x10client_timestamp\x18\
    \x03\x20\x01(\x07R\x0fclientTimestamp\x12)\n\x10router_timestamp\x18\x04\
    \x20\x01(\x07R\x0frouterTimestamp\x12:\n\x19router_gameserver_latency\
    \x18\x05\x20\x01(\rR\x17routerGameserverLatency\x12*\n\x11seq_number_rou\
    ter\x18\x06\x20\x01(\rR\x0fseqNumberRouter\x12$\n\x0eseq_number_e2e\x18\
    \x07\x20\x01(\rR\x0cseqNumberE2e\x12(\n\x10relay_session_id\x18\x08\x20\
    \x01(\rR\x0erelaySessionId\x12#\n\rconnection_id\x18\t\x20\x01(\x07R\x0c\
    connectionId\"\xcb\x01\n!CMsgSteamDatagramRelayToRelayPing\x12+\n\x11req\
    uest_timestamp\x18\x01\x20\x01(\x07R\x10requestTimestamp\x12!\n\x0creque\
    st_date\x18\x02\x20\x01(\x07R\x0brequestDate\x12\x1a\n\tmy_pop_id\x18\
    \x03\x20\x01(\x07R\x07myPopId\x12\x1e\n\x0byour_pop_id\x18\x04\x20\x01(\
    \x07R\tyourPopId\x12\x1a\n\x08checksum\x18\x05\x20\x01(\x07R\x08checksum\
    \"\xe5\x01\n!CMsgSteamDatagramSessionCryptInfo\x12O\n\x08key_type\x18\
    \x01\x20\x01(\x0e2+.CMsgSteamDatagramSessionCryptInfo.EKeyType:\x07INVAL\
    IDR\x07keyType\x12\x19\n\x08key_data\x18\x02\x20\x01(\x0cR\x07keyData\
    \x12\x14\n\x05nonce\x18\x03\x20\x01(\x06R\x05nonce\x12\x15\n\x06is_snp\
    \x18\x04\x20\x01(\x08R\x05isSnp\"'\n\x08EKeyType\x12\x0b\n\x07INVALID\
    \x10\0\x12\x0e\n\nCURVE25519\x10\x01\"[\n'CMsgSteamDatagramSessionCryptI\
    nfoSigned\x12\x12\n\x04info\x18\x01\x20\x01(\x0cR\x04info\x12\x1c\n\tsig\
    nature\x18\x02\x20\x01(\x0cR\tsignature\"\xcd\x02\n)CMsgSteamDatagramGam\
    eserverSessionRequest\x12\x16\n\x06ticket\x18\x01\x20\x01(\x0cR\x06ticke\
    t\x12%\n\x0echallenge_time\x18\x03\x20\x01(\x07R\rchallengeTime\x12\x1c\
    \n\tchallenge\x18\x04\x20\x01(\x06R\tchallenge\x120\n\x14client_connecti\
    on_id\x18\x05\x20\x01(\x07R\x12clientConnectionId\x120\n\x14server_conne\
    ction_id\x18\x08\x20\x01(\x07R\x12serverConnectionId\x124\n\x16network_c\
    onfig_version\x18\x06\x20\x01(\rR\x14networkConfigVersion\x12)\n\x10prot\
    ocol_version\x18\x07\x20\x01(\rR\x0fprotocolVersion\"\x91\x02\n-CMsgStea\
    mDatagramGameserverSessionEstablished\x12#\n\rconnection_id\x18\x01\x20\
    \x01(\x07R\x0cconnectionId\x12.\n\x13gameserver_steam_id\x18\x03\x20\x01\
    (\x06R\x11gameserverSteamId\x124\n\x16seconds_until_shutdown\x18\x04\x20\
    \x01(\rR\x14secondsUntilShutdown\x125\n\x17legacy_relay_session_id\x18\
    \x05\x20\x01(\rR\x14legacyRelaySessionId\x12\x1e\n\x0bseq_num_r2c\x18\
    \x06\x20\x01(\rR\tseqNumR2c\"\xa0\x02\n'CMsgSteamDatagramNoSessionRelayT\
    oClient\x125\n\x17legacy_relay_session_id\x18\x01\x20\x01(\rR\x14legacyR\
    elaySessionId\x12#\n\rconnection_id\x18\x07\x20\x01(\x07R\x0cconnectionI\
    d\x12$\n\x0eyour_public_ip\x18\x02\x20\x01(\x07R\x0cyourPublicIp\x12\x1f\
    \n\x0bserver_time\x18\x03\x20\x01(\x07R\nserverTime\x12\x1c\n\tchallenge\
    \x18\x04\x20\x01(\x06R\tchallenge\x124\n\x16seconds_until_shutdown\x18\
    \x05\x20\x01(\rR\x14secondsUntilShutdown\"\xd6\x01\n'CMsgSteamDatagramNo\
    SessionRelayToServer\x12(\n\x10relay_session_id\x18\x01\x20\x01(\rR\x0er\
    elaySessionId\x120\n\x14client_connection_id\x18\x07\x20\x01(\x07R\x12cl\
    ientConnectionId\x120\n\x14server_connection_id\x18\x08\x20\x01(\x07R\
    \x12serverConnectionId\x12\x1d\n\nkludge_pad\x18c\x20\x01(\x06R\tkludgeP\
    ad\"M\n\x1bCMsgSteamDatagramDiagnostic\x12\x1a\n\x08severity\x18\x01\x20\
    \x01(\rR\x08severity\x12\x12\n\x04text\x18\x02\x20\x01(\tR\x04text\"\xef\
    \x02\n\x20CMsgSteamDatagramDataCenterState\x12O\n\x0cdata_centers\x18\
    \x01\x20\x03(\x0b2,.CMsgSteamDatagramDataCenterState.DataCenterR\x0bdata\
    Centers\x1a;\n\x06Server\x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07add\
    ress\x12\x17\n\x07ping_ms\x18\x02\x20\x01(\rR\x06pingMs\x1a\xbc\x01\n\nD\
    ataCenter\x12\x12\n\x04code\x18\x01\x20\x01(\tR\x04code\x12M\n\rserver_s\
    ample\x18\x02\x20\x03(\x0b2(.CMsgSteamDatagramDataCenterState.ServerR\
    \x0cserverSample\x12K\n\x0crelay_sample\x18\x03\x20\x03(\x0b2(.CMsgSteam\
    DatagramDataCenterState.ServerR\x0brelaySample\"\x97\x03\n'CMsgSteamData\
    gramLinkInstantaneousStats\x124\n\x17out_packets_per_sec_x10\x18\x01\x20\
    \x01(\rR\x13outPacketsPerSecX10\x12)\n\x11out_bytes_per_sec\x18\x02\x20\
    \x01(\rR\x0eoutBytesPerSec\x122\n\x16in_packets_per_sec_x10\x18\x03\x20\
    \x01(\rR\x12inPacketsPerSecX10\x12'\n\x10in_bytes_per_sec\x18\x04\x20\
    \x01(\rR\rinBytesPerSec\x12\x17\n\x07ping_ms\x18\x05\x20\x01(\rR\x06ping\
    Ms\x12.\n\x13packets_dropped_pct\x18\x06\x20\x01(\rR\x11packetsDroppedPc\
    t\x12;\n\x1apackets_weird_sequence_pct\x18\x07\x20\x01(\rR\x17packetsWei\
    rdSequencePct\x12(\n\x10peak_jitter_usec\x18\x08\x20\x01(\rR\x0epeakJitt\
    erUsec\"\xe6\x19\n\"CMsgSteamDatagramLinkLifetimeStats\x12!\n\x0cpackets\
    _sent\x18\x03\x20\x01(\x04R\x0bpacketsSent\x12\x17\n\x07kb_sent\x18\x04\
    \x20\x01(\x04R\x06kbSent\x12!\n\x0cpackets_recv\x18\x05\x20\x01(\x04R\
    \x0bpacketsRecv\x12\x17\n\x07kb_recv\x18\x06\x20\x01(\x04R\x06kbRecv\x12\
    4\n\x16packets_recv_sequenced\x18\x07\x20\x01(\x04R\x14packetsRecvSequen\
    ced\x120\n\x14packets_recv_dropped\x18\x08\x20\x01(\x04R\x12packetsRecvD\
    ropped\x128\n\x19packets_recv_out_of_order\x18\t\x20\x01(\x04R\x15packet\
    sRecvOutOfOrder\x124\n\x16packets_recv_duplicate\x18\n\x20\x01(\x04R\x14\
    packetsRecvDuplicate\x12,\n\x12packets_recv_lurch\x18\x0b\x20\x01(\x04R\
    \x10packetsRecvLurch\x122\n\x15quality_histogram_100\x18\x15\x20\x01(\rR\
    \x13qualityHistogram100\x120\n\x14quality_histogram_99\x18\x16\x20\x01(\
    \rR\x12qualityHistogram99\x120\n\x14quality_histogram_97\x18\x17\x20\x01\
    (\rR\x12qualityHistogram97\x120\n\x14quality_histogram_95\x18\x18\x20\
    \x01(\rR\x12qualityHistogram95\x120\n\x14quality_histogram_90\x18\x19\
    \x20\x01(\rR\x12qualityHistogram90\x120\n\x14quality_histogram_75\x18\
    \x1a\x20\x01(\rR\x12qualityHistogram75\x120\n\x14quality_histogram_50\
    \x18\x1b\x20\x01(\rR\x12qualityHistogram50\x12.\n\x13quality_histogram_1\
    \x18\x1c\x20\x01(\rR\x11qualityHistogram1\x124\n\x16quality_histogram_de\
    ad\x18\x1d\x20\x01(\rR\x14qualityHistogramDead\x12*\n\x11quality_ntile_2\
    nd\x18\x1e\x20\x01(\rR\x0fqualityNtile2nd\x12*\n\x11quality_ntile_5th\
    \x18\x1f\x20\x01(\rR\x0fqualityNtile5th\x12,\n\x12quality_ntile_25th\x18\
    \x20\x20\x01(\rR\x10qualityNtile25th\x12,\n\x12quality_ntile_50th\x18!\
    \x20\x01(\rR\x10qualityNtile50th\x12*\n\x11ping_histogram_25\x18)\x20\
    \x01(\rR\x0fpingHistogram25\x12*\n\x11ping_histogram_50\x18*\x20\x01(\rR\
    \x0fpingHistogram50\x12*\n\x11ping_histogram_75\x18+\x20\x01(\rR\x0fping\
    Histogram75\x12,\n\x12ping_histogram_100\x18,\x20\x01(\rR\x10pingHistogr\
    am100\x12,\n\x12ping_histogram_125\x18-\x20\x01(\rR\x10pingHistogram125\
    \x12,\n\x12ping_histogram_150\x18.\x20\x01(\rR\x10pingHistogram150\x12,\
    \n\x12ping_histogram_200\x18/\x20\x01(\rR\x10pingHistogram200\x12,\n\x12\
    ping_histogram_300\x180\x20\x01(\rR\x10pingHistogram300\x12,\n\x12ping_h\
    istogram_max\x181\x20\x01(\rR\x10pingHistogramMax\x12$\n\x0eping_ntile_5\
    th\x182\x20\x01(\rR\x0cpingNtile5th\x12&\n\x0fping_ntile_50th\x183\x20\
    \x01(\rR\rpingNtile50th\x12&\n\x0fping_ntile_75th\x184\x20\x01(\rR\rping\
    Ntile75th\x12&\n\x0fping_ntile_95th\x185\x20\x01(\rR\rpingNtile95th\x12&\
    \n\x0fping_ntile_98th\x186\x20\x01(\rR\rpingNtile98th\x12>\n\x1bjitter_h\
    istogram_negligible\x18=\x20\x01(\rR\x19jitterHistogramNegligible\x12,\n\
    \x12jitter_histogram_1\x18>\x20\x01(\rR\x10jitterHistogram1\x12,\n\x12ji\
    tter_histogram_2\x18?\x20\x01(\rR\x10jitterHistogram2\x12,\n\x12jitter_h\
    istogram_5\x18@\x20\x01(\rR\x10jitterHistogram5\x12.\n\x13jitter_histogr\
    am_10\x18A\x20\x01(\rR\x11jitterHistogram10\x12.\n\x13jitter_histogram_2\
    0\x18B\x20\x01(\rR\x11jitterHistogram20\x12\x1f\n\x0btxspeed_max\x18C\
    \x20\x01(\rR\ntxspeedMax\x120\n\x14txspeed_histogram_16\x18D\x20\x01(\rR\
    \x12txspeedHistogram16\x120\n\x14txspeed_histogram_32\x18E\x20\x01(\rR\
    \x12txspeedHistogram32\x120\n\x14txspeed_histogram_64\x18F\x20\x01(\rR\
    \x12txspeedHistogram64\x122\n\x15txspeed_histogram_128\x18G\x20\x01(\rR\
    \x13txspeedHistogram128\x122\n\x15txspeed_histogram_256\x18H\x20\x01(\rR\
    \x13txspeedHistogram256\x122\n\x15txspeed_histogram_512\x18I\x20\x01(\rR\
    \x13txspeedHistogram512\x124\n\x16txspeed_histogram_1024\x18J\x20\x01(\r\
    R\x14txspeedHistogram1024\x122\n\x15txspeed_histogram_max\x18K\x20\x01(\
    \rR\x13txspeedHistogramMax\x12*\n\x11txspeed_ntile_5th\x18L\x20\x01(\rR\
    \x0ftxspeedNtile5th\x12,\n\x12txspeed_ntile_50th\x18M\x20\x01(\rR\x10txs\
    peedNtile50th\x12,\n\x12txspeed_ntile_75th\x18N\x20\x01(\rR\x10txspeedNt\
    ile75th\x12,\n\x12txspeed_ntile_95th\x18O\x20\x01(\rR\x10txspeedNtile95t\
    h\x12,\n\x12txspeed_ntile_98th\x18P\x20\x01(\rR\x10txspeedNtile98th\x12\
    \x1f\n\x0brxspeed_max\x18Q\x20\x01(\rR\nrxspeedMax\x120\n\x14rxspeed_his\
    togram_16\x18R\x20\x01(\rR\x12rxspeedHistogram16\x120\n\x14rxspeed_histo\
    gram_32\x18S\x20\x01(\rR\x12rxspeedHistogram32\x120\n\x14rxspeed_histogr\
    am_64\x18T\x20\x01(\rR\x12rxspeedHistogram64\x122\n\x15rxspeed_histogram\
    _128\x18U\x20\x01(\rR\x13rxspeedHistogram128\x122\n\x15rxspeed_histogram\
    _256\x18V\x20\x01(\rR\x13rxspeedHistogram256\x122\n\x15rxspeed_histogram\
    _512\x18W\x20\x01(\rR\x13rxspeedHistogram512\x124\n\x16rxspeed_histogram\
    _1024\x18X\x20\x01(\rR\x14rxspeedHistogram1024\x122\n\x15rxspeed_histogr\
    am_max\x18Y\x20\x01(\rR\x13rxspeedHistogramMax\x12*\n\x11rxspeed_ntile_5\
    th\x18Z\x20\x01(\rR\x0frxspeedNtile5th\x12,\n\x12rxspeed_ntile_50th\x18[\
    \x20\x01(\rR\x10rxspeedNtile50th\x12,\n\x12rxspeed_ntile_75th\x18\\\x20\
    \x01(\rR\x10rxspeedNtile75th\x12,\n\x12rxspeed_ntile_95th\x18]\x20\x01(\
    \rR\x10rxspeedNtile95th\x12,\n\x12rxspeed_ntile_98th\x18^\x20\x01(\rR\
    \x10rxspeedNtile98th\"\xb5\x01\n\"CMsgSteamDatagramConnectionQuality\x12\
    N\n\rinstantaneous\x18\x01\x20\x01(\x0b2(.CMsgSteamDatagramLinkInstantan\
    eousStatsR\rinstantaneous\x12?\n\x08lifetime\x18\x02\x20\x01(\x0b2#.CMsg\
    SteamDatagramLinkLifetimeStatsR\x08lifetime\"\xe4\x03\n.CMsgSteamDatagra\
    mConnectionStatsClientToRouter\x125\n\x03c2r\x18\x01\x20\x01(\x0b2#.CMsg\
    SteamDatagramConnectionQualityR\x03c2r\x125\n\x03c2s\x18\x02\x20\x01(\
    \x0b2#.CMsgSteamDatagramConnectionQualityR\x03c2s\x126\n\x17legacy_clien\
    t_timestamp\x18\x03\x20\x01(\x07R\x15legacyClientTimestamp\x12\x1b\n\tac\
    k_relay\x18\x04\x20\x03(\x07R\x08ackRelay\x12\x17\n\x07ack_e2e\x18\x05\
    \x20\x03(\x07R\x06ackE2e\x12\x14\n\x05flags\x18\x06\x20\x01(\rR\x05flags\
    \x120\n\x14client_connection_id\x18\x08\x20\x01(\x07R\x12clientConnectio\
    nId\x12\x1e\n\x0bseq_num_c2r\x18\t\x20\x01(\rR\tseqNumC2r\x12\x1e\n\x0bs\
    eq_num_c2s\x18\n\x20\x01(\rR\tseqNumC2s\"N\n\x05Flags\x12\x15\n\x11ACK_R\
    EQUEST_RELAY\x10\x01\x12\x13\n\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n\x15A\
    CK_REQUEST_IMMEDIATE\x10\x04\"\xdd\x06\n.CMsgSteamDatagramConnectionStat\
    sRouterToClient\x125\n\x03r2c\x18\x01\x20\x01(\x0b2#.CMsgSteamDatagramCo\
    nnectionQualityR\x03r2c\x125\n\x03s2c\x18\x02\x20\x01(\x0b2#.CMsgSteamDa\
    tagramConnectionQualityR\x03s2c\x12L\n#legacy_client_timestamp_from_rout\
    er\x18\x03\x20\x01(\x07R\x1flegacyClientTimestampFromRouter\x12L\n#legac\
    y_client_timestamp_from_server\x18\x04\x20\x01(\x07R\x1flegacyClientTime\
    stampFromServer\x12:\n\x19router_gameserver_latency\x18\x05\x20\x01(\rR\
    \x17routerGameserverLatency\x124\n\x16seconds_until_shutdown\x18\x06\x20\
    \x01(\rR\x14secondsUntilShutdown\x12,\n\x12migrate_request_ip\x18\n\x20\
    \x01(\x07R\x10migrateRequestIp\x120\n\x14migrate_request_port\x18\x0b\
    \x20\x01(\rR\x12migrateRequestPort\x12A\n\x1dscoring_penalty_relay_clust\
    er\x18\x0c\x20\x01(\rR\x1ascoringPenaltyRelayCluster\x12\x1b\n\tack_rela\
    y\x18\r\x20\x03(\x07R\x08ackRelay\x12\x17\n\x07ack_e2e\x18\x0e\x20\x03(\
    \x07R\x06ackE2e\x12\x14\n\x05flags\x18\x0f\x20\x01(\rR\x05flags\x120\n\
    \x14client_connection_id\x18\x07\x20\x01(\x07R\x12clientConnectionId\x12\
    \x1e\n\x0bseq_num_r2c\x18\x08\x20\x01(\rR\tseqNumR2c\x12\x1e\n\x0bseq_nu\
    m_s2c\x18\t\x20\x01(\rR\tseqNumS2c\"N\n\x05Flags\x12\x15\n\x11ACK_REQUES\
    T_RELAY\x10\x01\x12\x13\n\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n\x15ACK_RE\
    QUEST_IMMEDIATE\x10\x04\"\xa0\x05\n.CMsgSteamDatagramConnectionStatsRout\
    erToServer\x125\n\x03r2s\x18\x01\x20\x01(\x0b2#.CMsgSteamDatagramConnect\
    ionQualityR\x03r2s\x125\n\x03c2s\x18\x02\x20\x01(\x0b2#.CMsgSteamDatagra\
    mConnectionQualityR\x03c2s\x126\n\x17legacy_client_timestamp\x18\x03\x20\
    \x01(\x07R\x15legacyClientTimestamp\x126\n\x17legacy_router_timestamp\
    \x18\x04\x20\x01(\x07R\x15legacyRouterTimestamp\x12\x1b\n\tack_relay\x18\
    \n\x20\x03(\x07R\x08ackRelay\x12\x17\n\x07ack_e2e\x18\x0b\x20\x03(\x07R\
    \x06ackE2e\x12\x14\n\x05flags\x18\x0c\x20\x01(\rR\x05flags\x12\x1e\n\x0b\
    seq_num_r2s\x18\x05\x20\x01(\rR\tseqNumR2s\x12\x1e\n\x0bseq_num_c2s\x18\
    \x06\x20\x01(\rR\tseqNumC2s\x12&\n\x0fclient_steam_id\x18\x07\x20\x01(\
    \x06R\rclientSteamId\x12(\n\x10relay_session_id\x18\x08\x20\x01(\rR\x0er\
    elaySessionId\x120\n\x14client_connection_id\x18\t\x20\x01(\x07R\x12clie\
    ntConnectionId\x120\n\x14server_connection_id\x18\r\x20\x01(\x07R\x12ser\
    verConnectionId\"N\n\x05Flags\x12\x15\n\x11ACK_REQUEST_RELAY\x10\x01\x12\
    \x13\n\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n\x15ACK_REQUEST_IMMEDIATE\x10\
    \x04\"\xb0\x04\n.CMsgSteamDatagramConnectionStatsServerToRouter\x125\n\
    \x03s2r\x18\x01\x20\x01(\x0b2#.CMsgSteamDatagramConnectionQualityR\x03s2\
    r\x125\n\x03s2c\x18\x02\x20\x01(\x0b2#.CMsgSteamDatagramConnectionQualit\
    yR\x03s2c\x12\x1b\n\tack_relay\x18\x08\x20\x03(\x07R\x08ackRelay\x12\x17\
    \n\x07ack_e2e\x18\t\x20\x03(\x07R\x06ackE2e\x12\x14\n\x05flags\x18\n\x20\
    \x01(\rR\x05flags\x12\x1e\n\x0bseq_num_s2r\x18\x03\x20\x01(\rR\tseqNumS2\
    r\x12\x1e\n\x0bseq_num_s2c\x18\x04\x20\x01(\rR\tseqNumS2c\x12&\n\x0fclie\
    nt_steam_id\x18\x05\x20\x01(\x06R\rclientSteamId\x12(\n\x10relay_session\
    _id\x18\x06\x20\x01(\rR\x0erelaySessionId\x120\n\x14client_connection_id\
    \x18\x07\x20\x01(\x07R\x12clientConnectionId\x120\n\x14server_connection\
    _id\x18\x0b\x20\x01(\x07R\x12serverConnectionId\"N\n\x05Flags\x12\x15\n\
    \x11ACK_REQUEST_RELAY\x10\x01\x12\x13\n\x0fACK_REQUEST_E2E\x10\x02\x12\
    \x19\n\x15ACK_REQUEST_IMMEDIATE\x10\x04\"O\n(CMsgSteamDatagramClientPing\
    SampleRequest\x12#\n\rconnection_id\x18\x01\x20\x01(\x07R\x0cconnectionI\
    d\"\xe3\x03\n&CMsgSteamDatagramClientPingSampleReply\x12#\n\rconnection_\
    id\x18\x01\x20\x01(\x07R\x0cconnectionId\x12a\n\x10routing_clusters\x18\
    \x02\x20\x03(\x0b26.CMsgSteamDatagramClientPingSampleReply.RoutingCluste\
    rR\x0froutingClusters\x12U\n\x0cdata_centers\x18\x03\x20\x03(\x0b22.CMsg\
    SteamDatagramClientPingSampleReply.DataCenterR\x0bdataCenters\x1ad\n\x0e\
    RoutingCluster\x12\x0e\n\x02id\x18\x01\x20\x01(\x07R\x02id\x12\"\n\rfron\
    t_ping_ms\x18\x02\x20\x01(\rR\x0bfrontPingMs\x12\x1e\n\x0be2e_ping_ms\
    \x18\x03\x20\x01(\rR\te2ePingMs\x1at\n\nDataCenter\x12$\n\x0edata_center\
    _id\x18\x01\x20\x01(\x07R\x0cdataCenterId\x12\x20\n\x0cvia_relay_id\x18\
    \x02\x20\x01(\x07R\nviaRelayId\x12\x1e\n\x0be2e_ping_ms\x18\x03\x20\x01(\
    \rR\te2ePingMs\"\xef\x06\n&CMsgSteamDatagramClientSwitchedPrimary\x12#\n\
    \rconnection_id\x18\x01\x20\x01(\x07R\x0cconnectionId\x12\x17\n\x07from_\
    ip\x18\x02\x20\x01(\x07R\x06fromIp\x12\x1b\n\tfrom_port\x18\x03\x20\x01(\
    \rR\x08fromPort\x12.\n\x13from_router_cluster\x18\x04\x20\x01(\x07R\x11f\
    romRouterCluster\x12(\n\x10from_active_time\x18\x05\x20\x01(\rR\x0efromA\
    ctiveTime\x127\n\x18from_active_packets_recv\x18\x06\x20\x01(\rR\x15from\
    ActivePacketsRecv\x12.\n\x13from_dropped_reason\x18\x07\x20\x01(\tR\x11f\
    romDroppedReason\x12\x15\n\x06gap_ms\x18\x08\x20\x01(\rR\x05gapMs\x12_\n\
    \x10from_quality_now\x18\t\x20\x01(\x0b25.CMsgSteamDatagramClientSwitche\
    dPrimary.RouterQualityR\x0efromQualityNow\x12[\n\x0eto_quality_now\x18\n\
    \x20\x01(\x0b25.CMsgSteamDatagramClientSwitchedPrimary.RouterQualityR\
    \x0ctoQualityNow\x12a\n\x11from_quality_then\x18\x0b\x20\x01(\x0b25.CMsg\
    SteamDatagramClientSwitchedPrimary.RouterQualityR\x0ffromQualityThen\x12\
    ]\n\x0fto_quality_then\x18\x0c\x20\x01(\x0b25.CMsgSteamDatagramClientSwi\
    tchedPrimary.RouterQualityR\rtoQualityThen\x1a\x8f\x01\n\rRouterQuality\
    \x12\x14\n\x05score\x18\x01\x20\x01(\rR\x05score\x12\x1d\n\nfront_ping\
    \x18\x02\x20\x01(\rR\tfrontPing\x12\x1b\n\tback_ping\x18\x03\x20\x01(\rR\
    \x08backPing\x12,\n\x12seconds_until_down\x18\x04\x20\x01(\rR\x10seconds\
    UntilDown\"\xea\x03\n\x1dCMsgSteamDatagramRouterHealth\x12\x19\n\x08cpu_\
    load\x18\x01\x20\x01(\x02R\x07cpuLoad\x12'\n\x0factive_sessions\x18\x02\
    \x20\x01(\rR\x0eactiveSessions\x12\"\n\rdata_pkts_sec\x18\x03\x20\x01(\r\
    R\x0bdataPktsSec\x12$\n\x0eother_pkts_sec\x18\x04\x20\x01(\rR\x0cotherPk\
    tsSec\x124\n\x16seconds_until_shutdown\x18\x05\x20\x01(\rR\x14secondsUnt\
    ilShutdown\x12)\n\x11cpu_cost_per_user\x18\x08\x20\x01(\x02R\x0ecpuCostP\
    erUser\x12-\n\x13cpu_cost_per_packet\x18\t\x20\x01(\x02R\x10cpuCostPerPa\
    cket\x12L\n\x0cdata_centers\x18\x06\x20\x03(\x0b2).CMsgSteamDatagramRout\
    erHealth.DataCenterR\x0bdataCenters\x12\x14\n\x05magic\x18\x07\x20\x01(\
    \x06R\x05magic\x1aG\n\nDataCenter\x12#\n\rdatacenter_id\x18\x01\x20\x01(\
    \x07R\x0cdatacenterId\x12\x14\n\x05state\x18\x02\x20\x01(\rR\x05state\"\
    \xb7\x03\n\x1fCMsgSteamDatagramConnectRequest\x12#\n\rconnection_id\x18\
    \x01\x20\x01(\x07R\x0cconnectionId\x12&\n\x0fclient_steam_id\x18\x03\x20\
    \x01(\x06R\rclientSteamId\x12!\n\x0cmy_timestamp\x18\x04\x20\x01(\x06R\
    \x0bmyTimestamp\x12\x1e\n\x0bping_est_ms\x18\x05\x20\x01(\rR\tpingEstMs\
    \x12!\n\x0cvirtual_port\x18\t\x20\x01(\rR\x0bvirtualPort\x12=\n\x1bgames\
    erver_relay_session_id\x18\x02\x20\x01(\rR\x18gameserverRelaySessionId\
    \x12>\n\x05crypt\x18\x06\x20\x01(\x0b2(.CMsgSteamDatagramSessionCryptInf\
    oSignedR\x05crypt\x127\n\x04cert\x18\x07\x20\x01(\x0b2#.CMsgSteamDatagra\
    mCertificateSignedR\x04cert\x12)\n\x10protocol_version\x18\x08\x20\x01(\
    \rR\x0fprotocolVersion\"\xb2\x03\n\x1aCMsgSteamDatagramConnectOK\x120\n\
    \x14client_connection_id\x18\x01\x20\x01(\x07R\x12clientConnectionId\x12\
    0\n\x14server_connection_id\x18\x07\x20\x01(\x07R\x12serverConnectionId\
    \x12%\n\x0eyour_timestamp\x18\x03\x20\x01(\x06R\ryourTimestamp\x12&\n\
    \x0fdelay_time_usec\x18\x04\x20\x01(\rR\rdelayTimeUsec\x12=\n\x1bgameser\
    ver_relay_session_id\x18\x02\x20\x01(\rR\x18gameserverRelaySessionId\x12\
    >\n\x05crypt\x18\x05\x20\x01(\x0b2(.CMsgSteamDatagramSessionCryptInfoSig\
    nedR\x05crypt\x127\n\x04cert\x18\x06\x20\x01(\x0b2#.CMsgSteamDatagramCer\
    tificateSignedR\x04cert\x12)\n\x10protocol_version\x18\x08\x20\x01(\rR\
    \x0fprotocolVersion\"\xe0\x03\n!CMsgSteamDatagramConnectionClosed\x12=\n\
    \x1blegacy_client_connection_id\x18\x01\x20\x01(\x07R\x18legacyClientCon\
    nectionId\x12(\n\x10to_connection_id\x18\x07\x20\x01(\x07R\x0etoConnecti\
    onId\x12,\n\x12from_connection_id\x18\x08\x20\x01(\x07R\x10fromConnectio\
    nId\x12\"\n\rpeer_steam_id\x18\x03\x20\x01(\x06R\x0bpeerSteamId\x12=\n\
    \x1bgameserver_relay_session_id\x18\x02\x20\x01(\rR\x18gameserverRelaySe\
    ssionId\x12R\n\nrelay_mode\x18\x04\x20\x01(\x0e2-.CMsgSteamDatagramConne\
    ctionClosed.ERelayMode:\x04NoneR\trelayMode\x12\x14\n\x05debug\x18\x05\
    \x20\x01(\tR\x05debug\x12\x1f\n\x0breason_code\x18\x06\x20\x01(\rR\nreas\
    onCode\"6\n\nERelayMode\x12\x08\n\x04None\x10\0\x12\x0c\n\x08EndToEnd\
    \x10\x01\x12\x10\n\x0cClosedByPeer\x10\x02\"\xd5\x02\n\x1dCMsgSteamDatag\
    ramNoConnection\x12=\n\x1blegacy_client_connection_id\x18\x01\x20\x01(\
    \x07R\x18legacyClientConnectionId\x12(\n\x10to_connection_id\x18\x05\x20\
    \x01(\x07R\x0etoConnectionId\x12,\n\x12from_connection_id\x18\x06\x20\
    \x01(\x07R\x10fromConnectionId\x12=\n\x1bgameserver_relay_session_id\x18\
    \x02\x20\x01(\rR\x18gameserverRelaySessionId\x12\"\n\rpeer_steam_id\x18\
    \x03\x20\x01(\x06R\x0bpeerSteamId\x12\x1c\n\nend_to_end\x18\x04\x20\x01(\
    \x08R\x08endToEnd\x12\x1c\n\tdummy_pad\x18\xff\x07\x20\x01(\x07R\x08dumm\
    yPad\"\xe7\x02\n&CMsgSteamDatagramP2PSessionRequestBody\x12%\n\x0echalle\
    nge_time\x18\x01\x20\x01(\x07R\rchallengeTime\x12\x1c\n\tchallenge\x18\
    \x02\x20\x01(\x06R\tchallenge\x12(\n\x10my_connection_id\x18\x03\x20\x01\
    (\x07R\x0emyConnectionId\x12\"\n\rpeer_steam_id\x18\x04\x20\x01(\x06R\
    \x0bpeerSteamId\x12,\n\x12peer_connection_id\x18\x05\x20\x01(\x07R\x10pe\
    erConnectionId\x12)\n\x10protocol_version\x18\x08\x20\x01(\rR\x0fprotoco\
    lVersion\x124\n\x16network_config_version\x18\t\x20\x01(\rR\x14networkCo\
    nfigVersion\x12\x1b\n\tpublic_ip\x18\n\x20\x01(\x07R\x08publicIp\"\x8f\
    \x01\n\"CMsgSteamDatagramP2PSessionRequest\x127\n\x04cert\x18\x01\x20\
    \x01(\x0b2#.CMsgSteamDatagramCertificateSignedR\x04cert\x12\x12\n\x04bod\
    y\x18\x02\x20\x01(\x0cR\x04body\x12\x1c\n\tsignature\x18\x03\x20\x01(\
    \x0cR\tsignature\"\xcd\x01\n&CMsgSteamDatagramP2PSessionEstablished\x12#\
    \n\rconnection_id\x18\x01\x20\x01(\x07R\x0cconnectionId\x124\n\x16second\
    s_until_shutdown\x18\x03\x20\x01(\rR\x14secondsUntilShutdown\x12(\n\x10r\
    elay_routing_id\x18\x04\x20\x01(\x06R\x0erelayRoutingId\x12\x1e\n\x0bseq\
    _num_r2c\x18\x05\x20\x01(\rR\tseqNumR2c\"\xbe\x03\n\x1aCMsgSteamDatagram\
    P2PRoutes\x12O\n\x0erelay_clusters\x18\x01\x20\x03(\x0b2(.CMsgSteamDatag\
    ramP2PRoutes.RelayClusterR\rrelayClusters\x129\n\x06routes\x18\x02\x20\
    \x03(\x0b2!.CMsgSteamDatagramP2PRoutes.RouteR\x06routes\x12\x1a\n\x08rev\
    ision\x18\x03\x20\x01(\rR\x08revision\x1a\x9c\x01\n\x0cRelayCluster\x12\
    \x15\n\x06pop_id\x18\x01\x20\x01(\x07R\x05popId\x12\x17\n\x07ping_ms\x18\
    \x02\x20\x01(\rR\x06pingMs\x12#\n\rscore_penalty\x18\x03\x20\x01(\rR\x0c\
    scorePenalty\x127\n\x18session_relay_routing_id\x18\x04\x20\x01(\x06R\
    \x15sessionRelayRoutingId\x1aY\n\x05Route\x12\x1a\n\tmy_pop_id\x18\x01\
    \x20\x01(\x07R\x07myPopId\x12\x1e\n\x0byour_pop_id\x18\x02\x20\x01(\x07R\
    \tyourPopId\x12\x14\n\x05score\x18\x03\x20\x01(\rR\x05score\"\x90\x03\n\
    \x1eCMsgSteamDatagramP2PRendezvous\x12(\n\x10to_connection_id\x18\x01\
    \x20\x01(\x07R\x0etoConnectionId\x123\n\x06routes\x18\x02\x20\x01(\x0b2\
    \x1b.CMsgSteamDatagramP2PRoutesR\x06routes\x127\n\x18ack_peer_routes_rev\
    ision\x18\x03\x20\x01(\rR\x15ackPeerRoutesRevision\x12I\n\x0fconnect_req\
    uest\x18\x04\x20\x01(\x0b2\x20.CMsgSteamDatagramConnectRequestR\x0econne\
    ctRequest\x12:\n\nconnect_ok\x18\x05\x20\x01(\x0b2\x1b.CMsgSteamDatagram\
    ConnectOKR\tconnectOk\x12O\n\x11connection_closed\x18\x06\x20\x01(\x0b2\
    \".CMsgSteamDatagramConnectionClosedR\x10connectionClosed\"\x8e\x05\n1CM\
    sgSteamDatagramConnectionStatsP2PClientToRouter\x125\n\x03c2r\x18\x01\
    \x20\x01(\x0b2#.CMsgSteamDatagramConnectionQualityR\x03c2r\x125\n\x03c2s\
    \x18\x02\x20\x01(\x0b2#.CMsgSteamDatagramConnectionQualityR\x03c2s\x12\
    \x1b\n\tack_relay\x18\x03\x20\x03(\x07R\x08ackRelay\x12\x17\n\x07ack_e2e\
    \x18\x04\x20\x03(\x07R\x06ackE2e\x12\x14\n\x05flags\x18\x05\x20\x01(\rR\
    \x05flags\x12D\n\x1fforward_target_relay_routing_id\x18\x06\x20\x01(\x06\
    R\x1bforwardTargetRelayRoutingId\x126\n\x17forward_target_revision\x18\
    \x07\x20\x01(\rR\x15forwardTargetRevision\x123\n\x06routes\x18\x08\x20\
    \x01(\x0b2\x1b.CMsgSteamDatagramP2PRoutesR\x06routes\x127\n\x18ack_peer_\
    routes_revision\x18\t\x20\x01(\rR\x15ackPeerRoutesRevision\x12#\n\rconne\
    ction_id\x18\n\x20\x01(\x07R\x0cconnectionId\x12\x1e\n\x0bseq_num_c2r\
    \x18\x0b\x20\x01(\rR\tseqNumC2r\x12\x1e\n\x0bseq_num_c2s\x18\x0c\x20\x01\
    (\rR\tseqNumC2s\"N\n\x05Flags\x12\x15\n\x11ACK_REQUEST_RELAY\x10\x01\x12\
    \x13\n\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n\x15ACK_REQUEST_IMMEDIATE\x10\
    \x04\"\xa8\x06\n1CMsgSteamDatagramConnectionStatsP2PRouterToClient\x125\
    \n\x03r2c\x18\x01\x20\x01(\x0b2#.CMsgSteamDatagramConnectionQualityR\x03\
    r2c\x125\n\x03p2c\x18\x02\x20\x01(\x0b2#.CMsgSteamDatagramConnectionQual\
    ityR\x03p2c\x124\n\x16seconds_until_shutdown\x18\x03\x20\x01(\rR\x14seco\
    ndsUntilShutdown\x12,\n\x12migrate_request_ip\x18\x04\x20\x01(\x07R\x10m\
    igrateRequestIp\x120\n\x14migrate_request_port\x18\x05\x20\x01(\rR\x12mi\
    grateRequestPort\x12A\n\x1dscoring_penalty_relay_cluster\x18\x06\x20\x01\
    (\rR\x1ascoringPenaltyRelayCluster\x12\x1b\n\tack_relay\x18\x07\x20\x03(\
    \x07R\x08ackRelay\x12\x17\n\x07ack_e2e\x18\x08\x20\x03(\x07R\x06ackE2e\
    \x12\x14\n\x05flags\x18\t\x20\x01(\rR\x05flags\x12=\n\x1back_forward_tar\
    get_revision\x18\n\x20\x01(\rR\x18ackForwardTargetRevision\x123\n\x06rou\
    tes\x18\x0b\x20\x01(\x0b2\x1b.CMsgSteamDatagramP2PRoutesR\x06routes\x127\
    \n\x18ack_peer_routes_revision\x18\x0c\x20\x01(\rR\x15ackPeerRoutesRevis\
    ion\x12#\n\rconnection_id\x18\r\x20\x01(\x07R\x0cconnectionId\x12\x1e\n\
    \x0bseq_num_r2c\x18\x0e\x20\x01(\rR\tseqNumR2c\x12\x1e\n\x0bseq_num_p2c\
    \x18\x0f\x20\x01(\rR\tseqNumP2c\"N\n\x05Flags\x12\x15\n\x11ACK_REQUEST_R\
    ELAY\x10\x01\x12\x13\n\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n\x15ACK_REQUE\
    ST_IMMEDIATE\x10\x04\"\x9a\x01\n%CMsgSteamSockets_UDP_ChallengeRequest\
    \x12#\n\rconnection_id\x18\x01\x20\x01(\x07R\x0cconnectionId\x12!\n\x0cm\
    y_timestamp\x18\x03\x20\x01(\x06R\x0bmyTimestamp\x12)\n\x10protocol_vers\
    ion\x18\x04\x20\x01(\rR\x0fprotocolVersion\"\xba\x01\n#CMsgSteamSockets_\
    UDP_ChallengeReply\x12#\n\rconnection_id\x18\x01\x20\x01(\x07R\x0cconnec\
    tionId\x12\x1c\n\tchallenge\x18\x02\x20\x01(\x06R\tchallenge\x12%\n\x0ey\
    our_timestamp\x18\x03\x20\x01(\x06R\ryourTimestamp\x12)\n\x10protocol_ve\
    rsion\x18\x04\x20\x01(\rR\x0fprotocolVersion\"\x84\x03\n#CMsgSteamSocket\
    s_UDP_ConnectRequest\x120\n\x14client_connection_id\x18\x01\x20\x01(\x07\
    R\x12clientConnectionId\x12\x1c\n\tchallenge\x18\x02\x20\x01(\x06R\tchal\
    lenge\x12&\n\x0fclient_steam_id\x18\x03\x20\x01(\x06R\rclientSteamId\x12\
    !\n\x0cmy_timestamp\x18\x05\x20\x01(\x06R\x0bmyTimestamp\x12\x1e\n\x0bpi\
    ng_est_ms\x18\x06\x20\x01(\rR\tpingEstMs\x12>\n\x05crypt\x18\x07\x20\x01\
    (\x0b2(.CMsgSteamDatagramSessionCryptInfoSignedR\x05crypt\x127\n\x04cert\
    \x18\x04\x20\x01(\x0b2#.CMsgSteamDatagramCertificateSignedR\x04cert\x12)\
    \n\x10protocol_version\x18\x08\x20\x01(\rR\x0fprotocolVersion\"\x9f\x03\
    \n\x1eCMsgSteamSockets_UDP_ConnectOK\x120\n\x14client_connection_id\x18\
    \x01\x20\x01(\x07R\x12clientConnectionId\x120\n\x14server_connection_id\
    \x18\x05\x20\x01(\x07R\x12serverConnectionId\x12&\n\x0fserver_steam_id\
    \x18\x02\x20\x01(\x06R\rserverSteamId\x12%\n\x0eyour_timestamp\x18\x03\
    \x20\x01(\x06R\ryourTimestamp\x12&\n\x0fdelay_time_usec\x18\x04\x20\x01(\
    \rR\rdelayTimeUsec\x12>\n\x05crypt\x18\x07\x20\x01(\x0b2(.CMsgSteamDatag\
    ramSessionCryptInfoSignedR\x05crypt\x127\n\x04cert\x18\x08\x20\x01(\x0b2\
    #.CMsgSteamDatagramCertificateSignedR\x04cert\x12)\n\x10protocol_version\
    \x18\t\x20\x01(\rR\x0fprotocolVersion\"\xf5\x01\n%CMsgSteamSockets_UDP_C\
    onnectionClosed\x12=\n\x1blegacy_client_connection_id\x18\x01\x20\x01(\
    \x07R\x18legacyClientConnectionId\x12(\n\x10to_connection_id\x18\x04\x20\
    \x01(\x07R\x0etoConnectionId\x12,\n\x12from_connection_id\x18\x05\x20\
    \x01(\x07R\x10fromConnectionId\x12\x14\n\x05debug\x18\x02\x20\x01(\tR\
    \x05debug\x12\x1f\n\x0breason_code\x18\x03\x20\x01(\rR\nreasonCode\"\xba\
    \x01\n!CMsgSteamSockets_UDP_NoConnection\x12=\n\x1blegacy_client_connect\
    ion_id\x18\x01\x20\x01(\x07R\x18legacyClientConnectionId\x12,\n\x12from_\
    connection_id\x18\x02\x20\x01(\x07R\x10fromConnectionId\x12(\n\x10to_con\
    nection_id\x18\x03\x20\x01(\x07R\x0etoConnectionId\"\xef\x02\n\x1aCMsgSt\
    eamSockets_UDP_Stats\x129\n\x05stats\x18\x01\x20\x01(\x0b2#.CMsgSteamDat\
    agramConnectionQualityR\x05stats\x12\x17\n\x07ack_e2e\x18\x02\x20\x03(\
    \x07R\x06ackE2e\x12\x14\n\x05flags\x18\x03\x20\x01(\rR\x05flags\x12=\n\
    \x1blegacy_client_connection_id\x18\x08\x20\x01(\x07R\x18legacyClientCon\
    nectionId\x12(\n\x10to_connection_id\x18\t\x20\x01(\x07R\x0etoConnection\
    Id\x12,\n\x12from_connection_id\x18\n\x20\x01(\x07R\x10fromConnectionId\
    \x12\x17\n\x07seq_num\x18\x04\x20\x01(\rR\x06seqNum\"7\n\x05Flags\x12\
    \x13\n\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n\x15ACK_REQUEST_IMMEDIATE\x10\
    \x04*\xf5\x08\n\x13ESteamDatagramMsgID\x12\x1f\n\x1bk_ESteamDatagramMsg_\
    Invalid\x10\0\x12)\n%k_ESteamDatagramMsg_RouterPingRequest\x10\x01\x12'\
    \n#k_ESteamDatagramMsg_RouterPingReply\x10\x02\x12-\n)k_ESteamDatagramMs\
    g_GameserverPingRequest\x10\x03\x12+\n'k_ESteamDatagramMsg_GameserverPin\
    gReply\x10\x04\x120\n,k_ESteamDatagramMsg_GameserverSessionRequest\x10\
    \x05\x124\n0k_ESteamDatagramMsg_GameserverSessionEstablished\x10\x06\x12\
    !\n\x1dk_ESteamDatagramMsg_NoSession\x10\x07\x12\"\n\x1ek_ESteamDatagram\
    Msg_Diagnostic\x10\x08\x12*\n&k_ESteamDatagramMsg_DataClientToRouter\x10\
    \t\x12*\n&k_ESteamDatagramMsg_DataRouterToServer\x10\n\x12*\n&k_ESteamDa\
    tagramMsg_DataServerToRouter\x10\x0b\x12*\n&k_ESteamDatagramMsg_DataRout\
    erToClient\x10\x0c\x12\x1d\n\x19k_ESteamDatagramMsg_Stats\x10\r\x12/\n+k\
    _ESteamDatagramMsg_ClientPingSampleRequest\x10\x0e\x12-\n)k_ESteamDatagr\
    amMsg_ClientPingSampleReply\x10\x0f\x125\n1k_ESteamDatagramMsg_ClientToR\
    outerSwitchedPrimary\x10\x10\x12#\n\x1fk_ESteamDatagramMsg_RelayHealth\
    \x10\x11\x12&\n\"k_ESteamDatagramMsg_ConnectRequest\x10\x12\x12!\n\x1dk_\
    ESteamDatagramMsg_ConnectOK\x10\x13\x12(\n$k_ESteamDatagramMsg_Connectio\
    nClosed\x10\x14\x12$\n\x20k_ESteamDatagramMsg_NoConnection\x10\x15\x12/\
    \n+k_ESteamDatagramMsg_RelayToRelayPingRequest\x10\x16\x12-\n)k_ESteamDa\
    tagramMsg_RelayToRelayPingReply\x10\x17\x12)\n%k_ESteamDatagramMsg_P2PSe\
    ssionRequest\x10\x18\x12-\n)k_ESteamDatagramMsg_P2PSessionEstablished\
    \x10\x19*\xc9\x02\n\x18ESteamNetworkingUDPMsgID\x12-\n)k_ESteamNetworkin\
    gUDPMsg_ChallengeRequest\x10\x20\x12+\n'k_ESteamNetworkingUDPMsg_Challen\
    geReply\x10!\x12+\n'k_ESteamNetworkingUDPMsg_ConnectRequest\x10\"\x12&\n\
    \"k_ESteamNetworkingUDPMsg_ConnectOK\x10#\x12-\n)k_ESteamNetworkingUDPMs\
    g_ConnectionClosed\x10$\x12)\n%k_ESteamNetworkingUDPMsg_NoConnection\x10\
    %\x12\"\n\x1ek_ESteamNetworkingUDPMsg_Stats\x10&B\x03\x80\x01\0J\xaa\xf0\
    \x01\n\x07\x12\x05\0\0\xd4\x04\x01\n\t\n\x02\x03\0\x12\x03\0\0+\n\x08\n\
    \x01\x08\x12\x03\x02\0#\n\t\n\x02\x08\x10\x12\x03\x02\0#\n\n\n\x02\x05\0\
    \x12\x04\x04\0\x1f\x01\n\n\n\x03\x05\0\x01\x12\x03\x04\x05\x18\n\x0b\n\
    \x04\x05\0\x02\0\x12\x03\x05\x08(\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\
    \x05\x08#\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x05&'\n\x0b\n\x04\x05\0\
    \x02\x01\x12\x03\x06\x082\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x06\x08-\
    \n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x0601\n\x0b\n\x04\x05\0\x02\x02\
    \x12\x03\x07\x080\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x07\x08+\n\x0c\n\
    \x05\x05\0\x02\x02\x02\x12\x03\x07./\n\x0b\n\x04\x05\0\x02\x03\x12\x03\
    \x08\x086\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x08\x081\n\x0c\n\x05\x05\
    \0\x02\x03\x02\x12\x03\x0845\n\x0b\n\x04\x05\0\x02\x04\x12\x03\t\x084\n\
    \x0c\n\x05\x05\0\x02\x04\x01\x12\x03\t\x08/\n\x0c\n\x05\x05\0\x02\x04\
    \x02\x12\x03\t23\n\x0b\n\x04\x05\0\x02\x05\x12\x03\n\x089\n\x0c\n\x05\
    \x05\0\x02\x05\x01\x12\x03\n\x084\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\
    \n78\n\x0b\n\x04\x05\0\x02\x06\x12\x03\x0b\x08=\n\x0c\n\x05\x05\0\x02\
    \x06\x01\x12\x03\x0b\x088\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03\x0b;<\n\
    \x0b\n\x04\x05\0\x02\x07\x12\x03\x0c\x08*\n\x0c\n\x05\x05\0\x02\x07\x01\
    \x12\x03\x0c\x08%\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03\x0c()\n\x0b\n\
    \x04\x05\0\x02\x08\x12\x03\r\x08+\n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03\
    \r\x08&\n\x0c\n\x05\x05\0\x02\x08\x02\x12\x03\r)*\n\x0b\n\x04\x05\0\x02\
    \t\x12\x03\x0e\x083\n\x0c\n\x05\x05\0\x02\t\x01\x12\x03\x0e\x08.\n\x0c\n\
    \x05\x05\0\x02\t\x02\x12\x03\x0e12\n\x0b\n\x04\x05\0\x02\n\x12\x03\x0f\
    \x084\n\x0c\n\x05\x05\0\x02\n\x01\x12\x03\x0f\x08.\n\x0c\n\x05\x05\0\x02\
    \n\x02\x12\x03\x0f13\n\x0b\n\x04\x05\0\x02\x0b\x12\x03\x10\x084\n\x0c\n\
    \x05\x05\0\x02\x0b\x01\x12\x03\x10\x08.\n\x0c\n\x05\x05\0\x02\x0b\x02\
    \x12\x03\x1013\n\x0b\n\x04\x05\0\x02\x0c\x12\x03\x11\x084\n\x0c\n\x05\
    \x05\0\x02\x0c\x01\x12\x03\x11\x08.\n\x0c\n\x05\x05\0\x02\x0c\x02\x12\
    \x03\x1113\n\x0b\n\x04\x05\0\x02\r\x12\x03\x12\x08'\n\x0c\n\x05\x05\0\
    \x02\r\x01\x12\x03\x12\x08!\n\x0c\n\x05\x05\0\x02\r\x02\x12\x03\x12$&\n\
    \x0b\n\x04\x05\0\x02\x0e\x12\x03\x13\x089\n\x0c\n\x05\x05\0\x02\x0e\x01\
    \x12\x03\x13\x083\n\x0c\n\x05\x05\0\x02\x0e\x02\x12\x03\x1368\n\x0b\n\
    \x04\x05\0\x02\x0f\x12\x03\x14\x087\n\x0c\n\x05\x05\0\x02\x0f\x01\x12\
    \x03\x14\x081\n\x0c\n\x05\x05\0\x02\x0f\x02\x12\x03\x1446\n\x0b\n\x04\
    \x05\0\x02\x10\x12\x03\x15\x08?\n\x0c\n\x05\x05\0\x02\x10\x01\x12\x03\
    \x15\x089\n\x0c\n\x05\x05\0\x02\x10\x02\x12\x03\x15<>\n\x0b\n\x04\x05\0\
    \x02\x11\x12\x03\x16\x08-\n\x0c\n\x05\x05\0\x02\x11\x01\x12\x03\x16\x08'\
    \n\x0c\n\x05\x05\0\x02\x11\x02\x12\x03\x16*,\n\x0b\n\x04\x05\0\x02\x12\
    \x12\x03\x17\x080\n\x0c\n\x05\x05\0\x02\x12\x01\x12\x03\x17\x08*\n\x0c\n\
    \x05\x05\0\x02\x12\x02\x12\x03\x17-/\n\x0b\n\x04\x05\0\x02\x13\x12\x03\
    \x18\x08+\n\x0c\n\x05\x05\0\x02\x13\x01\x12\x03\x18\x08%\n\x0c\n\x05\x05\
    \0\x02\x13\x02\x12\x03\x18(*\n\x0b\n\x04\x05\0\x02\x14\x12\x03\x19\x082\
    \n\x0c\n\x05\x05\0\x02\x14\x01\x12\x03\x19\x08,\n\x0c\n\x05\x05\0\x02\
    \x14\x02\x12\x03\x19/1\n\x0b\n\x04\x05\0\x02\x15\x12\x03\x1a\x08.\n\x0c\
    \n\x05\x05\0\x02\x15\x01\x12\x03\x1a\x08(\n\x0c\n\x05\x05\0\x02\x15\x02\
    \x12\x03\x1a+-\n\x0b\n\x04\x05\0\x02\x16\x12\x03\x1b\x089\n\x0c\n\x05\
    \x05\0\x02\x16\x01\x12\x03\x1b\x083\n\x0c\n\x05\x05\0\x02\x16\x02\x12\
    \x03\x1b68\n\x0b\n\x04\x05\0\x02\x17\x12\x03\x1c\x087\n\x0c\n\x05\x05\0\
    \x02\x17\x01\x12\x03\x1c\x081\n\x0c\n\x05\x05\0\x02\x17\x02\x12\x03\x1c4\
    6\n\x0b\n\x04\x05\0\x02\x18\x12\x03\x1d\x083\n\x0c\n\x05\x05\0\x02\x18\
    \x01\x12\x03\x1d\x08-\n\x0c\n\x05\x05\0\x02\x18\x02\x12\x03\x1d02\n\x0b\
    \n\x04\x05\0\x02\x19\x12\x03\x1e\x087\n\x0c\n\x05\x05\0\x02\x19\x01\x12\
    \x03\x1e\x081\n\x0c\n\x05\x05\0\x02\x19\x02\x12\x03\x1e46\n\n\n\x02\x05\
    \x01\x12\x04!\0)\x01\n\n\n\x03\x05\x01\x01\x12\x03!\x05\x1d\n\x0b\n\x04\
    \x05\x01\x02\0\x12\x03\"\x087\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\"\
    \x081\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\"46\n\x0b\n\x04\x05\x01\x02\
    \x01\x12\x03#\x085\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03#\x08/\n\x0c\n\
    \x05\x05\x01\x02\x01\x02\x12\x03#24\n\x0b\n\x04\x05\x01\x02\x02\x12\x03$\
    \x085\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03$\x08/\n\x0c\n\x05\x05\x01\
    \x02\x02\x02\x12\x03$24\n\x0b\n\x04\x05\x01\x02\x03\x12\x03%\x080\n\x0c\
    \n\x05\x05\x01\x02\x03\x01\x12\x03%\x08*\n\x0c\n\x05\x05\x01\x02\x03\x02\
    \x12\x03%-/\n\x0b\n\x04\x05\x01\x02\x04\x12\x03&\x087\n\x0c\n\x05\x05\
    \x01\x02\x04\x01\x12\x03&\x081\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03&4\
    6\n\x0b\n\x04\x05\x01\x02\x05\x12\x03'\x083\n\x0c\n\x05\x05\x01\x02\x05\
    \x01\x12\x03'\x08-\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\x03'02\n\x0b\n\
    \x04\x05\x01\x02\x06\x12\x03(\x08,\n\x0c\n\x05\x05\x01\x02\x06\x01\x12\
    \x03(\x08&\n\x0c\n\x05\x05\x01\x02\x06\x02\x12\x03()+\n\n\n\x02\x04\0\
    \x12\x04+\0<\x01\n\n\n\x03\x04\0\x01\x12\x03+\x08(\n\x0c\n\x04\x04\0\x03\
    \0\x12\x04,\x080\t\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03,\x10\x1e\n\r\n\
    \x06\x04\0\x03\0\x02\0\x12\x03-\x104\n\x0e\n\x07\x04\0\x03\0\x02\0\x04\
    \x12\x03-\x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03-\x19\x20\n\
    \x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03-!/\n\x0e\n\x07\x04\0\x03\0\x02\
    \0\x03\x12\x03-23\n\r\n\x06\x04\0\x03\0\x02\x01\x12\x03.\x10*\n\x0e\n\
    \x07\x04\0\x03\0\x02\x01\x04\x12\x03.\x10\x18\n\x0e\n\x07\x04\0\x03\0\
    \x02\x01\x05\x12\x03.\x19\x1f\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\
    \x03.\x20%\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03.()\n\r\n\x06\x04\
    \0\x03\0\x02\x02\x12\x03/\x10,\n\x0e\n\x07\x04\0\x03\0\x02\x02\x04\x12\
    \x03/\x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\x02\x05\x12\x03/\x19\x1f\n\x0e\
    \n\x07\x04\0\x03\0\x02\x02\x01\x12\x03/\x20'\n\x0e\n\x07\x04\0\x03\0\x02\
    \x02\x03\x12\x03/*+\n\x0b\n\x04\x04\0\x02\0\x12\x032\x08.\n\x0c\n\x05\
    \x04\0\x02\0\x04\x12\x032\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x032\
    \x11\x18\n\x0c\n\x05\x04\0\x02\0\x01\x12\x032\x19)\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x032,-\n\x0b\n\x04\x04\0\x02\x01\x12\x033\x08D\n\x0c\n\x05\
    \x04\0\x02\x01\x04\x12\x033\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x033\x11\x18\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x033\x19/\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03323\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x0334C\n\
    \r\n\x06\x04\0\x02\x01\x08\x02\x12\x0335B\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x034\x08<\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x034\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x034\x11\x17\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x034\x18'\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x034*+\n\x0c\n\x05\x04\0\
    \x02\x02\x08\x12\x034,;\n\r\n\x06\x04\0\x02\x02\x08\x02\x12\x034-:\n\x0b\
    \n\x04\x04\0\x02\x03\x12\x035\x08,\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\
    5\x08\x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x035\x11\x18\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x035\x19'\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x035*+\n\
    \x0b\n\x04\x04\0\x02\x04\x12\x036\x08)\n\x0c\n\x05\x04\0\x02\x04\x04\x12\
    \x036\x08\x10\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x036\x11\x18\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x036\x19$\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x036'\
    (\n\x0b\n\x04\x04\0\x02\x05\x12\x037\x08'\n\x0c\n\x05\x04\0\x02\x05\x04\
    \x12\x037\x08\x10\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x037\x11\x18\n\x0c\n\
    \x05\x04\0\x02\x05\x01\x12\x037\x19\"\n\x0c\n\x05\x04\0\x02\x05\x03\x12\
    \x037%&\n\x0b\n\x04\x04\0\x02\x06\x12\x038\x083\n\x0c\n\x05\x04\0\x02\
    \x06\x04\x12\x038\x08\x10\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x038\x11\x17\
    \n\x0c\n\x05\x04\0\x02\x06\x01\x12\x038\x18.\n\x0c\n\x05\x04\0\x02\x06\
    \x03\x12\x03812\n\x0b\n\x04\x04\0\x02\x07\x12\x039\x08+\n\x0c\n\x05\x04\
    \0\x02\x07\x04\x12\x039\x08\x10\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x039\
    \x11\x18\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x039\x19&\n\x0c\n\x05\x04\0\
    \x02\x07\x03\x12\x039)*\n\x0b\n\x04\x04\0\x02\x08\x12\x03:\x08:\n\x0c\n\
    \x05\x04\0\x02\x08\x04\x12\x03:\x08\x10\n\x0c\n\x05\x04\0\x02\x08\x05\
    \x12\x03:\x11\x17\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03:\x185\n\x0c\n\
    \x05\x04\0\x02\x08\x03\x12\x03:89\n\x0b\n\x04\x04\0\x02\t\x12\x03;\x08X\
    \n\x0c\n\x05\x04\0\x02\t\x04\x12\x03;\x08\x10\n\x0c\n\x05\x04\0\x02\t\
    \x06\x12\x03;\x11A\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03;BR\n\x0c\n\x05\
    \x04\0\x02\t\x03\x12\x03;UW\n\n\n\x02\x04\x01\x12\x04>\0H\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03>\x08'\n\x0b\n\x04\x04\x01\x02\0\x12\x03?\x082\n\x0c\
    \n\x05\x04\x01\x02\0\x04\x12\x03?\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03?\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03?\x18-\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03?01\n\x0b\n\x04\x04\x01\x02\x01\x12\x03@\
    \x08-\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03@\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\x01\x05\x12\x03@\x11\x18\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\
    \x03@\x19(\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03@+,\n\x0b\n\x04\x04\
    \x01\x02\x02\x12\x03A\x08.\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03A\x08\
    \x10\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03A\x11\x18\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03A\x19)\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03A,\
    -\n\x0b\n\x04\x04\x01\x02\x03\x12\x03B\x08.\n\x0c\n\x05\x04\x01\x02\x03\
    \x04\x12\x03B\x08\x10\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03B\x11\x18\n\
    \x0c\n\x05\x04\x01\x02\x03\x01\x12\x03B\x19)\n\x0c\n\x05\x04\x01\x02\x03\
    \x03\x12\x03B,-\n\x0b\n\x04\x04\x01\x02\x04\x12\x03C\x086\n\x0c\n\x05\
    \x04\x01\x02\x04\x04\x12\x03C\x08\x10\n\x0c\n\x05\x04\x01\x02\x04\x05\
    \x12\x03C\x11\x17\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03C\x181\n\x0c\n\
    \x05\x04\x01\x02\x04\x03\x12\x03C45\n\x0b\n\x04\x04\x01\x02\x05\x12\x03D\
    \x08.\n\x0c\n\x05\x04\x01\x02\x05\x04\x12\x03D\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\x05\x05\x12\x03D\x11\x17\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\
    \x03D\x18)\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03D,-\n\x0b\n\x04\x04\
    \x01\x02\x06\x12\x03E\x08+\n\x0c\n\x05\x04\x01\x02\x06\x04\x12\x03E\x08\
    \x10\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x03E\x11\x17\n\x0c\n\x05\x04\
    \x01\x02\x06\x01\x12\x03E\x18&\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03E)\
    *\n\x0b\n\x04\x04\x01\x02\x07\x12\x03F\x08-\n\x0c\n\x05\x04\x01\x02\x07\
    \x04\x12\x03F\x08\x10\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x03F\x11\x17\n\
    \x0c\n\x05\x04\x01\x02\x07\x01\x12\x03F\x18(\n\x0c\n\x05\x04\x01\x02\x07\
    \x03\x12\x03F+,\n\x0b\n\x04\x04\x01\x02\x08\x12\x03G\x08+\n\x0c\n\x05\
    \x04\x01\x02\x08\x04\x12\x03G\x08\x10\n\x0c\n\x05\x04\x01\x02\x08\x05\
    \x12\x03G\x11\x18\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03G\x19&\n\x0c\n\
    \x05\x04\x01\x02\x08\x03\x12\x03G)*\n\n\n\x02\x04\x02\x12\x04J\0P\x01\n\
    \n\n\x03\x04\x02\x01\x12\x03J\x08)\n\x0b\n\x04\x04\x02\x02\0\x12\x03K\
    \x08/\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03K\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03K\x11\x18\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03K\x19*\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03K-.\n\x0b\n\x04\x04\x02\x02\x01\
    \x12\x03L\x08*\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03L\x08\x10\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03L\x11\x18\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03L\x19%\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03L()\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x03M\x08'\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\
    \x03M\x08\x10\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03M\x11\x18\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03M\x19\"\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03M%&\n\x0b\n\x04\x04\x02\x02\x03\x12\x03N\x08)\n\x0c\n\x05\x04\
    \x02\x02\x03\x04\x12\x03N\x08\x10\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\
    \x03N\x11\x18\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03N\x19$\n\x0c\n\x05\
    \x04\x02\x02\x03\x03\x12\x03N'(\n\x0b\n\x04\x04\x02\x02\x04\x12\x03O\x08\
    &\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03O\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\x04\x05\x12\x03O\x11\x18\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03O\
    \x19!\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03O$%\n\n\n\x02\x04\x03\x12\
    \x04R\0\\\x01\n\n\n\x03\x04\x03\x01\x12\x03R\x08)\n\x0c\n\x04\x04\x03\
    \x04\0\x12\x04S\x08V\t\n\x0c\n\x05\x04\x03\x04\0\x01\x12\x03S\r\x15\n\r\
    \n\x06\x04\x03\x04\0\x02\0\x12\x03T\x10\x1c\n\x0e\n\x07\x04\x03\x04\0\
    \x02\0\x01\x12\x03T\x10\x17\n\x0e\n\x07\x04\x03\x04\0\x02\0\x02\x12\x03T\
    \x1a\x1b\n\r\n\x06\x04\x03\x04\0\x02\x01\x12\x03U\x10\x1f\n\x0e\n\x07\
    \x04\x03\x04\0\x02\x01\x01\x12\x03U\x10\x1a\n\x0e\n\x07\x04\x03\x04\0\
    \x02\x01\x02\x12\x03U\x1d\x1e\n\x0b\n\x04\x04\x03\x02\0\x12\x03X\x08^\n\
    \x0c\n\x05\x04\x03\x02\0\x04\x12\x03X\x08\x10\n\x0c\n\x05\x04\x03\x02\0\
    \x06\x12\x03X\x11<\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03X=E\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03XHI\n\x0c\n\x05\x04\x03\x02\0\x08\x12\x03XJ]\n\
    \x0c\n\x05\x04\x03\x02\0\x07\x12\x03XU\\\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03Y\x08$\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03Y\x08\x10\n\x0c\n\x05\
    \x04\x03\x02\x01\x05\x12\x03Y\x11\x16\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03Y\x17\x1f\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03Y\"#\n\x0b\n\
    \x04\x04\x03\x02\x02\x12\x03Z\x08#\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\
    \x03Z\x08\x10\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03Z\x11\x18\n\x0c\n\
    \x05\x04\x03\x02\x02\x01\x12\x03Z\x19\x1e\n\x0c\n\x05\x04\x03\x02\x02\
    \x03\x12\x03Z!\"\n\x0b\n\x04\x04\x03\x02\x03\x12\x03[\x08!\n\x0c\n\x05\
    \x04\x03\x02\x03\x04\x12\x03[\x08\x10\n\x0c\n\x05\x04\x03\x02\x03\x05\
    \x12\x03[\x11\x15\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03[\x16\x1c\n\x0c\
    \n\x05\x04\x03\x02\x03\x03\x12\x03[\x1f\x20\n\n\n\x02\x04\x04\x12\x04^\0\
    a\x01\n\n\n\x03\x04\x04\x01\x12\x03^\x08/\n\x0b\n\x04\x04\x04\x02\0\x12\
    \x03_\x08\x20\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03_\x08\x10\n\x0c\n\x05\
    \x04\x04\x02\0\x05\x12\x03_\x11\x16\n\x0c\n\x05\x04\x04\x02\0\x01\x12\
    \x03_\x17\x1b\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03_\x1e\x1f\n\x0b\n\x04\
    \x04\x04\x02\x01\x12\x03`\x08%\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03`\
    \x08\x10\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03`\x11\x16\n\x0c\n\x05\
    \x04\x04\x02\x01\x01\x12\x03`\x17\x20\n\x0c\n\x05\x04\x04\x02\x01\x03\
    \x12\x03`#$\n\n\n\x02\x04\x05\x12\x04c\0k\x01\n\n\n\x03\x04\x05\x01\x12\
    \x03c\x081\n\x0b\n\x04\x04\x05\x02\0\x12\x03d\x08\"\n\x0c\n\x05\x04\x05\
    \x02\0\x04\x12\x03d\x08\x10\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03d\x11\
    \x16\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03d\x17\x1d\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03d\x20!\n\x0b\n\x04\x04\x05\x02\x01\x12\x03e\x08,\n\x0c\
    \n\x05\x04\x05\x02\x01\x04\x12\x03e\x08\x10\n\x0c\n\x05\x04\x05\x02\x01\
    \x05\x12\x03e\x11\x18\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03e\x19'\n\
    \x0c\n\x05\x04\x05\x02\x01\x03\x12\x03e*+\n\x0b\n\x04\x04\x05\x02\x02\
    \x12\x03f\x08'\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\x03f\x08\x10\n\x0c\n\
    \x05\x04\x05\x02\x02\x05\x12\x03f\x11\x18\n\x0c\n\x05\x04\x05\x02\x02\
    \x01\x12\x03f\x19\"\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03f%&\n\x0b\n\
    \x04\x04\x05\x02\x03\x12\x03g\x082\n\x0c\n\x05\x04\x05\x02\x03\x04\x12\
    \x03g\x08\x10\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\x03g\x11\x18\n\x0c\n\
    \x05\x04\x05\x02\x03\x01\x12\x03g\x19-\n\x0c\n\x05\x04\x05\x02\x03\x03\
    \x12\x03g01\n\x0b\n\x04\x04\x05\x02\x04\x12\x03h\x082\n\x0c\n\x05\x04\
    \x05\x02\x04\x04\x12\x03h\x08\x10\n\x0c\n\x05\x04\x05\x02\x04\x05\x12\
    \x03h\x11\x18\n\x0c\n\x05\x04\x05\x02\x04\x01\x12\x03h\x19-\n\x0c\n\x05\
    \x04\x05\x02\x04\x03\x12\x03h01\n\x0b\n\x04\x04\x05\x02\x05\x12\x03i\x08\
    3\n\x0c\n\x05\x04\x05\x02\x05\x04\x12\x03i\x08\x10\n\x0c\n\x05\x04\x05\
    \x02\x05\x05\x12\x03i\x11\x17\n\x0c\n\x05\x04\x05\x02\x05\x01\x12\x03i\
    \x18.\n\x0c\n\x05\x04\x05\x02\x05\x03\x12\x03i12\n\x0b\n\x04\x04\x05\x02\
    \x06\x12\x03j\x08-\n\x0c\n\x05\x04\x05\x02\x06\x04\x12\x03j\x08\x10\n\
    \x0c\n\x05\x04\x05\x02\x06\x05\x12\x03j\x11\x17\n\x0c\n\x05\x04\x05\x02\
    \x06\x01\x12\x03j\x18(\n\x0c\n\x05\x04\x05\x02\x06\x03\x12\x03j+,\n\n\n\
    \x02\x04\x06\x12\x04m\0s\x01\n\n\n\x03\x04\x06\x01\x12\x03m\x085\n\x0b\n\
    \x04\x04\x06\x02\0\x12\x03n\x08+\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03n\
    \x08\x10\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03n\x11\x18\n\x0c\n\x05\x04\
    \x06\x02\0\x01\x12\x03n\x19&\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03n)*\n\
    \x0b\n\x04\x04\x06\x02\x01\x12\x03o\x081\n\x0c\n\x05\x04\x06\x02\x01\x04\
    \x12\x03o\x08\x10\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03o\x11\x18\n\x0c\
    \n\x05\x04\x06\x02\x01\x01\x12\x03o\x19,\n\x0c\n\x05\x04\x06\x02\x01\x03\
    \x12\x03o/0\n\x0b\n\x04\x04\x06\x02\x02\x12\x03p\x083\n\x0c\n\x05\x04\
    \x06\x02\x02\x04\x12\x03p\x08\x10\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\
    \x03p\x11\x17\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03p\x18.\n\x0c\n\x05\
    \x04\x06\x02\x02\x03\x12\x03p12\n\x0b\n\x04\x04\x06\x02\x03\x12\x03q\x08\
    4\n\x0c\n\x05\x04\x06\x02\x03\x04\x12\x03q\x08\x10\n\x0c\n\x05\x04\x06\
    \x02\x03\x05\x12\x03q\x11\x17\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x03q\
    \x18/\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03q23\n\x0b\n\x04\x04\x06\x02\
    \x04\x12\x03r\x08(\n\x0c\n\x05\x04\x06\x02\x04\x04\x12\x03r\x08\x10\n\
    \x0c\n\x05\x04\x06\x02\x04\x05\x12\x03r\x11\x17\n\x0c\n\x05\x04\x06\x02\
    \x04\x01\x12\x03r\x18#\n\x0c\n\x05\x04\x06\x02\x04\x03\x12\x03r&'\n\n\n\
    \x02\x04\x07\x12\x04u\0|\x01\n\n\n\x03\x04\x07\x01\x12\x03u\x08/\n\x0b\n\
    \x04\x04\x07\x02\0\x12\x03v\x084\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03v\
    \x08\x10\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03v\x11\x17\n\x0c\n\x05\x04\
    \x07\x02\0\x01\x12\x03v\x18/\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03v23\n\
    \x0b\n\x04\x04\x07\x02\x01\x12\x03w\x08+\n\x0c\n\x05\x04\x07\x02\x01\x04\
    \x12\x03w\x08\x10\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03w\x11\x18\n\x0c\
    \n\x05\x04\x07\x02\x01\x01\x12\x03w\x19&\n\x0c\n\x05\x04\x07\x02\x01\x03\
    \x12\x03w)*\n\x0b\n\x04\x04\x07\x02\x02\x12\x03x\x08,\n\x0c\n\x05\x04\
    \x07\x02\x02\x04\x12\x03x\x08\x10\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\
    \x03x\x11\x18\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03x\x19'\n\x0c\n\x05\
    \x04\x07\x02\x02\x03\x12\x03x*+\n\x0b\n\x04\x04\x07\x02\x03\x12\x03y\x08\
    )\n\x0c\n\x05\x04\x07\x02\x03\x04\x12\x03y\x08\x10\n\x0c\n\x05\x04\x07\
    \x02\x03\x05\x12\x03y\x11\x18\n\x0c\n\x05\x04\x07\x02\x03\x01\x12\x03y\
    \x19$\n\x0c\n\x05\x04\x07\x02\x03\x03\x12\x03y'(\n\x0b\n\x04\x04\x07\x02\
    \x04\x12\x03z\x08'\n\x0c\n\x05\x04\x07\x02\x04\x04\x12\x03z\x08\x10\n\
    \x0c\n\x05\x04\x07\x02\x04\x05\x12\x03z\x11\x18\n\x0c\n\x05\x04\x07\x02\
    \x04\x01\x12\x03z\x19\"\n\x0c\n\x05\x04\x07\x02\x04\x03\x12\x03z%&\n\x0b\
    \n\x04\x04\x07\x02\x05\x12\x03{\x083\n\x0c\n\x05\x04\x07\x02\x05\x04\x12\
    \x03{\x08\x10\n\x0c\n\x05\x04\x07\x02\x05\x05\x12\x03{\x11\x17\n\x0c\n\
    \x05\x04\x07\x02\x05\x01\x12\x03{\x18.\n\x0c\n\x05\x04\x07\x02\x05\x03\
    \x12\x03{12\n\x0b\n\x02\x04\x08\x12\x05~\0\x83\x01\x01\n\n\n\x03\x04\x08\
    \x01\x12\x03~\x08/\n\x0b\n\x04\x04\x08\x02\0\x12\x03\x7f\x08-\n\x0c\n\
    \x05\x04\x08\x02\0\x04\x12\x03\x7f\x08\x10\n\x0c\n\x05\x04\x08\x02\0\x05\
    \x12\x03\x7f\x11\x17\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03\x7f\x18(\n\
    \x0c\n\x05\x04\x08\x02\0\x03\x12\x03\x7f+,\n\x0c\n\x04\x04\x08\x02\x01\
    \x12\x04\x80\x01\x082\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04\x80\x01\x08\
    \x10\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\x80\x01\x11\x18\n\r\n\x05\x04\
    \x08\x02\x01\x01\x12\x04\x80\x01\x19-\n\r\n\x05\x04\x08\x02\x01\x03\x12\
    \x04\x80\x0101\n\x0c\n\x04\x04\x08\x02\x02\x12\x04\x81\x01\x082\n\r\n\
    \x05\x04\x08\x02\x02\x04\x12\x04\x81\x01\x08\x10\n\r\n\x05\x04\x08\x02\
    \x02\x05\x12\x04\x81\x01\x11\x18\n\r\n\x05\x04\x08\x02\x02\x01\x12\x04\
    \x81\x01\x19-\n\r\n\x05\x04\x08\x02\x02\x03\x12\x04\x81\x0101\n\x0c\n\
    \x04\x04\x08\x02\x03\x12\x04\x82\x01\x08)\n\r\n\x05\x04\x08\x02\x03\x04\
    \x12\x04\x82\x01\x08\x10\n\r\n\x05\x04\x08\x02\x03\x05\x12\x04\x82\x01\
    \x11\x18\n\r\n\x05\x04\x08\x02\x03\x01\x12\x04\x82\x01\x19#\n\r\n\x05\
    \x04\x08\x02\x03\x03\x12\x04\x82\x01&(\n\x0c\n\x02\x04\t\x12\x06\x85\x01\
    \0\x88\x01\x01\n\x0b\n\x03\x04\t\x01\x12\x04\x85\x01\x08#\n\x0c\n\x04\
    \x04\t\x02\0\x12\x04\x86\x01\x08%\n\r\n\x05\x04\t\x02\0\x04\x12\x04\x86\
    \x01\x08\x10\n\r\n\x05\x04\t\x02\0\x05\x12\x04\x86\x01\x11\x17\n\r\n\x05\
    \x04\t\x02\0\x01\x12\x04\x86\x01\x18\x20\n\r\n\x05\x04\t\x02\0\x03\x12\
    \x04\x86\x01#$\n\x0c\n\x04\x04\t\x02\x01\x12\x04\x87\x01\x08!\n\r\n\x05\
    \x04\t\x02\x01\x04\x12\x04\x87\x01\x08\x10\n\r\n\x05\x04\t\x02\x01\x05\
    \x12\x04\x87\x01\x11\x17\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\x87\x01\x18\
    \x1c\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\x87\x01\x1f\x20\n\x0c\n\x02\x04\
    \n\x12\x06\x8a\x01\0\x97\x01\x01\n\x0b\n\x03\x04\n\x01\x12\x04\x8a\x01\
    \x08(\n\x0e\n\x04\x04\n\x03\0\x12\x06\x8b\x01\x08\x8e\x01\t\n\r\n\x05\
    \x04\n\x03\0\x01\x12\x04\x8b\x01\x10\x16\n\x0e\n\x06\x04\n\x03\0\x02\0\
    \x12\x04\x8c\x01\x10,\n\x0f\n\x07\x04\n\x03\0\x02\0\x04\x12\x04\x8c\x01\
    \x10\x18\n\x0f\n\x07\x04\n\x03\0\x02\0\x05\x12\x04\x8c\x01\x19\x1f\n\x0f\
    \n\x07\x04\n\x03\0\x02\0\x01\x12\x04\x8c\x01\x20'\n\x0f\n\x07\x04\n\x03\
    \0\x02\0\x03\x12\x04\x8c\x01*+\n\x0e\n\x06\x04\n\x03\0\x02\x01\x12\x04\
    \x8d\x01\x10,\n\x0f\n\x07\x04\n\x03\0\x02\x01\x04\x12\x04\x8d\x01\x10\
    \x18\n\x0f\n\x07\x04\n\x03\0\x02\x01\x05\x12\x04\x8d\x01\x19\x1f\n\x0f\n\
    \x07\x04\n\x03\0\x02\x01\x01\x12\x04\x8d\x01\x20'\n\x0f\n\x07\x04\n\x03\
    \0\x02\x01\x03\x12\x04\x8d\x01*+\n\x0e\n\x04\x04\n\x03\x01\x12\x06\x90\
    \x01\x08\x94\x01\t\n\r\n\x05\x04\n\x03\x01\x01\x12\x04\x90\x01\x10\x1a\n\
    \x0e\n\x06\x04\n\x03\x01\x02\0\x12\x04\x91\x01\x10)\n\x0f\n\x07\x04\n\
    \x03\x01\x02\0\x04\x12\x04\x91\x01\x10\x18\n\x0f\n\x07\x04\n\x03\x01\x02\
    \0\x05\x12\x04\x91\x01\x19\x1f\n\x0f\n\x07\x04\n\x03\x01\x02\0\x01\x12\
    \x04\x91\x01\x20$\n\x0f\n\x07\x04\n\x03\x01\x02\0\x03\x12\x04\x91\x01'(\
    \n\x0e\n\x06\x04\n\x03\x01\x02\x01\x12\x04\x92\x01\x10T\n\x0f\n\x07\x04\
    \n\x03\x01\x02\x01\x04\x12\x04\x92\x01\x10\x18\n\x0f\n\x07\x04\n\x03\x01\
    \x02\x01\x06\x12\x04\x92\x01\x19A\n\x0f\n\x07\x04\n\x03\x01\x02\x01\x01\
    \x12\x04\x92\x01BO\n\x0f\n\x07\x04\n\x03\x01\x02\x01\x03\x12\x04\x92\x01\
    RS\n\x0e\n\x06\x04\n\x03\x01\x02\x02\x12\x04\x93\x01\x10S\n\x0f\n\x07\
    \x04\n\x03\x01\x02\x02\x04\x12\x04\x93\x01\x10\x18\n\x0f\n\x07\x04\n\x03\
    \x01\x02\x02\x06\x12\x04\x93\x01\x19A\n\x0f\n\x07\x04\n\x03\x01\x02\x02\
    \x01\x12\x04\x93\x01BN\n\x0f\n\x07\x04\n\x03\x01\x02\x02\x03\x12\x04\x93\
    \x01QR\n\x0c\n\x04\x04\n\x02\0\x12\x04\x96\x01\x08O\n\r\n\x05\x04\n\x02\
    \0\x04\x12\x04\x96\x01\x08\x10\n\r\n\x05\x04\n\x02\0\x06\x12\x04\x96\x01\
    \x11=\n\r\n\x05\x04\n\x02\0\x01\x12\x04\x96\x01>J\n\r\n\x05\x04\n\x02\0\
    \x03\x12\x04\x96\x01MN\n\x0c\n\x02\x04\x0b\x12\x06\x99\x01\0\xa2\x01\x01\
    \n\x0b\n\x03\x04\x0b\x01\x12\x04\x99\x01\x08/\n\x0c\n\x04\x04\x0b\x02\0\
    \x12\x04\x9a\x01\x084\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04\x9a\x01\x08\
    \x10\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\x9a\x01\x11\x17\n\r\n\x05\x04\
    \x0b\x02\0\x01\x12\x04\x9a\x01\x18/\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\
    \x9a\x0123\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\x9b\x01\x08.\n\r\n\x05\
    \x04\x0b\x02\x01\x04\x12\x04\x9b\x01\x08\x10\n\r\n\x05\x04\x0b\x02\x01\
    \x05\x12\x04\x9b\x01\x11\x17\n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\x9b\
    \x01\x18)\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\x9b\x01,-\n\x0c\n\x04\
    \x04\x0b\x02\x02\x12\x04\x9c\x01\x083\n\r\n\x05\x04\x0b\x02\x02\x04\x12\
    \x04\x9c\x01\x08\x10\n\r\n\x05\x04\x0b\x02\x02\x05\x12\x04\x9c\x01\x11\
    \x17\n\r\n\x05\x04\x0b\x02\x02\x01\x12\x04\x9c\x01\x18.\n\r\n\x05\x04\
    \x0b\x02\x02\x03\x12\x04\x9c\x0112\n\x0c\n\x04\x04\x0b\x02\x03\x12\x04\
    \x9d\x01\x08-\n\r\n\x05\x04\x0b\x02\x03\x04\x12\x04\x9d\x01\x08\x10\n\r\
    \n\x05\x04\x0b\x02\x03\x05\x12\x04\x9d\x01\x11\x17\n\r\n\x05\x04\x0b\x02\
    \x03\x01\x12\x04\x9d\x01\x18(\n\r\n\x05\x04\x0b\x02\x03\x03\x12\x04\x9d\
    \x01+,\n\x0c\n\x04\x04\x0b\x02\x04\x12\x04\x9e\x01\x08$\n\r\n\x05\x04\
    \x0b\x02\x04\x04\x12\x04\x9e\x01\x08\x10\n\r\n\x05\x04\x0b\x02\x04\x05\
    \x12\x04\x9e\x01\x11\x17\n\r\n\x05\x04\x0b\x02\x04\x01\x12\x04\x9e\x01\
    \x18\x1f\n\r\n\x05\x04\x0b\x02\x04\x03\x12\x04\x9e\x01\"#\n\x0c\n\x04\
    \x04\x0b\x02\x05\x12\x04\x9f\x01\x080\n\r\n\x05\x04\x0b\x02\x05\x04\x12\
    \x04\x9f\x01\x08\x10\n\r\n\x05\x04\x0b\x02\x05\x05\x12\x04\x9f\x01\x11\
    \x17\n\r\n\x05\x04\x0b\x02\x05\x01\x12\x04\x9f\x01\x18+\n\r\n\x05\x04\
    \x0b\x02\x05\x03\x12\x04\x9f\x01./\n\x0c\n\x04\x04\x0b\x02\x06\x12\x04\
    \xa0\x01\x087\n\r\n\x05\x04\x0b\x02\x06\x04\x12\x04\xa0\x01\x08\x10\n\r\
    \n\x05\x04\x0b\x02\x06\x05\x12\x04\xa0\x01\x11\x17\n\r\n\x05\x04\x0b\x02\
    \x06\x01\x12\x04\xa0\x01\x182\n\r\n\x05\x04\x0b\x02\x06\x03\x12\x04\xa0\
    \x0156\n\x0c\n\x04\x04\x0b\x02\x07\x12\x04\xa1\x01\x08-\n\r\n\x05\x04\
    \x0b\x02\x07\x04\x12\x04\xa1\x01\x08\x10\n\r\n\x05\x04\x0b\x02\x07\x05\
    \x12\x04\xa1\x01\x11\x17\n\r\n\x05\x04\x0b\x02\x07\x01\x12\x04\xa1\x01\
    \x18(\n\r\n\x05\x04\x0b\x02\x07\x03\x12\x04\xa1\x01+,\n\x0c\n\x02\x04\
    \x0c\x12\x06\xa4\x01\0\xeb\x01\x01\n\x0b\n\x03\x04\x0c\x01\x12\x04\xa4\
    \x01\x08*\n\x0c\n\x04\x04\x0c\x02\0\x12\x04\xa5\x01\x08)\n\r\n\x05\x04\
    \x0c\x02\0\x04\x12\x04\xa5\x01\x08\x10\n\r\n\x05\x04\x0c\x02\0\x05\x12\
    \x04\xa5\x01\x11\x17\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xa5\x01\x18$\n\
    \r\n\x05\x04\x0c\x02\0\x03\x12\x04\xa5\x01'(\n\x0c\n\x04\x04\x0c\x02\x01\
    \x12\x04\xa6\x01\x08$\n\r\n\x05\x04\x0c\x02\x01\x04\x12\x04\xa6\x01\x08\
    \x10\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xa6\x01\x11\x17\n\r\n\x05\x04\
    \x0c\x02\x01\x01\x12\x04\xa6\x01\x18\x1f\n\r\n\x05\x04\x0c\x02\x01\x03\
    \x12\x04\xa6\x01\"#\n\x0c\n\x04\x04\x0c\x02\x02\x12\x04\xa7\x01\x08)\n\r\
    \n\x05\x04\x0c\x02\x02\x04\x12\x04\xa7\x01\x08\x10\n\r\n\x05\x04\x0c\x02\
    \x02\x05\x12\x04\xa7\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x02\x01\x12\x04\
    \xa7\x01\x18$\n\r\n\x05\x04\x0c\x02\x02\x03\x12\x04\xa7\x01'(\n\x0c\n\
    \x04\x04\x0c\x02\x03\x12\x04\xa8\x01\x08$\n\r\n\x05\x04\x0c\x02\x03\x04\
    \x12\x04\xa8\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x03\x05\x12\x04\xa8\x01\
    \x11\x17\n\r\n\x05\x04\x0c\x02\x03\x01\x12\x04\xa8\x01\x18\x1f\n\r\n\x05\
    \x04\x0c\x02\x03\x03\x12\x04\xa8\x01\"#\n\x0c\n\x04\x04\x0c\x02\x04\x12\
    \x04\xa9\x01\x083\n\r\n\x05\x04\x0c\x02\x04\x04\x12\x04\xa9\x01\x08\x10\
    \n\r\n\x05\x04\x0c\x02\x04\x05\x12\x04\xa9\x01\x11\x17\n\r\n\x05\x04\x0c\
    \x02\x04\x01\x12\x04\xa9\x01\x18.\n\r\n\x05\x04\x0c\x02\x04\x03\x12\x04\
    \xa9\x0112\n\x0c\n\x04\x04\x0c\x02\x05\x12\x04\xaa\x01\x081\n\r\n\x05\
    \x04\x0c\x02\x05\x04\x12\x04\xaa\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x05\
    \x05\x12\x04\xaa\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x05\x01\x12\x04\xaa\
    \x01\x18,\n\r\n\x05\x04\x0c\x02\x05\x03\x12\x04\xaa\x01/0\n\x0c\n\x04\
    \x04\x0c\x02\x06\x12\x04\xab\x01\x086\n\r\n\x05\x04\x0c\x02\x06\x04\x12\
    \x04\xab\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x06\x05\x12\x04\xab\x01\x11\
    \x17\n\r\n\x05\x04\x0c\x02\x06\x01\x12\x04\xab\x01\x181\n\r\n\x05\x04\
    \x0c\x02\x06\x03\x12\x04\xab\x0145\n\x0c\n\x04\x04\x0c\x02\x07\x12\x04\
    \xac\x01\x084\n\r\n\x05\x04\x0c\x02\x07\x04\x12\x04\xac\x01\x08\x10\n\r\
    \n\x05\x04\x0c\x02\x07\x05\x12\x04\xac\x01\x11\x17\n\r\n\x05\x04\x0c\x02\
    \x07\x01\x12\x04\xac\x01\x18.\n\r\n\x05\x04\x0c\x02\x07\x03\x12\x04\xac\
    \x0113\n\x0c\n\x04\x04\x0c\x02\x08\x12\x04\xad\x01\x080\n\r\n\x05\x04\
    \x0c\x02\x08\x04\x12\x04\xad\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x08\x05\
    \x12\x04\xad\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x08\x01\x12\x04\xad\x01\
    \x18*\n\r\n\x05\x04\x0c\x02\x08\x03\x12\x04\xad\x01-/\n\x0c\n\x04\x04\
    \x0c\x02\t\x12\x04\xae\x01\x083\n\r\n\x05\x04\x0c\x02\t\x04\x12\x04\xae\
    \x01\x08\x10\n\r\n\x05\x04\x0c\x02\t\x05\x12\x04\xae\x01\x11\x17\n\r\n\
    \x05\x04\x0c\x02\t\x01\x12\x04\xae\x01\x18-\n\r\n\x05\x04\x0c\x02\t\x03\
    \x12\x04\xae\x0102\n\x0c\n\x04\x04\x0c\x02\n\x12\x04\xaf\x01\x082\n\r\n\
    \x05\x04\x0c\x02\n\x04\x12\x04\xaf\x01\x08\x10\n\r\n\x05\x04\x0c\x02\n\
    \x05\x12\x04\xaf\x01\x11\x17\n\r\n\x05\x04\x0c\x02\n\x01\x12\x04\xaf\x01\
    \x18,\n\r\n\x05\x04\x0c\x02\n\x03\x12\x04\xaf\x01/1\n\x0c\n\x04\x04\x0c\
    \x02\x0b\x12\x04\xb0\x01\x082\n\r\n\x05\x04\x0c\x02\x0b\x04\x12\x04\xb0\
    \x01\x08\x10\n\r\n\x05\x04\x0c\x02\x0b\x05\x12\x04\xb0\x01\x11\x17\n\r\n\
    \x05\x04\x0c\x02\x0b\x01\x12\x04\xb0\x01\x18,\n\r\n\x05\x04\x0c\x02\x0b\
    \x03\x12\x04\xb0\x01/1\n\x0c\n\x04\x04\x0c\x02\x0c\x12\x04\xb1\x01\x082\
    \n\r\n\x05\x04\x0c\x02\x0c\x04\x12\x04\xb1\x01\x08\x10\n\r\n\x05\x04\x0c\
    \x02\x0c\x05\x12\x04\xb1\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x0c\x01\x12\
    \x04\xb1\x01\x18,\n\r\n\x05\x04\x0c\x02\x0c\x03\x12\x04\xb1\x01/1\n\x0c\
    \n\x04\x04\x0c\x02\r\x12\x04\xb2\x01\x082\n\r\n\x05\x04\x0c\x02\r\x04\
    \x12\x04\xb2\x01\x08\x10\n\r\n\x05\x04\x0c\x02\r\x05\x12\x04\xb2\x01\x11\
    \x17\n\r\n\x05\x04\x0c\x02\r\x01\x12\x04\xb2\x01\x18,\n\r\n\x05\x04\x0c\
    \x02\r\x03\x12\x04\xb2\x01/1\n\x0c\n\x04\x04\x0c\x02\x0e\x12\x04\xb3\x01\
    \x082\n\r\n\x05\x04\x0c\x02\x0e\x04\x12\x04\xb3\x01\x08\x10\n\r\n\x05\
    \x04\x0c\x02\x0e\x05\x12\x04\xb3\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x0e\
    \x01\x12\x04\xb3\x01\x18,\n\r\n\x05\x04\x0c\x02\x0e\x03\x12\x04\xb3\x01/\
    1\n\x0c\n\x04\x04\x0c\x02\x0f\x12\x04\xb4\x01\x082\n\r\n\x05\x04\x0c\x02\
    \x0f\x04\x12\x04\xb4\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x0f\x05\x12\x04\
    \xb4\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x0f\x01\x12\x04\xb4\x01\x18,\n\r\
    \n\x05\x04\x0c\x02\x0f\x03\x12\x04\xb4\x01/1\n\x0c\n\x04\x04\x0c\x02\x10\
    \x12\x04\xb5\x01\x081\n\r\n\x05\x04\x0c\x02\x10\x04\x12\x04\xb5\x01\x08\
    \x10\n\r\n\x05\x04\x0c\x02\x10\x05\x12\x04\xb5\x01\x11\x17\n\r\n\x05\x04\
    \x0c\x02\x10\x01\x12\x04\xb5\x01\x18+\n\r\n\x05\x04\x0c\x02\x10\x03\x12\
    \x04\xb5\x01.0\n\x0c\n\x04\x04\x0c\x02\x11\x12\x04\xb6\x01\x084\n\r\n\
    \x05\x04\x0c\x02\x11\x04\x12\x04\xb6\x01\x08\x10\n\r\n\x05\x04\x0c\x02\
    \x11\x05\x12\x04\xb6\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x11\x01\x12\x04\
    \xb6\x01\x18.\n\r\n\x05\x04\x0c\x02\x11\x03\x12\x04\xb6\x0113\n\x0c\n\
    \x04\x04\x0c\x02\x12\x12\x04\xb7\x01\x08/\n\r\n\x05\x04\x0c\x02\x12\x04\
    \x12\x04\xb7\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x12\x05\x12\x04\xb7\x01\
    \x11\x17\n\r\n\x05\x04\x0c\x02\x12\x01\x12\x04\xb7\x01\x18)\n\r\n\x05\
    \x04\x0c\x02\x12\x03\x12\x04\xb7\x01,.\n\x0c\n\x04\x04\x0c\x02\x13\x12\
    \x04\xb8\x01\x08/\n\r\n\x05\x04\x0c\x02\x13\x04\x12\x04\xb8\x01\x08\x10\
    \n\r\n\x05\x04\x0c\x02\x13\x05\x12\x04\xb8\x01\x11\x17\n\r\n\x05\x04\x0c\
    \x02\x13\x01\x12\x04\xb8\x01\x18)\n\r\n\x05\x04\x0c\x02\x13\x03\x12\x04\
    \xb8\x01,.\n\x0c\n\x04\x04\x0c\x02\x14\x12\x04\xb9\x01\x080\n\r\n\x05\
    \x04\x0c\x02\x14\x04\x12\x04\xb9\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x14\
    \x05\x12\x04\xb9\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x14\x01\x12\x04\xb9\
    \x01\x18*\n\r\n\x05\x04\x0c\x02\x14\x03\x12\x04\xb9\x01-/\n\x0c\n\x04\
    \x04\x0c\x02\x15\x12\x04\xba\x01\x080\n\r\n\x05\x04\x0c\x02\x15\x04\x12\
    \x04\xba\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x15\x05\x12\x04\xba\x01\x11\
    \x17\n\r\n\x05\x04\x0c\x02\x15\x01\x12\x04\xba\x01\x18*\n\r\n\x05\x04\
    \x0c\x02\x15\x03\x12\x04\xba\x01-/\n\x0c\n\x04\x04\x0c\x02\x16\x12\x04\
    \xbb\x01\x08/\n\r\n\x05\x04\x0c\x02\x16\x04\x12\x04\xbb\x01\x08\x10\n\r\
    \n\x05\x04\x0c\x02\x16\x05\x12\x04\xbb\x01\x11\x17\n\r\n\x05\x04\x0c\x02\
    \x16\x01\x12\x04\xbb\x01\x18)\n\r\n\x05\x04\x0c\x02\x16\x03\x12\x04\xbb\
    \x01,.\n\x0c\n\x04\x04\x0c\x02\x17\x12\x04\xbc\x01\x08/\n\r\n\x05\x04\
    \x0c\x02\x17\x04\x12\x04\xbc\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x17\x05\
    \x12\x04\xbc\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x17\x01\x12\x04\xbc\x01\
    \x18)\n\r\n\x05\x04\x0c\x02\x17\x03\x12\x04\xbc\x01,.\n\x0c\n\x04\x04\
    \x0c\x02\x18\x12\x04\xbd\x01\x08/\n\r\n\x05\x04\x0c\x02\x18\x04\x12\x04\
    \xbd\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x18\x05\x12\x04\xbd\x01\x11\x17\n\
    \r\n\x05\x04\x0c\x02\x18\x01\x12\x04\xbd\x01\x18)\n\r\n\x05\x04\x0c\x02\
    \x18\x03\x12\x04\xbd\x01,.\n\x0c\n\x04\x04\x0c\x02\x19\x12\x04\xbe\x01\
    \x080\n\r\n\x05\x04\x0c\x02\x19\x04\x12\x04\xbe\x01\x08\x10\n\r\n\x05\
    \x04\x0c\x02\x19\x05\x12\x04\xbe\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x19\
    \x01\x12\x04\xbe\x01\x18*\n\r\n\x05\x04\x0c\x02\x19\x03\x12\x04\xbe\x01-\
    /\n\x0c\n\x04\x04\x0c\x02\x1a\x12\x04\xbf\x01\x080\n\r\n\x05\x04\x0c\x02\
    \x1a\x04\x12\x04\xbf\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x1a\x05\x12\x04\
    \xbf\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x1a\x01\x12\x04\xbf\x01\x18*\n\r\
    \n\x05\x04\x0c\x02\x1a\x03\x12\x04\xbf\x01-/\n\x0c\n\x04\x04\x0c\x02\x1b\
    \x12\x04\xc0\x01\x080\n\r\n\x05\x04\x0c\x02\x1b\x04\x12\x04\xc0\x01\x08\
    \x10\n\r\n\x05\x04\x0c\x02\x1b\x05\x12\x04\xc0\x01\x11\x17\n\r\n\x05\x04\
    \x0c\x02\x1b\x01\x12\x04\xc0\x01\x18*\n\r\n\x05\x04\x0c\x02\x1b\x03\x12\
    \x04\xc0\x01-/\n\x0c\n\x04\x04\x0c\x02\x1c\x12\x04\xc1\x01\x080\n\r\n\
    \x05\x04\x0c\x02\x1c\x04\x12\x04\xc1\x01\x08\x10\n\r\n\x05\x04\x0c\x02\
    \x1c\x05\x12\x04\xc1\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x1c\x01\x12\x04\
    \xc1\x01\x18*\n\r\n\x05\x04\x0c\x02\x1c\x03\x12\x04\xc1\x01-/\n\x0c\n\
    \x04\x04\x0c\x02\x1d\x12\x04\xc2\x01\x080\n\r\n\x05\x04\x0c\x02\x1d\x04\
    \x12\x04\xc2\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x1d\x05\x12\x04\xc2\x01\
    \x11\x17\n\r\n\x05\x04\x0c\x02\x1d\x01\x12\x04\xc2\x01\x18*\n\r\n\x05\
    \x04\x0c\x02\x1d\x03\x12\x04\xc2\x01-/\n\x0c\n\x04\x04\x0c\x02\x1e\x12\
    \x04\xc3\x01\x080\n\r\n\x05\x04\x0c\x02\x1e\x04\x12\x04\xc3\x01\x08\x10\
    \n\r\n\x05\x04\x0c\x02\x1e\x05\x12\x04\xc3\x01\x11\x17\n\r\n\x05\x04\x0c\
    \x02\x1e\x01\x12\x04\xc3\x01\x18*\n\r\n\x05\x04\x0c\x02\x1e\x03\x12\x04\
    \xc3\x01-/\n\x0c\n\x04\x04\x0c\x02\x1f\x12\x04\xc4\x01\x08,\n\r\n\x05\
    \x04\x0c\x02\x1f\x04\x12\x04\xc4\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x1f\
    \x05\x12\x04\xc4\x01\x11\x17\n\r\n\x05\x04\x0c\x02\x1f\x01\x12\x04\xc4\
    \x01\x18&\n\r\n\x05\x04\x0c\x02\x1f\x03\x12\x04\xc4\x01)+\n\x0c\n\x04\
    \x04\x0c\x02\x20\x12\x04\xc5\x01\x08-\n\r\n\x05\x04\x0c\x02\x20\x04\x12\
    \x04\xc5\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x20\x05\x12\x04\xc5\x01\x11\
    \x17\n\r\n\x05\x04\x0c\x02\x20\x01\x12\x04\xc5\x01\x18'\n\r\n\x05\x04\
    \x0c\x02\x20\x03\x12\x04\xc5\x01*,\n\x0c\n\x04\x04\x0c\x02!\x12\x04\xc6\
    \x01\x08-\n\r\n\x05\x04\x0c\x02!\x04\x12\x04\xc6\x01\x08\x10\n\r\n\x05\
    \x04\x0c\x02!\x05\x12\x04\xc6\x01\x11\x17\n\r\n\x05\x04\x0c\x02!\x01\x12\
    \x04\xc6\x01\x18'\n\r\n\x05\x04\x0c\x02!\x03\x12\x04\xc6\x01*,\n\x0c\n\
    \x04\x04\x0c\x02\"\x12\x04\xc7\x01\x08-\n\r\n\x05\x04\x0c\x02\"\x04\x12\
    \x04\xc7\x01\x08\x10\n\r\n\x05\x04\x0c\x02\"\x05\x12\x04\xc7\x01\x11\x17\
    \n\r\n\x05\x04\x0c\x02\"\x01\x12\x04\xc7\x01\x18'\n\r\n\x05\x04\x0c\x02\
    \"\x03\x12\x04\xc7\x01*,\n\x0c\n\x04\x04\x0c\x02#\x12\x04\xc8\x01\x08-\n\
    \r\n\x05\x04\x0c\x02#\x04\x12\x04\xc8\x01\x08\x10\n\r\n\x05\x04\x0c\x02#\
    \x05\x12\x04\xc8\x01\x11\x17\n\r\n\x05\x04\x0c\x02#\x01\x12\x04\xc8\x01\
    \x18'\n\r\n\x05\x04\x0c\x02#\x03\x12\x04\xc8\x01*,\n\x0c\n\x04\x04\x0c\
    \x02$\x12\x04\xc9\x01\x089\n\r\n\x05\x04\x0c\x02$\x04\x12\x04\xc9\x01\
    \x08\x10\n\r\n\x05\x04\x0c\x02$\x05\x12\x04\xc9\x01\x11\x17\n\r\n\x05\
    \x04\x0c\x02$\x01\x12\x04\xc9\x01\x183\n\r\n\x05\x04\x0c\x02$\x03\x12\
    \x04\xc9\x0168\n\x0c\n\x04\x04\x0c\x02%\x12\x04\xca\x01\x080\n\r\n\x05\
    \x04\x0c\x02%\x04\x12\x04\xca\x01\x08\x10\n\r\n\x05\x04\x0c\x02%\x05\x12\
    \x04\xca\x01\x11\x17\n\r\n\x05\x04\x0c\x02%\x01\x12\x04\xca\x01\x18*\n\r\
    \n\x05\x04\x0c\x02%\x03\x12\x04\xca\x01-/\n\x0c\n\x04\x04\x0c\x02&\x12\
    \x04\xcb\x01\x080\n\r\n\x05\x04\x0c\x02&\x04\x12\x04\xcb\x01\x08\x10\n\r\
    \n\x05\x04\x0c\x02&\x05\x12\x04\xcb\x01\x11\x17\n\r\n\x05\x04\x0c\x02&\
    \x01\x12\x04\xcb\x01\x18*\n\r\n\x05\x04\x0c\x02&\x03\x12\x04\xcb\x01-/\n\
    \x0c\n\x04\x04\x0c\x02'\x12\x04\xcc\x01\x080\n\r\n\x05\x04\x0c\x02'\x04\
    \x12\x04\xcc\x01\x08\x10\n\r\n\x05\x04\x0c\x02'\x05\x12\x04\xcc\x01\x11\
    \x17\n\r\n\x05\x04\x0c\x02'\x01\x12\x04\xcc\x01\x18*\n\r\n\x05\x04\x0c\
    \x02'\x03\x12\x04\xcc\x01-/\n\x0c\n\x04\x04\x0c\x02(\x12\x04\xcd\x01\x08\
    1\n\r\n\x05\x04\x0c\x02(\x04\x12\x04\xcd\x01\x08\x10\n\r\n\x05\x04\x0c\
    \x02(\x05\x12\x04\xcd\x01\x11\x17\n\r\n\x05\x04\x0c\x02(\x01\x12\x04\xcd\
    \x01\x18+\n\r\n\x05\x04\x0c\x02(\x03\x12\x04\xcd\x01.0\n\x0c\n\x04\x04\
    \x0c\x02)\x12\x04\xce\x01\x081\n\r\n\x05\x04\x0c\x02)\x04\x12\x04\xce\
    \x01\x08\x10\n\r\n\x05\x04\x0c\x02)\x05\x12\x04\xce\x01\x11\x17\n\r\n\
    \x05\x04\x0c\x02)\x01\x12\x04\xce\x01\x18+\n\r\n\x05\x04\x0c\x02)\x03\
    \x12\x04\xce\x01.0\n\x0c\n\x04\x04\x0c\x02*\x12\x04\xcf\x01\x08)\n\r\n\
    \x05\x04\x0c\x02*\x04\x12\x04\xcf\x01\x08\x10\n\r\n\x05\x04\x0c\x02*\x05\
    \x12\x04\xcf\x01\x11\x17\n\r\n\x05\x04\x0c\x02*\x01\x12\x04\xcf\x01\x18#\
    \n\r\n\x05\x04\x0c\x02*\x03\x12\x04\xcf\x01&(\n\x0c\n\x04\x04\x0c\x02+\
    \x12\x04\xd0\x01\x082\n\r\n\x05\x04\x0c\x02+\x04\x12\x04\xd0\x01\x08\x10\
    \n\r\n\x05\x04\x0c\x02+\x05\x12\x04\xd0\x01\x11\x17\n\r\n\x05\x04\x0c\
    \x02+\x01\x12\x04\xd0\x01\x18,\n\r\n\x05\x04\x0c\x02+\x03\x12\x04\xd0\
    \x01/1\n\x0c\n\x04\x04\x0c\x02,\x12\x04\xd1\x01\x082\n\r\n\x05\x04\x0c\
    \x02,\x04\x12\x04\xd1\x01\x08\x10\n\r\n\x05\x04\x0c\x02,\x05\x12\x04\xd1\
    \x01\x11\x17\n\r\n\x05\x04\x0c\x02,\x01\x12\x04\xd1\x01\x18,\n\r\n\x05\
    \x04\x0c\x02,\x03\x12\x04\xd1\x01/1\n\x0c\n\x04\x04\x0c\x02-\x12\x04\xd2\
    \x01\x082\n\r\n\x05\x04\x0c\x02-\x04\x12\x04\xd2\x01\x08\x10\n\r\n\x05\
    \x04\x0c\x02-\x05\x12\x04\xd2\x01\x11\x17\n\r\n\x05\x04\x0c\x02-\x01\x12\
    \x04\xd2\x01\x18,\n\r\n\x05\x04\x0c\x02-\x03\x12\x04\xd2\x01/1\n\x0c\n\
    \x04\x04\x0c\x02.\x12\x04\xd3\x01\x083\n\r\n\x05\x04\x0c\x02.\x04\x12\
    \x04\xd3\x01\x08\x10\n\r\n\x05\x04\x0c\x02.\x05\x12\x04\xd3\x01\x11\x17\
    \n\r\n\x05\x04\x0c\x02.\x01\x12\x04\xd3\x01\x18-\n\r\n\x05\x04\x0c\x02.\
    \x03\x12\x04\xd3\x0102\n\x0c\n\x04\x04\x0c\x02/\x12\x04\xd4\x01\x083\n\r\
    \n\x05\x04\x0c\x02/\x04\x12\x04\xd4\x01\x08\x10\n\r\n\x05\x04\x0c\x02/\
    \x05\x12\x04\xd4\x01\x11\x17\n\r\n\x05\x04\x0c\x02/\x01\x12\x04\xd4\x01\
    \x18-\n\r\n\x05\x04\x0c\x02/\x03\x12\x04\xd4\x0102\n\x0c\n\x04\x04\x0c\
    \x020\x12\x04\xd5\x01\x083\n\r\n\x05\x04\x0c\x020\x04\x12\x04\xd5\x01\
    \x08\x10\n\r\n\x05\x04\x0c\x020\x05\x12\x04\xd5\x01\x11\x17\n\r\n\x05\
    \x04\x0c\x020\x01\x12\x04\xd5\x01\x18-\n\r\n\x05\x04\x0c\x020\x03\x12\
    \x04\xd5\x0102\n\x0c\n\x04\x04\x0c\x021\x12\x04\xd6\x01\x084\n\r\n\x05\
    \x04\x0c\x021\x04\x12\x04\xd6\x01\x08\x10\n\r\n\x05\x04\x0c\x021\x05\x12\
    \x04\xd6\x01\x11\x17\n\r\n\x05\x04\x0c\x021\x01\x12\x04\xd6\x01\x18.\n\r\
    \n\x05\x04\x0c\x021\x03\x12\x04\xd6\x0113\n\x0c\n\x04\x04\x0c\x022\x12\
    \x04\xd7\x01\x083\n\r\n\x05\x04\x0c\x022\x04\x12\x04\xd7\x01\x08\x10\n\r\
    \n\x05\x04\x0c\x022\x05\x12\x04\xd7\x01\x11\x17\n\r\n\x05\x04\x0c\x022\
    \x01\x12\x04\xd7\x01\x18-\n\r\n\x05\x04\x0c\x022\x03\x12\x04\xd7\x0102\n\
    \x0c\n\x04\x04\x0c\x023\x12\x04\xd8\x01\x08/\n\r\n\x05\x04\x0c\x023\x04\
    \x12\x04\xd8\x01\x08\x10\n\r\n\x05\x04\x0c\x023\x05\x12\x04\xd8\x01\x11\
    \x17\n\r\n\x05\x04\x0c\x023\x01\x12\x04\xd8\x01\x18)\n\r\n\x05\x04\x0c\
    \x023\x03\x12\x04\xd8\x01,.\n\x0c\n\x04\x04\x0c\x024\x12\x04\xd9\x01\x08\
    0\n\r\n\x05\x04\x0c\x024\x04\x12\x04\xd9\x01\x08\x10\n\r\n\x05\x04\x0c\
    \x024\x05\x12\x04\xd9\x01\x11\x17\n\r\n\x05\x04\x0c\x024\x01\x12\x04\xd9\
    \x01\x18*\n\r\n\x05\x04\x0c\x024\x03\x12\x04\xd9\x01-/\n\x0c\n\x04\x04\
    \x0c\x025\x12\x04\xda\x01\x080\n\r\n\x05\x04\x0c\x025\x04\x12\x04\xda\
    \x01\x08\x10\n\r\n\x05\x04\x0c\x025\x05\x12\x04\xda\x01\x11\x17\n\r\n\
    \x05\x04\x0c\x025\x01\x12\x04\xda\x01\x18*\n\r\n\x05\x04\x0c\x025\x03\
    \x12\x04\xda\x01-/\n\x0c\n\x04\x04\x0c\x026\x12\x04\xdb\x01\x080\n\r\n\
    \x05\x04\x0c\x026\x04\x12\x04\xdb\x01\x08\x10\n\r\n\x05\x04\x0c\x026\x05\
    \x12\x04\xdb\x01\x11\x17\n\r\n\x05\x04\x0c\x026\x01\x12\x04\xdb\x01\x18*\
    \n\r\n\x05\x04\x0c\x026\x03\x12\x04\xdb\x01-/\n\x0c\n\x04\x04\x0c\x027\
    \x12\x04\xdc\x01\x080\n\r\n\x05\x04\x0c\x027\x04\x12\x04\xdc\x01\x08\x10\
    \n\r\n\x05\x04\x0c\x027\x05\x12\x04\xdc\x01\x11\x17\n\r\n\x05\x04\x0c\
    \x027\x01\x12\x04\xdc\x01\x18*\n\r\n\x05\x04\x0c\x027\x03\x12\x04\xdc\
    \x01-/\n\x0c\n\x04\x04\x0c\x028\x12\x04\xdd\x01\x08)\n\r\n\x05\x04\x0c\
    \x028\x04\x12\x04\xdd\x01\x08\x10\n\r\n\x05\x04\x0c\x028\x05\x12\x04\xdd\
    \x01\x11\x17\n\r\n\x05\x04\x0c\x028\x01\x12\x04\xdd\x01\x18#\n\r\n\x05\
    \x04\x0c\x028\x03\x12\x04\xdd\x01&(\n\x0c\n\x04\x04\x0c\x029\x12\x04\xde\
    \x01\x082\n\r\n\x05\x04\x0c\x029\x04\x12\x04\xde\x01\x08\x10\n\r\n\x05\
    \x04\x0c\x029\x05\x12\x04\xde\x01\x11\x17\n\r\n\x05\x04\x0c\x029\x01\x12\
    \x04\xde\x01\x18,\n\r\n\x05\x04\x0c\x029\x03\x12\x04\xde\x01/1\n\x0c\n\
    \x04\x04\x0c\x02:\x12\x04\xdf\x01\x082\n\r\n\x05\x04\x0c\x02:\x04\x12\
    \x04\xdf\x01\x08\x10\n\r\n\x05\x04\x0c\x02:\x05\x12\x04\xdf\x01\x11\x17\
    \n\r\n\x05\x04\x0c\x02:\x01\x12\x04\xdf\x01\x18,\n\r\n\x05\x04\x0c\x02:\
    \x03\x12\x04\xdf\x01/1\n\x0c\n\x04\x04\x0c\x02;\x12\x04\xe0\x01\x082\n\r\
    \n\x05\x04\x0c\x02;\x04\x12\x04\xe0\x01\x08\x10\n\r\n\x05\x04\x0c\x02;\
    \x05\x12\x04\xe0\x01\x11\x17\n\r\n\x05\x04\x0c\x02;\x01\x12\x04\xe0\x01\
    \x18,\n\r\n\x05\x04\x0c\x02;\x03\x12\x04\xe0\x01/1\n\x0c\n\x04\x04\x0c\
    \x02<\x12\x04\xe1\x01\x083\n\r\n\x05\x04\x0c\x02<\x04\x12\x04\xe1\x01\
    \x08\x10\n\r\n\x05\x04\x0c\x02<\x05\x12\x04\xe1\x01\x11\x17\n\r\n\x05\
    \x04\x0c\x02<\x01\x12\x04\xe1\x01\x18-\n\r\n\x05\x04\x0c\x02<\x03\x12\
    \x04\xe1\x0102\n\x0c\n\x04\x04\x0c\x02=\x12\x04\xe2\x01\x083\n\r\n\x05\
    \x04\x0c\x02=\x04\x12\x04\xe2\x01\x08\x10\n\r\n\x05\x04\x0c\x02=\x05\x12\
    \x04\xe2\x01\x11\x17\n\r\n\x05\x04\x0c\x02=\x01\x12\x04\xe2\x01\x18-\n\r\
    \n\x05\x04\x0c\x02=\x03\x12\x04\xe2\x0102\n\x0c\n\x04\x04\x0c\x02>\x12\
    \x04\xe3\x01\x083\n\r\n\x05\x04\x0c\x02>\x04\x12\x04\xe3\x01\x08\x10\n\r\
    \n\x05\x04\x0c\x02>\x05\x12\x04\xe3\x01\x11\x17\n\r\n\x05\x04\x0c\x02>\
    \x01\x12\x04\xe3\x01\x18-\n\r\n\x05\x04\x0c\x02>\x03\x12\x04\xe3\x0102\n\
    \x0c\n\x04\x04\x0c\x02?\x12\x04\xe4\x01\x084\n\r\n\x05\x04\x0c\x02?\x04\
    \x12\x04\xe4\x01\x08\x10\n\r\n\x05\x04\x0c\x02?\x05\x12\x04\xe4\x01\x11\
    \x17\n\r\n\x05\x04\x0c\x02?\x01\x12\x04\xe4\x01\x18.\n\r\n\x05\x04\x0c\
    \x02?\x03\x12\x04\xe4\x0113\n\x0c\n\x04\x04\x0c\x02@\x12\x04\xe5\x01\x08\
    3\n\r\n\x05\x04\x0c\x02@\x04\x12\x04\xe5\x01\x08\x10\n\r\n\x05\x04\x0c\
    \x02@\x05\x12\x04\xe5\x01\x11\x17\n\r\n\x05\x04\x0c\x02@\x01\x12\x04\xe5\
    \x01\x18-\n\r\n\x05\x04\x0c\x02@\x03\x12\x04\xe5\x0102\n\x0c\n\x04\x04\
    \x0c\x02A\x12\x04\xe6\x01\x08/\n\r\n\x05\x04\x0c\x02A\x04\x12\x04\xe6\
    \x01\x08\x10\n\r\n\x05\x04\x0c\x02A\x05\x12\x04\xe6\x01\x11\x17\n\r\n\
    \x05\x04\x0c\x02A\x01\x12\x04\xe6\x01\x18)\n\r\n\x05\x04\x0c\x02A\x03\
    \x12\x04\xe6\x01,.\n\x0c\n\x04\x04\x0c\x02B\x12\x04\xe7\x01\x080\n\r\n\
    \x05\x04\x0c\x02B\x04\x12\x04\xe7\x01\x08\x10\n\r\n\x05\x04\x0c\x02B\x05\
    \x12\x04\xe7\x01\x11\x17\n\r\n\x05\x04\x0c\x02B\x01\x12\x04\xe7\x01\x18*\
    \n\r\n\x05\x04\x0c\x02B\x03\x12\x04\xe7\x01-/\n\x0c\n\x04\x04\x0c\x02C\
    \x12\x04\xe8\x01\x080\n\r\n\x05\x04\x0c\x02C\x04\x12\x04\xe8\x01\x08\x10\
    \n\r\n\x05\x04\x0c\x02C\x05\x12\x04\xe8\x01\x11\x17\n\r\n\x05\x04\x0c\
    \x02C\x01\x12\x04\xe8\x01\x18*\n\r\n\x05\x04\x0c\x02C\x03\x12\x04\xe8\
    \x01-/\n\x0c\n\x04\x04\x0c\x02D\x12\x04\xe9\x01\x080\n\r\n\x05\x04\x0c\
    \x02D\x04\x12\x04\xe9\x01\x08\x10\n\r\n\x05\x04\x0c\x02D\x05\x12\x04\xe9\
    \x01\x11\x17\n\r\n\x05\x04\x0c\x02D\x01\x12\x04\xe9\x01\x18*\n\r\n\x05\
    \x04\x0c\x02D\x03\x12\x04\xe9\x01-/\n\x0c\n\x04\x04\x0c\x02E\x12\x04\xea\
    \x01\x080\n\r\n\x05\x04\x0c\x02E\x04\x12\x04\xea\x01\x08\x10\n\r\n\x05\
    \x04\x0c\x02E\x05\x12\x04\xea\x01\x11\x17\n\r\n\x05\x04\x0c\x02E\x01\x12\
    \x04\xea\x01\x18*\n\r\n\x05\x04\x0c\x02E\x03\x12\x04\xea\x01-/\n\x0c\n\
    \x02\x04\r\x12\x06\xed\x01\0\xf0\x01\x01\n\x0b\n\x03\x04\r\x01\x12\x04\
    \xed\x01\x08*\n\x0c\n\x04\x04\r\x02\0\x12\x04\xee\x01\x08L\n\r\n\x05\x04\
    \r\x02\0\x04\x12\x04\xee\x01\x08\x10\n\r\n\x05\x04\r\x02\0\x06\x12\x04\
    \xee\x01\x119\n\r\n\x05\x04\r\x02\0\x01\x12\x04\xee\x01:G\n\r\n\x05\x04\
    \r\x02\0\x03\x12\x04\xee\x01JK\n\x0c\n\x04\x04\r\x02\x01\x12\x04\xef\x01\
    \x08B\n\r\n\x05\x04\r\x02\x01\x04\x12\x04\xef\x01\x08\x10\n\r\n\x05\x04\
    \r\x02\x01\x06\x12\x04\xef\x01\x114\n\r\n\x05\x04\r\x02\x01\x01\x12\x04\
    \xef\x015=\n\r\n\x05\x04\r\x02\x01\x03\x12\x04\xef\x01@A\n\x0c\n\x02\x04\
    \x0e\x12\x06\xf2\x01\0\x82\x02\x01\n\x0b\n\x03\x04\x0e\x01\x12\x04\xf2\
    \x01\x086\n\x0e\n\x04\x04\x0e\x04\0\x12\x06\xf3\x01\x08\xf7\x01\t\n\r\n\
    \x05\x04\x0e\x04\0\x01\x12\x04\xf3\x01\r\x12\n\x0e\n\x06\x04\x0e\x04\0\
    \x02\0\x12\x04\xf4\x01\x10&\n\x0f\n\x07\x04\x0e\x04\0\x02\0\x01\x12\x04\
    \xf4\x01\x10!\n\x0f\n\x07\x04\x0e\x04\0\x02\0\x02\x12\x04\xf4\x01$%\n\
    \x0e\n\x06\x04\x0e\x04\0\x02\x01\x12\x04\xf5\x01\x10$\n\x0f\n\x07\x04\
    \x0e\x04\0\x02\x01\x01\x12\x04\xf5\x01\x10\x1f\n\x0f\n\x07\x04\x0e\x04\0\
    \x02\x01\x02\x12\x04\xf5\x01\"#\n\x0e\n\x06\x04\x0e\x04\0\x02\x02\x12\
    \x04\xf6\x01\x10*\n\x0f\n\x07\x04\x0e\x04\0\x02\x02\x01\x12\x04\xf6\x01\
    \x10%\n\x0f\n\x07\x04\x0e\x04\0\x02\x02\x02\x12\x04\xf6\x01()\n\x0c\n\
    \x04\x04\x0e\x02\0\x12\x04\xf9\x01\x08=\n\r\n\x05\x04\x0e\x02\0\x04\x12\
    \x04\xf9\x01\x08\x10\n\r\n\x05\x04\x0e\x02\0\x06\x12\x04\xf9\x01\x114\n\
    \r\n\x05\x04\x0e\x02\0\x01\x12\x04\xf9\x0158\n\r\n\x05\x04\x0e\x02\0\x03\
    \x12\x04\xf9\x01;<\n\x0c\n\x04\x04\x0e\x02\x01\x12\x04\xfa\x01\x08=\n\r\
    \n\x05\x04\x0e\x02\x01\x04\x12\x04\xfa\x01\x08\x10\n\r\n\x05\x04\x0e\x02\
    \x01\x06\x12\x04\xfa\x01\x114\n\r\n\x05\x04\x0e\x02\x01\x01\x12\x04\xfa\
    \x0158\n\r\n\x05\x04\x0e\x02\x01\x03\x12\x04\xfa\x01;<\n\x0c\n\x04\x04\
    \x0e\x02\x02\x12\x04\xfb\x01\x085\n\r\n\x05\x04\x0e\x02\x02\x04\x12\x04\
    \xfb\x01\x08\x10\n\r\n\x05\x04\x0e\x02\x02\x05\x12\x04\xfb\x01\x11\x18\n\
    \r\n\x05\x04\x0e\x02\x02\x01\x12\x04\xfb\x01\x190\n\r\n\x05\x04\x0e\x02\
    \x02\x03\x12\x04\xfb\x0134\n\x0c\n\x04\x04\x0e\x02\x03\x12\x04\xfc\x01\
    \x08'\n\r\n\x05\x04\x0e\x02\x03\x04\x12\x04\xfc\x01\x08\x10\n\r\n\x05\
    \x04\x0e\x02\x03\x05\x12\x04\xfc\x01\x11\x18\n\r\n\x05\x04\x0e\x02\x03\
    \x01\x12\x04\xfc\x01\x19\"\n\r\n\x05\x04\x0e\x02\x03\x03\x12\x04\xfc\x01\
    %&\n\x0c\n\x04\x04\x0e\x02\x04\x12\x04\xfd\x01\x08%\n\r\n\x05\x04\x0e\
    \x02\x04\x04\x12\x04\xfd\x01\x08\x10\n\r\n\x05\x04\x0e\x02\x04\x05\x12\
    \x04\xfd\x01\x11\x18\n\r\n\x05\x04\x0e\x02\x04\x01\x12\x04\xfd\x01\x19\
    \x20\n\r\n\x05\x04\x0e\x02\x04\x03\x12\x04\xfd\x01#$\n\x0c\n\x04\x04\x0e\
    \x02\x05\x12\x04\xfe\x01\x08\"\n\r\n\x05\x04\x0e\x02\x05\x04\x12\x04\xfe\
    \x01\x08\x10\n\r\n\x05\x04\x0e\x02\x05\x05\x12\x04\xfe\x01\x11\x17\n\r\n\
    \x05\x04\x0e\x02\x05\x01\x12\x04\xfe\x01\x18\x1d\n\r\n\x05\x04\x0e\x02\
    \x05\x03\x12\x04\xfe\x01\x20!\n\x0c\n\x04\x04\x0e\x02\x06\x12\x04\xff\
    \x01\x082\n\r\n\x05\x04\x0e\x02\x06\x04\x12\x04\xff\x01\x08\x10\n\r\n\
    \x05\x04\x0e\x02\x06\x05\x12\x04\xff\x01\x11\x18\n\r\n\x05\x04\x0e\x02\
    \x06\x01\x12\x04\xff\x01\x19-\n\r\n\x05\x04\x0e\x02\x06\x03\x12\x04\xff\
    \x0101\n\x0c\n\x04\x04\x0e\x02\x07\x12\x04\x80\x02\x08(\n\r\n\x05\x04\
    \x0e\x02\x07\x04\x12\x04\x80\x02\x08\x10\n\r\n\x05\x04\x0e\x02\x07\x05\
    \x12\x04\x80\x02\x11\x17\n\r\n\x05\x04\x0e\x02\x07\x01\x12\x04\x80\x02\
    \x18#\n\r\n\x05\x04\x0e\x02\x07\x03\x12\x04\x80\x02&'\n\x0c\n\x04\x04\
    \x0e\x02\x08\x12\x04\x81\x02\x08)\n\r\n\x05\x04\x0e\x02\x08\x04\x12\x04\
    \x81\x02\x08\x10\n\r\n\x05\x04\x0e\x02\x08\x05\x12\x04\x81\x02\x11\x17\n\
    \r\n\x05\x04\x0e\x02\x08\x01\x12\x04\x81\x02\x18#\n\r\n\x05\x04\x0e\x02\
    \x08\x03\x12\x04\x81\x02&(\n\x0c\n\x02\x04\x0f\x12\x06\x84\x02\0\x9a\x02\
    \x01\n\x0b\n\x03\x04\x0f\x01\x12\x04\x84\x02\x086\n\x0e\n\x04\x04\x0f\
    \x04\0\x12\x06\x85\x02\x08\x89\x02\t\n\r\n\x05\x04\x0f\x04\0\x01\x12\x04\
    \x85\x02\r\x12\n\x0e\n\x06\x04\x0f\x04\0\x02\0\x12\x04\x86\x02\x10&\n\
    \x0f\n\x07\x04\x0f\x04\0\x02\0\x01\x12\x04\x86\x02\x10!\n\x0f\n\x07\x04\
    \x0f\x04\0\x02\0\x02\x12\x04\x86\x02$%\n\x0e\n\x06\x04\x0f\x04\0\x02\x01\
    \x12\x04\x87\x02\x10$\n\x0f\n\x07\x04\x0f\x04\0\x02\x01\x01\x12\x04\x87\
    \x02\x10\x1f\n\x0f\n\x07\x04\x0f\x04\0\x02\x01\x02\x12\x04\x87\x02\"#\n\
    \x0e\n\x06\x04\x0f\x04\0\x02\x02\x12\x04\x88\x02\x10*\n\x0f\n\x07\x04\
    \x0f\x04\0\x02\x02\x01\x12\x04\x88\x02\x10%\n\x0f\n\x07\x04\x0f\x04\0\
    \x02\x02\x02\x12\x04\x88\x02()\n\x0c\n\x04\x04\x0f\x02\0\x12\x04\x8b\x02\
    \x08=\n\r\n\x05\x04\x0f\x02\0\x04\x12\x04\x8b\x02\x08\x10\n\r\n\x05\x04\
    \x0f\x02\0\x06\x12\x04\x8b\x02\x114\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\
    \x8b\x0258\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\x8b\x02;<\n\x0c\n\x04\x04\
    \x0f\x02\x01\x12\x04\x8c\x02\x08=\n\r\n\x05\x04\x0f\x02\x01\x04\x12\x04\
    \x8c\x02\x08\x10\n\r\n\x05\x04\x0f\x02\x01\x06\x12\x04\x8c\x02\x114\n\r\
    \n\x05\x04\x0f\x02\x01\x01\x12\x04\x8c\x0258\n\r\n\x05\x04\x0f\x02\x01\
    \x03\x12\x04\x8c\x02;<\n\x0c\n\x04\x04\x0f\x02\x02\x12\x04\x8d\x02\x08A\
    \n\r\n\x05\x04\x0f\x02\x02\x04\x12\x04\x8d\x02\x08\x10\n\r\n\x05\x04\x0f\
    \x02\x02\x05\x12\x04\x8d\x02\x11\x18\n\r\n\x05\x04\x0f\x02\x02\x01\x12\
    \x04\x8d\x02\x19<\n\r\n\x05\x04\x0f\x02\x02\x03\x12\x04\x8d\x02?@\n\x0c\
    \n\x04\x04\x0f\x02\x03\x12\x04\x8e\x02\x08A\n\r\n\x05\x04\x0f\x02\x03\
    \x04\x12\x04\x8e\x02\x08\x10\n\r\n\x05\x04\x0f\x02\x03\x05\x12\x04\x8e\
    \x02\x11\x18\n\r\n\x05\x04\x0f\x02\x03\x01\x12\x04\x8e\x02\x19<\n\r\n\
    \x05\x04\x0f\x02\x03\x03\x12\x04\x8e\x02?@\n\x0c\n\x04\x04\x0f\x02\x04\
    \x12\x04\x8f\x02\x086\n\r\n\x05\x04\x0f\x02\x04\x04\x12\x04\x8f\x02\x08\
    \x10\n\r\n\x05\x04\x0f\x02\x04\x05\x12\x04\x8f\x02\x11\x17\n\r\n\x05\x04\
    \x0f\x02\x04\x01\x12\x04\x8f\x02\x181\n\r\n\x05\x04\x0f\x02\x04\x03\x12\
    \x04\x8f\x0245\n\x0c\n\x04\x04\x0f\x02\x05\x12\x04\x90\x02\x083\n\r\n\
    \x05\x04\x0f\x02\x05\x04\x12\x04\x90\x02\x08\x10\n\r\n\x05\x04\x0f\x02\
    \x05\x05\x12\x04\x90\x02\x11\x17\n\r\n\x05\x04\x0f\x02\x05\x01\x12\x04\
    \x90\x02\x18.\n\r\n\x05\x04\x0f\x02\x05\x03\x12\x04\x90\x0212\n\x0c\n\
    \x04\x04\x0f\x02\x06\x12\x04\x91\x02\x081\n\r\n\x05\x04\x0f\x02\x06\x04\
    \x12\x04\x91\x02\x08\x10\n\r\n\x05\x04\x0f\x02\x06\x05\x12\x04\x91\x02\
    \x11\x18\n\r\n\x05\x04\x0f\x02\x06\x01\x12\x04\x91\x02\x19+\n\r\n\x05\
    \x04\x0f\x02\x06\x03\x12\x04\x91\x02.0\n\x0c\n\x04\x04\x0f\x02\x07\x12\
    \x04\x92\x02\x082\n\r\n\x05\x04\x0f\x02\x07\x04\x12\x04\x92\x02\x08\x10\
    \n\r\n\x05\x04\x0f\x02\x07\x05\x12\x04\x92\x02\x11\x17\n\r\n\x05\x04\x0f\
    \x02\x07\x01\x12\x04\x92\x02\x18,\n\r\n\x05\x04\x0f\x02\x07\x03\x12\x04\
    \x92\x02/1\n\x0c\n\x04\x04\x0f\x02\x08\x12\x04\x93\x02\x08;\n\r\n\x05\
    \x04\x0f\x02\x08\x04\x12\x04\x93\x02\x08\x10\n\r\n\x05\x04\x0f\x02\x08\
    \x05\x12\x04\x93\x02\x11\x17\n\r\n\x05\x04\x0f\x02\x08\x01\x12\x04\x93\
    \x02\x185\n\r\n\x05\x04\x0f\x02\x08\x03\x12\x04\x93\x028:\n\x0c\n\x04\
    \x04\x0f\x02\t\x12\x04\x94\x02\x08(\n\r\n\x05\x04\x0f\x02\t\x04\x12\x04\
    \x94\x02\x08\x10\n\r\n\x05\x04\x0f\x02\t\x05\x12\x04\x94\x02\x11\x18\n\r\
    \n\x05\x04\x0f\x02\t\x01\x12\x04\x94\x02\x19\"\n\r\n\x05\x04\x0f\x02\t\
    \x03\x12\x04\x94\x02%'\n\x0c\n\x04\x04\x0f\x02\n\x12\x04\x95\x02\x08&\n\
    \r\n\x05\x04\x0f\x02\n\x04\x12\x04\x95\x02\x08\x10\n\r\n\x05\x04\x0f\x02\
    \n\x05\x12\x04\x95\x02\x11\x18\n\r\n\x05\x04\x0f\x02\n\x01\x12\x04\x95\
    \x02\x19\x20\n\r\n\x05\x04\x0f\x02\n\x03\x12\x04\x95\x02#%\n\x0c\n\x04\
    \x04\x0f\x02\x0b\x12\x04\x96\x02\x08#\n\r\n\x05\x04\x0f\x02\x0b\x04\x12\
    \x04\x96\x02\x08\x10\n\r\n\x05\x04\x0f\x02\x0b\x05\x12\x04\x96\x02\x11\
    \x17\n\r\n\x05\x04\x0f\x02\x0b\x01\x12\x04\x96\x02\x18\x1d\n\r\n\x05\x04\
    \x0f\x02\x0b\x03\x12\x04\x96\x02\x20\"\n\x0c\n\x04\x04\x0f\x02\x0c\x12\
    \x04\x97\x02\x082\n\r\n\x05\x04\x0f\x02\x0c\x04\x12\x04\x97\x02\x08\x10\
    \n\r\n\x05\x04\x0f\x02\x0c\x05\x12\x04\x97\x02\x11\x18\n\r\n\x05\x04\x0f\
    \x02\x0c\x01\x12\x04\x97\x02\x19-\n\r\n\x05\x04\x0f\x02\x0c\x03\x12\x04\
    \x97\x0201\n\x0c\n\x04\x04\x0f\x02\r\x12\x04\x98\x02\x08(\n\r\n\x05\x04\
    \x0f\x02\r\x04\x12\x04\x98\x02\x08\x10\n\r\n\x05\x04\x0f\x02\r\x05\x12\
    \x04\x98\x02\x11\x17\n\r\n\x05\x04\x0f\x02\r\x01\x12\x04\x98\x02\x18#\n\
    \r\n\x05\x04\x0f\x02\r\x03\x12\x04\x98\x02&'\n\x0c\n\x04\x04\x0f\x02\x0e\
    \x12\x04\x99\x02\x08(\n\r\n\x05\x04\x0f\x02\x0e\x04\x12\x04\x99\x02\x08\
    \x10\n\r\n\x05\x04\x0f\x02\x0e\x05\x12\x04\x99\x02\x11\x17\n\r\n\x05\x04\
    \x0f\x02\x0e\x01\x12\x04\x99\x02\x18#\n\r\n\x05\x04\x0f\x02\x0e\x03\x12\
    \x04\x99\x02&'\n\x0c\n\x02\x04\x10\x12\x06\x9c\x02\0\xb0\x02\x01\n\x0b\n\
    \x03\x04\x10\x01\x12\x04\x9c\x02\x086\n\x0e\n\x04\x04\x10\x04\0\x12\x06\
    \x9d\x02\x08\xa1\x02\t\n\r\n\x05\x04\x10\x04\0\x01\x12\x04\x9d\x02\r\x12\
    \n\x0e\n\x06\x04\x10\x04\0\x02\0\x12\x04\x9e\x02\x10&\n\x0f\n\x07\x04\
    \x10\x04\0\x02\0\x01\x12\x04\x9e\x02\x10!\n\x0f\n\x07\x04\x10\x04\0\x02\
    \0\x02\x12\x04\x9e\x02$%\n\x0e\n\x06\x04\x10\x04\0\x02\x01\x12\x04\x9f\
    \x02\x10$\n\x0f\n\x07\x04\x10\x04\0\x02\x01\x01\x12\x04\x9f\x02\x10\x1f\
    \n\x0f\n\x07\x04\x10\x04\0\x02\x01\x02\x12\x04\x9f\x02\"#\n\x0e\n\x06\
    \x04\x10\x04\0\x02\x02\x12\x04\xa0\x02\x10*\n\x0f\n\x07\x04\x10\x04\0\
    \x02\x02\x01\x12\x04\xa0\x02\x10%\n\x0f\n\x07\x04\x10\x04\0\x02\x02\x02\
    \x12\x04\xa0\x02()\n\x0c\n\x04\x04\x10\x02\0\x12\x04\xa3\x02\x08=\n\r\n\
    \x05\x04\x10\x02\0\x04\x12\x04\xa3\x02\x08\x10\n\r\n\x05\x04\x10\x02\0\
    \x06\x12\x04\xa3\x02\x114\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\xa3\x0258\
    \n\r\n\x05\x04\x10\x02\0\x03\x12\x04\xa3\x02;<\n\x0c\n\x04\x04\x10\x02\
    \x01\x12\x04\xa4\x02\x08=\n\r\n\x05\x04\x10\x02\x01\x04\x12\x04\xa4\x02\
    \x08\x10\n\r\n\x05\x04\x10\x02\x01\x06\x12\x04\xa4\x02\x114\n\r\n\x05\
    \x04\x10\x02\x01\x01\x12\x04\xa4\x0258\n\r\n\x05\x04\x10\x02\x01\x03\x12\
    \x04\xa4\x02;<\n\x0c\n\x04\x04\x10\x02\x02\x12\x04\xa5\x02\x085\n\r\n\
    \x05\x04\x10\x02\x02\x04\x12\x04\xa5\x02\x08\x10\n\r\n\x05\x04\x10\x02\
    \x02\x05\x12\x04\xa5\x02\x11\x18\n\r\n\x05\x04\x10\x02\x02\x01\x12\x04\
    \xa5\x02\x190\n\r\n\x05\x04\x10\x02\x02\x03\x12\x04\xa5\x0234\n\x0c\n\
    \x04\x04\x10\x02\x03\x12\x04\xa6\x02\x085\n\r\n\x05\x04\x10\x02\x03\x04\
    \x12\x04\xa6\x02\x08\x10\n\r\n\x05\x04\x10\x02\x03\x05\x12\x04\xa6\x02\
    \x11\x18\n\r\n\x05\x04\x10\x02\x03\x01\x12\x04\xa6\x02\x190\n\r\n\x05\
    \x04\x10\x02\x03\x03\x12\x04\xa6\x0234\n\x0c\n\x04\x04\x10\x02\x04\x12\
    \x04\xa7\x02\x08(\n\r\n\x05\x04\x10\x02\x04\x04\x12\x04\xa7\x02\x08\x10\
    \n\r\n\x05\x04\x10\x02\x04\x05\x12\x04\xa7\x02\x11\x18\n\r\n\x05\x04\x10\
    \x02\x04\x01\x12\x04\xa7\x02\x19\"\n\r\n\x05\x04\x10\x02\x04\x03\x12\x04\
    \xa7\x02%'\n\x0c\n\x04\x04\x10\x02\x05\x12\x04\xa8\x02\x08&\n\r\n\x05\
    \x04\x10\x02\x05\x04\x12\x04\xa8\x02\x08\x10\n\r\n\x05\x04\x10\x02\x05\
    \x05\x12\x04\xa8\x02\x11\x18\n\r\n\x05\x04\x10\x02\x05\x01\x12\x04\xa8\
    \x02\x19\x20\n\r\n\x05\x04\x10\x02\x05\x03\x12\x04\xa8\x02#%\n\x0c\n\x04\
    \x04\x10\x02\x06\x12\x04\xa9\x02\x08#\n\r\n\x05\x04\x10\x02\x06\x04\x12\
    \x04\xa9\x02\x08\x10\n\r\n\x05\x04\x10\x02\x06\x05\x12\x04\xa9\x02\x11\
    \x17\n\r\n\x05\x04\x10\x02\x06\x01\x12\x04\xa9\x02\x18\x1d\n\r\n\x05\x04\
    \x10\x02\x06\x03\x12\x04\xa9\x02\x20\"\n\x0c\n\x04\x04\x10\x02\x07\x12\
    \x04\xaa\x02\x08(\n\r\n\x05\x04\x10\x02\x07\x04\x12\x04\xaa\x02\x08\x10\
    \n\r\n\x05\x04\x10\x02\x07\x05\x12\x04\xaa\x02\x11\x17\n\r\n\x05\x04\x10\
    \x02\x07\x01\x12\x04\xaa\x02\x18#\n\r\n\x05\x04\x10\x02\x07\x03\x12\x04\
    \xaa\x02&'\n\x0c\n\x04\x04\x10\x02\x08\x12\x04\xab\x02\x08(\n\r\n\x05\
    \x04\x10\x02\x08\x04\x12\x04\xab\x02\x08\x10\n\r\n\x05\x04\x10\x02\x08\
    \x05\x12\x04\xab\x02\x11\x17\n\r\n\x05\x04\x10\x02\x08\x01\x12\x04\xab\
    \x02\x18#\n\r\n\x05\x04\x10\x02\x08\x03\x12\x04\xab\x02&'\n\x0c\n\x04\
    \x04\x10\x02\t\x12\x04\xac\x02\x08-\n\r\n\x05\x04\x10\x02\t\x04\x12\x04\
    \xac\x02\x08\x10\n\r\n\x05\x04\x10\x02\t\x05\x12\x04\xac\x02\x11\x18\n\r\
    \n\x05\x04\x10\x02\t\x01\x12\x04\xac\x02\x19(\n\r\n\x05\x04\x10\x02\t\
    \x03\x12\x04\xac\x02+,\n\x0c\n\x04\x04\x10\x02\n\x12\x04\xad\x02\x08-\n\
    \r\n\x05\x04\x10\x02\n\x04\x12\x04\xad\x02\x08\x10\n\r\n\x05\x04\x10\x02\
    \n\x05\x12\x04\xad\x02\x11\x17\n\r\n\x05\x04\x10\x02\n\x01\x12\x04\xad\
    \x02\x18(\n\r\n\x05\x04\x10\x02\n\x03\x12\x04\xad\x02+,\n\x0c\n\x04\x04\
    \x10\x02\x0b\x12\x04\xae\x02\x082\n\r\n\x05\x04\x10\x02\x0b\x04\x12\x04\
    \xae\x02\x08\x10\n\r\n\x05\x04\x10\x02\x0b\x05\x12\x04\xae\x02\x11\x18\n\
    \r\n\x05\x04\x10\x02\x0b\x01\x12\x04\xae\x02\x19-\n\r\n\x05\x04\x10\x02\
    \x0b\x03\x12\x04\xae\x0201\n\x0c\n\x04\x04\x10\x02\x0c\x12\x04\xaf\x02\
    \x083\n\r\n\x05\x04\x10\x02\x0c\x04\x12\x04\xaf\x02\x08\x10\n\r\n\x05\
    \x04\x10\x02\x0c\x05\x12\x04\xaf\x02\x11\x18\n\r\n\x05\x04\x10\x02\x0c\
    \x01\x12\x04\xaf\x02\x19-\n\r\n\x05\x04\x10\x02\x0c\x03\x12\x04\xaf\x020\
    2\n\x0c\n\x02\x04\x11\x12\x06\xb2\x02\0\xc4\x02\x01\n\x0b\n\x03\x04\x11\
    \x01\x12\x04\xb2\x02\x086\n\x0e\n\x04\x04\x11\x04\0\x12\x06\xb3\x02\x08\
    \xb7\x02\t\n\r\n\x05\x04\x11\x04\0\x01\x12\x04\xb3\x02\r\x12\n\x0e\n\x06\
    \x04\x11\x04\0\x02\0\x12\x04\xb4\x02\x10&\n\x0f\n\x07\x04\x11\x04\0\x02\
    \0\x01\x12\x04\xb4\x02\x10!\n\x0f\n\x07\x04\x11\x04\0\x02\0\x02\x12\x04\
    \xb4\x02$%\n\x0e\n\x06\x04\x11\x04\0\x02\x01\x12\x04\xb5\x02\x10$\n\x0f\
    \n\x07\x04\x11\x04\0\x02\x01\x01\x12\x04\xb5\x02\x10\x1f\n\x0f\n\x07\x04\
    \x11\x04\0\x02\x01\x02\x12\x04\xb5\x02\"#\n\x0e\n\x06\x04\x11\x04\0\x02\
    \x02\x12\x04\xb6\x02\x10*\n\x0f\n\x07\x04\x11\x04\0\x02\x02\x01\x12\x04\
    \xb6\x02\x10%\n\x0f\n\x07\x04\x11\x04\0\x02\x02\x02\x12\x04\xb6\x02()\n\
    \x0c\n\x04\x04\x11\x02\0\x12\x04\xb9\x02\x08=\n\r\n\x05\x04\x11\x02\0\
    \x04\x12\x04\xb9\x02\x08\x10\n\r\n\x05\x04\x11\x02\0\x06\x12\x04\xb9\x02\
    \x114\n\r\n\x05\x04\x11\x02\0\x01\x12\x04\xb9\x0258\n\r\n\x05\x04\x11\
    \x02\0\x03\x12\x04\xb9\x02;<\n\x0c\n\x04\x04\x11\x02\x01\x12\x04\xba\x02\
    \x08=\n\r\n\x05\x04\x11\x02\x01\x04\x12\x04\xba\x02\x08\x10\n\r\n\x05\
    \x04\x11\x02\x01\x06\x12\x04\xba\x02\x114\n\r\n\x05\x04\x11\x02\x01\x01\
    \x12\x04\xba\x0258\n\r\n\x05\x04\x11\x02\x01\x03\x12\x04\xba\x02;<\n\x0c\
    \n\x04\x04\x11\x02\x02\x12\x04\xbb\x02\x08'\n\r\n\x05\x04\x11\x02\x02\
    \x04\x12\x04\xbb\x02\x08\x10\n\r\n\x05\x04\x11\x02\x02\x05\x12\x04\xbb\
    \x02\x11\x18\n\r\n\x05\x04\x11\x02\x02\x01\x12\x04\xbb\x02\x19\"\n\r\n\
    \x05\x04\x11\x02\x02\x03\x12\x04\xbb\x02%&\n\x0c\n\x04\x04\x11\x02\x03\
    \x12\x04\xbc\x02\x08%\n\r\n\x05\x04\x11\x02\x03\x04\x12\x04\xbc\x02\x08\
    \x10\n\r\n\x05\x04\x11\x02\x03\x05\x12\x04\xbc\x02\x11\x18\n\r\n\x05\x04\
    \x11\x02\x03\x01\x12\x04\xbc\x02\x19\x20\n\r\n\x05\x04\x11\x02\x03\x03\
    \x12\x04\xbc\x02#$\n\x0c\n\x04\x04\x11\x02\x04\x12\x04\xbd\x02\x08#\n\r\
    \n\x05\x04\x11\x02\x04\x04\x12\x04\xbd\x02\x08\x10\n\r\n\x05\x04\x11\x02\
    \x04\x05\x12\x04\xbd\x02\x11\x17\n\r\n\x05\x04\x11\x02\x04\x01\x12\x04\
    \xbd\x02\x18\x1d\n\r\n\x05\x04\x11\x02\x04\x03\x12\x04\xbd\x02\x20\"\n\
    \x0c\n\x04\x04\x11\x02\x05\x12\x04\xbe\x02\x08(\n\r\n\x05\x04\x11\x02\
    \x05\x04\x12\x04\xbe\x02\x08\x10\n\r\n\x05\x04\x11\x02\x05\x05\x12\x04\
    \xbe\x02\x11\x17\n\r\n\x05\x04\x11\x02\x05\x01\x12\x04\xbe\x02\x18#\n\r\
    \n\x05\x04\x11\x02\x05\x03\x12\x04\xbe\x02&'\n\x0c\n\x04\x04\x11\x02\x06\
    \x12\x04\xbf\x02\x08(\n\r\n\x05\x04\x11\x02\x06\x04\x12\x04\xbf\x02\x08\
    \x10\n\r\n\x05\x04\x11\x02\x06\x05\x12\x04\xbf\x02\x11\x17\n\r\n\x05\x04\
    \x11\x02\x06\x01\x12\x04\xbf\x02\x18#\n\r\n\x05\x04\x11\x02\x06\x03\x12\
    \x04\xbf\x02&'\n\x0c\n\x04\x04\x11\x02\x07\x12\x04\xc0\x02\x08-\n\r\n\
    \x05\x04\x11\x02\x07\x04\x12\x04\xc0\x02\x08\x10\n\r\n\x05\x04\x11\x02\
    \x07\x05\x12\x04\xc0\x02\x11\x18\n\r\n\x05\x04\x11\x02\x07\x01\x12\x04\
    \xc0\x02\x19(\n\r\n\x05\x04\x11\x02\x07\x03\x12\x04\xc0\x02+,\n\x0c\n\
    \x04\x04\x11\x02\x08\x12\x04\xc1\x02\x08-\n\r\n\x05\x04\x11\x02\x08\x04\
    \x12\x04\xc1\x02\x08\x10\n\r\n\x05\x04\x11\x02\x08\x05\x12\x04\xc1\x02\
    \x11\x17\n\r\n\x05\x04\x11\x02\x08\x01\x12\x04\xc1\x02\x18(\n\r\n\x05\
    \x04\x11\x02\x08\x03\x12\x04\xc1\x02+,\n\x0c\n\x04\x04\x11\x02\t\x12\x04\
    \xc2\x02\x082\n\r\n\x05\x04\x11\x02\t\x04\x12\x04\xc2\x02\x08\x10\n\r\n\
    \x05\x04\x11\x02\t\x05\x12\x04\xc2\x02\x11\x18\n\r\n\x05\x04\x11\x02\t\
    \x01\x12\x04\xc2\x02\x19-\n\r\n\x05\x04\x11\x02\t\x03\x12\x04\xc2\x0201\
    \n\x0c\n\x04\x04\x11\x02\n\x12\x04\xc3\x02\x083\n\r\n\x05\x04\x11\x02\n\
    \x04\x12\x04\xc3\x02\x08\x10\n\r\n\x05\x04\x11\x02\n\x05\x12\x04\xc3\x02\
    \x11\x18\n\r\n\x05\x04\x11\x02\n\x01\x12\x04\xc3\x02\x19-\n\r\n\x05\x04\
    \x11\x02\n\x03\x12\x04\xc3\x0202\n\x0c\n\x02\x04\x12\x12\x06\xc6\x02\0\
    \xc8\x02\x01\n\x0b\n\x03\x04\x12\x01\x12\x04\xc6\x02\x080\n\x0c\n\x04\
    \x04\x12\x02\0\x12\x04\xc7\x02\x08+\n\r\n\x05\x04\x12\x02\0\x04\x12\x04\
    \xc7\x02\x08\x10\n\r\n\x05\x04\x12\x02\0\x05\x12\x04\xc7\x02\x11\x18\n\r\
    \n\x05\x04\x12\x02\0\x01\x12\x04\xc7\x02\x19&\n\r\n\x05\x04\x12\x02\0\
    \x03\x12\x04\xc7\x02)*\n\x0c\n\x02\x04\x13\x12\x06\xca\x02\0\xda\x02\x01\
    \n\x0b\n\x03\x04\x13\x01\x12\x04\xca\x02\x08.\n\x0e\n\x04\x04\x13\x03\0\
    \x12\x06\xcb\x02\x08\xcf\x02\t\n\r\n\x05\x04\x13\x03\0\x01\x12\x04\xcb\
    \x02\x10\x1e\n\x0e\n\x06\x04\x13\x03\0\x02\0\x12\x04\xcc\x02\x10(\n\x0f\
    \n\x07\x04\x13\x03\0\x02\0\x04\x12\x04\xcc\x02\x10\x18\n\x0f\n\x07\x04\
    \x13\x03\0\x02\0\x05\x12\x04\xcc\x02\x19\x20\n\x0f\n\x07\x04\x13\x03\0\
    \x02\0\x01\x12\x04\xcc\x02!#\n\x0f\n\x07\x04\x13\x03\0\x02\0\x03\x12\x04\
    \xcc\x02&'\n\x0e\n\x06\x04\x13\x03\0\x02\x01\x12\x04\xcd\x02\x102\n\x0f\
    \n\x07\x04\x13\x03\0\x02\x01\x04\x12\x04\xcd\x02\x10\x18\n\x0f\n\x07\x04\
    \x13\x03\0\x02\x01\x05\x12\x04\xcd\x02\x19\x1f\n\x0f\n\x07\x04\x13\x03\0\
    \x02\x01\x01\x12\x04\xcd\x02\x20-\n\x0f\n\x07\x04\x13\x03\0\x02\x01\x03\
    \x12\x04\xcd\x0201\n\x0e\n\x06\x04\x13\x03\0\x02\x02\x12\x04\xce\x02\x10\
    0\n\x0f\n\x07\x04\x13\x03\0\x02\x02\x04\x12\x04\xce\x02\x10\x18\n\x0f\n\
    \x07\x04\x13\x03\0\x02\x02\x05\x12\x04\xce\x02\x19\x1f\n\x0f\n\x07\x04\
    \x13\x03\0\x02\x02\x01\x12\x04\xce\x02\x20+\n\x0f\n\x07\x04\x13\x03\0\
    \x02\x02\x03\x12\x04\xce\x02./\n\x0e\n\x04\x04\x13\x03\x01\x12\x06\xd1\
    \x02\x08\xd5\x02\t\n\r\n\x05\x04\x13\x03\x01\x01\x12\x04\xd1\x02\x10\x1a\
    \n\x0e\n\x06\x04\x13\x03\x01\x02\0\x12\x04\xd2\x02\x104\n\x0f\n\x07\x04\
    \x13\x03\x01\x02\0\x04\x12\x04\xd2\x02\x10\x18\n\x0f\n\x07\x04\x13\x03\
    \x01\x02\0\x05\x12\x04\xd2\x02\x19\x20\n\x0f\n\x07\x04\x13\x03\x01\x02\0\
    \x01\x12\x04\xd2\x02!/\n\x0f\n\x07\x04\x13\x03\x01\x02\0\x03\x12\x04\xd2\
    \x0223\n\x0e\n\x06\x04\x13\x03\x01\x02\x01\x12\x04\xd3\x02\x102\n\x0f\n\
    \x07\x04\x13\x03\x01\x02\x01\x04\x12\x04\xd3\x02\x10\x18\n\x0f\n\x07\x04\
    \x13\x03\x01\x02\x01\x05\x12\x04\xd3\x02\x19\x20\n\x0f\n\x07\x04\x13\x03\
    \x01\x02\x01\x01\x12\x04\xd3\x02!-\n\x0f\n\x07\x04\x13\x03\x01\x02\x01\
    \x03\x12\x04\xd3\x0201\n\x0e\n\x06\x04\x13\x03\x01\x02\x02\x12\x04\xd4\
    \x02\x100\n\x0f\n\x07\x04\x13\x03\x01\x02\x02\x04\x12\x04\xd4\x02\x10\
    \x18\n\x0f\n\x07\x04\x13\x03\x01\x02\x02\x05\x12\x04\xd4\x02\x19\x1f\n\
    \x0f\n\x07\x04\x13\x03\x01\x02\x02\x01\x12\x04\xd4\x02\x20+\n\x0f\n\x07\
    \x04\x13\x03\x01\x02\x02\x03\x12\x04\xd4\x02./\n\x0c\n\x04\x04\x13\x02\0\
    \x12\x04\xd7\x02\x08+\n\r\n\x05\x04\x13\x02\0\x04\x12\x04\xd7\x02\x08\
    \x10\n\r\n\x05\x04\x13\x02\0\x05\x12\x04\xd7\x02\x11\x18\n\r\n\x05\x04\
    \x13\x02\0\x01\x12\x04\xd7\x02\x19&\n\r\n\x05\x04\x13\x02\0\x03\x12\x04\
    \xd7\x02)*\n\x0c\n\x04\x04\x13\x02\x01\x12\x04\xd8\x02\x08]\n\r\n\x05\
    \x04\x13\x02\x01\x04\x12\x04\xd8\x02\x08\x10\n\r\n\x05\x04\x13\x02\x01\
    \x06\x12\x04\xd8\x02\x11G\n\r\n\x05\x04\x13\x02\x01\x01\x12\x04\xd8\x02H\
    X\n\r\n\x05\x04\x13\x02\x01\x03\x12\x04\xd8\x02[\\\n\x0c\n\x04\x04\x13\
    \x02\x02\x12\x04\xd9\x02\x08U\n\r\n\x05\x04\x13\x02\x02\x04\x12\x04\xd9\
    \x02\x08\x10\n\r\n\x05\x04\x13\x02\x02\x06\x12\x04\xd9\x02\x11C\n\r\n\
    \x05\x04\x13\x02\x02\x01\x12\x04\xd9\x02DP\n\r\n\x05\x04\x13\x02\x02\x03\
    \x12\x04\xd9\x02ST\n\x0c\n\x02\x04\x14\x12\x06\xdc\x02\0\xf0\x02\x01\n\
    \x0b\n\x03\x04\x14\x01\x12\x04\xdc\x02\x08.\n\x0e\n\x04\x04\x14\x03\0\
    \x12\x06\xdd\x02\x08\xe2\x02\t\n\r\n\x05\x04\x14\x03\0\x01\x12\x04\xdd\
    \x02\x10\x1d\n\x0e\n\x06\x04\x14\x03\0\x02\0\x12\x04\xde\x02\x10*\n\x0f\
    \n\x07\x04\x14\x03\0\x02\0\x04\x12\x04\xde\x02\x10\x18\n\x0f\n\x07\x04\
    \x14\x03\0\x02\0\x05\x12\x04\xde\x02\x19\x1f\n\x0f\n\x07\x04\x14\x03\0\
    \x02\0\x01\x12\x04\xde\x02\x20%\n\x0f\n\x07\x04\x14\x03\0\x02\0\x03\x12\
    \x04\xde\x02()\n\x0e\n\x06\x04\x14\x03\0\x02\x01\x12\x04\xdf\x02\x10/\n\
    \x0f\n\x07\x04\x14\x03\0\x02\x01\x04\x12\x04\xdf\x02\x10\x18\n\x0f\n\x07\
    \x04\x14\x03\0\x02\x01\x05\x12\x04\xdf\x02\x19\x1f\n\x0f\n\x07\x04\x14\
    \x03\0\x02\x01\x01\x12\x04\xdf\x02\x20*\n\x0f\n\x07\x04\x14\x03\0\x02\
    \x01\x03\x12\x04\xdf\x02-.\n\x0e\n\x06\x04\x14\x03\0\x02\x02\x12\x04\xe0\
    \x02\x10.\n\x0f\n\x07\x04\x14\x03\0\x02\x02\x04\x12\x04\xe0\x02\x10\x18\
    \n\x0f\n\x07\x04\x14\x03\0\x02\x02\x05\x12\x04\xe0\x02\x19\x1f\n\x0f\n\
    \x07\x04\x14\x03\0\x02\x02\x01\x12\x04\xe0\x02\x20)\n\x0f\n\x07\x04\x14\
    \x03\0\x02\x02\x03\x12\x04\xe0\x02,-\n\x0e\n\x06\x04\x14\x03\0\x02\x03\
    \x12\x04\xe1\x02\x107\n\x0f\n\x07\x04\x14\x03\0\x02\x03\x04\x12\x04\xe1\
    \x02\x10\x18\n\x0f\n\x07\x04\x14\x03\0\x02\x03\x05\x12\x04\xe1\x02\x19\
    \x1f\n\x0f\n\x07\x04\x14\x03\0\x02\x03\x01\x12\x04\xe1\x02\x202\n\x0f\n\
    \x07\x04\x14\x03\0\x02\x03\x03\x12\x04\xe1\x0256\n\x0c\n\x04\x04\x14\x02\
    \0\x12\x04\xe4\x02\x08+\n\r\n\x05\x04\x14\x02\0\x04\x12\x04\xe4\x02\x08\
    \x10\n\r\n\x05\x04\x14\x02\0\x05\x12\x04\xe4\x02\x11\x18\n\r\n\x05\x04\
    \x14\x02\0\x01\x12\x04\xe4\x02\x19&\n\r\n\x05\x04\x14\x02\0\x03\x12\x04\
    \xe4\x02)*\n\x0c\n\x04\x04\x14\x02\x01\x12\x04\xe5\x02\x08%\n\r\n\x05\
    \x04\x14\x02\x01\x04\x12\x04\xe5\x02\x08\x10\n\r\n\x05\x04\x14\x02\x01\
    \x05\x12\x04\xe5\x02\x11\x18\n\r\n\x05\x04\x14\x02\x01\x01\x12\x04\xe5\
    \x02\x19\x20\n\r\n\x05\x04\x14\x02\x01\x03\x12\x04\xe5\x02#$\n\x0c\n\x04\
    \x04\x14\x02\x02\x12\x04\xe6\x02\x08&\n\r\n\x05\x04\x14\x02\x02\x04\x12\
    \x04\xe6\x02\x08\x10\n\r\n\x05\x04\x14\x02\x02\x05\x12\x04\xe6\x02\x11\
    \x17\n\r\n\x05\x04\x14\x02\x02\x01\x12\x04\xe6\x02\x18!\n\r\n\x05\x04\
    \x14\x02\x02\x03\x12\x04\xe6\x02$%\n\x0c\n\x04\x04\x14\x02\x03\x12\x04\
    \xe7\x02\x081\n\r\n\x05\x04\x14\x02\x03\x04\x12\x04\xe7\x02\x08\x10\n\r\
    \n\x05\x04\x14\x02\x03\x05\x12\x04\xe7\x02\x11\x18\n\r\n\x05\x04\x14\x02\
    \x03\x01\x12\x04\xe7\x02\x19,\n\r\n\x05\x04\x14\x02\x03\x03\x12\x04\xe7\
    \x02/0\n\x0c\n\x04\x04\x14\x02\x04\x12\x04\xe8\x02\x08-\n\r\n\x05\x04\
    \x14\x02\x04\x04\x12\x04\xe8\x02\x08\x10\n\r\n\x05\x04\x14\x02\x04\x05\
    \x12\x04\xe8\x02\x11\x17\n\r\n\x05\x04\x14\x02\x04\x01\x12\x04\xe8\x02\
    \x18(\n\r\n\x05\x04\x14\x02\x04\x03\x12\x04\xe8\x02+,\n\x0c\n\x04\x04\
    \x14\x02\x05\x12\x04\xe9\x02\x085\n\r\n\x05\x04\x14\x02\x05\x04\x12\x04\
    \xe9\x02\x08\x10\n\r\n\x05\x04\x14\x02\x05\x05\x12\x04\xe9\x02\x11\x17\n\
    \r\n\x05\x04\x14\x02\x05\x01\x12\x04\xe9\x02\x180\n\r\n\x05\x04\x14\x02\
    \x05\x03\x12\x04\xe9\x0234\n\x0c\n\x04\x04\x14\x02\x06\x12\x04\xea\x02\
    \x080\n\r\n\x05\x04\x14\x02\x06\x04\x12\x04\xea\x02\x08\x10\n\r\n\x05\
    \x04\x14\x02\x06\x05\x12\x04\xea\x02\x11\x17\n\r\n\x05\x04\x14\x02\x06\
    \x01\x12\x04\xea\x02\x18+\n\r\n\x05\x04\x14\x02\x06\x03\x12\x04\xea\x02.\
    /\n\x0c\n\x04\x04\x14\x02\x07\x12\x04\xeb\x02\x08#\n\r\n\x05\x04\x14\x02\
    \x07\x04\x12\x04\xeb\x02\x08\x10\n\r\n\x05\x04\x14\x02\x07\x05\x12\x04\
    \xeb\x02\x11\x17\n\r\n\x05\x04\x14\x02\x07\x01\x12\x04\xeb\x02\x18\x1e\n\
    \r\n\x05\x04\x14\x02\x07\x03\x12\x04\xeb\x02!\"\n\x0c\n\x04\x04\x14\x02\
    \x08\x12\x04\xec\x02\x08\\\n\r\n\x05\x04\x14\x02\x08\x04\x12\x04\xec\x02\
    \x08\x10\n\r\n\x05\x04\x14\x02\x08\x06\x12\x04\xec\x02\x11F\n\r\n\x05\
    \x04\x14\x02\x08\x01\x12\x04\xec\x02GW\n\r\n\x05\x04\x14\x02\x08\x03\x12\
    \x04\xec\x02Z[\n\x0c\n\x04\x04\x14\x02\t\x12\x04\xed\x02\x08[\n\r\n\x05\
    \x04\x14\x02\t\x04\x12\x04\xed\x02\x08\x10\n\r\n\x05\x04\x14\x02\t\x06\
    \x12\x04\xed\x02\x11F\n\r\n\x05\x04\x14\x02\t\x01\x12\x04\xed\x02GU\n\r\
    \n\x05\x04\x14\x02\t\x03\x12\x04\xed\x02XZ\n\x0c\n\x04\x04\x14\x02\n\x12\
    \x04\xee\x02\x08^\n\r\n\x05\x04\x14\x02\n\x04\x12\x04\xee\x02\x08\x10\n\
    \r\n\x05\x04\x14\x02\n\x06\x12\x04\xee\x02\x11F\n\r\n\x05\x04\x14\x02\n\
    \x01\x12\x04\xee\x02GX\n\r\n\x05\x04\x14\x02\n\x03\x12\x04\xee\x02[]\n\
    \x0c\n\x04\x04\x14\x02\x0b\x12\x04\xef\x02\x08\\\n\r\n\x05\x04\x14\x02\
    \x0b\x04\x12\x04\xef\x02\x08\x10\n\r\n\x05\x04\x14\x02\x0b\x06\x12\x04\
    \xef\x02\x11F\n\r\n\x05\x04\x14\x02\x0b\x01\x12\x04\xef\x02GV\n\r\n\x05\
    \x04\x14\x02\x0b\x03\x12\x04\xef\x02Y[\n\x0c\n\x02\x04\x15\x12\x06\xf2\
    \x02\0\x81\x03\x01\n\x0b\n\x03\x04\x15\x01\x12\x04\xf2\x02\x08%\n\x0e\n\
    \x04\x04\x15\x03\0\x12\x06\xf3\x02\x08\xf6\x02\t\n\r\n\x05\x04\x15\x03\0\
    \x01\x12\x04\xf3\x02\x10\x1a\n\x0e\n\x06\x04\x15\x03\0\x02\0\x12\x04\xf4\
    \x02\x103\n\x0f\n\x07\x04\x15\x03\0\x02\0\x04\x12\x04\xf4\x02\x10\x18\n\
    \x0f\n\x07\x04\x15\x03\0\x02\0\x05\x12\x04\xf4\x02\x19\x20\n\x0f\n\x07\
    \x04\x15\x03\0\x02\0\x01\x12\x04\xf4\x02!.\n\x0f\n\x07\x04\x15\x03\0\x02\
    \0\x03\x12\x04\xf4\x0212\n\x0e\n\x06\x04\x15\x03\0\x02\x01\x12\x04\xf5\
    \x02\x10*\n\x0f\n\x07\x04\x15\x03\0\x02\x01\x04\x12\x04\xf5\x02\x10\x18\
    \n\x0f\n\x07\x04\x15\x03\0\x02\x01\x05\x12\x04\xf5\x02\x19\x1f\n\x0f\n\
    \x07\x04\x15\x03\0\x02\x01\x01\x12\x04\xf5\x02\x20%\n\x0f\n\x07\x04\x15\
    \x03\0\x02\x01\x03\x12\x04\xf5\x02()\n\x0c\n\x04\x04\x15\x02\0\x12\x04\
    \xf8\x02\x08$\n\r\n\x05\x04\x15\x02\0\x04\x12\x04\xf8\x02\x08\x10\n\r\n\
    \x05\x04\x15\x02\0\x05\x12\x04\xf8\x02\x11\x16\n\r\n\x05\x04\x15\x02\0\
    \x01\x12\x04\xf8\x02\x17\x1f\n\r\n\x05\x04\x15\x02\0\x03\x12\x04\xf8\x02\
    \"#\n\x0c\n\x04\x04\x15\x02\x01\x12\x04\xf9\x02\x08,\n\r\n\x05\x04\x15\
    \x02\x01\x04\x12\x04\xf9\x02\x08\x10\n\r\n\x05\x04\x15\x02\x01\x05\x12\
    \x04\xf9\x02\x11\x17\n\r\n\x05\x04\x15\x02\x01\x01\x12\x04\xf9\x02\x18'\
    \n\r\n\x05\x04\x15\x02\x01\x03\x12\x04\xf9\x02*+\n\x0c\n\x04\x04\x15\x02\
    \x02\x12\x04\xfa\x02\x08*\n\r\n\x05\x04\x15\x02\x02\x04\x12\x04\xfa\x02\
    \x08\x10\n\r\n\x05\x04\x15\x02\x02\x05\x12\x04\xfa\x02\x11\x17\n\r\n\x05\
    \x04\x15\x02\x02\x01\x12\x04\xfa\x02\x18%\n\r\n\x05\x04\x15\x02\x02\x03\
    \x12\x04\xfa\x02()\n\x0c\n\x04\x04\x15\x02\x03\x12\x04\xfb\x02\x08+\n\r\
    \n\x05\x04\x15\x02\x03\x04\x12\x04\xfb\x02\x08\x10\n\r\n\x05\x04\x15\x02\
    \x03\x05\x12\x04\xfb\x02\x11\x17\n\r\n\x05\x04\x15\x02\x03\x01\x12\x04\
    \xfb\x02\x18&\n\r\n\x05\x04\x15\x02\x03\x03\x12\x04\xfb\x02)*\n\x0c\n\
    \x04\x04\x15\x02\x04\x12\x04\xfc\x02\x083\n\r\n\x05\x04\x15\x02\x04\x04\
    \x12\x04\xfc\x02\x08\x10\n\r\n\x05\x04\x15\x02\x04\x05\x12\x04\xfc\x02\
    \x11\x17\n\r\n\x05\x04\x15\x02\x04\x01\x12\x04\xfc\x02\x18.\n\r\n\x05\
    \x04\x15\x02\x04\x03\x12\x04\xfc\x0212\n\x0c\n\x04\x04\x15\x02\x05\x12\
    \x04\xfd\x02\x08-\n\r\n\x05\x04\x15\x02\x05\x04\x12\x04\xfd\x02\x08\x10\
    \n\r\n\x05\x04\x15\x02\x05\x05\x12\x04\xfd\x02\x11\x16\n\r\n\x05\x04\x15\
    \x02\x05\x01\x12\x04\xfd\x02\x17(\n\r\n\x05\x04\x15\x02\x05\x03\x12\x04\
    \xfd\x02+,\n\x0c\n\x04\x04\x15\x02\x06\x12\x04\xfe\x02\x08/\n\r\n\x05\
    \x04\x15\x02\x06\x04\x12\x04\xfe\x02\x08\x10\n\r\n\x05\x04\x15\x02\x06\
    \x05\x12\x04\xfe\x02\x11\x16\n\r\n\x05\x04\x15\x02\x06\x01\x12\x04\xfe\
    \x02\x17*\n\r\n\x05\x04\x15\x02\x06\x03\x12\x04\xfe\x02-.\n\x0c\n\x04\
    \x04\x15\x02\x07\x12\x04\xff\x02\x08L\n\r\n\x05\x04\x15\x02\x07\x04\x12\
    \x04\xff\x02\x08\x10\n\r\n\x05\x04\x15\x02\x07\x06\x12\x04\xff\x02\x11:\
    \n\r\n\x05\x04\x15\x02\x07\x01\x12\x04\xff\x02;G\n\r\n\x05\x04\x15\x02\
    \x07\x03\x12\x04\xff\x02JK\n\x0c\n\x04\x04\x15\x02\x08\x12\x04\x80\x03\
    \x08#\n\r\n\x05\x04\x15\x02\x08\x04\x12\x04\x80\x03\x08\x10\n\r\n\x05\
    \x04\x15\x02\x08\x05\x12\x04\x80\x03\x11\x18\n\r\n\x05\x04\x15\x02\x08\
    \x01\x12\x04\x80\x03\x19\x1e\n\r\n\x05\x04\x15\x02\x08\x03\x12\x04\x80\
    \x03!\"\n\x0c\n\x02\x04\x16\x12\x06\x83\x03\0\x8d\x03\x01\n\x0b\n\x03\
    \x04\x16\x01\x12\x04\x83\x03\x08'\n\x0c\n\x04\x04\x16\x02\0\x12\x04\x84\
    \x03\x08+\n\r\n\x05\x04\x16\x02\0\x04\x12\x04\x84\x03\x08\x10\n\r\n\x05\
    \x04\x16\x02\0\x05\x12\x04\x84\x03\x11\x18\n\r\n\x05\x04\x16\x02\0\x01\
    \x12\x04\x84\x03\x19&\n\r\n\x05\x04\x16\x02\0\x03\x12\x04\x84\x03)*\n\
    \x0c\n\x04\x04\x16\x02\x01\x12\x04\x85\x03\x08-\n\r\n\x05\x04\x16\x02\
    \x01\x04\x12\x04\x85\x03\x08\x10\n\r\n\x05\x04\x16\x02\x01\x05\x12\x04\
    \x85\x03\x11\x18\n\r\n\x05\x04\x16\x02\x01\x01\x12\x04\x85\x03\x19(\n\r\
    \n\x05\x04\x16\x02\x01\x03\x12\x04\x85\x03+,\n\x0c\n\x04\x04\x16\x02\x02\
    \x12\x04\x86\x03\x08*\n\r\n\x05\x04\x16\x02\x02\x04\x12\x04\x86\x03\x08\
    \x10\n\r\n\x05\x04\x16\x02\x02\x05\x12\x04\x86\x03\x11\x18\n\r\n\x05\x04\
    \x16\x02\x02\x01\x12\x04\x86\x03\x19%\n\r\n\x05\x04\x16\x02\x02\x03\x12\
    \x04\x86\x03()\n\x0c\n\x04\x04\x16\x02\x03\x12\x04\x87\x03\x08(\n\r\n\
    \x05\x04\x16\x02\x03\x04\x12\x04\x87\x03\x08\x10\n\r\n\x05\x04\x16\x02\
    \x03\x05\x12\x04\x87\x03\x11\x17\n\r\n\x05\x04\x16\x02\x03\x01\x12\x04\
    \x87\x03\x18#\n\r\n\x05\x04\x16\x02\x03\x03\x12\x04\x87\x03&'\n\x0c\n\
    \x04\x04\x16\x02\x04\x12\x04\x88\x03\x08)\n\r\n\x05\x04\x16\x02\x04\x04\
    \x12\x04\x88\x03\x08\x10\n\r\n\x05\x04\x16\x02\x04\x05\x12\x04\x88\x03\
    \x11\x17\n\r\n\x05\x04\x16\x02\x04\x01\x12\x04\x88\x03\x18$\n\r\n\x05\
    \x04\x16\x02\x04\x03\x12\x04\x88\x03'(\n\x0c\n\x04\x04\x16\x02\x05\x12\
    \x04\x89\x03\x088\n\r\n\x05\x04\x16\x02\x05\x04\x12\x04\x89\x03\x08\x10\
    \n\r\n\x05\x04\x16\x02\x05\x05\x12\x04\x89\x03\x11\x17\n\r\n\x05\x04\x16\
    \x02\x05\x01\x12\x04\x89\x03\x183\n\r\n\x05\x04\x16\x02\x05\x03\x12\x04\
    \x89\x0367\n\x0c\n\x04\x04\x16\x02\x06\x12\x04\x8a\x03\x08D\n\r\n\x05\
    \x04\x16\x02\x06\x04\x12\x04\x8a\x03\x08\x10\n\r\n\x05\x04\x16\x02\x06\
    \x06\x12\x04\x8a\x03\x119\n\r\n\x05\x04\x16\x02\x06\x01\x12\x04\x8a\x03:\
    ?\n\r\n\x05\x04\x16\x02\x06\x03\x12\x04\x8a\x03BC\n\x0c\n\x04\x04\x16\
    \x02\x07\x12\x04\x8b\x03\x08>\n\r\n\x05\x04\x16\x02\x07\x04\x12\x04\x8b\
    \x03\x08\x10\n\r\n\x05\x04\x16\x02\x07\x06\x12\x04\x8b\x03\x114\n\r\n\
    \x05\x04\x16\x02\x07\x01\x12\x04\x8b\x0359\n\r\n\x05\x04\x16\x02\x07\x03\
    \x12\x04\x8b\x03<=\n\x0c\n\x04\x04\x16\x02\x08\x12\x04\x8c\x03\x08-\n\r\
    \n\x05\x04\x16\x02\x08\x04\x12\x04\x8c\x03\x08\x10\n\r\n\x05\x04\x16\x02\
    \x08\x05\x12\x04\x8c\x03\x11\x17\n\r\n\x05\x04\x16\x02\x08\x01\x12\x04\
    \x8c\x03\x18(\n\r\n\x05\x04\x16\x02\x08\x03\x12\x04\x8c\x03+,\n\x0c\n\
    \x02\x04\x17\x12\x06\x8f\x03\0\x98\x03\x01\n\x0b\n\x03\x04\x17\x01\x12\
    \x04\x8f\x03\x08\"\n\x0c\n\x04\x04\x17\x02\0\x12\x04\x90\x03\x082\n\r\n\
    \x05\x04\x17\x02\0\x04\x12\x04\x90\x03\x08\x10\n\r\n\x05\x04\x17\x02\0\
    \x05\x12\x04\x90\x03\x11\x18\n\r\n\x05\x04\x17\x02\0\x01\x12\x04\x90\x03\
    \x19-\n\r\n\x05\x04\x17\x02\0\x03\x12\x04\x90\x0301\n\x0c\n\x04\x04\x17\
    \x02\x01\x12\x04\x91\x03\x082\n\r\n\x05\x04\x17\x02\x01\x04\x12\x04\x91\
    \x03\x08\x10\n\r\n\x05\x04\x17\x02\x01\x05\x12\x04\x91\x03\x11\x18\n\r\n\
    \x05\x04\x17\x02\x01\x01\x12\x04\x91\x03\x19-\n\r\n\x05\x04\x17\x02\x01\
    \x03\x12\x04\x91\x0301\n\x0c\n\x04\x04\x17\x02\x02\x12\x04\x92\x03\x08,\
    \n\r\n\x05\x04\x17\x02\x02\x04\x12\x04\x92\x03\x08\x10\n\r\n\x05\x04\x17\
    \x02\x02\x05\x12\x04\x92\x03\x11\x18\n\r\n\x05\x04\x17\x02\x02\x01\x12\
    \x04\x92\x03\x19'\n\r\n\x05\x04\x17\x02\x02\x03\x12\x04\x92\x03*+\n\x0c\
    \n\x04\x04\x17\x02\x03\x12\x04\x93\x03\x08,\n\r\n\x05\x04\x17\x02\x03\
    \x04\x12\x04\x93\x03\x08\x10\n\r\n\x05\x04\x17\x02\x03\x05\x12\x04\x93\
    \x03\x11\x17\n\r\n\x05\x04\x17\x02\x03\x01\x12\x04\x93\x03\x18'\n\r\n\
    \x05\x04\x17\x02\x03\x03\x12\x04\x93\x03*+\n\x0c\n\x04\x04\x17\x02\x04\
    \x12\x04\x94\x03\x088\n\r\n\x05\x04\x17\x02\x04\x04\x12\x04\x94\x03\x08\
    \x10\n\r\n\x05\x04\x17\x02\x04\x05\x12\x04\x94\x03\x11\x17\n\r\n\x05\x04\
    \x17\x02\x04\x01\x12\x04\x94\x03\x183\n\r\n\x05\x04\x17\x02\x04\x03\x12\
    \x04\x94\x0367\n\x0c\n\x04\x04\x17\x02\x05\x12\x04\x95\x03\x08D\n\r\n\
    \x05\x04\x17\x02\x05\x04\x12\x04\x95\x03\x08\x10\n\r\n\x05\x04\x17\x02\
    \x05\x06\x12\x04\x95\x03\x119\n\r\n\x05\x04\x17\x02\x05\x01\x12\x04\x95\
    \x03:?\n\r\n\x05\x04\x17\x02\x05\x03\x12\x04\x95\x03BC\n\x0c\n\x04\x04\
    \x17\x02\x06\x12\x04\x96\x03\x08>\n\r\n\x05\x04\x17\x02\x06\x04\x12\x04\
    \x96\x03\x08\x10\n\r\n\x05\x04\x17\x02\x06\x06\x12\x04\x96\x03\x114\n\r\
    \n\x05\x04\x17\x02\x06\x01\x12\x04\x96\x0359\n\r\n\x05\x04\x17\x02\x06\
    \x03\x12\x04\x96\x03<=\n\x0c\n\x04\x04\x17\x02\x07\x12\x04\x97\x03\x08-\
    \n\r\n\x05\x04\x17\x02\x07\x04\x12\x04\x97\x03\x08\x10\n\r\n\x05\x04\x17\
    \x02\x07\x05\x12\x04\x97\x03\x11\x17\n\r\n\x05\x04\x17\x02\x07\x01\x12\
    \x04\x97\x03\x18(\n\r\n\x05\x04\x17\x02\x07\x03\x12\x04\x97\x03+,\n\x0c\
    \n\x02\x04\x18\x12\x06\x9a\x03\0\xa9\x03\x01\n\x0b\n\x03\x04\x18\x01\x12\
    \x04\x9a\x03\x08)\n\x0e\n\x04\x04\x18\x04\0\x12\x06\x9b\x03\x08\x9f\x03\
    \t\n\r\n\x05\x04\x18\x04\0\x01\x12\x04\x9b\x03\r\x17\n\x0e\n\x06\x04\x18\
    \x04\0\x02\0\x12\x04\x9c\x03\x10\x19\n\x0f\n\x07\x04\x18\x04\0\x02\0\x01\
    \x12\x04\x9c\x03\x10\x14\n\x0f\n\x07\x04\x18\x04\0\x02\0\x02\x12\x04\x9c\
    \x03\x17\x18\n\x0e\n\x06\x04\x18\x04\0\x02\x01\x12\x04\x9d\x03\x10\x1d\n\
    \x0f\n\x07\x04\x18\x04\0\x02\x01\x01\x12\x04\x9d\x03\x10\x18\n\x0f\n\x07\
    \x04\x18\x04\0\x02\x01\x02\x12\x04\x9d\x03\x1b\x1c\n\x0e\n\x06\x04\x18\
    \x04\0\x02\x02\x12\x04\x9e\x03\x10!\n\x0f\n\x07\x04\x18\x04\0\x02\x02\
    \x01\x12\x04\x9e\x03\x10\x1c\n\x0f\n\x07\x04\x18\x04\0\x02\x02\x02\x12\
    \x04\x9e\x03\x1f\x20\n\x0c\n\x04\x04\x18\x02\0\x12\x04\xa1\x03\x089\n\r\
    \n\x05\x04\x18\x02\0\x04\x12\x04\xa1\x03\x08\x10\n\r\n\x05\x04\x18\x02\0\
    \x05\x12\x04\xa1\x03\x11\x18\n\r\n\x05\x04\x18\x02\0\x01\x12\x04\xa1\x03\
    \x194\n\r\n\x05\x04\x18\x02\0\x03\x12\x04\xa1\x0378\n\x0c\n\x04\x04\x18\
    \x02\x01\x12\x04\xa2\x03\x08.\n\r\n\x05\x04\x18\x02\x01\x04\x12\x04\xa2\
    \x03\x08\x10\n\r\n\x05\x04\x18\x02\x01\x05\x12\x04\xa2\x03\x11\x18\n\r\n\
    \x05\x04\x18\x02\x01\x01\x12\x04\xa2\x03\x19)\n\r\n\x05\x04\x18\x02\x01\
    \x03\x12\x04\xa2\x03,-\n\x0c\n\x04\x04\x18\x02\x02\x12\x04\xa3\x03\x080\
    \n\r\n\x05\x04\x18\x02\x02\x04\x12\x04\xa3\x03\x08\x10\n\r\n\x05\x04\x18\
    \x02\x02\x05\x12\x04\xa3\x03\x11\x18\n\r\n\x05\x04\x18\x02\x02\x01\x12\
    \x04\xa3\x03\x19+\n\r\n\x05\x04\x18\x02\x02\x03\x12\x04\xa3\x03./\n\x0c\
    \n\x04\x04\x18\x02\x03\x12\x04\xa4\x03\x08+\n\r\n\x05\x04\x18\x02\x03\
    \x04\x12\x04\xa4\x03\x08\x10\n\r\n\x05\x04\x18\x02\x03\x05\x12\x04\xa4\
    \x03\x11\x18\n\r\n\x05\x04\x18\x02\x03\x01\x12\x04\xa4\x03\x19&\n\r\n\
    \x05\x04\x18\x02\x03\x03\x12\x04\xa4\x03)*\n\x0c\n\x04\x04\x18\x02\x04\
    \x12\x04\xa5\x03\x088\n\r\n\x05\x04\x18\x02\x04\x04\x12\x04\xa5\x03\x08\
    \x10\n\r\n\x05\x04\x18\x02\x04\x05\x12\x04\xa5\x03\x11\x17\n\r\n\x05\x04\
    \x18\x02\x04\x01\x12\x04\xa5\x03\x183\n\r\n\x05\x04\x18\x02\x04\x03\x12\
    \x04\xa5\x0367\n\x0c\n\x04\x04\x18\x02\x05\x12\x04\xa6\x03\x08_\n\r\n\
    \x05\x04\x18\x02\x05\x04\x12\x04\xa6\x03\x08\x10\n\r\n\x05\x04\x18\x02\
    \x05\x06\x12\x04\xa6\x03\x11>\n\r\n\x05\x04\x18\x02\x05\x01\x12\x04\xa6\
    \x03?I\n\r\n\x05\x04\x18\x02\x05\x03\x12\x04\xa6\x03LM\n\r\n\x05\x04\x18\
    \x02\x05\x08\x12\x04\xa6\x03N^\n\r\n\x05\x04\x18\x02\x05\x07\x12\x04\xa6\
    \x03Y]\n\x0c\n\x04\x04\x18\x02\x06\x12\x04\xa7\x03\x08\"\n\r\n\x05\x04\
    \x18\x02\x06\x04\x12\x04\xa7\x03\x08\x10\n\r\n\x05\x04\x18\x02\x06\x05\
    \x12\x04\xa7\x03\x11\x17\n\r\n\x05\x04\x18\x02\x06\x01\x12\x04\xa7\x03\
    \x18\x1d\n\r\n\x05\x04\x18\x02\x06\x03\x12\x04\xa7\x03\x20!\n\x0c\n\x04\
    \x04\x18\x02\x07\x12\x04\xa8\x03\x08(\n\r\n\x05\x04\x18\x02\x07\x04\x12\
    \x04\xa8\x03\x08\x10\n\r\n\x05\x04\x18\x02\x07\x05\x12\x04\xa8\x03\x11\
    \x17\n\r\n\x05\x04\x18\x02\x07\x01\x12\x04\xa8\x03\x18#\n\r\n\x05\x04\
    \x18\x02\x07\x03\x12\x04\xa8\x03&'\n\x0c\n\x02\x04\x19\x12\x06\xab\x03\0\
    \xb3\x03\x01\n\x0b\n\x03\x04\x19\x01\x12\x04\xab\x03\x08%\n\x0c\n\x04\
    \x04\x19\x02\0\x12\x04\xac\x03\x089\n\r\n\x05\x04\x19\x02\0\x04\x12\x04\
    \xac\x03\x08\x10\n\r\n\x05\x04\x19\x02\0\x05\x12\x04\xac\x03\x11\x18\n\r\
    \n\x05\x04\x19\x02\0\x01\x12\x04\xac\x03\x194\n\r\n\x05\x04\x19\x02\0\
    \x03\x12\x04\xac\x0378\n\x0c\n\x04\x04\x19\x02\x01\x12\x04\xad\x03\x08.\
    \n\r\n\x05\x04\x19\x02\x01\x04\x12\x04\xad\x03\x08\x10\n\r\n\x05\x04\x19\
    \x02\x01\x05\x12\x04\xad\x03\x11\x18\n\r\n\x05\x04\x19\x02\x01\x01\x12\
    \x04\xad\x03\x19)\n\r\n\x05\x04\x19\x02\x01\x03\x12\x04\xad\x03,-\n\x0c\
    \n\x04\x04\x19\x02\x02\x12\x04\xae\x03\x080\n\r\n\x05\x04\x19\x02\x02\
    \x04\x12\x04\xae\x03\x08\x10\n\r\n\x05\x04\x19\x02\x02\x05\x12\x04\xae\
    \x03\x11\x18\n\r\n\x05\x04\x19\x02\x02\x01\x12\x04\xae\x03\x19+\n\r\n\
    \x05\x04\x19\x02\x02\x03\x12\x04\xae\x03./\n\x0c\n\x04\x04\x19\x02\x03\
    \x12\x04\xaf\x03\x088\n\r\n\x05\x04\x19\x02\x03\x04\x12\x04\xaf\x03\x08\
    \x10\n\r\n\x05\x04\x19\x02\x03\x05\x12\x04\xaf\x03\x11\x17\n\r\n\x05\x04\
    \x19\x02\x03\x01\x12\x04\xaf\x03\x183\n\r\n\x05\x04\x19\x02\x03\x03\x12\
    \x04\xaf\x0367\n\x0c\n\x04\x04\x19\x02\x04\x12\x04\xb0\x03\x08+\n\r\n\
    \x05\x04\x19\x02\x04\x04\x12\x04\xb0\x03\x08\x10\n\r\n\x05\x04\x19\x02\
    \x04\x05\x12\x04\xb0\x03\x11\x18\n\r\n\x05\x04\x19\x02\x04\x01\x12\x04\
    \xb0\x03\x19&\n\r\n\x05\x04\x19\x02\x04\x03\x12\x04\xb0\x03)*\n\x0c\n\
    \x04\x04\x19\x02\x05\x12\x04\xb1\x03\x08%\n\r\n\x05\x04\x19\x02\x05\x04\
    \x12\x04\xb1\x03\x08\x10\n\r\n\x05\x04\x19\x02\x05\x05\x12\x04\xb1\x03\
    \x11\x15\n\r\n\x05\x04\x19\x02\x05\x01\x12\x04\xb1\x03\x16\x20\n\r\n\x05\
    \x04\x19\x02\x05\x03\x12\x04\xb1\x03#$\n\x0c\n\x04\x04\x19\x02\x06\x12\
    \x04\xb2\x03\x08*\n\r\n\x05\x04\x19\x02\x06\x04\x12\x04\xb2\x03\x08\x10\
    \n\r\n\x05\x04\x19\x02\x06\x05\x12\x04\xb2\x03\x11\x18\n\r\n\x05\x04\x19\
    \x02\x06\x01\x12\x04\xb2\x03\x19\"\n\r\n\x05\x04\x19\x02\x06\x03\x12\x04\
    \xb2\x03%)\n\x0c\n\x02\x04\x1a\x12\x06\xb5\x03\0\xbe\x03\x01\n\x0b\n\x03\
    \x04\x1a\x01\x12\x04\xb5\x03\x08.\n\x0c\n\x04\x04\x1a\x02\0\x12\x04\xb6\
    \x03\x08,\n\r\n\x05\x04\x1a\x02\0\x04\x12\x04\xb6\x03\x08\x10\n\r\n\x05\
    \x04\x1a\x02\0\x05\x12\x04\xb6\x03\x11\x18\n\r\n\x05\x04\x1a\x02\0\x01\
    \x12\x04\xb6\x03\x19'\n\r\n\x05\x04\x1a\x02\0\x03\x12\x04\xb6\x03*+\n\
    \x0c\n\x04\x04\x1a\x02\x01\x12\x04\xb7\x03\x08'\n\r\n\x05\x04\x1a\x02\
    \x01\x04\x12\x04\xb7\x03\x08\x10\n\r\n\x05\x04\x1a\x02\x01\x05\x12\x04\
    \xb7\x03\x11\x18\n\r\n\x05\x04\x1a\x02\x01\x01\x12\x04\xb7\x03\x19\"\n\r\
    \n\x05\x04\x1a\x02\x01\x03\x12\x04\xb7\x03%&\n\x0c\n\x04\x04\x1a\x02\x02\
    \x12\x04\xb8\x03\x08.\n\r\n\x05\x04\x1a\x02\x02\x04\x12\x04\xb8\x03\x08\
    \x10\n\r\n\x05\x04\x1a\x02\x02\x05\x12\x04\xb8\x03\x11\x18\n\r\n\x05\x04\
    \x1a\x02\x02\x01\x12\x04\xb8\x03\x19)\n\r\n\x05\x04\x1a\x02\x02\x03\x12\
    \x04\xb8\x03,-\n\x0c\n\x04\x04\x1a\x02\x03\x12\x04\xb9\x03\x08+\n\r\n\
    \x05\x04\x1a\x02\x03\x04\x12\x04\xb9\x03\x08\x10\n\r\n\x05\x04\x1a\x02\
    \x03\x05\x12\x04\xb9\x03\x11\x18\n\r\n\x05\x04\x1a\x02\x03\x01\x12\x04\
    \xb9\x03\x19&\n\r\n\x05\x04\x1a\x02\x03\x03\x12\x04\xb9\x03)*\n\x0c\n\
    \x04\x04\x1a\x02\x04\x12\x04\xba\x03\x080\n\r\n\x05\x04\x1a\x02\x04\x04\
    \x12\x04\xba\x03\x08\x10\n\r\n\x05\x04\x1a\x02\x04\x05\x12\x04\xba\x03\
    \x11\x18\n\r\n\x05\x04\x1a\x02\x04\x01\x12\x04\xba\x03\x19+\n\r\n\x05\
    \x04\x1a\x02\x04\x03\x12\x04\xba\x03./\n\x0c\n\x04\x04\x1a\x02\x05\x12\
    \x04\xbb\x03\x08-\n\r\n\x05\x04\x1a\x02\x05\x04\x12\x04\xbb\x03\x08\x10\
    \n\r\n\x05\x04\x1a\x02\x05\x05\x12\x04\xbb\x03\x11\x17\n\r\n\x05\x04\x1a\
    \x02\x05\x01\x12\x04\xbb\x03\x18(\n\r\n\x05\x04\x1a\x02\x05\x03\x12\x04\
    \xbb\x03+,\n\x0c\n\x04\x04\x1a\x02\x06\x12\x04\xbc\x03\x083\n\r\n\x05\
    \x04\x1a\x02\x06\x04\x12\x04\xbc\x03\x08\x10\n\r\n\x05\x04\x1a\x02\x06\
    \x05\x12\x04\xbc\x03\x11\x17\n\r\n\x05\x04\x1a\x02\x06\x01\x12\x04\xbc\
    \x03\x18.\n\r\n\x05\x04\x1a\x02\x06\x03\x12\x04\xbc\x0312\n\x0c\n\x04\
    \x04\x1a\x02\x07\x12\x04\xbd\x03\x08(\n\r\n\x05\x04\x1a\x02\x07\x04\x12\
    \x04\xbd\x03\x08\x10\n\r\n\x05\x04\x1a\x02\x07\x05\x12\x04\xbd\x03\x11\
    \x18\n\r\n\x05\x04\x1a\x02\x07\x01\x12\x04\xbd\x03\x19\"\n\r\n\x05\x04\
    \x1a\x02\x07\x03\x12\x04\xbd\x03%'\n\x0c\n\x02\x04\x1b\x12\x06\xc0\x03\0\
    \xc4\x03\x01\n\x0b\n\x03\x04\x1b\x01\x12\x04\xc0\x03\x08*\n\x0c\n\x04\
    \x04\x1b\x02\0\x12\x04\xc1\x03\x08>\n\r\n\x05\x04\x1b\x02\0\x04\x12\x04\
    \xc1\x03\x08\x10\n\r\n\x05\x04\x1b\x02\0\x06\x12\x04\xc1\x03\x114\n\r\n\
    \x05\x04\x1b\x02\0\x01\x12\x04\xc1\x0359\n\r\n\x05\x04\x1b\x02\0\x03\x12\
    \x04\xc1\x03<=\n\x0c\n\x04\x04\x1b\x02\x01\x12\x04\xc2\x03\x08\x20\n\r\n\
    \x05\x04\x1b\x02\x01\x04\x12\x04\xc2\x03\x08\x10\n\r\n\x05\x04\x1b\x02\
    \x01\x05\x12\x04\xc2\x03\x11\x16\n\r\n\x05\x04\x1b\x02\x01\x01\x12\x04\
    \xc2\x03\x17\x1b\n\r\n\x05\x04\x1b\x02\x01\x03\x12\x04\xc2\x03\x1e\x1f\n\
    \x0c\n\x04\x04\x1b\x02\x02\x12\x04\xc3\x03\x08%\n\r\n\x05\x04\x1b\x02\
    \x02\x04\x12\x04\xc3\x03\x08\x10\n\r\n\x05\x04\x1b\x02\x02\x05\x12\x04\
    \xc3\x03\x11\x16\n\r\n\x05\x04\x1b\x02\x02\x01\x12\x04\xc3\x03\x17\x20\n\
    \r\n\x05\x04\x1b\x02\x02\x03\x12\x04\xc3\x03#$\n\x0c\n\x02\x04\x1c\x12\
    \x06\xc6\x03\0\xcb\x03\x01\n\x0b\n\x03\x04\x1c\x01\x12\x04\xc6\x03\x08.\
    \n\x0c\n\x04\x04\x1c\x02\0\x12\x04\xc7\x03\x08+\n\r\n\x05\x04\x1c\x02\0\
    \x04\x12\x04\xc7\x03\x08\x10\n\r\n\x05\x04\x1c\x02\0\x05\x12\x04\xc7\x03\
    \x11\x18\n\r\n\x05\x04\x1c\x02\0\x01\x12\x04\xc7\x03\x19&\n\r\n\x05\x04\
    \x1c\x02\0\x03\x12\x04\xc7\x03)*\n\x0c\n\x04\x04\x1c\x02\x01\x12\x04\xc8\
    \x03\x083\n\r\n\x05\x04\x1c\x02\x01\x04\x12\x04\xc8\x03\x08\x10\n\r\n\
    \x05\x04\x1c\x02\x01\x05\x12\x04\xc8\x03\x11\x17\n\r\n\x05\x04\x1c\x02\
    \x01\x01\x12\x04\xc8\x03\x18.\n\r\n\x05\x04\x1c\x02\x01\x03\x12\x04\xc8\
    \x0312\n\x0c\n\x04\x04\x1c\x02\x02\x12\x04\xc9\x03\x08.\n\r\n\x05\x04\
    \x1c\x02\x02\x04\x12\x04\xc9\x03\x08\x10\n\r\n\x05\x04\x1c\x02\x02\x05\
    \x12\x04\xc9\x03\x11\x18\n\r\n\x05\x04\x1c\x02\x02\x01\x12\x04\xc9\x03\
    \x19)\n\r\n\x05\x04\x1c\x02\x02\x03\x12\x04\xc9\x03,-\n\x0c\n\x04\x04\
    \x1c\x02\x03\x12\x04\xca\x03\x08(\n\r\n\x05\x04\x1c\x02\x03\x04\x12\x04\
    \xca\x03\x08\x10\n\r\n\x05\x04\x1c\x02\x03\x05\x12\x04\xca\x03\x11\x17\n\
    \r\n\x05\x04\x1c\x02\x03\x01\x12\x04\xca\x03\x18#\n\r\n\x05\x04\x1c\x02\
    \x03\x03\x12\x04\xca\x03&'\n\x0c\n\x02\x04\x1d\x12\x06\xcd\x03\0\xde\x03\
    \x01\n\x0b\n\x03\x04\x1d\x01\x12\x04\xcd\x03\x08\"\n\x0e\n\x04\x04\x1d\
    \x03\0\x12\x06\xce\x03\x08\xd3\x03\t\n\r\n\x05\x04\x1d\x03\0\x01\x12\x04\
    \xce\x03\x10\x1c\n\x0e\n\x06\x04\x1d\x03\0\x02\0\x12\x04\xcf\x03\x10,\n\
    \x0f\n\x07\x04\x1d\x03\0\x02\0\x04\x12\x04\xcf\x03\x10\x18\n\x0f\n\x07\
    \x04\x1d\x03\0\x02\0\x05\x12\x04\xcf\x03\x19\x20\n\x0f\n\x07\x04\x1d\x03\
    \0\x02\0\x01\x12\x04\xcf\x03!'\n\x0f\n\x07\x04\x1d\x03\0\x02\0\x03\x12\
    \x04\xcf\x03*+\n\x0e\n\x06\x04\x1d\x03\0\x02\x01\x12\x04\xd0\x03\x10,\n\
    \x0f\n\x07\x04\x1d\x03\0\x02\x01\x04\x12\x04\xd0\x03\x10\x18\n\x0f\n\x07\
    \x04\x1d\x03\0\x02\x01\x05\x12\x04\xd0\x03\x19\x1f\n\x0f\n\x07\x04\x1d\
    \x03\0\x02\x01\x01\x12\x04\xd0\x03\x20'\n\x0f\n\x07\x04\x1d\x03\0\x02\
    \x01\x03\x12\x04\xd0\x03*+\n\x0e\n\x06\x04\x1d\x03\0\x02\x02\x12\x04\xd1\
    \x03\x102\n\x0f\n\x07\x04\x1d\x03\0\x02\x02\x04\x12\x04\xd1\x03\x10\x18\
    \n\x0f\n\x07\x04\x1d\x03\0\x02\x02\x05\x12\x04\xd1\x03\x19\x1f\n\x0f\n\
    \x07\x04\x1d\x03\0\x02\x02\x01\x12\x04\xd1\x03\x20-\n\x0f\n\x07\x04\x1d\
    \x03\0\x02\x02\x03\x12\x04\xd1\x0301\n\x0e\n\x06\x04\x1d\x03\0\x02\x03\
    \x12\x04\xd2\x03\x10>\n\x0f\n\x07\x04\x1d\x03\0\x02\x03\x04\x12\x04\xd2\
    \x03\x10\x18\n\x0f\n\x07\x04\x1d\x03\0\x02\x03\x05\x12\x04\xd2\x03\x19\
    \x20\n\x0f\n\x07\x04\x1d\x03\0\x02\x03\x01\x12\x04\xd2\x03!9\n\x0f\n\x07\
    \x04\x1d\x03\0\x02\x03\x03\x12\x04\xd2\x03<=\n\x0e\n\x04\x04\x1d\x03\x01\
    \x12\x06\xd5\x03\x08\xd9\x03\t\n\r\n\x05\x04\x1d\x03\x01\x01\x12\x04\xd5\
    \x03\x10\x15\n\x0e\n\x06\x04\x1d\x03\x01\x02\0\x12\x04\xd6\x03\x10/\n\
    \x0f\n\x07\x04\x1d\x03\x01\x02\0\x04\x12\x04\xd6\x03\x10\x18\n\x0f\n\x07\
    \x04\x1d\x03\x01\x02\0\x05\x12\x04\xd6\x03\x19\x20\n\x0f\n\x07\x04\x1d\
    \x03\x01\x02\0\x01\x12\x04\xd6\x03!*\n\x0f\n\x07\x04\x1d\x03\x01\x02\0\
    \x03\x12\x04\xd6\x03-.\n\x0e\n\x06\x04\x1d\x03\x01\x02\x01\x12\x04\xd7\
    \x03\x101\n\x0f\n\x07\x04\x1d\x03\x01\x02\x01\x04\x12\x04\xd7\x03\x10\
    \x18\n\x0f\n\x07\x04\x1d\x03\x01\x02\x01\x05\x12\x04\xd7\x03\x19\x20\n\
    \x0f\n\x07\x04\x1d\x03\x01\x02\x01\x01\x12\x04\xd7\x03!,\n\x0f\n\x07\x04\
    \x1d\x03\x01\x02\x01\x03\x12\x04\xd7\x03/0\n\x0e\n\x06\x04\x1d\x03\x01\
    \x02\x02\x12\x04\xd8\x03\x10*\n\x0f\n\x07\x04\x1d\x03\x01\x02\x02\x04\
    \x12\x04\xd8\x03\x10\x18\n\x0f\n\x07\x04\x1d\x03\x01\x02\x02\x05\x12\x04\
    \xd8\x03\x19\x1f\n\x0f\n\x07\x04\x1d\x03\x01\x02\x02\x01\x12\x04\xd8\x03\
    \x20%\n\x0f\n\x07\x04\x1d\x03\x01\x02\x02\x03\x12\x04\xd8\x03()\n\x0c\n\
    \x04\x04\x1d\x02\0\x12\x04\xdb\x03\x08M\n\r\n\x05\x04\x1d\x02\0\x04\x12\
    \x04\xdb\x03\x08\x10\n\r\n\x05\x04\x1d\x02\0\x06\x12\x04\xdb\x03\x119\n\
    \r\n\x05\x04\x1d\x02\0\x01\x12\x04\xdb\x03:H\n\r\n\x05\x04\x1d\x02\0\x03\
    \x12\x04\xdb\x03KL\n\x0c\n\x04\x04\x1d\x02\x01\x12\x04\xdc\x03\x08>\n\r\
    \n\x05\x04\x1d\x02\x01\x04\x12\x04\xdc\x03\x08\x10\n\r\n\x05\x04\x1d\x02\
    \x01\x06\x12\x04\xdc\x03\x112\n\r\n\x05\x04\x1d\x02\x01\x01\x12\x04\xdc\
    \x0339\n\r\n\x05\x04\x1d\x02\x01\x03\x12\x04\xdc\x03<=\n\x0c\n\x04\x04\
    \x1d\x02\x02\x12\x04\xdd\x03\x08%\n\r\n\x05\x04\x1d\x02\x02\x04\x12\x04\
    \xdd\x03\x08\x10\n\r\n\x05\x04\x1d\x02\x02\x05\x12\x04\xdd\x03\x11\x17\n\
    \r\n\x05\x04\x1d\x02\x02\x01\x12\x04\xdd\x03\x18\x20\n\r\n\x05\x04\x1d\
    \x02\x02\x03\x12\x04\xdd\x03#$\n\x0c\n\x02\x04\x1e\x12\x06\xe0\x03\0\xe7\
    \x03\x01\n\x0b\n\x03\x04\x1e\x01\x12\x04\xe0\x03\x08&\n\x0c\n\x04\x04\
    \x1e\x02\0\x12\x04\xe1\x03\x08.\n\r\n\x05\x04\x1e\x02\0\x04\x12\x04\xe1\
    \x03\x08\x10\n\r\n\x05\x04\x1e\x02\0\x05\x12\x04\xe1\x03\x11\x18\n\r\n\
    \x05\x04\x1e\x02\0\x01\x12\x04\xe1\x03\x19)\n\r\n\x05\x04\x1e\x02\0\x03\
    \x12\x04\xe1\x03,-\n\x0c\n\x04\x04\x1e\x02\x01\x12\x04\xe2\x03\x088\n\r\
    \n\x05\x04\x1e\x02\x01\x04\x12\x04\xe2\x03\x08\x10\n\r\n\x05\x04\x1e\x02\
    \x01\x06\x12\x04\xe2\x03\x11,\n\r\n\x05\x04\x1e\x02\x01\x01\x12\x04\xe2\
    \x03-3\n\r\n\x05\x04\x1e\x02\x01\x03\x12\x04\xe2\x0367\n\x0c\n\x04\x04\
    \x1e\x02\x02\x12\x04\xe3\x03\x085\n\r\n\x05\x04\x1e\x02\x02\x04\x12\x04\
    \xe3\x03\x08\x10\n\r\n\x05\x04\x1e\x02\x02\x05\x12\x04\xe3\x03\x11\x17\n\
    \r\n\x05\x04\x1e\x02\x02\x01\x12\x04\xe3\x03\x180\n\r\n\x05\x04\x1e\x02\
    \x02\x03\x12\x04\xe3\x0334\n\x0c\n\x04\x04\x1e\x02\x03\x12\x04\xe4\x03\
    \x08F\n\r\n\x05\x04\x1e\x02\x03\x04\x12\x04\xe4\x03\x08\x10\n\r\n\x05\
    \x04\x1e\x02\x03\x06\x12\x04\xe4\x03\x111\n\r\n\x05\x04\x1e\x02\x03\x01\
    \x12\x04\xe4\x032A\n\r\n\x05\x04\x1e\x02\x03\x03\x12\x04\xe4\x03DE\n\x0c\
    \n\x04\x04\x1e\x02\x04\x12\x04\xe5\x03\x08<\n\r\n\x05\x04\x1e\x02\x04\
    \x04\x12\x04\xe5\x03\x08\x10\n\r\n\x05\x04\x1e\x02\x04\x06\x12\x04\xe5\
    \x03\x11,\n\r\n\x05\x04\x1e\x02\x04\x01\x12\x04\xe5\x03-7\n\r\n\x05\x04\
    \x1e\x02\x04\x03\x12\x04\xe5\x03:;\n\x0c\n\x04\x04\x1e\x02\x05\x12\x04\
    \xe6\x03\x08J\n\r\n\x05\x04\x1e\x02\x05\x04\x12\x04\xe6\x03\x08\x10\n\r\
    \n\x05\x04\x1e\x02\x05\x06\x12\x04\xe6\x03\x113\n\r\n\x05\x04\x1e\x02\
    \x05\x01\x12\x04\xe6\x034E\n\r\n\x05\x04\x1e\x02\x05\x03\x12\x04\xe6\x03\
    HI\n\x0c\n\x02\x04\x1f\x12\x06\xe9\x03\0\xfc\x03\x01\n\x0b\n\x03\x04\x1f\
    \x01\x12\x04\xe9\x03\x089\n\x0e\n\x04\x04\x1f\x04\0\x12\x06\xea\x03\x08\
    \xee\x03\t\n\r\n\x05\x04\x1f\x04\0\x01\x12\x04\xea\x03\r\x12\n\x0e\n\x06\
    \x04\x1f\x04\0\x02\0\x12\x04\xeb\x03\x10&\n\x0f\n\x07\x04\x1f\x04\0\x02\
    \0\x01\x12\x04\xeb\x03\x10!\n\x0f\n\x07\x04\x1f\x04\0\x02\0\x02\x12\x04\
    \xeb\x03$%\n\x0e\n\x06\x04\x1f\x04\0\x02\x01\x12\x04\xec\x03\x10$\n\x0f\
    \n\x07\x04\x1f\x04\0\x02\x01\x01\x12\x04\xec\x03\x10\x1f\n\x0f\n\x07\x04\
    \x1f\x04\0\x02\x01\x02\x12\x04\xec\x03\"#\n\x0e\n\x06\x04\x1f\x04\0\x02\
    \x02\x12\x04\xed\x03\x10*\n\x0f\n\x07\x04\x1f\x04\0\x02\x02\x01\x12\x04\
    \xed\x03\x10%\n\x0f\n\x07\x04\x1f\x04\0\x02\x02\x02\x12\x04\xed\x03()\n\
    \x0c\n\x04\x04\x1f\x02\0\x12\x04\xf0\x03\x08=\n\r\n\x05\x04\x1f\x02\0\
    \x04\x12\x04\xf0\x03\x08\x10\n\r\n\x05\x04\x1f\x02\0\x06\x12\x04\xf0\x03\
    \x114\n\r\n\x05\x04\x1f\x02\0\x01\x12\x04\xf0\x0358\n\r\n\x05\x04\x1f\
    \x02\0\x03\x12\x04\xf0\x03;<\n\x0c\n\x04\x04\x1f\x02\x01\x12\x04\xf1\x03\
    \x08=\n\r\n\x05\x04\x1f\x02\x01\x04\x12\x04\xf1\x03\x08\x10\n\r\n\x05\
    \x04\x1f\x02\x01\x06\x12\x04\xf1\x03\x114\n\r\n\x05\x04\x1f\x02\x01\x01\
    \x12\x04\xf1\x0358\n\r\n\x05\x04\x1f\x02\x01\x03\x12\x04\xf1\x03;<\n\x0c\
    \n\x04\x04\x1f\x02\x02\x12\x04\xf2\x03\x08'\n\r\n\x05\x04\x1f\x02\x02\
    \x04\x12\x04\xf2\x03\x08\x10\n\r\n\x05\x04\x1f\x02\x02\x05\x12\x04\xf2\
    \x03\x11\x18\n\r\n\x05\x04\x1f\x02\x02\x01\x12\x04\xf2\x03\x19\"\n\r\n\
    \x05\x04\x1f\x02\x02\x03\x12\x04\xf2\x03%&\n\x0c\n\x04\x04\x1f\x02\x03\
    \x12\x04\xf3\x03\x08%\n\r\n\x05\x04\x1f\x02\x03\x04\x12\x04\xf3\x03\x08\
    \x10\n\r\n\x05\x04\x1f\x02\x03\x05\x12\x04\xf3\x03\x11\x18\n\r\n\x05\x04\
    \x1f\x02\x03\x01\x12\x04\xf3\x03\x19\x20\n\r\n\x05\x04\x1f\x02\x03\x03\
    \x12\x04\xf3\x03#$\n\x0c\n\x04\x04\x1f\x02\x04\x12\x04\xf4\x03\x08\"\n\r\
    \n\x05\x04\x1f\x02\x04\x04\x12\x04\xf4\x03\x08\x10\n\r\n\x05\x04\x1f\x02\
    \x04\x05\x12\x04\xf4\x03\x11\x17\n\r\n\x05\x04\x1f\x02\x04\x01\x12\x04\
    \xf4\x03\x18\x1d\n\r\n\x05\x04\x1f\x02\x04\x03\x12\x04\xf4\x03\x20!\n\
    \x0c\n\x04\x04\x1f\x02\x05\x12\x04\xf5\x03\x08=\n\r\n\x05\x04\x1f\x02\
    \x05\x04\x12\x04\xf5\x03\x08\x10\n\r\n\x05\x04\x1f\x02\x05\x05\x12\x04\
    \xf5\x03\x11\x18\n\r\n\x05\x04\x1f\x02\x05\x01\x12\x04\xf5\x03\x198\n\r\
    \n\x05\x04\x1f\x02\x05\x03\x12\x04\xf5\x03;<\n\x0c\n\x04\x04\x1f\x02\x06\
    \x12\x04\xf6\x03\x084\n\r\n\x05\x04\x1f\x02\x06\x04\x12\x04\xf6\x03\x08\
    \x10\n\r\n\x05\x04\x1f\x02\x06\x05\x12\x04\xf6\x03\x11\x17\n\r\n\x05\x04\
    \x1f\x02\x06\x01\x12\x04\xf6\x03\x18/\n\r\n\x05\x04\x1f\x02\x06\x03\x12\
    \x04\xf6\x0323\n\x0c\n\x04\x04\x1f\x02\x07\x12\x04\xf7\x03\x088\n\r\n\
    \x05\x04\x1f\x02\x07\x04\x12\x04\xf7\x03\x08\x10\n\r\n\x05\x04\x1f\x02\
    \x07\x06\x12\x04\xf7\x03\x11,\n\r\n\x05\x04\x1f\x02\x07\x01\x12\x04\xf7\
    \x03-3\n\r\n\x05\x04\x1f\x02\x07\x03\x12\x04\xf7\x0367\n\x0c\n\x04\x04\
    \x1f\x02\x08\x12\x04\xf8\x03\x085\n\r\n\x05\x04\x1f\x02\x08\x04\x12\x04\
    \xf8\x03\x08\x10\n\r\n\x05\x04\x1f\x02\x08\x05\x12\x04\xf8\x03\x11\x17\n\
    \r\n\x05\x04\x1f\x02\x08\x01\x12\x04\xf8\x03\x180\n\r\n\x05\x04\x1f\x02\
    \x08\x03\x12\x04\xf8\x0334\n\x0c\n\x04\x04\x1f\x02\t\x12\x04\xf9\x03\x08\
    ,\n\r\n\x05\x04\x1f\x02\t\x04\x12\x04\xf9\x03\x08\x10\n\r\n\x05\x04\x1f\
    \x02\t\x05\x12\x04\xf9\x03\x11\x18\n\r\n\x05\x04\x1f\x02\t\x01\x12\x04\
    \xf9\x03\x19&\n\r\n\x05\x04\x1f\x02\t\x03\x12\x04\xf9\x03)+\n\x0c\n\x04\
    \x04\x1f\x02\n\x12\x04\xfa\x03\x08)\n\r\n\x05\x04\x1f\x02\n\x04\x12\x04\
    \xfa\x03\x08\x10\n\r\n\x05\x04\x1f\x02\n\x05\x12\x04\xfa\x03\x11\x17\n\r\
    \n\x05\x04\x1f\x02\n\x01\x12\x04\xfa\x03\x18#\n\r\n\x05\x04\x1f\x02\n\
    \x03\x12\x04\xfa\x03&(\n\x0c\n\x04\x04\x1f\x02\x0b\x12\x04\xfb\x03\x08)\
    \n\r\n\x05\x04\x1f\x02\x0b\x04\x12\x04\xfb\x03\x08\x10\n\r\n\x05\x04\x1f\
    \x02\x0b\x05\x12\x04\xfb\x03\x11\x17\n\r\n\x05\x04\x1f\x02\x0b\x01\x12\
    \x04\xfb\x03\x18#\n\r\n\x05\x04\x1f\x02\x0b\x03\x12\x04\xfb\x03&(\n\x0c\
    \n\x02\x04\x20\x12\x06\xfe\x03\0\x94\x04\x01\n\x0b\n\x03\x04\x20\x01\x12\
    \x04\xfe\x03\x089\n\x0e\n\x04\x04\x20\x04\0\x12\x06\xff\x03\x08\x83\x04\
    \t\n\r\n\x05\x04\x20\x04\0\x01\x12\x04\xff\x03\r\x12\n\x0e\n\x06\x04\x20\
    \x04\0\x02\0\x12\x04\x80\x04\x10&\n\x0f\n\x07\x04\x20\x04\0\x02\0\x01\
    \x12\x04\x80\x04\x10!\n\x0f\n\x07\x04\x20\x04\0\x02\0\x02\x12\x04\x80\
    \x04$%\n\x0e\n\x06\x04\x20\x04\0\x02\x01\x12\x04\x81\x04\x10$\n\x0f\n\
    \x07\x04\x20\x04\0\x02\x01\x01\x12\x04\x81\x04\x10\x1f\n\x0f\n\x07\x04\
    \x20\x04\0\x02\x01\x02\x12\x04\x81\x04\"#\n\x0e\n\x06\x04\x20\x04\0\x02\
    \x02\x12\x04\x82\x04\x10*\n\x0f\n\x07\x04\x20\x04\0\x02\x02\x01\x12\x04\
    \x82\x04\x10%\n\x0f\n\x07\x04\x20\x04\0\x02\x02\x02\x12\x04\x82\x04()\n\
    \x0c\n\x04\x04\x20\x02\0\x12\x04\x85\x04\x08=\n\r\n\x05\x04\x20\x02\0\
    \x04\x12\x04\x85\x04\x08\x10\n\r\n\x05\x04\x20\x02\0\x06\x12\x04\x85\x04\
    \x114\n\r\n\x05\x04\x20\x02\0\x01\x12\x04\x85\x0458\n\r\n\x05\x04\x20\
    \x02\0\x03\x12\x04\x85\x04;<\n\x0c\n\x04\x04\x20\x02\x01\x12\x04\x86\x04\
    \x08=\n\r\n\x05\x04\x20\x02\x01\x04\x12\x04\x86\x04\x08\x10\n\r\n\x05\
    \x04\x20\x02\x01\x06\x12\x04\x86\x04\x114\n\r\n\x05\x04\x20\x02\x01\x01\
    \x12\x04\x86\x0458\n\r\n\x05\x04\x20\x02\x01\x03\x12\x04\x86\x04;<\n\x0c\
    \n\x04\x04\x20\x02\x02\x12\x04\x87\x04\x083\n\r\n\x05\x04\x20\x02\x02\
    \x04\x12\x04\x87\x04\x08\x10\n\r\n\x05\x04\x20\x02\x02\x05\x12\x04\x87\
    \x04\x11\x17\n\r\n\x05\x04\x20\x02\x02\x01\x12\x04\x87\x04\x18.\n\r\n\
    \x05\x04\x20\x02\x02\x03\x12\x04\x87\x0412\n\x0c\n\x04\x04\x20\x02\x03\
    \x12\x04\x88\x04\x080\n\r\n\x05\x04\x20\x02\x03\x04\x12\x04\x88\x04\x08\
    \x10\n\r\n\x05\x04\x20\x02\x03\x05\x12\x04\x88\x04\x11\x18\n\r\n\x05\x04\
    \x20\x02\x03\x01\x12\x04\x88\x04\x19+\n\r\n\x05\x04\x20\x02\x03\x03\x12\
    \x04\x88\x04./\n\x0c\n\x04\x04\x20\x02\x04\x12\x04\x89\x04\x081\n\r\n\
    \x05\x04\x20\x02\x04\x04\x12\x04\x89\x04\x08\x10\n\r\n\x05\x04\x20\x02\
    \x04\x05\x12\x04\x89\x04\x11\x17\n\r\n\x05\x04\x20\x02\x04\x01\x12\x04\
    \x89\x04\x18,\n\r\n\x05\x04\x20\x02\x04\x03\x12\x04\x89\x04/0\n\x0c\n\
    \x04\x04\x20\x02\x05\x12\x04\x8a\x04\x08:\n\r\n\x05\x04\x20\x02\x05\x04\
    \x12\x04\x8a\x04\x08\x10\n\r\n\x05\x04\x20\x02\x05\x05\x12\x04\x8a\x04\
    \x11\x17\n\r\n\x05\x04\x20\x02\x05\x01\x12\x04\x8a\x04\x185\n\r\n\x05\
    \x04\x20\x02\x05\x03\x12\x04\x8a\x0489\n\x0c\n\x04\x04\x20\x02\x06\x12\
    \x04\x8b\x04\x08'\n\r\n\x05\x04\x20\x02\x06\x04\x12\x04\x8b\x04\x08\x10\
    \n\r\n\x05\x04\x20\x02\x06\x05\x12\x04\x8b\x04\x11\x18\n\r\n\x05\x04\x20\
    \x02\x06\x01\x12\x04\x8b\x04\x19\"\n\r\n\x05\x04\x20\x02\x06\x03\x12\x04\
    \x8b\x04%&\n\x0c\n\x04\x04\x20\x02\x07\x12\x04\x8c\x04\x08%\n\r\n\x05\
    \x04\x20\x02\x07\x04\x12\x04\x8c\x04\x08\x10\n\r\n\x05\x04\x20\x02\x07\
    \x05\x12\x04\x8c\x04\x11\x18\n\r\n\x05\x04\x20\x02\x07\x01\x12\x04\x8c\
    \x04\x19\x20\n\r\n\x05\x04\x20\x02\x07\x03\x12\x04\x8c\x04#$\n\x0c\n\x04\
    \x04\x20\x02\x08\x12\x04\x8d\x04\x08\"\n\r\n\x05\x04\x20\x02\x08\x04\x12\
    \x04\x8d\x04\x08\x10\n\r\n\x05\x04\x20\x02\x08\x05\x12\x04\x8d\x04\x11\
    \x17\n\r\n\x05\x04\x20\x02\x08\x01\x12\x04\x8d\x04\x18\x1d\n\r\n\x05\x04\
    \x20\x02\x08\x03\x12\x04\x8d\x04\x20!\n\x0c\n\x04\x04\x20\x02\t\x12\x04\
    \x8e\x04\x089\n\r\n\x05\x04\x20\x02\t\x04\x12\x04\x8e\x04\x08\x10\n\r\n\
    \x05\x04\x20\x02\t\x05\x12\x04\x8e\x04\x11\x17\n\r\n\x05\x04\x20\x02\t\
    \x01\x12\x04\x8e\x04\x183\n\r\n\x05\x04\x20\x02\t\x03\x12\x04\x8e\x0468\
    \n\x0c\n\x04\x04\x20\x02\n\x12\x04\x8f\x04\x089\n\r\n\x05\x04\x20\x02\n\
    \x04\x12\x04\x8f\x04\x08\x10\n\r\n\x05\x04\x20\x02\n\x06\x12\x04\x8f\x04\
    \x11,\n\r\n\x05\x04\x20\x02\n\x01\x12\x04\x8f\x04-3\n\r\n\x05\x04\x20\
    \x02\n\x03\x12\x04\x8f\x0468\n\x0c\n\x04\x04\x20\x02\x0b\x12\x04\x90\x04\
    \x086\n\r\n\x05\x04\x20\x02\x0b\x04\x12\x04\x90\x04\x08\x10\n\r\n\x05\
    \x04\x20\x02\x0b\x05\x12\x04\x90\x04\x11\x17\n\r\n\x05\x04\x20\x02\x0b\
    \x01\x12\x04\x90\x04\x180\n\r\n\x05\x04\x20\x02\x0b\x03\x12\x04\x90\x043\
    5\n\x0c\n\x04\x04\x20\x02\x0c\x12\x04\x91\x04\x08,\n\r\n\x05\x04\x20\x02\
    \x0c\x04\x12\x04\x91\x04\x08\x10\n\r\n\x05\x04\x20\x02\x0c\x05\x12\x04\
    \x91\x04\x11\x18\n\r\n\x05\x04\x20\x02\x0c\x01\x12\x04\x91\x04\x19&\n\r\
    \n\x05\x04\x20\x02\x0c\x03\x12\x04\x91\x04)+\n\x0c\n\x04\x04\x20\x02\r\
    \x12\x04\x92\x04\x08)\n\r\n\x05\x04\x20\x02\r\x04\x12\x04\x92\x04\x08\
    \x10\n\r\n\x05\x04\x20\x02\r\x05\x12\x04\x92\x04\x11\x17\n\r\n\x05\x04\
    \x20\x02\r\x01\x12\x04\x92\x04\x18#\n\r\n\x05\x04\x20\x02\r\x03\x12\x04\
    \x92\x04&(\n\x0c\n\x04\x04\x20\x02\x0e\x12\x04\x93\x04\x08)\n\r\n\x05\
    \x04\x20\x02\x0e\x04\x12\x04\x93\x04\x08\x10\n\r\n\x05\x04\x20\x02\x0e\
    \x05\x12\x04\x93\x04\x11\x17\n\r\n\x05\x04\x20\x02\x0e\x01\x12\x04\x93\
    \x04\x18#\n\r\n\x05\x04\x20\x02\x0e\x03\x12\x04\x93\x04&(\n\x0c\n\x02\
    \x04!\x12\x06\x96\x04\0\x9a\x04\x01\n\x0b\n\x03\x04!\x01\x12\x04\x96\x04\
    \x08-\n\x0c\n\x04\x04!\x02\0\x12\x04\x97\x04\x08+\n\r\n\x05\x04!\x02\0\
    \x04\x12\x04\x97\x04\x08\x10\n\r\n\x05\x04!\x02\0\x05\x12\x04\x97\x04\
    \x11\x18\n\r\n\x05\x04!\x02\0\x01\x12\x04\x97\x04\x19&\n\r\n\x05\x04!\
    \x02\0\x03\x12\x04\x97\x04)*\n\x0c\n\x04\x04!\x02\x01\x12\x04\x98\x04\
    \x08*\n\r\n\x05\x04!\x02\x01\x04\x12\x04\x98\x04\x08\x10\n\r\n\x05\x04!\
    \x02\x01\x05\x12\x04\x98\x04\x11\x18\n\r\n\x05\x04!\x02\x01\x01\x12\x04\
    \x98\x04\x19%\n\r\n\x05\x04!\x02\x01\x03\x12\x04\x98\x04()\n\x0c\n\x04\
    \x04!\x02\x02\x12\x04\x99\x04\x08-\n\r\n\x05\x04!\x02\x02\x04\x12\x04\
    \x99\x04\x08\x10\n\r\n\x05\x04!\x02\x02\x05\x12\x04\x99\x04\x11\x17\n\r\
    \n\x05\x04!\x02\x02\x01\x12\x04\x99\x04\x18(\n\r\n\x05\x04!\x02\x02\x03\
    \x12\x04\x99\x04+,\n\x0c\n\x02\x04\"\x12\x06\x9c\x04\0\xa1\x04\x01\n\x0b\
    \n\x03\x04\"\x01\x12\x04\x9c\x04\x08+\n\x0c\n\x04\x04\"\x02\0\x12\x04\
    \x9d\x04\x08+\n\r\n\x05\x04\"\x02\0\x04\x12\x04\x9d\x04\x08\x10\n\r\n\
    \x05\x04\"\x02\0\x05\x12\x04\x9d\x04\x11\x18\n\r\n\x05\x04\"\x02\0\x01\
    \x12\x04\x9d\x04\x19&\n\r\n\x05\x04\"\x02\0\x03\x12\x04\x9d\x04)*\n\x0c\
    \n\x04\x04\"\x02\x01\x12\x04\x9e\x04\x08'\n\r\n\x05\x04\"\x02\x01\x04\
    \x12\x04\x9e\x04\x08\x10\n\r\n\x05\x04\"\x02\x01\x05\x12\x04\x9e\x04\x11\
    \x18\n\r\n\x05\x04\"\x02\x01\x01\x12\x04\x9e\x04\x19\"\n\r\n\x05\x04\"\
    \x02\x01\x03\x12\x04\x9e\x04%&\n\x0c\n\x04\x04\"\x02\x02\x12\x04\x9f\x04\
    \x08,\n\r\n\x05\x04\"\x02\x02\x04\x12\x04\x9f\x04\x08\x10\n\r\n\x05\x04\
    \"\x02\x02\x05\x12\x04\x9f\x04\x11\x18\n\r\n\x05\x04\"\x02\x02\x01\x12\
    \x04\x9f\x04\x19'\n\r\n\x05\x04\"\x02\x02\x03\x12\x04\x9f\x04*+\n\x0c\n\
    \x04\x04\"\x02\x03\x12\x04\xa0\x04\x08-\n\r\n\x05\x04\"\x02\x03\x04\x12\
    \x04\xa0\x04\x08\x10\n\r\n\x05\x04\"\x02\x03\x05\x12\x04\xa0\x04\x11\x17\
    \n\r\n\x05\x04\"\x02\x03\x01\x12\x04\xa0\x04\x18(\n\r\n\x05\x04\"\x02\
    \x03\x03\x12\x04\xa0\x04+,\n\x0c\n\x02\x04#\x12\x06\xa3\x04\0\xac\x04\
    \x01\n\x0b\n\x03\x04#\x01\x12\x04\xa3\x04\x08+\n\x0c\n\x04\x04#\x02\0\
    \x12\x04\xa4\x04\x082\n\r\n\x05\x04#\x02\0\x04\x12\x04\xa4\x04\x08\x10\n\
    \r\n\x05\x04#\x02\0\x05\x12\x04\xa4\x04\x11\x18\n\r\n\x05\x04#\x02\0\x01\
    \x12\x04\xa4\x04\x19-\n\r\n\x05\x04#\x02\0\x03\x12\x04\xa4\x0401\n\x0c\n\
    \x04\x04#\x02\x01\x12\x04\xa5\x04\x08'\n\r\n\x05\x04#\x02\x01\x04\x12\
    \x04\xa5\x04\x08\x10\n\r\n\x05\x04#\x02\x01\x05\x12\x04\xa5\x04\x11\x18\
    \n\r\n\x05\x04#\x02\x01\x01\x12\x04\xa5\x04\x19\"\n\r\n\x05\x04#\x02\x01\
    \x03\x12\x04\xa5\x04%&\n\x0c\n\x04\x04#\x02\x02\x12\x04\xa6\x04\x08-\n\r\
    \n\x05\x04#\x02\x02\x04\x12\x04\xa6\x04\x08\x10\n\r\n\x05\x04#\x02\x02\
    \x05\x12\x04\xa6\x04\x11\x18\n\r\n\x05\x04#\x02\x02\x01\x12\x04\xa6\x04\
    \x19(\n\r\n\x05\x04#\x02\x02\x03\x12\x04\xa6\x04+,\n\x0c\n\x04\x04#\x02\
    \x03\x12\x04\xa7\x04\x08*\n\r\n\x05\x04#\x02\x03\x04\x12\x04\xa7\x04\x08\
    \x10\n\r\n\x05\x04#\x02\x03\x05\x12\x04\xa7\x04\x11\x18\n\r\n\x05\x04#\
    \x02\x03\x01\x12\x04\xa7\x04\x19%\n\r\n\x05\x04#\x02\x03\x03\x12\x04\xa7\
    \x04()\n\x0c\n\x04\x04#\x02\x04\x12\x04\xa8\x04\x08(\n\r\n\x05\x04#\x02\
    \x04\x04\x12\x04\xa8\x04\x08\x10\n\r\n\x05\x04#\x02\x04\x05\x12\x04\xa8\
    \x04\x11\x17\n\r\n\x05\x04#\x02\x04\x01\x12\x04\xa8\x04\x18#\n\r\n\x05\
    \x04#\x02\x04\x03\x12\x04\xa8\x04&'\n\x0c\n\x04\x04#\x02\x05\x12\x04\xa9\
    \x04\x08D\n\r\n\x05\x04#\x02\x05\x04\x12\x04\xa9\x04\x08\x10\n\r\n\x05\
    \x04#\x02\x05\x06\x12\x04\xa9\x04\x119\n\r\n\x05\x04#\x02\x05\x01\x12\
    \x04\xa9\x04:?\n\r\n\x05\x04#\x02\x05\x03\x12\x04\xa9\x04BC\n\x0c\n\x04\
    \x04#\x02\x06\x12\x04\xaa\x04\x08>\n\r\n\x05\x04#\x02\x06\x04\x12\x04\
    \xaa\x04\x08\x10\n\r\n\x05\x04#\x02\x06\x06\x12\x04\xaa\x04\x114\n\r\n\
    \x05\x04#\x02\x06\x01\x12\x04\xaa\x0459\n\r\n\x05\x04#\x02\x06\x03\x12\
    \x04\xaa\x04<=\n\x0c\n\x04\x04#\x02\x07\x12\x04\xab\x04\x08-\n\r\n\x05\
    \x04#\x02\x07\x04\x12\x04\xab\x04\x08\x10\n\r\n\x05\x04#\x02\x07\x05\x12\
    \x04\xab\x04\x11\x17\n\r\n\x05\x04#\x02\x07\x01\x12\x04\xab\x04\x18(\n\r\
    \n\x05\x04#\x02\x07\x03\x12\x04\xab\x04+,\n\x0c\n\x02\x04$\x12\x06\xae\
    \x04\0\xb7\x04\x01\n\x0b\n\x03\x04$\x01\x12\x04\xae\x04\x08&\n\x0c\n\x04\
    \x04$\x02\0\x12\x04\xaf\x04\x082\n\r\n\x05\x04$\x02\0\x04\x12\x04\xaf\
    \x04\x08\x10\n\r\n\x05\x04$\x02\0\x05\x12\x04\xaf\x04\x11\x18\n\r\n\x05\
    \x04$\x02\0\x01\x12\x04\xaf\x04\x19-\n\r\n\x05\x04$\x02\0\x03\x12\x04\
    \xaf\x0401\n\x0c\n\x04\x04$\x02\x01\x12\x04\xb0\x04\x082\n\r\n\x05\x04$\
    \x02\x01\x04\x12\x04\xb0\x04\x08\x10\n\r\n\x05\x04$\x02\x01\x05\x12\x04\
    \xb0\x04\x11\x18\n\r\n\x05\x04$\x02\x01\x01\x12\x04\xb0\x04\x19-\n\r\n\
    \x05\x04$\x02\x01\x03\x12\x04\xb0\x0401\n\x0c\n\x04\x04$\x02\x02\x12\x04\
    \xb1\x04\x08-\n\r\n\x05\x04$\x02\x02\x04\x12\x04\xb1\x04\x08\x10\n\r\n\
    \x05\x04$\x02\x02\x05\x12\x04\xb1\x04\x11\x18\n\r\n\x05\x04$\x02\x02\x01\
    \x12\x04\xb1\x04\x19(\n\r\n\x05\x04$\x02\x02\x03\x12\x04\xb1\x04+,\n\x0c\
    \n\x04\x04$\x02\x03\x12\x04\xb2\x04\x08,\n\r\n\x05\x04$\x02\x03\x04\x12\
    \x04\xb2\x04\x08\x10\n\r\n\x05\x04$\x02\x03\x05\x12\x04\xb2\x04\x11\x18\
    \n\r\n\x05\x04$\x02\x03\x01\x12\x04\xb2\x04\x19'\n\r\n\x05\x04$\x02\x03\
    \x03\x12\x04\xb2\x04*+\n\x0c\n\x04\x04$\x02\x04\x12\x04\xb3\x04\x08,\n\r\
    \n\x05\x04$\x02\x04\x04\x12\x04\xb3\x04\x08\x10\n\r\n\x05\x04$\x02\x04\
    \x05\x12\x04\xb3\x04\x11\x17\n\r\n\x05\x04$\x02\x04\x01\x12\x04\xb3\x04\
    \x18'\n\r\n\x05\x04$\x02\x04\x03\x12\x04\xb3\x04*+\n\x0c\n\x04\x04$\x02\
    \x05\x12\x04\xb4\x04\x08D\n\r\n\x05\x04$\x02\x05\x04\x12\x04\xb4\x04\x08\
    \x10\n\r\n\x05\x04$\x02\x05\x06\x12\x04\xb4\x04\x119\n\r\n\x05\x04$\x02\
    \x05\x01\x12\x04\xb4\x04:?\n\r\n\x05\x04$\x02\x05\x03\x12\x04\xb4\x04BC\
    \n\x0c\n\x04\x04$\x02\x06\x12\x04\xb5\x04\x08>\n\r\n\x05\x04$\x02\x06\
    \x04\x12\x04\xb5\x04\x08\x10\n\r\n\x05\x04$\x02\x06\x06\x12\x04\xb5\x04\
    \x114\n\r\n\x05\x04$\x02\x06\x01\x12\x04\xb5\x0459\n\r\n\x05\x04$\x02\
    \x06\x03\x12\x04\xb5\x04<=\n\x0c\n\x04\x04$\x02\x07\x12\x04\xb6\x04\x08-\
    \n\r\n\x05\x04$\x02\x07\x04\x12\x04\xb6\x04\x08\x10\n\r\n\x05\x04$\x02\
    \x07\x05\x12\x04\xb6\x04\x11\x17\n\r\n\x05\x04$\x02\x07\x01\x12\x04\xb6\
    \x04\x18(\n\r\n\x05\x04$\x02\x07\x03\x12\x04\xb6\x04+,\n\x0c\n\x02\x04%\
    \x12\x06\xb9\x04\0\xbf\x04\x01\n\x0b\n\x03\x04%\x01\x12\x04\xb9\x04\x08-\
    \n\x0c\n\x04\x04%\x02\0\x12\x04\xba\x04\x089\n\r\n\x05\x04%\x02\0\x04\
    \x12\x04\xba\x04\x08\x10\n\r\n\x05\x04%\x02\0\x05\x12\x04\xba\x04\x11\
    \x18\n\r\n\x05\x04%\x02\0\x01\x12\x04\xba\x04\x194\n\r\n\x05\x04%\x02\0\
    \x03\x12\x04\xba\x0478\n\x0c\n\x04\x04%\x02\x01\x12\x04\xbb\x04\x08.\n\r\
    \n\x05\x04%\x02\x01\x04\x12\x04\xbb\x04\x08\x10\n\r\n\x05\x04%\x02\x01\
    \x05\x12\x04\xbb\x04\x11\x18\n\r\n\x05\x04%\x02\x01\x01\x12\x04\xbb\x04\
    \x19)\n\r\n\x05\x04%\x02\x01\x03\x12\x04\xbb\x04,-\n\x0c\n\x04\x04%\x02\
    \x02\x12\x04\xbc\x04\x080\n\r\n\x05\x04%\x02\x02\x04\x12\x04\xbc\x04\x08\
    \x10\n\r\n\x05\x04%\x02\x02\x05\x12\x04\xbc\x04\x11\x18\n\r\n\x05\x04%\
    \x02\x02\x01\x12\x04\xbc\x04\x19+\n\r\n\x05\x04%\x02\x02\x03\x12\x04\xbc\
    \x04./\n\x0c\n\x04\x04%\x02\x03\x12\x04\xbd\x04\x08\"\n\r\n\x05\x04%\x02\
    \x03\x04\x12\x04\xbd\x04\x08\x10\n\r\n\x05\x04%\x02\x03\x05\x12\x04\xbd\
    \x04\x11\x17\n\r\n\x05\x04%\x02\x03\x01\x12\x04\xbd\x04\x18\x1d\n\r\n\
    \x05\x04%\x02\x03\x03\x12\x04\xbd\x04\x20!\n\x0c\n\x04\x04%\x02\x04\x12\
    \x04\xbe\x04\x08(\n\r\n\x05\x04%\x02\x04\x04\x12\x04\xbe\x04\x08\x10\n\r\
    \n\x05\x04%\x02\x04\x05\x12\x04\xbe\x04\x11\x17\n\r\n\x05\x04%\x02\x04\
    \x01\x12\x04\xbe\x04\x18#\n\r\n\x05\x04%\x02\x04\x03\x12\x04\xbe\x04&'\n\
    \x0c\n\x02\x04&\x12\x06\xc1\x04\0\xc5\x04\x01\n\x0b\n\x03\x04&\x01\x12\
    \x04\xc1\x04\x08)\n\x0c\n\x04\x04&\x02\0\x12\x04\xc2\x04\x089\n\r\n\x05\
    \x04&\x02\0\x04\x12\x04\xc2\x04\x08\x10\n\r\n\x05\x04&\x02\0\x05\x12\x04\
    \xc2\x04\x11\x18\n\r\n\x05\x04&\x02\0\x01\x12\x04\xc2\x04\x194\n\r\n\x05\
    \x04&\x02\0\x03\x12\x04\xc2\x0478\n\x0c\n\x04\x04&\x02\x01\x12\x04\xc3\
    \x04\x080\n\r\n\x05\x04&\x02\x01\x04\x12\x04\xc3\x04\x08\x10\n\r\n\x05\
    \x04&\x02\x01\x05\x12\x04\xc3\x04\x11\x18\n\r\n\x05\x04&\x02\x01\x01\x12\
    \x04\xc3\x04\x19+\n\r\n\x05\x04&\x02\x01\x03\x12\x04\xc3\x04./\n\x0c\n\
    \x04\x04&\x02\x02\x12\x04\xc4\x04\x08.\n\r\n\x05\x04&\x02\x02\x04\x12\
    \x04\xc4\x04\x08\x10\n\r\n\x05\x04&\x02\x02\x05\x12\x04\xc4\x04\x11\x18\
    \n\r\n\x05\x04&\x02\x02\x01\x12\x04\xc4\x04\x19)\n\r\n\x05\x04&\x02\x02\
    \x03\x12\x04\xc4\x04,-\n\x0c\n\x02\x04'\x12\x06\xc7\x04\0\xd4\x04\x01\n\
    \x0b\n\x03\x04'\x01\x12\x04\xc7\x04\x08\"\n\x0e\n\x04\x04'\x04\0\x12\x06\
    \xc8\x04\x08\xcb\x04\t\n\r\n\x05\x04'\x04\0\x01\x12\x04\xc8\x04\r\x12\n\
    \x0e\n\x06\x04'\x04\0\x02\0\x12\x04\xc9\x04\x10$\n\x0f\n\x07\x04'\x04\0\
    \x02\0\x01\x12\x04\xc9\x04\x10\x1f\n\x0f\n\x07\x04'\x04\0\x02\0\x02\x12\
    \x04\xc9\x04\"#\n\x0e\n\x06\x04'\x04\0\x02\x01\x12\x04\xca\x04\x10*\n\
    \x0f\n\x07\x04'\x04\0\x02\x01\x01\x12\x04\xca\x04\x10%\n\x0f\n\x07\x04'\
    \x04\0\x02\x01\x02\x12\x04\xca\x04()\n\x0c\n\x04\x04'\x02\0\x12\x04\xcd\
    \x04\x08?\n\r\n\x05\x04'\x02\0\x04\x12\x04\xcd\x04\x08\x10\n\r\n\x05\x04\
    '\x02\0\x06\x12\x04\xcd\x04\x114\n\r\n\x05\x04'\x02\0\x01\x12\x04\xcd\
    \x045:\n\r\n\x05\x04'\x02\0\x03\x12\x04\xcd\x04=>\n\x0c\n\x04\x04'\x02\
    \x01\x12\x04\xce\x04\x08%\n\r\n\x05\x04'\x02\x01\x04\x12\x04\xce\x04\x08\
    \x10\n\r\n\x05\x04'\x02\x01\x05\x12\x04\xce\x04\x11\x18\n\r\n\x05\x04'\
    \x02\x01\x01\x12\x04\xce\x04\x19\x20\n\r\n\x05\x04'\x02\x01\x03\x12\x04\
    \xce\x04#$\n\x0c\n\x04\x04'\x02\x02\x12\x04\xcf\x04\x08\"\n\r\n\x05\x04'\
    \x02\x02\x04\x12\x04\xcf\x04\x08\x10\n\r\n\x05\x04'\x02\x02\x05\x12\x04\
    \xcf\x04\x11\x17\n\r\n\x05\x04'\x02\x02\x01\x12\x04\xcf\x04\x18\x1d\n\r\
    \n\x05\x04'\x02\x02\x03\x12\x04\xcf\x04\x20!\n\x0c\n\x04\x04'\x02\x03\
    \x12\x04\xd0\x04\x089\n\r\n\x05\x04'\x02\x03\x04\x12\x04\xd0\x04\x08\x10\
    \n\r\n\x05\x04'\x02\x03\x05\x12\x04\xd0\x04\x11\x18\n\r\n\x05\x04'\x02\
    \x03\x01\x12\x04\xd0\x04\x194\n\r\n\x05\x04'\x02\x03\x03\x12\x04\xd0\x04\
    78\n\x0c\n\x04\x04'\x02\x04\x12\x04\xd1\x04\x08.\n\r\n\x05\x04'\x02\x04\
    \x04\x12\x04\xd1\x04\x08\x10\n\r\n\x05\x04'\x02\x04\x05\x12\x04\xd1\x04\
    \x11\x18\n\r\n\x05\x04'\x02\x04\x01\x12\x04\xd1\x04\x19)\n\r\n\x05\x04'\
    \x02\x04\x03\x12\x04\xd1\x04,-\n\x0c\n\x04\x04'\x02\x05\x12\x04\xd2\x04\
    \x081\n\r\n\x05\x04'\x02\x05\x04\x12\x04\xd2\x04\x08\x10\n\r\n\x05\x04'\
    \x02\x05\x05\x12\x04\xd2\x04\x11\x18\n\r\n\x05\x04'\x02\x05\x01\x12\x04\
    \xd2\x04\x19+\n\r\n\x05\x04'\x02\x05\x03\x12\x04\xd2\x04.0\n\x0c\n\x04\
    \x04'\x02\x06\x12\x04\xd3\x04\x08$\n\r\n\x05\x04'\x02\x06\x04\x12\x04\
    \xd3\x04\x08\x10\n\r\n\x05\x04'\x02\x06\x05\x12\x04\xd3\x04\x11\x17\n\r\
    \n\x05\x04'\x02\x06\x01\x12\x04\xd3\x04\x18\x1f\n\r\n\x05\x04'\x02\x06\
    \x03\x12\x04\xd3\x04\"#\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steamdatagram_auth_messages::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(49);
            messages.push(CMsgSteamDatagramRouterPingReply::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramGameserverPing::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramRelayToRelayPing::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramSessionCryptInfo::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramSessionCryptInfoSigned::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramGameserverSessionRequest::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramGameserverSessionEstablished::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramNoSessionRelayToClient::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramNoSessionRelayToServer::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramDiagnostic::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramDataCenterState::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramLinkInstantaneousStats::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramLinkLifetimeStats::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramConnectionQuality::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramConnectionStatsClientToRouter::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramConnectionStatsRouterToClient::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramConnectionStatsRouterToServer::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramConnectionStatsServerToRouter::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramClientPingSampleRequest::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramClientPingSampleReply::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramClientSwitchedPrimary::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramRouterHealth::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramConnectRequest::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramConnectOK::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramConnectionClosed::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramNoConnection::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramP2PSessionRequestBody::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramP2PSessionRequest::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramP2PSessionEstablished::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramP2PRoutes::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramP2PRendezvous::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramConnectionStatsP2PClientToRouter::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramConnectionStatsP2PRouterToClient::generated_message_descriptor_data());
            messages.push(CMsgSteamSockets_UDP_ChallengeRequest::generated_message_descriptor_data());
            messages.push(CMsgSteamSockets_UDP_ChallengeReply::generated_message_descriptor_data());
            messages.push(CMsgSteamSockets_UDP_ConnectRequest::generated_message_descriptor_data());
            messages.push(CMsgSteamSockets_UDP_ConnectOK::generated_message_descriptor_data());
            messages.push(CMsgSteamSockets_UDP_ConnectionClosed::generated_message_descriptor_data());
            messages.push(CMsgSteamSockets_UDP_NoConnection::generated_message_descriptor_data());
            messages.push(CMsgSteamSockets_UDP_Stats::generated_message_descriptor_data());
            messages.push(cmsg_steam_datagram_router_ping_reply::RouteException::generated_message_descriptor_data());
            messages.push(cmsg_steam_datagram_data_center_state::Server::generated_message_descriptor_data());
            messages.push(cmsg_steam_datagram_data_center_state::DataCenter::generated_message_descriptor_data());
            messages.push(cmsg_steam_datagram_client_ping_sample_reply::RoutingCluster::generated_message_descriptor_data());
            messages.push(cmsg_steam_datagram_client_ping_sample_reply::DataCenter::generated_message_descriptor_data());
            messages.push(cmsg_steam_datagram_client_switched_primary::RouterQuality::generated_message_descriptor_data());
            messages.push(cmsg_steam_datagram_router_health::DataCenter::generated_message_descriptor_data());
            messages.push(cmsg_steam_datagram_p2proutes::RelayCluster::generated_message_descriptor_data());
            messages.push(cmsg_steam_datagram_p2proutes::Route::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(11);
            enums.push(ESteamDatagramMsgID::generated_enum_descriptor_data());
            enums.push(ESteamNetworkingUDPMsgID::generated_enum_descriptor_data());
            enums.push(cmsg_steam_datagram_session_crypt_info::EKeyType::generated_enum_descriptor_data());
            enums.push(cmsg_steam_datagram_connection_stats_client_to_router::Flags::generated_enum_descriptor_data());
            enums.push(cmsg_steam_datagram_connection_stats_router_to_client::Flags::generated_enum_descriptor_data());
            enums.push(cmsg_steam_datagram_connection_stats_router_to_server::Flags::generated_enum_descriptor_data());
            enums.push(cmsg_steam_datagram_connection_stats_server_to_router::Flags::generated_enum_descriptor_data());
            enums.push(cmsg_steam_datagram_connection_closed::ERelayMode::generated_enum_descriptor_data());
            enums.push(cmsg_steam_datagram_connection_stats_p2pclient_to_router::Flags::generated_enum_descriptor_data());
            enums.push(cmsg_steam_datagram_connection_stats_p2prouter_to_client::Flags::generated_enum_descriptor_data());
            enums.push(cmsg_steam_sockets_udp_stats::Flags::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
