// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tf2/steamdatagram_auth_messages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CMsgSteamDatagramRelayAuthTicket)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramRelayAuthTicket {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.time_expiry)
    pub time_expiry: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.authorized_steam_id)
    pub authorized_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.authorized_public_ip)
    pub authorized_public_ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.gameserver_steam_id)
    pub gameserver_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.gameserver_net_id)
    pub gameserver_net_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.legacy_signature)
    pub legacy_signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.gameserver_pop_id)
    pub gameserver_pop_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.virtual_port)
    pub virtual_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.extra_fields)
    pub extra_fields: ::std::vec::Vec<cmsg_steam_datagram_relay_auth_ticket::ExtraField>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramRelayAuthTicket.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramRelayAuthTicket {
    fn default() -> &'a CMsgSteamDatagramRelayAuthTicket {
        <CMsgSteamDatagramRelayAuthTicket as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramRelayAuthTicket {
    pub fn new() -> CMsgSteamDatagramRelayAuthTicket {
        ::std::default::Default::default()
    }

    // optional fixed32 time_expiry = 1;

    pub fn time_expiry(&self) -> u32 {
        self.time_expiry.unwrap_or(0)
    }

    pub fn clear_time_expiry(&mut self) {
        self.time_expiry = ::std::option::Option::None;
    }

    pub fn has_time_expiry(&self) -> bool {
        self.time_expiry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_expiry(&mut self, v: u32) {
        self.time_expiry = ::std::option::Option::Some(v);
    }

    // optional fixed64 authorized_steam_id = 2;

    pub fn authorized_steam_id(&self) -> u64 {
        self.authorized_steam_id.unwrap_or(0)
    }

    pub fn clear_authorized_steam_id(&mut self) {
        self.authorized_steam_id = ::std::option::Option::None;
    }

    pub fn has_authorized_steam_id(&self) -> bool {
        self.authorized_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_authorized_steam_id(&mut self, v: u64) {
        self.authorized_steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 authorized_public_ip = 3;

    pub fn authorized_public_ip(&self) -> u32 {
        self.authorized_public_ip.unwrap_or(0)
    }

    pub fn clear_authorized_public_ip(&mut self) {
        self.authorized_public_ip = ::std::option::Option::None;
    }

    pub fn has_authorized_public_ip(&self) -> bool {
        self.authorized_public_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_authorized_public_ip(&mut self, v: u32) {
        self.authorized_public_ip = ::std::option::Option::Some(v);
    }

    // optional fixed64 gameserver_steam_id = 4;

    pub fn gameserver_steam_id(&self) -> u64 {
        self.gameserver_steam_id.unwrap_or(0)
    }

    pub fn clear_gameserver_steam_id(&mut self) {
        self.gameserver_steam_id = ::std::option::Option::None;
    }

    pub fn has_gameserver_steam_id(&self) -> bool {
        self.gameserver_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameserver_steam_id(&mut self, v: u64) {
        self.gameserver_steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 gameserver_net_id = 5;

    pub fn gameserver_net_id(&self) -> u64 {
        self.gameserver_net_id.unwrap_or(0)
    }

    pub fn clear_gameserver_net_id(&mut self) {
        self.gameserver_net_id = ::std::option::Option::None;
    }

    pub fn has_gameserver_net_id(&self) -> bool {
        self.gameserver_net_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameserver_net_id(&mut self, v: u64) {
        self.gameserver_net_id = ::std::option::Option::Some(v);
    }

    // optional bytes legacy_signature = 6;

    pub fn legacy_signature(&self) -> &[u8] {
        match self.legacy_signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_legacy_signature(&mut self) {
        self.legacy_signature = ::std::option::Option::None;
    }

    pub fn has_legacy_signature(&self) -> bool {
        self.legacy_signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.legacy_signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_legacy_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.legacy_signature.is_none() {
            self.legacy_signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.legacy_signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_legacy_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.legacy_signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 app_id = 7;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 gameserver_pop_id = 9;

    pub fn gameserver_pop_id(&self) -> u32 {
        self.gameserver_pop_id.unwrap_or(0)
    }

    pub fn clear_gameserver_pop_id(&mut self) {
        self.gameserver_pop_id = ::std::option::Option::None;
    }

    pub fn has_gameserver_pop_id(&self) -> bool {
        self.gameserver_pop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameserver_pop_id(&mut self, v: u32) {
        self.gameserver_pop_id = ::std::option::Option::Some(v);
    }

    // optional uint32 virtual_port = 10;

    pub fn virtual_port(&self) -> u32 {
        self.virtual_port.unwrap_or(0)
    }

    pub fn clear_virtual_port(&mut self) {
        self.virtual_port = ::std::option::Option::None;
    }

    pub fn has_virtual_port(&self) -> bool {
        self.virtual_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_virtual_port(&mut self, v: u32) {
        self.virtual_port = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_expiry",
            |m: &CMsgSteamDatagramRelayAuthTicket| { &m.time_expiry },
            |m: &mut CMsgSteamDatagramRelayAuthTicket| { &mut m.time_expiry },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "authorized_steam_id",
            |m: &CMsgSteamDatagramRelayAuthTicket| { &m.authorized_steam_id },
            |m: &mut CMsgSteamDatagramRelayAuthTicket| { &mut m.authorized_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "authorized_public_ip",
            |m: &CMsgSteamDatagramRelayAuthTicket| { &m.authorized_public_ip },
            |m: &mut CMsgSteamDatagramRelayAuthTicket| { &mut m.authorized_public_ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gameserver_steam_id",
            |m: &CMsgSteamDatagramRelayAuthTicket| { &m.gameserver_steam_id },
            |m: &mut CMsgSteamDatagramRelayAuthTicket| { &mut m.gameserver_steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gameserver_net_id",
            |m: &CMsgSteamDatagramRelayAuthTicket| { &m.gameserver_net_id },
            |m: &mut CMsgSteamDatagramRelayAuthTicket| { &mut m.gameserver_net_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_signature",
            |m: &CMsgSteamDatagramRelayAuthTicket| { &m.legacy_signature },
            |m: &mut CMsgSteamDatagramRelayAuthTicket| { &mut m.legacy_signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgSteamDatagramRelayAuthTicket| { &m.app_id },
            |m: &mut CMsgSteamDatagramRelayAuthTicket| { &mut m.app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gameserver_pop_id",
            |m: &CMsgSteamDatagramRelayAuthTicket| { &m.gameserver_pop_id },
            |m: &mut CMsgSteamDatagramRelayAuthTicket| { &mut m.gameserver_pop_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "virtual_port",
            |m: &CMsgSteamDatagramRelayAuthTicket| { &m.virtual_port },
            |m: &mut CMsgSteamDatagramRelayAuthTicket| { &mut m.virtual_port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "extra_fields",
            |m: &CMsgSteamDatagramRelayAuthTicket| { &m.extra_fields },
            |m: &mut CMsgSteamDatagramRelayAuthTicket| { &mut m.extra_fields },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramRelayAuthTicket>(
            "CMsgSteamDatagramRelayAuthTicket",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramRelayAuthTicket {
    const NAME: &'static str = "CMsgSteamDatagramRelayAuthTicket";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.time_expiry = ::std::option::Option::Some(is.read_fixed32()?);
                },
                17 => {
                    self.authorized_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                29 => {
                    self.authorized_public_ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                33 => {
                    self.gameserver_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                41 => {
                    self.gameserver_net_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                50 => {
                    self.legacy_signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                56 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                77 => {
                    self.gameserver_pop_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                80 => {
                    self.virtual_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                66 => {
                    self.extra_fields.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.time_expiry {
            my_size += 1 + 4;
        }
        if let Some(v) = self.authorized_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.authorized_public_ip {
            my_size += 1 + 4;
        }
        if let Some(v) = self.gameserver_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.gameserver_net_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.legacy_signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.gameserver_pop_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.virtual_port {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        for value in &self.extra_fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.time_expiry {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.authorized_steam_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.authorized_public_ip {
            os.write_fixed32(3, v)?;
        }
        if let Some(v) = self.gameserver_steam_id {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.gameserver_net_id {
            os.write_fixed64(5, v)?;
        }
        if let Some(v) = self.legacy_signature.as_ref() {
            os.write_bytes(6, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.gameserver_pop_id {
            os.write_fixed32(9, v)?;
        }
        if let Some(v) = self.virtual_port {
            os.write_uint32(10, v)?;
        }
        for v in &self.extra_fields {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramRelayAuthTicket {
        CMsgSteamDatagramRelayAuthTicket::new()
    }

    fn clear(&mut self) {
        self.time_expiry = ::std::option::Option::None;
        self.authorized_steam_id = ::std::option::Option::None;
        self.authorized_public_ip = ::std::option::Option::None;
        self.gameserver_steam_id = ::std::option::Option::None;
        self.gameserver_net_id = ::std::option::Option::None;
        self.legacy_signature = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.gameserver_pop_id = ::std::option::Option::None;
        self.virtual_port = ::std::option::Option::None;
        self.extra_fields.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramRelayAuthTicket {
        static instance: CMsgSteamDatagramRelayAuthTicket = CMsgSteamDatagramRelayAuthTicket {
            time_expiry: ::std::option::Option::None,
            authorized_steam_id: ::std::option::Option::None,
            authorized_public_ip: ::std::option::Option::None,
            gameserver_steam_id: ::std::option::Option::None,
            gameserver_net_id: ::std::option::Option::None,
            legacy_signature: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            gameserver_pop_id: ::std::option::Option::None,
            virtual_port: ::std::option::Option::None,
            extra_fields: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramRelayAuthTicket {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramRelayAuthTicket").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramRelayAuthTicket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramRelayAuthTicket {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramRelayAuthTicket`
pub mod cmsg_steam_datagram_relay_auth_ticket {
    // @@protoc_insertion_point(message:CMsgSteamDatagramRelayAuthTicket.ExtraField)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ExtraField {
        // message fields
        // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
        pub string_value: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.ExtraField.int64_value)
        pub int64_value: ::std::option::Option<i64>,
        // @@protoc_insertion_point(field:CMsgSteamDatagramRelayAuthTicket.ExtraField.fixed64_value)
        pub fixed64_value: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgSteamDatagramRelayAuthTicket.ExtraField.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ExtraField {
        fn default() -> &'a ExtraField {
            <ExtraField as ::protobuf::Message>::default_instance()
        }
    }

    impl ExtraField {
        pub fn new() -> ExtraField {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string string_value = 2;

        pub fn string_value(&self) -> &str {
            match self.string_value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_string_value(&mut self) {
            self.string_value = ::std::option::Option::None;
        }

        pub fn has_string_value(&self) -> bool {
            self.string_value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_string_value(&mut self, v: ::std::string::String) {
            self.string_value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
            if self.string_value.is_none() {
                self.string_value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.string_value.as_mut().unwrap()
        }

        // Take field
        pub fn take_string_value(&mut self) -> ::std::string::String {
            self.string_value.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional sint64 int64_value = 3;

        pub fn int64_value(&self) -> i64 {
            self.int64_value.unwrap_or(0)
        }

        pub fn clear_int64_value(&mut self) {
            self.int64_value = ::std::option::Option::None;
        }

        pub fn has_int64_value(&self) -> bool {
            self.int64_value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_int64_value(&mut self, v: i64) {
            self.int64_value = ::std::option::Option::Some(v);
        }

        // optional fixed64 fixed64_value = 5;

        pub fn fixed64_value(&self) -> u64 {
            self.fixed64_value.unwrap_or(0)
        }

        pub fn clear_fixed64_value(&mut self) {
            self.fixed64_value = ::std::option::Option::None;
        }

        pub fn has_fixed64_value(&self) -> bool {
            self.fixed64_value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_fixed64_value(&mut self, v: u64) {
            self.fixed64_value = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &ExtraField| { &m.name },
                |m: &mut ExtraField| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "string_value",
                |m: &ExtraField| { &m.string_value },
                |m: &mut ExtraField| { &mut m.string_value },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "int64_value",
                |m: &ExtraField| { &m.int64_value },
                |m: &mut ExtraField| { &mut m.int64_value },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "fixed64_value",
                |m: &ExtraField| { &m.fixed64_value },
                |m: &mut ExtraField| { &mut m.fixed64_value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExtraField>(
                "CMsgSteamDatagramRelayAuthTicket.ExtraField",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ExtraField {
        const NAME: &'static str = "ExtraField";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.string_value = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.int64_value = ::std::option::Option::Some(is.read_sint64()?);
                    },
                    41 => {
                        self.fixed64_value = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.string_value.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.int64_value {
                my_size += ::protobuf::rt::sint64_size(3, v);
            }
            if let Some(v) = self.fixed64_value {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.string_value.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.int64_value {
                os.write_sint64(3, v)?;
            }
            if let Some(v) = self.fixed64_value {
                os.write_fixed64(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ExtraField {
            ExtraField::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.string_value = ::std::option::Option::None;
            self.int64_value = ::std::option::Option::None;
            self.fixed64_value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ExtraField {
            static instance: ExtraField = ExtraField {
                name: ::std::option::Option::None,
                string_value: ::std::option::Option::None,
                int64_value: ::std::option::Option::None,
                fixed64_value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ExtraField {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgSteamDatagramRelayAuthTicket.ExtraField").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ExtraField {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ExtraField {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramSignedRelayAuthTicket)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramSignedRelayAuthTicket {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramSignedRelayAuthTicket.reserved_do_not_use)
    pub reserved_do_not_use: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramSignedRelayAuthTicket.key_id)
    pub key_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramSignedRelayAuthTicket.ticket)
    pub ticket: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramSignedRelayAuthTicket.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramSignedRelayAuthTicket.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramSignedRelayAuthTicket {
    fn default() -> &'a CMsgSteamDatagramSignedRelayAuthTicket {
        <CMsgSteamDatagramSignedRelayAuthTicket as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramSignedRelayAuthTicket {
    pub fn new() -> CMsgSteamDatagramSignedRelayAuthTicket {
        ::std::default::Default::default()
    }

    // optional fixed64 reserved_do_not_use = 1;

    pub fn reserved_do_not_use(&self) -> u64 {
        self.reserved_do_not_use.unwrap_or(0)
    }

    pub fn clear_reserved_do_not_use(&mut self) {
        self.reserved_do_not_use = ::std::option::Option::None;
    }

    pub fn has_reserved_do_not_use(&self) -> bool {
        self.reserved_do_not_use.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reserved_do_not_use(&mut self, v: u64) {
        self.reserved_do_not_use = ::std::option::Option::Some(v);
    }

    // optional fixed64 key_id = 2;

    pub fn key_id(&self) -> u64 {
        self.key_id.unwrap_or(0)
    }

    pub fn clear_key_id(&mut self) {
        self.key_id = ::std::option::Option::None;
    }

    pub fn has_key_id(&self) -> bool {
        self.key_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_id(&mut self, v: u64) {
        self.key_id = ::std::option::Option::Some(v);
    }

    // optional bytes ticket = 3;

    pub fn ticket(&self) -> &[u8] {
        match self.ticket.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_ticket(&mut self) {
        self.ticket = ::std::option::Option::None;
    }

    pub fn has_ticket(&self) -> bool {
        self.ticket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ticket(&mut self, v: ::std::vec::Vec<u8>) {
        self.ticket = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ticket(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.ticket.is_none() {
            self.ticket = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.ticket.as_mut().unwrap()
    }

    // Take field
    pub fn take_ticket(&mut self) -> ::std::vec::Vec<u8> {
        self.ticket.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 4;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reserved_do_not_use",
            |m: &CMsgSteamDatagramSignedRelayAuthTicket| { &m.reserved_do_not_use },
            |m: &mut CMsgSteamDatagramSignedRelayAuthTicket| { &mut m.reserved_do_not_use },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key_id",
            |m: &CMsgSteamDatagramSignedRelayAuthTicket| { &m.key_id },
            |m: &mut CMsgSteamDatagramSignedRelayAuthTicket| { &mut m.key_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ticket",
            |m: &CMsgSteamDatagramSignedRelayAuthTicket| { &m.ticket },
            |m: &mut CMsgSteamDatagramSignedRelayAuthTicket| { &mut m.ticket },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &CMsgSteamDatagramSignedRelayAuthTicket| { &m.signature },
            |m: &mut CMsgSteamDatagramSignedRelayAuthTicket| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramSignedRelayAuthTicket>(
            "CMsgSteamDatagramSignedRelayAuthTicket",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramSignedRelayAuthTicket {
    const NAME: &'static str = "CMsgSteamDatagramSignedRelayAuthTicket";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.reserved_do_not_use = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.key_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    self.ticket = ::std::option::Option::Some(is.read_bytes()?);
                },
                34 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.reserved_do_not_use {
            my_size += 1 + 8;
        }
        if let Some(v) = self.key_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.ticket.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.reserved_do_not_use {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.key_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.ticket.as_ref() {
            os.write_bytes(3, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramSignedRelayAuthTicket {
        CMsgSteamDatagramSignedRelayAuthTicket::new()
    }

    fn clear(&mut self) {
        self.reserved_do_not_use = ::std::option::Option::None;
        self.key_id = ::std::option::Option::None;
        self.ticket = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramSignedRelayAuthTicket {
        static instance: CMsgSteamDatagramSignedRelayAuthTicket = CMsgSteamDatagramSignedRelayAuthTicket {
            reserved_do_not_use: ::std::option::Option::None,
            key_id: ::std::option::Option::None,
            ticket: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramSignedRelayAuthTicket {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramSignedRelayAuthTicket").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramSignedRelayAuthTicket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramSignedRelayAuthTicket {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamDatagramCertificate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramCertificate {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramCertificate.key_type)
    pub key_type: ::std::option::Option<::protobuf::EnumOrUnknown<cmsg_steam_datagram_certificate::EKeyType>>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramCertificate.key_data)
    pub key_data: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramCertificate.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramCertificate.gameserver_datacenter_ids)
    pub gameserver_datacenter_ids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramCertificate.time_created)
    pub time_created: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramCertificate.time_expiry)
    pub time_expiry: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramCertificate.app_id)
    pub app_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramCertificate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramCertificate {
    fn default() -> &'a CMsgSteamDatagramCertificate {
        <CMsgSteamDatagramCertificate as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramCertificate {
    pub fn new() -> CMsgSteamDatagramCertificate {
        ::std::default::Default::default()
    }

    // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;

    pub fn key_type(&self) -> cmsg_steam_datagram_certificate::EKeyType {
        match self.key_type {
            Some(e) => e.enum_value_or(cmsg_steam_datagram_certificate::EKeyType::INVALID),
            None => cmsg_steam_datagram_certificate::EKeyType::INVALID,
        }
    }

    pub fn clear_key_type(&mut self) {
        self.key_type = ::std::option::Option::None;
    }

    pub fn has_key_type(&self) -> bool {
        self.key_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_type(&mut self, v: cmsg_steam_datagram_certificate::EKeyType) {
        self.key_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional bytes key_data = 2;

    pub fn key_data(&self) -> &[u8] {
        match self.key_data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_key_data(&mut self) {
        self.key_data = ::std::option::Option::None;
    }

    pub fn has_key_data(&self) -> bool {
        self.key_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.key_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.key_data.is_none() {
            self.key_data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.key_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_key_data(&mut self) -> ::std::vec::Vec<u8> {
        self.key_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional fixed64 steam_id = 4;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 time_created = 8;

    pub fn time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }

    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    // optional fixed32 time_expiry = 9;

    pub fn time_expiry(&self) -> u32 {
        self.time_expiry.unwrap_or(0)
    }

    pub fn clear_time_expiry(&mut self) {
        self.time_expiry = ::std::option::Option::None;
    }

    pub fn has_time_expiry(&self) -> bool {
        self.time_expiry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_expiry(&mut self, v: u32) {
        self.time_expiry = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 10;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key_type",
            |m: &CMsgSteamDatagramCertificate| { &m.key_type },
            |m: &mut CMsgSteamDatagramCertificate| { &mut m.key_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key_data",
            |m: &CMsgSteamDatagramCertificate| { &m.key_data },
            |m: &mut CMsgSteamDatagramCertificate| { &mut m.key_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_id",
            |m: &CMsgSteamDatagramCertificate| { &m.steam_id },
            |m: &mut CMsgSteamDatagramCertificate| { &mut m.steam_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "gameserver_datacenter_ids",
            |m: &CMsgSteamDatagramCertificate| { &m.gameserver_datacenter_ids },
            |m: &mut CMsgSteamDatagramCertificate| { &mut m.gameserver_datacenter_ids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_created",
            |m: &CMsgSteamDatagramCertificate| { &m.time_created },
            |m: &mut CMsgSteamDatagramCertificate| { &mut m.time_created },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_expiry",
            |m: &CMsgSteamDatagramCertificate| { &m.time_expiry },
            |m: &mut CMsgSteamDatagramCertificate| { &mut m.time_expiry },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgSteamDatagramCertificate| { &m.app_id },
            |m: &mut CMsgSteamDatagramCertificate| { &mut m.app_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramCertificate>(
            "CMsgSteamDatagramCertificate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramCertificate {
    const NAME: &'static str = "CMsgSteamDatagramCertificate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.key_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.key_data = ::std::option::Option::Some(is.read_bytes()?);
                },
                33 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                42 => {
                    is.read_repeated_packed_fixed32_into(&mut self.gameserver_datacenter_ids)?;
                },
                45 => {
                    self.gameserver_datacenter_ids.push(is.read_fixed32()?);
                },
                69 => {
                    self.time_created = ::std::option::Option::Some(is.read_fixed32()?);
                },
                77 => {
                    self.time_expiry = ::std::option::Option::Some(is.read_fixed32()?);
                },
                80 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key_type {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.key_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        my_size += 5 * self.gameserver_datacenter_ids.len() as u64;
        if let Some(v) = self.time_created {
            my_size += 1 + 4;
        }
        if let Some(v) = self.time_expiry {
            my_size += 1 + 4;
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key_type {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.key_data.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.steam_id {
            os.write_fixed64(4, v)?;
        }
        for v in &self.gameserver_datacenter_ids {
            os.write_fixed32(5, *v)?;
        };
        if let Some(v) = self.time_created {
            os.write_fixed32(8, v)?;
        }
        if let Some(v) = self.time_expiry {
            os.write_fixed32(9, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramCertificate {
        CMsgSteamDatagramCertificate::new()
    }

    fn clear(&mut self) {
        self.key_type = ::std::option::Option::None;
        self.key_data = ::std::option::Option::None;
        self.steam_id = ::std::option::Option::None;
        self.gameserver_datacenter_ids.clear();
        self.time_created = ::std::option::Option::None;
        self.time_expiry = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramCertificate {
        static instance: CMsgSteamDatagramCertificate = CMsgSteamDatagramCertificate {
            key_type: ::std::option::Option::None,
            key_data: ::std::option::Option::None,
            steam_id: ::std::option::Option::None,
            gameserver_datacenter_ids: ::std::vec::Vec::new(),
            time_created: ::std::option::Option::None,
            time_expiry: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramCertificate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramCertificate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramCertificate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramCertificate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamDatagramCertificate`
pub mod cmsg_steam_datagram_certificate {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgSteamDatagramCertificate.EKeyType)
    pub enum EKeyType {
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramCertificate.EKeyType.INVALID)
        INVALID = 0,
        // @@protoc_insertion_point(enum_value:CMsgSteamDatagramCertificate.EKeyType.ED25519)
        ED25519 = 1,
    }

    impl ::protobuf::Enum for EKeyType {
        const NAME: &'static str = "EKeyType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EKeyType> {
            match value {
                0 => ::std::option::Option::Some(EKeyType::INVALID),
                1 => ::std::option::Option::Some(EKeyType::ED25519),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EKeyType> {
            match str {
                "INVALID" => ::std::option::Option::Some(EKeyType::INVALID),
                "ED25519" => ::std::option::Option::Some(EKeyType::ED25519),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EKeyType] = &[
            EKeyType::INVALID,
            EKeyType::ED25519,
        ];
    }

    impl ::protobuf::EnumFull for EKeyType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgSteamDatagramCertificate.EKeyType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for EKeyType {
        fn default() -> Self {
            EKeyType::INVALID
        }
    }

    impl EKeyType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EKeyType>("CMsgSteamDatagramCertificate.EKeyType")
        }
    }
}

// @@protoc_insertion_point(message:CMsgSteamDatagramCertificateSigned)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamDatagramCertificateSigned {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamDatagramCertificateSigned.cert)
    pub cert: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramCertificateSigned.ca_key_id)
    pub ca_key_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamDatagramCertificateSigned.ca_signature)
    pub ca_signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamDatagramCertificateSigned.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamDatagramCertificateSigned {
    fn default() -> &'a CMsgSteamDatagramCertificateSigned {
        <CMsgSteamDatagramCertificateSigned as ::protobuf::Message>::default_instance()
    }
}

impl CMsgSteamDatagramCertificateSigned {
    pub fn new() -> CMsgSteamDatagramCertificateSigned {
        ::std::default::Default::default()
    }

    // optional bytes cert = 4;

    pub fn cert(&self) -> &[u8] {
        match self.cert.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_cert(&mut self) {
        self.cert = ::std::option::Option::None;
    }

    pub fn has_cert(&self) -> bool {
        self.cert.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cert(&mut self, v: ::std::vec::Vec<u8>) {
        self.cert = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cert(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.cert.is_none() {
            self.cert = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.cert.as_mut().unwrap()
    }

    // Take field
    pub fn take_cert(&mut self) -> ::std::vec::Vec<u8> {
        self.cert.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional fixed64 ca_key_id = 5;

    pub fn ca_key_id(&self) -> u64 {
        self.ca_key_id.unwrap_or(0)
    }

    pub fn clear_ca_key_id(&mut self) {
        self.ca_key_id = ::std::option::Option::None;
    }

    pub fn has_ca_key_id(&self) -> bool {
        self.ca_key_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ca_key_id(&mut self, v: u64) {
        self.ca_key_id = ::std::option::Option::Some(v);
    }

    // optional bytes ca_signature = 6;

    pub fn ca_signature(&self) -> &[u8] {
        match self.ca_signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_ca_signature(&mut self) {
        self.ca_signature = ::std::option::Option::None;
    }

    pub fn has_ca_signature(&self) -> bool {
        self.ca_signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ca_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.ca_signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ca_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.ca_signature.is_none() {
            self.ca_signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.ca_signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_ca_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.ca_signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cert",
            |m: &CMsgSteamDatagramCertificateSigned| { &m.cert },
            |m: &mut CMsgSteamDatagramCertificateSigned| { &mut m.cert },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ca_key_id",
            |m: &CMsgSteamDatagramCertificateSigned| { &m.ca_key_id },
            |m: &mut CMsgSteamDatagramCertificateSigned| { &mut m.ca_key_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ca_signature",
            |m: &CMsgSteamDatagramCertificateSigned| { &m.ca_signature },
            |m: &mut CMsgSteamDatagramCertificateSigned| { &mut m.ca_signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamDatagramCertificateSigned>(
            "CMsgSteamDatagramCertificateSigned",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgSteamDatagramCertificateSigned {
    const NAME: &'static str = "CMsgSteamDatagramCertificateSigned";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    self.cert = ::std::option::Option::Some(is.read_bytes()?);
                },
                41 => {
                    self.ca_key_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                50 => {
                    self.ca_signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cert.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.ca_key_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.ca_signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.cert.as_ref() {
            os.write_bytes(4, v)?;
        }
        if let Some(v) = self.ca_key_id {
            os.write_fixed64(5, v)?;
        }
        if let Some(v) = self.ca_signature.as_ref() {
            os.write_bytes(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamDatagramCertificateSigned {
        CMsgSteamDatagramCertificateSigned::new()
    }

    fn clear(&mut self) {
        self.cert = ::std::option::Option::None;
        self.ca_key_id = ::std::option::Option::None;
        self.ca_signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamDatagramCertificateSigned {
        static instance: CMsgSteamDatagramCertificateSigned = CMsgSteamDatagramCertificateSigned {
            cert: ::std::option::Option::None,
            ca_key_id: ::std::option::Option::None,
            ca_signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgSteamDatagramCertificateSigned {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamDatagramCertificateSigned").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamDatagramCertificateSigned {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgSteamDatagramCertificateSigned {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%tf2/steamdatagram_auth_messages.proto\"\xef\x04\n\x20CMsgSteamDatagra\
    mRelayAuthTicket\x12\x1f\n\x0btime_expiry\x18\x01\x20\x01(\x07R\ntimeExp\
    iry\x12.\n\x13authorized_steam_id\x18\x02\x20\x01(\x06R\x11authorizedSte\
    amId\x120\n\x14authorized_public_ip\x18\x03\x20\x01(\x07R\x12authorizedP\
    ublicIp\x12.\n\x13gameserver_steam_id\x18\x04\x20\x01(\x06R\x11gameserve\
    rSteamId\x12*\n\x11gameserver_net_id\x18\x05\x20\x01(\x06R\x0fgameserver\
    NetId\x12)\n\x10legacy_signature\x18\x06\x20\x01(\x0cR\x0flegacySignatur\
    e\x12\x15\n\x06app_id\x18\x07\x20\x01(\rR\x05appId\x12*\n\x11gameserver_\
    pop_id\x18\t\x20\x01(\x07R\x0fgameserverPopId\x12!\n\x0cvirtual_port\x18\
    \n\x20\x01(\rR\x0bvirtualPort\x12O\n\x0cextra_fields\x18\x08\x20\x03(\
    \x0b2,.CMsgSteamDatagramRelayAuthTicket.ExtraFieldR\x0bextraFields\x1a\
    \x89\x01\n\nExtraField\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\
    !\n\x0cstring_value\x18\x02\x20\x01(\tR\x0bstringValue\x12\x1f\n\x0bint6\
    4_value\x18\x03\x20\x01(\x12R\nint64Value\x12#\n\rfixed64_value\x18\x05\
    \x20\x01(\x06R\x0cfixed64Value\"\xa4\x01\n&CMsgSteamDatagramSignedRelayA\
    uthTicket\x12-\n\x13reserved_do_not_use\x18\x01\x20\x01(\x06R\x10reserve\
    dDoNotUse\x12\x15\n\x06key_id\x18\x02\x20\x01(\x06R\x05keyId\x12\x16\n\
    \x06ticket\x18\x03\x20\x01(\x0cR\x06ticket\x12\x1c\n\tsignature\x18\x04\
    \x20\x01(\x0cR\tsignature\"\xdd\x02\n\x1cCMsgSteamDatagramCertificate\
    \x12J\n\x08key_type\x18\x01\x20\x01(\x0e2&.CMsgSteamDatagramCertificate.\
    EKeyType:\x07INVALIDR\x07keyType\x12\x19\n\x08key_data\x18\x02\x20\x01(\
    \x0cR\x07keyData\x12\x19\n\x08steam_id\x18\x04\x20\x01(\x06R\x07steamId\
    \x12:\n\x19gameserver_datacenter_ids\x18\x05\x20\x03(\x07R\x17gameserver\
    DatacenterIds\x12!\n\x0ctime_created\x18\x08\x20\x01(\x07R\x0btimeCreate\
    d\x12\x1f\n\x0btime_expiry\x18\t\x20\x01(\x07R\ntimeExpiry\x12\x15\n\x06\
    app_id\x18\n\x20\x01(\rR\x05appId\"$\n\x08EKeyType\x12\x0b\n\x07INVALID\
    \x10\0\x12\x0b\n\x07ED25519\x10\x01\"w\n\"CMsgSteamDatagramCertificateSi\
    gned\x12\x12\n\x04cert\x18\x04\x20\x01(\x0cR\x04cert\x12\x1a\n\tca_key_i\
    d\x18\x05\x20\x01(\x06R\x07caKeyId\x12!\n\x0cca_signature\x18\x06\x20\
    \x01(\x0cR\x0bcaSignatureB\x03\x80\x01\0J\xe3\x11\n\x06\x12\x04\0\00\x01\
    \n\x08\n\x01\x08\x12\x03\0\0#\n\t\n\x02\x08\x10\x12\x03\0\0#\n\n\n\x02\
    \x04\0\x12\x04\x02\0\x14\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08(\n\x0c\
    \n\x04\x04\0\x03\0\x12\x04\x03\x08\x08\t\n\x0c\n\x05\x04\0\x03\0\x01\x12\
    \x03\x03\x10\x1a\n\r\n\x06\x04\0\x03\0\x02\0\x12\x03\x04\x10)\n\x0e\n\
    \x07\x04\0\x03\0\x02\0\x04\x12\x03\x04\x10\x18\n\x0e\n\x07\x04\0\x03\0\
    \x02\0\x05\x12\x03\x04\x19\x1f\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\
    \x04\x20$\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x04'(\n\r\n\x06\x04\
    \0\x03\0\x02\x01\x12\x03\x05\x101\n\x0e\n\x07\x04\0\x03\0\x02\x01\x04\
    \x12\x03\x05\x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03\x05\x19\
    \x1f\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\x05\x20,\n\x0e\n\x07\
    \x04\0\x03\0\x02\x01\x03\x12\x03\x05/0\n\r\n\x06\x04\0\x03\0\x02\x02\x12\
    \x03\x06\x100\n\x0e\n\x07\x04\0\x03\0\x02\x02\x04\x12\x03\x06\x10\x18\n\
    \x0e\n\x07\x04\0\x03\0\x02\x02\x05\x12\x03\x06\x19\x1f\n\x0e\n\x07\x04\0\
    \x03\0\x02\x02\x01\x12\x03\x06\x20+\n\x0e\n\x07\x04\0\x03\0\x02\x02\x03\
    \x12\x03\x06./\n\r\n\x06\x04\0\x03\0\x02\x03\x12\x03\x07\x103\n\x0e\n\
    \x07\x04\0\x03\0\x02\x03\x04\x12\x03\x07\x10\x18\n\x0e\n\x07\x04\0\x03\0\
    \x02\x03\x05\x12\x03\x07\x19\x20\n\x0e\n\x07\x04\0\x03\0\x02\x03\x01\x12\
    \x03\x07!.\n\x0e\n\x07\x04\0\x03\0\x02\x03\x03\x12\x03\x0712\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\n\x08)\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\n\x08\
    \x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\n\x11\x18\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\n\x19$\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n'(\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\x0b\x081\n\x0c\n\x05\x04\0\x02\x01\x04\x12\
    \x03\x0b\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0b\x11\x18\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\x0b\x19,\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x0b/0\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0c\x082\n\x0c\n\x05\
    \x04\0\x02\x02\x04\x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\x0c\x11\x18\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0c\x19-\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\x0c01\n\x0b\n\x04\x04\0\x02\x03\x12\x03\r\
    \x081\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\r\x08\x10\n\x0c\n\x05\x04\0\
    \x02\x03\x05\x12\x03\r\x11\x18\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\r\
    \x19,\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\r/0\n\x0b\n\x04\x04\0\x02\
    \x04\x12\x03\x0e\x08/\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x0e\x08\x10\
    \n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x0e\x11\x18\n\x0c\n\x05\x04\0\x02\
    \x04\x01\x12\x03\x0e\x19*\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0e-.\n\
    \x0b\n\x04\x04\0\x02\x05\x12\x03\x0f\x08,\n\x0c\n\x05\x04\0\x02\x05\x04\
    \x12\x03\x0f\x08\x10\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x0f\x11\x16\n\
    \x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0f\x17'\n\x0c\n\x05\x04\0\x02\x05\
    \x03\x12\x03\x0f*+\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x10\x08#\n\x0c\n\
    \x05\x04\0\x02\x06\x04\x12\x03\x10\x08\x10\n\x0c\n\x05\x04\0\x02\x06\x05\
    \x12\x03\x10\x11\x17\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x10\x18\x1e\n\
    \x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x10!\"\n\x0b\n\x04\x04\0\x02\x07\
    \x12\x03\x11\x08/\n\x0c\n\x05\x04\0\x02\x07\x04\x12\x03\x11\x08\x10\n\
    \x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x11\x11\x18\n\x0c\n\x05\x04\0\x02\
    \x07\x01\x12\x03\x11\x19*\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x11-.\n\
    \x0b\n\x04\x04\0\x02\x08\x12\x03\x12\x08*\n\x0c\n\x05\x04\0\x02\x08\x04\
    \x12\x03\x12\x08\x10\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\x12\x11\x17\n\
    \x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x12\x18$\n\x0c\n\x05\x04\0\x02\x08\
    \x03\x12\x03\x12')\n\x0b\n\x04\x04\0\x02\t\x12\x03\x13\x08O\n\x0c\n\x05\
    \x04\0\x02\t\x04\x12\x03\x13\x08\x10\n\x0c\n\x05\x04\0\x02\t\x06\x12\x03\
    \x13\x11=\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\x13>J\n\x0c\n\x05\x04\0\
    \x02\t\x03\x12\x03\x13MN\n\n\n\x02\x04\x01\x12\x04\x16\0\x1b\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x16\x08.\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x17\
    \x081\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x17\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03\x17\x11\x18\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x17\x19,\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x17/0\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03\x18\x08$\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\
    \x18\x08\x10\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x18\x11\x18\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03\x18\x19\x1f\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\x18\"#\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x19\x08\"\n\x0c\
    \n\x05\x04\x01\x02\x02\x04\x12\x03\x19\x08\x10\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03\x19\x11\x16\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x19\
    \x17\x1d\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x19\x20!\n\x0b\n\x04\
    \x04\x01\x02\x03\x12\x03\x1a\x08%\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\
    \x03\x1a\x08\x10\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x1a\x11\x16\n\
    \x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x1a\x17\x20\n\x0c\n\x05\x04\x01\
    \x02\x03\x03\x12\x03\x1a#$\n\n\n\x02\x04\x02\x12\x04\x1d\0*\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03\x1d\x08$\n\x0c\n\x04\x04\x02\x04\0\x12\x04\x1e\
    \x08!\t\n\x0c\n\x05\x04\x02\x04\0\x01\x12\x03\x1e\r\x15\n\r\n\x06\x04\
    \x02\x04\0\x02\0\x12\x03\x1f\x10\x1c\n\x0e\n\x07\x04\x02\x04\0\x02\0\x01\
    \x12\x03\x1f\x10\x17\n\x0e\n\x07\x04\x02\x04\0\x02\0\x02\x12\x03\x1f\x1a\
    \x1b\n\r\n\x06\x04\x02\x04\0\x02\x01\x12\x03\x20\x10\x1c\n\x0e\n\x07\x04\
    \x02\x04\0\x02\x01\x01\x12\x03\x20\x10\x17\n\x0e\n\x07\x04\x02\x04\0\x02\
    \x01\x02\x12\x03\x20\x1a\x1b\n\x0b\n\x04\x04\x02\x02\0\x12\x03#\x08Y\n\
    \x0c\n\x05\x04\x02\x02\0\x04\x12\x03#\x08\x10\n\x0c\n\x05\x04\x02\x02\0\
    \x06\x12\x03#\x117\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03#8@\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03#CD\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03#EX\n\
    \x0c\n\x05\x04\x02\x02\0\x07\x12\x03#PW\n\x0b\n\x04\x04\x02\x02\x01\x12\
    \x03$\x08$\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03$\x08\x10\n\x0c\n\x05\
    \x04\x02\x02\x01\x05\x12\x03$\x11\x16\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03$\x17\x1f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03$\"#\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x03%\x08&\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\
    \x03%\x08\x10\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03%\x11\x18\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03%\x19!\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03%$%\n\x0b\n\x04\x04\x02\x02\x03\x12\x03&\x087\n\x0c\n\x05\x04\
    \x02\x02\x03\x04\x12\x03&\x08\x10\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\
    \x03&\x11\x18\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03&\x192\n\x0c\n\x05\
    \x04\x02\x02\x03\x03\x12\x03&56\n\x0b\n\x04\x04\x02\x02\x04\x12\x03'\x08\
    *\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03'\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\x04\x05\x12\x03'\x11\x18\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03'\
    \x19%\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03'()\n\x0b\n\x04\x04\x02\x02\
    \x05\x12\x03(\x08)\n\x0c\n\x05\x04\x02\x02\x05\x04\x12\x03(\x08\x10\n\
    \x0c\n\x05\x04\x02\x02\x05\x05\x12\x03(\x11\x18\n\x0c\n\x05\x04\x02\x02\
    \x05\x01\x12\x03(\x19$\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03('(\n\x0b\
    \n\x04\x04\x02\x02\x06\x12\x03)\x08$\n\x0c\n\x05\x04\x02\x02\x06\x04\x12\
    \x03)\x08\x10\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\x03)\x11\x17\n\x0c\n\
    \x05\x04\x02\x02\x06\x01\x12\x03)\x18\x1e\n\x0c\n\x05\x04\x02\x02\x06\
    \x03\x12\x03)!#\n\n\n\x02\x04\x03\x12\x04,\00\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03,\x08*\n\x0b\n\x04\x04\x03\x02\0\x12\x03-\x08\x20\n\x0c\n\x05\
    \x04\x03\x02\0\x04\x12\x03-\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x03-\x11\x16\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03-\x17\x1b\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03-\x1e\x1f\n\x0b\n\x04\x04\x03\x02\x01\x12\x03.\
    \x08'\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03.\x08\x10\n\x0c\n\x05\x04\
    \x03\x02\x01\x05\x12\x03.\x11\x18\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x03.\x19\"\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03.%&\n\x0b\n\x04\x04\
    \x03\x02\x02\x12\x03/\x08(\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03/\x08\
    \x10\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03/\x11\x16\n\x0c\n\x05\x04\
    \x03\x02\x02\x01\x12\x03/\x17#\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03/&\
    '\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(CMsgSteamDatagramRelayAuthTicket::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramSignedRelayAuthTicket::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramCertificate::generated_message_descriptor_data());
            messages.push(CMsgSteamDatagramCertificateSigned::generated_message_descriptor_data());
            messages.push(cmsg_steam_datagram_relay_auth_ticket::ExtraField::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(cmsg_steam_datagram_certificate::EKeyType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
