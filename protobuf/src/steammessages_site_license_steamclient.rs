// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_site_license.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CSiteManagerClient_IncomingClient_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteManagerClient_IncomingClient_Request {
    // message fields
    // @@protoc_insertion_point(field:CSiteManagerClient_IncomingClient_Request.site_instanceid)
    pub site_instanceid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSiteManagerClient_IncomingClient_Request.client_steamid)
    pub client_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSiteManagerClient_IncomingClient_Request.client_local_ip)
    pub client_local_ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSiteManagerClient_IncomingClient_Request.connection_key)
    pub connection_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CSiteManagerClient_IncomingClient_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteManagerClient_IncomingClient_Request {
    fn default() -> &'a CSiteManagerClient_IncomingClient_Request {
        <CSiteManagerClient_IncomingClient_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSiteManagerClient_IncomingClient_Request {
    pub fn new() -> CSiteManagerClient_IncomingClient_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 site_instanceid = 1;

    pub fn site_instanceid(&self) -> u64 {
        self.site_instanceid.unwrap_or(0)
    }

    pub fn clear_site_instanceid(&mut self) {
        self.site_instanceid = ::std::option::Option::None;
    }

    pub fn has_site_instanceid(&self) -> bool {
        self.site_instanceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_site_instanceid(&mut self, v: u64) {
        self.site_instanceid = ::std::option::Option::Some(v);
    }

    // optional fixed64 client_steamid = 2;

    pub fn client_steamid(&self) -> u64 {
        self.client_steamid.unwrap_or(0)
    }

    pub fn clear_client_steamid(&mut self) {
        self.client_steamid = ::std::option::Option::None;
    }

    pub fn has_client_steamid(&self) -> bool {
        self.client_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_steamid(&mut self, v: u64) {
        self.client_steamid = ::std::option::Option::Some(v);
    }

    // optional fixed32 client_local_ip = 3;

    pub fn client_local_ip(&self) -> u32 {
        self.client_local_ip.unwrap_or(0)
    }

    pub fn clear_client_local_ip(&mut self) {
        self.client_local_ip = ::std::option::Option::None;
    }

    pub fn has_client_local_ip(&self) -> bool {
        self.client_local_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_local_ip(&mut self, v: u32) {
        self.client_local_ip = ::std::option::Option::Some(v);
    }

    // optional bytes connection_key = 4;

    pub fn connection_key(&self) -> &[u8] {
        match self.connection_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_connection_key(&mut self) {
        self.connection_key = ::std::option::Option::None;
    }

    pub fn has_connection_key(&self) -> bool {
        self.connection_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.connection_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.connection_key.is_none() {
            self.connection_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.connection_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_connection_key(&mut self) -> ::std::vec::Vec<u8> {
        self.connection_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "site_instanceid",
            |m: &CSiteManagerClient_IncomingClient_Request| { &m.site_instanceid },
            |m: &mut CSiteManagerClient_IncomingClient_Request| { &mut m.site_instanceid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_steamid",
            |m: &CSiteManagerClient_IncomingClient_Request| { &m.client_steamid },
            |m: &mut CSiteManagerClient_IncomingClient_Request| { &mut m.client_steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_local_ip",
            |m: &CSiteManagerClient_IncomingClient_Request| { &m.client_local_ip },
            |m: &mut CSiteManagerClient_IncomingClient_Request| { &mut m.client_local_ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_key",
            |m: &CSiteManagerClient_IncomingClient_Request| { &m.connection_key },
            |m: &mut CSiteManagerClient_IncomingClient_Request| { &mut m.connection_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteManagerClient_IncomingClient_Request>(
            "CSiteManagerClient_IncomingClient_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteManagerClient_IncomingClient_Request {
    const NAME: &'static str = "CSiteManagerClient_IncomingClient_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.site_instanceid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.client_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                29 => {
                    self.client_local_ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                34 => {
                    self.connection_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.site_instanceid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_local_ip {
            my_size += 1 + 4;
        }
        if let Some(v) = self.connection_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.site_instanceid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.client_steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.client_local_ip {
            os.write_fixed32(3, v)?;
        }
        if let Some(v) = self.connection_key.as_ref() {
            os.write_bytes(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteManagerClient_IncomingClient_Request {
        CSiteManagerClient_IncomingClient_Request::new()
    }

    fn clear(&mut self) {
        self.site_instanceid = ::std::option::Option::None;
        self.client_steamid = ::std::option::Option::None;
        self.client_local_ip = ::std::option::Option::None;
        self.connection_key = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteManagerClient_IncomingClient_Request {
        static instance: CSiteManagerClient_IncomingClient_Request = CSiteManagerClient_IncomingClient_Request {
            site_instanceid: ::std::option::Option::None,
            client_steamid: ::std::option::Option::None,
            client_local_ip: ::std::option::Option::None,
            connection_key: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteManagerClient_IncomingClient_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteManagerClient_IncomingClient_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteManagerClient_IncomingClient_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteManagerClient_IncomingClient_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSiteManagerClient_IncomingClient_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteManagerClient_IncomingClient_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CSiteManagerClient_IncomingClient_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteManagerClient_IncomingClient_Response {
    fn default() -> &'a CSiteManagerClient_IncomingClient_Response {
        <CSiteManagerClient_IncomingClient_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSiteManagerClient_IncomingClient_Response {
    pub fn new() -> CSiteManagerClient_IncomingClient_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteManagerClient_IncomingClient_Response>(
            "CSiteManagerClient_IncomingClient_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteManagerClient_IncomingClient_Response {
    const NAME: &'static str = "CSiteManagerClient_IncomingClient_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteManagerClient_IncomingClient_Response {
        CSiteManagerClient_IncomingClient_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteManagerClient_IncomingClient_Response {
        static instance: CSiteManagerClient_IncomingClient_Response = CSiteManagerClient_IncomingClient_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteManagerClient_IncomingClient_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteManagerClient_IncomingClient_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteManagerClient_IncomingClient_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteManagerClient_IncomingClient_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSiteLicense_ClientSeatCheckout_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteLicense_ClientSeatCheckout_Notification {
    // message fields
    // @@protoc_insertion_point(field:CSiteLicense_ClientSeatCheckout_Notification.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSiteLicense_ClientSeatCheckout_Notification.eresult)
    pub eresult: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CSiteLicense_ClientSeatCheckout_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteLicense_ClientSeatCheckout_Notification {
    fn default() -> &'a CSiteLicense_ClientSeatCheckout_Notification {
        <CSiteLicense_ClientSeatCheckout_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CSiteLicense_ClientSeatCheckout_Notification {
    pub fn new() -> CSiteLicense_ClientSeatCheckout_Notification {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 eresult = 2;

    pub fn eresult(&self) -> u32 {
        self.eresult.unwrap_or(0)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: u32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CSiteLicense_ClientSeatCheckout_Notification| { &m.appid },
            |m: &mut CSiteLicense_ClientSeatCheckout_Notification| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CSiteLicense_ClientSeatCheckout_Notification| { &m.eresult },
            |m: &mut CSiteLicense_ClientSeatCheckout_Notification| { &mut m.eresult },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteLicense_ClientSeatCheckout_Notification>(
            "CSiteLicense_ClientSeatCheckout_Notification",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteLicense_ClientSeatCheckout_Notification {
    const NAME: &'static str = "CSiteLicense_ClientSeatCheckout_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.eresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.eresult {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteLicense_ClientSeatCheckout_Notification {
        CSiteLicense_ClientSeatCheckout_Notification::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.eresult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteLicense_ClientSeatCheckout_Notification {
        static instance: CSiteLicense_ClientSeatCheckout_Notification = CSiteLicense_ClientSeatCheckout_Notification {
            appid: ::std::option::Option::None,
            eresult: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteLicense_ClientSeatCheckout_Notification {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteLicense_ClientSeatCheckout_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteLicense_ClientSeatCheckout_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteLicense_ClientSeatCheckout_Notification {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSiteManagerClient_TrackedPayments_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteManagerClient_TrackedPayments_Notification {
    // message fields
    // @@protoc_insertion_point(field:CSiteManagerClient_TrackedPayments_Notification.site_id)
    pub site_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSiteManagerClient_TrackedPayments_Notification.payments)
    pub payments: ::std::vec::Vec<csite_manager_client_tracked_payments_notification::Payment>,
    // special fields
    // @@protoc_insertion_point(special_field:CSiteManagerClient_TrackedPayments_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteManagerClient_TrackedPayments_Notification {
    fn default() -> &'a CSiteManagerClient_TrackedPayments_Notification {
        <CSiteManagerClient_TrackedPayments_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CSiteManagerClient_TrackedPayments_Notification {
    pub fn new() -> CSiteManagerClient_TrackedPayments_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 site_id = 1;

    pub fn site_id(&self) -> u64 {
        self.site_id.unwrap_or(0)
    }

    pub fn clear_site_id(&mut self) {
        self.site_id = ::std::option::Option::None;
    }

    pub fn has_site_id(&self) -> bool {
        self.site_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_site_id(&mut self, v: u64) {
        self.site_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "site_id",
            |m: &CSiteManagerClient_TrackedPayments_Notification| { &m.site_id },
            |m: &mut CSiteManagerClient_TrackedPayments_Notification| { &mut m.site_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "payments",
            |m: &CSiteManagerClient_TrackedPayments_Notification| { &m.payments },
            |m: &mut CSiteManagerClient_TrackedPayments_Notification| { &mut m.payments },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteManagerClient_TrackedPayments_Notification>(
            "CSiteManagerClient_TrackedPayments_Notification",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteManagerClient_TrackedPayments_Notification {
    const NAME: &'static str = "CSiteManagerClient_TrackedPayments_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.site_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.payments.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.site_id {
            my_size += 1 + 8;
        }
        for value in &self.payments {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.site_id {
            os.write_fixed64(1, v)?;
        }
        for v in &self.payments {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteManagerClient_TrackedPayments_Notification {
        CSiteManagerClient_TrackedPayments_Notification::new()
    }

    fn clear(&mut self) {
        self.site_id = ::std::option::Option::None;
        self.payments.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteManagerClient_TrackedPayments_Notification {
        static instance: CSiteManagerClient_TrackedPayments_Notification = CSiteManagerClient_TrackedPayments_Notification {
            site_id: ::std::option::Option::None,
            payments: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteManagerClient_TrackedPayments_Notification {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteManagerClient_TrackedPayments_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteManagerClient_TrackedPayments_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteManagerClient_TrackedPayments_Notification {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CSiteManagerClient_TrackedPayments_Notification`
pub mod csite_manager_client_tracked_payments_notification {
    // @@protoc_insertion_point(message:CSiteManagerClient_TrackedPayments_Notification.Payment)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Payment {
        // message fields
        // @@protoc_insertion_point(field:CSiteManagerClient_TrackedPayments_Notification.Payment.transid)
        pub transid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CSiteManagerClient_TrackedPayments_Notification.Payment.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CSiteManagerClient_TrackedPayments_Notification.Payment.amount)
        pub amount: ::std::option::Option<i64>,
        // @@protoc_insertion_point(field:CSiteManagerClient_TrackedPayments_Notification.Payment.ecurrency)
        pub ecurrency: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CSiteManagerClient_TrackedPayments_Notification.Payment.time_created)
        pub time_created: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CSiteManagerClient_TrackedPayments_Notification.Payment.purchase_status)
        pub purchase_status: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CSiteManagerClient_TrackedPayments_Notification.Payment.machine_name)
        pub machine_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CSiteManagerClient_TrackedPayments_Notification.Payment.persona_name)
        pub persona_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CSiteManagerClient_TrackedPayments_Notification.Payment.profile_url)
        pub profile_url: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CSiteManagerClient_TrackedPayments_Notification.Payment.avatar_url)
        pub avatar_url: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CSiteManagerClient_TrackedPayments_Notification.Payment.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Payment {
        fn default() -> &'a Payment {
            <Payment as ::protobuf::Message>::default_instance()
        }
    }

    impl Payment {
        pub fn new() -> Payment {
            ::std::default::Default::default()
        }

        // optional uint64 transid = 1;

        pub fn transid(&self) -> u64 {
            self.transid.unwrap_or(0)
        }

        pub fn clear_transid(&mut self) {
            self.transid = ::std::option::Option::None;
        }

        pub fn has_transid(&self) -> bool {
            self.transid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_transid(&mut self, v: u64) {
            self.transid = ::std::option::Option::Some(v);
        }

        // optional uint64 steamid = 2;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional int64 amount = 3;

        pub fn amount(&self) -> i64 {
            self.amount.unwrap_or(0)
        }

        pub fn clear_amount(&mut self) {
            self.amount = ::std::option::Option::None;
        }

        pub fn has_amount(&self) -> bool {
            self.amount.is_some()
        }

        // Param is passed by value, moved
        pub fn set_amount(&mut self, v: i64) {
            self.amount = ::std::option::Option::Some(v);
        }

        // optional uint32 ecurrency = 4;

        pub fn ecurrency(&self) -> u32 {
            self.ecurrency.unwrap_or(0)
        }

        pub fn clear_ecurrency(&mut self) {
            self.ecurrency = ::std::option::Option::None;
        }

        pub fn has_ecurrency(&self) -> bool {
            self.ecurrency.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ecurrency(&mut self, v: u32) {
            self.ecurrency = ::std::option::Option::Some(v);
        }

        // optional int32 time_created = 5;

        pub fn time_created(&self) -> i32 {
            self.time_created.unwrap_or(0)
        }

        pub fn clear_time_created(&mut self) {
            self.time_created = ::std::option::Option::None;
        }

        pub fn has_time_created(&self) -> bool {
            self.time_created.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_created(&mut self, v: i32) {
            self.time_created = ::std::option::Option::Some(v);
        }

        // optional int32 purchase_status = 6;

        pub fn purchase_status(&self) -> i32 {
            self.purchase_status.unwrap_or(0)
        }

        pub fn clear_purchase_status(&mut self) {
            self.purchase_status = ::std::option::Option::None;
        }

        pub fn has_purchase_status(&self) -> bool {
            self.purchase_status.is_some()
        }

        // Param is passed by value, moved
        pub fn set_purchase_status(&mut self, v: i32) {
            self.purchase_status = ::std::option::Option::Some(v);
        }

        // optional string machine_name = 7;

        pub fn machine_name(&self) -> &str {
            match self.machine_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_machine_name(&mut self) {
            self.machine_name = ::std::option::Option::None;
        }

        pub fn has_machine_name(&self) -> bool {
            self.machine_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_machine_name(&mut self, v: ::std::string::String) {
            self.machine_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_machine_name(&mut self) -> &mut ::std::string::String {
            if self.machine_name.is_none() {
                self.machine_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.machine_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_machine_name(&mut self) -> ::std::string::String {
            self.machine_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string persona_name = 8;

        pub fn persona_name(&self) -> &str {
            match self.persona_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_persona_name(&mut self) {
            self.persona_name = ::std::option::Option::None;
        }

        pub fn has_persona_name(&self) -> bool {
            self.persona_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_persona_name(&mut self, v: ::std::string::String) {
            self.persona_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
            if self.persona_name.is_none() {
                self.persona_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.persona_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_persona_name(&mut self) -> ::std::string::String {
            self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string profile_url = 9;

        pub fn profile_url(&self) -> &str {
            match self.profile_url.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_profile_url(&mut self) {
            self.profile_url = ::std::option::Option::None;
        }

        pub fn has_profile_url(&self) -> bool {
            self.profile_url.is_some()
        }

        // Param is passed by value, moved
        pub fn set_profile_url(&mut self, v: ::std::string::String) {
            self.profile_url = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_profile_url(&mut self) -> &mut ::std::string::String {
            if self.profile_url.is_none() {
                self.profile_url = ::std::option::Option::Some(::std::string::String::new());
            }
            self.profile_url.as_mut().unwrap()
        }

        // Take field
        pub fn take_profile_url(&mut self) -> ::std::string::String {
            self.profile_url.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string avatar_url = 10;

        pub fn avatar_url(&self) -> &str {
            match self.avatar_url.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_avatar_url(&mut self) {
            self.avatar_url = ::std::option::Option::None;
        }

        pub fn has_avatar_url(&self) -> bool {
            self.avatar_url.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avatar_url(&mut self, v: ::std::string::String) {
            self.avatar_url = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_avatar_url(&mut self) -> &mut ::std::string::String {
            if self.avatar_url.is_none() {
                self.avatar_url = ::std::option::Option::Some(::std::string::String::new());
            }
            self.avatar_url.as_mut().unwrap()
        }

        // Take field
        pub fn take_avatar_url(&mut self) -> ::std::string::String {
            self.avatar_url.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(10);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "transid",
                |m: &Payment| { &m.transid },
                |m: &mut Payment| { &mut m.transid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &Payment| { &m.steamid },
                |m: &mut Payment| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "amount",
                |m: &Payment| { &m.amount },
                |m: &mut Payment| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "ecurrency",
                |m: &Payment| { &m.ecurrency },
                |m: &mut Payment| { &mut m.ecurrency },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_created",
                |m: &Payment| { &m.time_created },
                |m: &mut Payment| { &mut m.time_created },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "purchase_status",
                |m: &Payment| { &m.purchase_status },
                |m: &mut Payment| { &mut m.purchase_status },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "machine_name",
                |m: &Payment| { &m.machine_name },
                |m: &mut Payment| { &mut m.machine_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "persona_name",
                |m: &Payment| { &m.persona_name },
                |m: &mut Payment| { &mut m.persona_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "profile_url",
                |m: &Payment| { &m.profile_url },
                |m: &mut Payment| { &mut m.profile_url },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "avatar_url",
                |m: &Payment| { &m.avatar_url },
                |m: &mut Payment| { &mut m.avatar_url },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Payment>(
                "CSiteManagerClient_TrackedPayments_Notification.Payment",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Payment {
        const NAME: &'static str = "Payment";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.transid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    24 => {
                        self.amount = ::std::option::Option::Some(is.read_int64()?);
                    },
                    32 => {
                        self.ecurrency = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.time_created = ::std::option::Option::Some(is.read_int32()?);
                    },
                    48 => {
                        self.purchase_status = ::std::option::Option::Some(is.read_int32()?);
                    },
                    58 => {
                        self.machine_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    66 => {
                        self.persona_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    74 => {
                        self.profile_url = ::std::option::Option::Some(is.read_string()?);
                    },
                    82 => {
                        self.avatar_url = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.transid {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.steamid {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.amount {
                my_size += ::protobuf::rt::int64_size(3, v);
            }
            if let Some(v) = self.ecurrency {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.time_created {
                my_size += ::protobuf::rt::int32_size(5, v);
            }
            if let Some(v) = self.purchase_status {
                my_size += ::protobuf::rt::int32_size(6, v);
            }
            if let Some(v) = self.machine_name.as_ref() {
                my_size += ::protobuf::rt::string_size(7, &v);
            }
            if let Some(v) = self.persona_name.as_ref() {
                my_size += ::protobuf::rt::string_size(8, &v);
            }
            if let Some(v) = self.profile_url.as_ref() {
                my_size += ::protobuf::rt::string_size(9, &v);
            }
            if let Some(v) = self.avatar_url.as_ref() {
                my_size += ::protobuf::rt::string_size(10, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.transid {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.steamid {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.amount {
                os.write_int64(3, v)?;
            }
            if let Some(v) = self.ecurrency {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.time_created {
                os.write_int32(5, v)?;
            }
            if let Some(v) = self.purchase_status {
                os.write_int32(6, v)?;
            }
            if let Some(v) = self.machine_name.as_ref() {
                os.write_string(7, v)?;
            }
            if let Some(v) = self.persona_name.as_ref() {
                os.write_string(8, v)?;
            }
            if let Some(v) = self.profile_url.as_ref() {
                os.write_string(9, v)?;
            }
            if let Some(v) = self.avatar_url.as_ref() {
                os.write_string(10, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Payment {
            Payment::new()
        }

        fn clear(&mut self) {
            self.transid = ::std::option::Option::None;
            self.steamid = ::std::option::Option::None;
            self.amount = ::std::option::Option::None;
            self.ecurrency = ::std::option::Option::None;
            self.time_created = ::std::option::Option::None;
            self.purchase_status = ::std::option::Option::None;
            self.machine_name = ::std::option::Option::None;
            self.persona_name = ::std::option::Option::None;
            self.profile_url = ::std::option::Option::None;
            self.avatar_url = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Payment {
            static instance: Payment = Payment {
                transid: ::std::option::Option::None,
                steamid: ::std::option::Option::None,
                amount: ::std::option::Option::None,
                ecurrency: ::std::option::Option::None,
                time_created: ::std::option::Option::None,
                purchase_status: ::std::option::Option::None,
                machine_name: ::std::option::Option::None,
                persona_name: ::std::option::Option::None,
                profile_url: ::std::option::Option::None,
                avatar_url: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Payment {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CSiteManagerClient_TrackedPayments_Notification.Payment").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Payment {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Payment {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CSiteLicense_InitiateAssociation_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteLicense_InitiateAssociation_Request {
    // message fields
    // @@protoc_insertion_point(field:CSiteLicense_InitiateAssociation_Request.site_steamid)
    pub site_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSiteLicense_InitiateAssociation_Request.site_instanceid)
    pub site_instanceid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSiteLicense_InitiateAssociation_Request.client_local_ip)
    pub client_local_ip: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CSiteLicense_InitiateAssociation_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteLicense_InitiateAssociation_Request {
    fn default() -> &'a CSiteLicense_InitiateAssociation_Request {
        <CSiteLicense_InitiateAssociation_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSiteLicense_InitiateAssociation_Request {
    pub fn new() -> CSiteLicense_InitiateAssociation_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 site_steamid = 1;

    pub fn site_steamid(&self) -> u64 {
        self.site_steamid.unwrap_or(0)
    }

    pub fn clear_site_steamid(&mut self) {
        self.site_steamid = ::std::option::Option::None;
    }

    pub fn has_site_steamid(&self) -> bool {
        self.site_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_site_steamid(&mut self, v: u64) {
        self.site_steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 site_instanceid = 2;

    pub fn site_instanceid(&self) -> u64 {
        self.site_instanceid.unwrap_or(0)
    }

    pub fn clear_site_instanceid(&mut self) {
        self.site_instanceid = ::std::option::Option::None;
    }

    pub fn has_site_instanceid(&self) -> bool {
        self.site_instanceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_site_instanceid(&mut self, v: u64) {
        self.site_instanceid = ::std::option::Option::Some(v);
    }

    // optional fixed32 client_local_ip = 3;

    pub fn client_local_ip(&self) -> u32 {
        self.client_local_ip.unwrap_or(0)
    }

    pub fn clear_client_local_ip(&mut self) {
        self.client_local_ip = ::std::option::Option::None;
    }

    pub fn has_client_local_ip(&self) -> bool {
        self.client_local_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_local_ip(&mut self, v: u32) {
        self.client_local_ip = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "site_steamid",
            |m: &CSiteLicense_InitiateAssociation_Request| { &m.site_steamid },
            |m: &mut CSiteLicense_InitiateAssociation_Request| { &mut m.site_steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "site_instanceid",
            |m: &CSiteLicense_InitiateAssociation_Request| { &m.site_instanceid },
            |m: &mut CSiteLicense_InitiateAssociation_Request| { &mut m.site_instanceid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_local_ip",
            |m: &CSiteLicense_InitiateAssociation_Request| { &m.client_local_ip },
            |m: &mut CSiteLicense_InitiateAssociation_Request| { &mut m.client_local_ip },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteLicense_InitiateAssociation_Request>(
            "CSiteLicense_InitiateAssociation_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteLicense_InitiateAssociation_Request {
    const NAME: &'static str = "CSiteLicense_InitiateAssociation_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.site_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.site_instanceid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                29 => {
                    self.client_local_ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.site_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.site_instanceid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_local_ip {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.site_steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.site_instanceid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.client_local_ip {
            os.write_fixed32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteLicense_InitiateAssociation_Request {
        CSiteLicense_InitiateAssociation_Request::new()
    }

    fn clear(&mut self) {
        self.site_steamid = ::std::option::Option::None;
        self.site_instanceid = ::std::option::Option::None;
        self.client_local_ip = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteLicense_InitiateAssociation_Request {
        static instance: CSiteLicense_InitiateAssociation_Request = CSiteLicense_InitiateAssociation_Request {
            site_steamid: ::std::option::Option::None,
            site_instanceid: ::std::option::Option::None,
            client_local_ip: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteLicense_InitiateAssociation_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteLicense_InitiateAssociation_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteLicense_InitiateAssociation_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteLicense_InitiateAssociation_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSiteLicense_InitiateAssociation_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteLicense_InitiateAssociation_Response {
    // message fields
    // @@protoc_insertion_point(field:CSiteLicense_InitiateAssociation_Response.connection_key)
    pub connection_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CSiteLicense_InitiateAssociation_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteLicense_InitiateAssociation_Response {
    fn default() -> &'a CSiteLicense_InitiateAssociation_Response {
        <CSiteLicense_InitiateAssociation_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSiteLicense_InitiateAssociation_Response {
    pub fn new() -> CSiteLicense_InitiateAssociation_Response {
        ::std::default::Default::default()
    }

    // optional bytes connection_key = 1;

    pub fn connection_key(&self) -> &[u8] {
        match self.connection_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_connection_key(&mut self) {
        self.connection_key = ::std::option::Option::None;
    }

    pub fn has_connection_key(&self) -> bool {
        self.connection_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.connection_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.connection_key.is_none() {
            self.connection_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.connection_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_connection_key(&mut self) -> ::std::vec::Vec<u8> {
        self.connection_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_key",
            |m: &CSiteLicense_InitiateAssociation_Response| { &m.connection_key },
            |m: &mut CSiteLicense_InitiateAssociation_Response| { &mut m.connection_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteLicense_InitiateAssociation_Response>(
            "CSiteLicense_InitiateAssociation_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteLicense_InitiateAssociation_Response {
    const NAME: &'static str = "CSiteLicense_InitiateAssociation_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.connection_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.connection_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.connection_key.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteLicense_InitiateAssociation_Response {
        CSiteLicense_InitiateAssociation_Response::new()
    }

    fn clear(&mut self) {
        self.connection_key = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteLicense_InitiateAssociation_Response {
        static instance: CSiteLicense_InitiateAssociation_Response = CSiteLicense_InitiateAssociation_Response {
            connection_key: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteLicense_InitiateAssociation_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteLicense_InitiateAssociation_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteLicense_InitiateAssociation_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteLicense_InitiateAssociation_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSiteLicense_LCSAuthenticate_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteLicense_LCSAuthenticate_Request {
    // message fields
    // @@protoc_insertion_point(field:CSiteLicense_LCSAuthenticate_Request.instanceid)
    pub instanceid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CSiteLicense_LCSAuthenticate_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteLicense_LCSAuthenticate_Request {
    fn default() -> &'a CSiteLicense_LCSAuthenticate_Request {
        <CSiteLicense_LCSAuthenticate_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSiteLicense_LCSAuthenticate_Request {
    pub fn new() -> CSiteLicense_LCSAuthenticate_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 instanceid = 1;

    pub fn instanceid(&self) -> u64 {
        self.instanceid.unwrap_or(0)
    }

    pub fn clear_instanceid(&mut self) {
        self.instanceid = ::std::option::Option::None;
    }

    pub fn has_instanceid(&self) -> bool {
        self.instanceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instanceid(&mut self, v: u64) {
        self.instanceid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "instanceid",
            |m: &CSiteLicense_LCSAuthenticate_Request| { &m.instanceid },
            |m: &mut CSiteLicense_LCSAuthenticate_Request| { &mut m.instanceid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteLicense_LCSAuthenticate_Request>(
            "CSiteLicense_LCSAuthenticate_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteLicense_LCSAuthenticate_Request {
    const NAME: &'static str = "CSiteLicense_LCSAuthenticate_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.instanceid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.instanceid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.instanceid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteLicense_LCSAuthenticate_Request {
        CSiteLicense_LCSAuthenticate_Request::new()
    }

    fn clear(&mut self) {
        self.instanceid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteLicense_LCSAuthenticate_Request {
        static instance: CSiteLicense_LCSAuthenticate_Request = CSiteLicense_LCSAuthenticate_Request {
            instanceid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteLicense_LCSAuthenticate_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteLicense_LCSAuthenticate_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteLicense_LCSAuthenticate_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteLicense_LCSAuthenticate_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSiteLicense_LCSAuthenticate_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteLicense_LCSAuthenticate_Response {
    // message fields
    // @@protoc_insertion_point(field:CSiteLicense_LCSAuthenticate_Response.site_id)
    pub site_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSiteLicense_LCSAuthenticate_Response.site_name)
    pub site_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSiteLicense_LCSAuthenticate_Response.new_session)
    pub new_session: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSiteLicense_LCSAuthenticate_Response.no_site_licenses)
    pub no_site_licenses: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CSiteLicense_LCSAuthenticate_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteLicense_LCSAuthenticate_Response {
    fn default() -> &'a CSiteLicense_LCSAuthenticate_Response {
        <CSiteLicense_LCSAuthenticate_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSiteLicense_LCSAuthenticate_Response {
    pub fn new() -> CSiteLicense_LCSAuthenticate_Response {
        ::std::default::Default::default()
    }

    // optional uint64 site_id = 1;

    pub fn site_id(&self) -> u64 {
        self.site_id.unwrap_or(0)
    }

    pub fn clear_site_id(&mut self) {
        self.site_id = ::std::option::Option::None;
    }

    pub fn has_site_id(&self) -> bool {
        self.site_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_site_id(&mut self, v: u64) {
        self.site_id = ::std::option::Option::Some(v);
    }

    // optional string site_name = 2;

    pub fn site_name(&self) -> &str {
        match self.site_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_site_name(&mut self) {
        self.site_name = ::std::option::Option::None;
    }

    pub fn has_site_name(&self) -> bool {
        self.site_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_site_name(&mut self, v: ::std::string::String) {
        self.site_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_site_name(&mut self) -> &mut ::std::string::String {
        if self.site_name.is_none() {
            self.site_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.site_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_site_name(&mut self) -> ::std::string::String {
        self.site_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool new_session = 3;

    pub fn new_session(&self) -> bool {
        self.new_session.unwrap_or(false)
    }

    pub fn clear_new_session(&mut self) {
        self.new_session = ::std::option::Option::None;
    }

    pub fn has_new_session(&self) -> bool {
        self.new_session.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_session(&mut self, v: bool) {
        self.new_session = ::std::option::Option::Some(v);
    }

    // optional bool no_site_licenses = 4;

    pub fn no_site_licenses(&self) -> bool {
        self.no_site_licenses.unwrap_or(false)
    }

    pub fn clear_no_site_licenses(&mut self) {
        self.no_site_licenses = ::std::option::Option::None;
    }

    pub fn has_no_site_licenses(&self) -> bool {
        self.no_site_licenses.is_some()
    }

    // Param is passed by value, moved
    pub fn set_no_site_licenses(&mut self, v: bool) {
        self.no_site_licenses = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "site_id",
            |m: &CSiteLicense_LCSAuthenticate_Response| { &m.site_id },
            |m: &mut CSiteLicense_LCSAuthenticate_Response| { &mut m.site_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "site_name",
            |m: &CSiteLicense_LCSAuthenticate_Response| { &m.site_name },
            |m: &mut CSiteLicense_LCSAuthenticate_Response| { &mut m.site_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "new_session",
            |m: &CSiteLicense_LCSAuthenticate_Response| { &m.new_session },
            |m: &mut CSiteLicense_LCSAuthenticate_Response| { &mut m.new_session },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "no_site_licenses",
            |m: &CSiteLicense_LCSAuthenticate_Response| { &m.no_site_licenses },
            |m: &mut CSiteLicense_LCSAuthenticate_Response| { &mut m.no_site_licenses },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteLicense_LCSAuthenticate_Response>(
            "CSiteLicense_LCSAuthenticate_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteLicense_LCSAuthenticate_Response {
    const NAME: &'static str = "CSiteLicense_LCSAuthenticate_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.site_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.site_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.new_session = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.no_site_licenses = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.site_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.site_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.new_session {
            my_size += 1 + 1;
        }
        if let Some(v) = self.no_site_licenses {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.site_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.site_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.new_session {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.no_site_licenses {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteLicense_LCSAuthenticate_Response {
        CSiteLicense_LCSAuthenticate_Response::new()
    }

    fn clear(&mut self) {
        self.site_id = ::std::option::Option::None;
        self.site_name = ::std::option::Option::None;
        self.new_session = ::std::option::Option::None;
        self.no_site_licenses = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteLicense_LCSAuthenticate_Response {
        static instance: CSiteLicense_LCSAuthenticate_Response = CSiteLicense_LCSAuthenticate_Response {
            site_id: ::std::option::Option::None,
            site_name: ::std::option::Option::None,
            new_session: ::std::option::Option::None,
            no_site_licenses: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteLicense_LCSAuthenticate_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteLicense_LCSAuthenticate_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteLicense_LCSAuthenticate_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteLicense_LCSAuthenticate_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSiteLicense_LCSAssociateUser_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteLicense_LCSAssociateUser_Request {
    // message fields
    // @@protoc_insertion_point(field:CSiteLicense_LCSAssociateUser_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSiteLicense_LCSAssociateUser_Request.local_ip)
    pub local_ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSiteLicense_LCSAssociateUser_Request.instanceid)
    pub instanceid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSiteLicense_LCSAssociateUser_Request.machine_name)
    pub machine_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CSiteLicense_LCSAssociateUser_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteLicense_LCSAssociateUser_Request {
    fn default() -> &'a CSiteLicense_LCSAssociateUser_Request {
        <CSiteLicense_LCSAssociateUser_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSiteLicense_LCSAssociateUser_Request {
    pub fn new() -> CSiteLicense_LCSAssociateUser_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed32 local_ip = 2;

    pub fn local_ip(&self) -> u32 {
        self.local_ip.unwrap_or(0)
    }

    pub fn clear_local_ip(&mut self) {
        self.local_ip = ::std::option::Option::None;
    }

    pub fn has_local_ip(&self) -> bool {
        self.local_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_local_ip(&mut self, v: u32) {
        self.local_ip = ::std::option::Option::Some(v);
    }

    // optional fixed64 instanceid = 3;

    pub fn instanceid(&self) -> u64 {
        self.instanceid.unwrap_or(0)
    }

    pub fn clear_instanceid(&mut self) {
        self.instanceid = ::std::option::Option::None;
    }

    pub fn has_instanceid(&self) -> bool {
        self.instanceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instanceid(&mut self, v: u64) {
        self.instanceid = ::std::option::Option::Some(v);
    }

    // optional string machine_name = 4;

    pub fn machine_name(&self) -> &str {
        match self.machine_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_machine_name(&mut self) {
        self.machine_name = ::std::option::Option::None;
    }

    pub fn has_machine_name(&self) -> bool {
        self.machine_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_machine_name(&mut self, v: ::std::string::String) {
        self.machine_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_machine_name(&mut self) -> &mut ::std::string::String {
        if self.machine_name.is_none() {
            self.machine_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.machine_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_machine_name(&mut self) -> ::std::string::String {
        self.machine_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CSiteLicense_LCSAssociateUser_Request| { &m.steamid },
            |m: &mut CSiteLicense_LCSAssociateUser_Request| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "local_ip",
            |m: &CSiteLicense_LCSAssociateUser_Request| { &m.local_ip },
            |m: &mut CSiteLicense_LCSAssociateUser_Request| { &mut m.local_ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "instanceid",
            |m: &CSiteLicense_LCSAssociateUser_Request| { &m.instanceid },
            |m: &mut CSiteLicense_LCSAssociateUser_Request| { &mut m.instanceid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "machine_name",
            |m: &CSiteLicense_LCSAssociateUser_Request| { &m.machine_name },
            |m: &mut CSiteLicense_LCSAssociateUser_Request| { &mut m.machine_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteLicense_LCSAssociateUser_Request>(
            "CSiteLicense_LCSAssociateUser_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteLicense_LCSAssociateUser_Request {
    const NAME: &'static str = "CSiteLicense_LCSAssociateUser_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                21 => {
                    self.local_ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                25 => {
                    self.instanceid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                34 => {
                    self.machine_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.local_ip {
            my_size += 1 + 4;
        }
        if let Some(v) = self.instanceid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.machine_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.local_ip {
            os.write_fixed32(2, v)?;
        }
        if let Some(v) = self.instanceid {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.machine_name.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteLicense_LCSAssociateUser_Request {
        CSiteLicense_LCSAssociateUser_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.local_ip = ::std::option::Option::None;
        self.instanceid = ::std::option::Option::None;
        self.machine_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteLicense_LCSAssociateUser_Request {
        static instance: CSiteLicense_LCSAssociateUser_Request = CSiteLicense_LCSAssociateUser_Request {
            steamid: ::std::option::Option::None,
            local_ip: ::std::option::Option::None,
            instanceid: ::std::option::Option::None,
            machine_name: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteLicense_LCSAssociateUser_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteLicense_LCSAssociateUser_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteLicense_LCSAssociateUser_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteLicense_LCSAssociateUser_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSiteLicense_LCSAssociateUser_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteLicense_LCSAssociateUser_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CSiteLicense_LCSAssociateUser_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteLicense_LCSAssociateUser_Response {
    fn default() -> &'a CSiteLicense_LCSAssociateUser_Response {
        <CSiteLicense_LCSAssociateUser_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSiteLicense_LCSAssociateUser_Response {
    pub fn new() -> CSiteLicense_LCSAssociateUser_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteLicense_LCSAssociateUser_Response>(
            "CSiteLicense_LCSAssociateUser_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteLicense_LCSAssociateUser_Response {
    const NAME: &'static str = "CSiteLicense_LCSAssociateUser_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteLicense_LCSAssociateUser_Response {
        CSiteLicense_LCSAssociateUser_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteLicense_LCSAssociateUser_Response {
        static instance: CSiteLicense_LCSAssociateUser_Response = CSiteLicense_LCSAssociateUser_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteLicense_LCSAssociateUser_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteLicense_LCSAssociateUser_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteLicense_LCSAssociateUser_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteLicense_LCSAssociateUser_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSiteLicense_ClientSeatCheckout_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteLicense_ClientSeatCheckout_Request {
    // message fields
    // @@protoc_insertion_point(field:CSiteLicense_ClientSeatCheckout_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSiteLicense_ClientSeatCheckout_Request.instanceid)
    pub instanceid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSiteLicense_ClientSeatCheckout_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CSiteLicense_ClientSeatCheckout_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteLicense_ClientSeatCheckout_Request {
    fn default() -> &'a CSiteLicense_ClientSeatCheckout_Request {
        <CSiteLicense_ClientSeatCheckout_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSiteLicense_ClientSeatCheckout_Request {
    pub fn new() -> CSiteLicense_ClientSeatCheckout_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 instanceid = 2;

    pub fn instanceid(&self) -> u64 {
        self.instanceid.unwrap_or(0)
    }

    pub fn clear_instanceid(&mut self) {
        self.instanceid = ::std::option::Option::None;
    }

    pub fn has_instanceid(&self) -> bool {
        self.instanceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instanceid(&mut self, v: u64) {
        self.instanceid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 3;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CSiteLicense_ClientSeatCheckout_Request| { &m.steamid },
            |m: &mut CSiteLicense_ClientSeatCheckout_Request| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "instanceid",
            |m: &CSiteLicense_ClientSeatCheckout_Request| { &m.instanceid },
            |m: &mut CSiteLicense_ClientSeatCheckout_Request| { &mut m.instanceid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CSiteLicense_ClientSeatCheckout_Request| { &m.appid },
            |m: &mut CSiteLicense_ClientSeatCheckout_Request| { &mut m.appid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteLicense_ClientSeatCheckout_Request>(
            "CSiteLicense_ClientSeatCheckout_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteLicense_ClientSeatCheckout_Request {
    const NAME: &'static str = "CSiteLicense_ClientSeatCheckout_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.instanceid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.instanceid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.instanceid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteLicense_ClientSeatCheckout_Request {
        CSiteLicense_ClientSeatCheckout_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.instanceid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteLicense_ClientSeatCheckout_Request {
        static instance: CSiteLicense_ClientSeatCheckout_Request = CSiteLicense_ClientSeatCheckout_Request {
            steamid: ::std::option::Option::None,
            instanceid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteLicense_ClientSeatCheckout_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteLicense_ClientSeatCheckout_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteLicense_ClientSeatCheckout_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteLicense_ClientSeatCheckout_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSiteLicense_ClientSeatCheckout_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteLicense_ClientSeatCheckout_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CSiteLicense_ClientSeatCheckout_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteLicense_ClientSeatCheckout_Response {
    fn default() -> &'a CSiteLicense_ClientSeatCheckout_Response {
        <CSiteLicense_ClientSeatCheckout_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSiteLicense_ClientSeatCheckout_Response {
    pub fn new() -> CSiteLicense_ClientSeatCheckout_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteLicense_ClientSeatCheckout_Response>(
            "CSiteLicense_ClientSeatCheckout_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteLicense_ClientSeatCheckout_Response {
    const NAME: &'static str = "CSiteLicense_ClientSeatCheckout_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteLicense_ClientSeatCheckout_Response {
        CSiteLicense_ClientSeatCheckout_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteLicense_ClientSeatCheckout_Response {
        static instance: CSiteLicense_ClientSeatCheckout_Response = CSiteLicense_ClientSeatCheckout_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteLicense_ClientSeatCheckout_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteLicense_ClientSeatCheckout_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteLicense_ClientSeatCheckout_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteLicense_ClientSeatCheckout_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSiteLicense_ClientGetAvailableSeats_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteLicense_ClientGetAvailableSeats_Request {
    // message fields
    // @@protoc_insertion_point(field:CSiteLicense_ClientGetAvailableSeats_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSiteLicense_ClientGetAvailableSeats_Request.instanceid)
    pub instanceid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSiteLicense_ClientGetAvailableSeats_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CSiteLicense_ClientGetAvailableSeats_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteLicense_ClientGetAvailableSeats_Request {
    fn default() -> &'a CSiteLicense_ClientGetAvailableSeats_Request {
        <CSiteLicense_ClientGetAvailableSeats_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSiteLicense_ClientGetAvailableSeats_Request {
    pub fn new() -> CSiteLicense_ClientGetAvailableSeats_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 instanceid = 2;

    pub fn instanceid(&self) -> u64 {
        self.instanceid.unwrap_or(0)
    }

    pub fn clear_instanceid(&mut self) {
        self.instanceid = ::std::option::Option::None;
    }

    pub fn has_instanceid(&self) -> bool {
        self.instanceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instanceid(&mut self, v: u64) {
        self.instanceid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 3;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CSiteLicense_ClientGetAvailableSeats_Request| { &m.steamid },
            |m: &mut CSiteLicense_ClientGetAvailableSeats_Request| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "instanceid",
            |m: &CSiteLicense_ClientGetAvailableSeats_Request| { &m.instanceid },
            |m: &mut CSiteLicense_ClientGetAvailableSeats_Request| { &mut m.instanceid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CSiteLicense_ClientGetAvailableSeats_Request| { &m.appid },
            |m: &mut CSiteLicense_ClientGetAvailableSeats_Request| { &mut m.appid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteLicense_ClientGetAvailableSeats_Request>(
            "CSiteLicense_ClientGetAvailableSeats_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteLicense_ClientGetAvailableSeats_Request {
    const NAME: &'static str = "CSiteLicense_ClientGetAvailableSeats_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.instanceid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.instanceid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.instanceid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteLicense_ClientGetAvailableSeats_Request {
        CSiteLicense_ClientGetAvailableSeats_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.instanceid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteLicense_ClientGetAvailableSeats_Request {
        static instance: CSiteLicense_ClientGetAvailableSeats_Request = CSiteLicense_ClientGetAvailableSeats_Request {
            steamid: ::std::option::Option::None,
            instanceid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteLicense_ClientGetAvailableSeats_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteLicense_ClientGetAvailableSeats_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteLicense_ClientGetAvailableSeats_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteLicense_ClientGetAvailableSeats_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSiteLicense_ClientGetAvailableSeats_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSiteLicense_ClientGetAvailableSeats_Response {
    // message fields
    // @@protoc_insertion_point(field:CSiteLicense_ClientGetAvailableSeats_Response.available_seats)
    pub available_seats: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CSiteLicense_ClientGetAvailableSeats_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSiteLicense_ClientGetAvailableSeats_Response {
    fn default() -> &'a CSiteLicense_ClientGetAvailableSeats_Response {
        <CSiteLicense_ClientGetAvailableSeats_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSiteLicense_ClientGetAvailableSeats_Response {
    pub fn new() -> CSiteLicense_ClientGetAvailableSeats_Response {
        ::std::default::Default::default()
    }

    // optional uint32 available_seats = 1;

    pub fn available_seats(&self) -> u32 {
        self.available_seats.unwrap_or(0)
    }

    pub fn clear_available_seats(&mut self) {
        self.available_seats = ::std::option::Option::None;
    }

    pub fn has_available_seats(&self) -> bool {
        self.available_seats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_available_seats(&mut self, v: u32) {
        self.available_seats = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "available_seats",
            |m: &CSiteLicense_ClientGetAvailableSeats_Response| { &m.available_seats },
            |m: &mut CSiteLicense_ClientGetAvailableSeats_Response| { &mut m.available_seats },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSiteLicense_ClientGetAvailableSeats_Response>(
            "CSiteLicense_ClientGetAvailableSeats_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSiteLicense_ClientGetAvailableSeats_Response {
    const NAME: &'static str = "CSiteLicense_ClientGetAvailableSeats_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.available_seats = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.available_seats {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.available_seats {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSiteLicense_ClientGetAvailableSeats_Response {
        CSiteLicense_ClientGetAvailableSeats_Response::new()
    }

    fn clear(&mut self) {
        self.available_seats = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSiteLicense_ClientGetAvailableSeats_Response {
        static instance: CSiteLicense_ClientGetAvailableSeats_Response = CSiteLicense_ClientGetAvailableSeats_Response {
            available_seats: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSiteLicense_ClientGetAvailableSeats_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSiteLicense_ClientGetAvailableSeats_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSiteLicense_ClientGetAvailableSeats_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSiteLicense_ClientGetAvailableSeats_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,steammessages_site_license.steamclient.proto\x1a,steammessages_unifie\
    d_base.steamclient.proto\"\xca\x01\n)CSiteManagerClient_IncomingClient_R\
    equest\x12'\n\x0fsite_instanceid\x18\x01\x20\x01(\x06R\x0esiteInstanceid\
    \x12%\n\x0eclient_steamid\x18\x02\x20\x01(\x06R\rclientSteamid\x12&\n\
    \x0fclient_local_ip\x18\x03\x20\x01(\x07R\rclientLocalIp\x12%\n\x0econne\
    ction_key\x18\x04\x20\x01(\x0cR\rconnectionKey\",\n*CSiteManagerClient_I\
    ncomingClient_Response\"^\n,CSiteLicense_ClientSeatCheckout_Notification\
    \x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\n\x07eresult\
    \x18\x02\x20\x01(\rR\x07eresult\"\xe8\x03\n/CSiteManagerClient_TrackedPa\
    yments_Notification\x12\x17\n\x07site_id\x18\x01\x20\x01(\x06R\x06siteId\
    \x12T\n\x08payments\x18\x02\x20\x03(\x0b28.CSiteManagerClient_TrackedPay\
    ments_Notification.PaymentR\x08payments\x1a\xc5\x02\n\x07Payment\x12\x18\
    \n\x07transid\x18\x01\x20\x01(\x04R\x07transid\x12\x18\n\x07steamid\x18\
    \x02\x20\x01(\x04R\x07steamid\x12\x16\n\x06amount\x18\x03\x20\x01(\x03R\
    \x06amount\x12\x1c\n\tecurrency\x18\x04\x20\x01(\rR\tecurrency\x12!\n\
    \x0ctime_created\x18\x05\x20\x01(\x05R\x0btimeCreated\x12'\n\x0fpurchase\
    _status\x18\x06\x20\x01(\x05R\x0epurchaseStatus\x12!\n\x0cmachine_name\
    \x18\x07\x20\x01(\tR\x0bmachineName\x12!\n\x0cpersona_name\x18\x08\x20\
    \x01(\tR\x0bpersonaName\x12\x1f\n\x0bprofile_url\x18\t\x20\x01(\tR\nprof\
    ileUrl\x12\x1d\n\navatar_url\x18\n\x20\x01(\tR\tavatarUrl\"\x9e\x01\n(CS\
    iteLicense_InitiateAssociation_Request\x12!\n\x0csite_steamid\x18\x01\
    \x20\x01(\x06R\x0bsiteSteamid\x12'\n\x0fsite_instanceid\x18\x02\x20\x01(\
    \x06R\x0esiteInstanceid\x12&\n\x0fclient_local_ip\x18\x03\x20\x01(\x07R\
    \rclientLocalIp\"R\n)CSiteLicense_InitiateAssociation_Response\x12%\n\
    \x0econnection_key\x18\x01\x20\x01(\x0cR\rconnectionKey\"F\n$CSiteLicens\
    e_LCSAuthenticate_Request\x12\x1e\n\ninstanceid\x18\x01\x20\x01(\x06R\ni\
    nstanceid\"\xa8\x01\n%CSiteLicense_LCSAuthenticate_Response\x12\x17\n\
    \x07site_id\x18\x01\x20\x01(\x04R\x06siteId\x12\x1b\n\tsite_name\x18\x02\
    \x20\x01(\tR\x08siteName\x12\x1f\n\x0bnew_session\x18\x03\x20\x01(\x08R\
    \nnewSession\x12(\n\x10no_site_licenses\x18\x04\x20\x01(\x08R\x0enoSiteL\
    icenses\"\x9f\x01\n%CSiteLicense_LCSAssociateUser_Request\x12\x18\n\x07s\
    teamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x19\n\x08local_ip\x18\x02\
    \x20\x01(\x07R\x07localIp\x12\x1e\n\ninstanceid\x18\x03\x20\x01(\x06R\ni\
    nstanceid\x12!\n\x0cmachine_name\x18\x04\x20\x01(\tR\x0bmachineName\"(\n\
    &CSiteLicense_LCSAssociateUser_Response\"y\n'CSiteLicense_ClientSeatChec\
    kout_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\
    \x1e\n\ninstanceid\x18\x02\x20\x01(\x06R\ninstanceid\x12\x14\n\x05appid\
    \x18\x03\x20\x01(\rR\x05appid\"*\n(CSiteLicense_ClientSeatCheckout_Respo\
    nse\"~\n,CSiteLicense_ClientGetAvailableSeats_Request\x12\x18\n\x07steam\
    id\x18\x01\x20\x01(\x06R\x07steamid\x12\x1e\n\ninstanceid\x18\x02\x20\
    \x01(\x06R\ninstanceid\x12\x14\n\x05appid\x18\x03\x20\x01(\rR\x05appid\"\
    X\n-CSiteLicense_ClientGetAvailableSeats_Response\x12'\n\x0favailable_se\
    ats\x18\x01\x20\x01(\rR\x0eavailableSeats2\xa3\x04\n\x11SiteManagerClien\
    t\x12\xaf\x01\n\x0eIncomingClient\x12*.CSiteManagerClient_IncomingClient\
    _Request\x1a+.CSiteManagerClient_IncomingClient_Response\"D\x82\xb5\x18@\
    Rack\x20informing\x20site\x20manager\x20of\x20new\x20inbound\x20client\
    \x20PSK\x20connection\x12\x93\x01\n\x1eClientSeatCheckoutNotification\
    \x12-.CSiteLicense_ClientSeatCheckout_Notification\x1a\x0b.NoResponse\"5\
    \x82\xb5\x181Notify\x20client\x20directly\x20about\x20seat\x20checkout\
    \x20result\x12\x9a\x01\n\x1bTrackedPaymentsNotification\x120.CSiteManage\
    rClient_TrackedPayments_Notification\x1a\x0b.NoResponse\"<\x82\xb5\x188R\
    ack\x20informing\x20site\x20manager\x20of\x20existing\x20tracked\x20paym\
    ents\x1a)\x82\xb5\x18!Local\x20site\x20manager\x20client\x20service\xc0\
    \xb5\x18\x022\xd5\x06\n\x0bSiteLicense\x12\xa4\x01\n\x13InitiateAssociat\
    ion\x12).CSiteLicense_InitiateAssociation_Request\x1a*.CSiteLicense_Init\
    iateAssociation_Response\"6\x82\xb5\x182Client\x20is\x20requesting\x20co\
    nnetion\x20info\x20for\x20local\x20site\x12\x86\x01\n\x0fLCSAuthenticate\
    \x12%.CSiteLicense_LCSAuthenticate_Request\x1a&.CSiteLicense_LCSAuthenti\
    cate_Response\"$\x82\xb5\x18\x20Local\x20cafe\x20server\x20authenticatio\
    n\x12\x9d\x01\n\x10LCSAssociateUser\x12&.CSiteLicense_LCSAssociateUser_R\
    equest\x1a'.CSiteLicense_LCSAssociateUser_Response\"8\x82\xb5\x184Local\
    \x20cafe\x20server\x20wants\x20to\x20grant\x20user\x20access\x20to\x20si\
    te\x12\x9e\x01\n\x12ClientSeatCheckout\x12(.CSiteLicense_ClientSeatCheck\
    out_Request\x1a).CSiteLicense_ClientSeatCheckout_Response\"3\x82\xb5\x18\
    /Client\x20is\x20requesting\x20use\x20of\x20a\x20site\x20license\x20seat\
    \x12\xba\x01\n\x17ClientGetAvailableSeats\x12-.CSiteLicense_ClientGetAva\
    ilableSeats_Request\x1a..CSiteLicense_ClientGetAvailableSeats_Response\"\
    @\x82\xb5\x18<Client\x20is\x20requesting\x20the\x20number\x20of\x20curre\
    ntly\x20available\x20seats\x1a\x18\x82\xb5\x18\x14Site\x20License\x20ser\
    viceB\x03\x80\x01\x01J\xf0\x1e\n\x06\x12\x04\0\0~\x01\n\t\n\x02\x03\0\
    \x12\x03\0\06\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\x10\x12\x03\
    \x02\0\"\n\n\n\x02\x04\0\x12\x04\x04\0\t\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x04\x081\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x08-\n\x0c\n\x05\x04\0\x02\
    \0\x04\x12\x03\x05\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x11\
    \x18\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x19(\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x05+,\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x08,\n\x0c\n\
    \x05\x04\0\x02\x01\x04\x12\x03\x06\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x06\x11\x18\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\x19'\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06*+\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03\x07\x08-\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x07\x08\x10\n\x0c\n\
    \x05\x04\0\x02\x02\x05\x12\x03\x07\x11\x18\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x07\x19(\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x07+,\n\x0b\n\
    \x04\x04\0\x02\x03\x12\x03\x08\x08*\n\x0c\n\x05\x04\0\x02\x03\x04\x12\
    \x03\x08\x08\x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x08\x11\x16\n\x0c\
    \n\x05\x04\0\x02\x03\x01\x12\x03\x08\x17%\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03\x08()\n\n\n\x02\x04\x01\x12\x04\x0b\0\x0c\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x0b\x082\n\n\n\x02\x04\x02\x12\x04\x0e\0\x11\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\x0e\x084\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x0f\x08\
    \"\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x0f\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03\x0f\x11\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0f\
    \x18\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x0f\x20!\n\x0b\n\x04\x04\
    \x02\x02\x01\x12\x03\x10\x08$\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\
    \x10\x08\x10\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x10\x11\x17\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03\x10\x18\x1f\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03\x10\"#\n\n\n\x02\x04\x03\x12\x04\x13\0#\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03\x13\x087\n\x0c\n\x04\x04\x03\x03\0\x12\x04\x14\x08\x1f\
    \t\n\x0c\n\x05\x04\x03\x03\0\x01\x12\x03\x14\x10\x17\n\r\n\x06\x04\x03\
    \x03\0\x02\0\x12\x03\x15\x10,\n\x0e\n\x07\x04\x03\x03\0\x02\0\x04\x12\
    \x03\x15\x10\x18\n\x0e\n\x07\x04\x03\x03\0\x02\0\x05\x12\x03\x15\x19\x1f\
    \n\x0e\n\x07\x04\x03\x03\0\x02\0\x01\x12\x03\x15\x20'\n\x0e\n\x07\x04\
    \x03\x03\0\x02\0\x03\x12\x03\x15*+\n\r\n\x06\x04\x03\x03\0\x02\x01\x12\
    \x03\x16\x10,\n\x0e\n\x07\x04\x03\x03\0\x02\x01\x04\x12\x03\x16\x10\x18\
    \n\x0e\n\x07\x04\x03\x03\0\x02\x01\x05\x12\x03\x16\x19\x1f\n\x0e\n\x07\
    \x04\x03\x03\0\x02\x01\x01\x12\x03\x16\x20'\n\x0e\n\x07\x04\x03\x03\0\
    \x02\x01\x03\x12\x03\x16*+\n\r\n\x06\x04\x03\x03\0\x02\x02\x12\x03\x17\
    \x10*\n\x0e\n\x07\x04\x03\x03\0\x02\x02\x04\x12\x03\x17\x10\x18\n\x0e\n\
    \x07\x04\x03\x03\0\x02\x02\x05\x12\x03\x17\x19\x1e\n\x0e\n\x07\x04\x03\
    \x03\0\x02\x02\x01\x12\x03\x17\x1f%\n\x0e\n\x07\x04\x03\x03\0\x02\x02\
    \x03\x12\x03\x17()\n\r\n\x06\x04\x03\x03\0\x02\x03\x12\x03\x18\x10.\n\
    \x0e\n\x07\x04\x03\x03\0\x02\x03\x04\x12\x03\x18\x10\x18\n\x0e\n\x07\x04\
    \x03\x03\0\x02\x03\x05\x12\x03\x18\x19\x1f\n\x0e\n\x07\x04\x03\x03\0\x02\
    \x03\x01\x12\x03\x18\x20)\n\x0e\n\x07\x04\x03\x03\0\x02\x03\x03\x12\x03\
    \x18,-\n\r\n\x06\x04\x03\x03\0\x02\x04\x12\x03\x19\x100\n\x0e\n\x07\x04\
    \x03\x03\0\x02\x04\x04\x12\x03\x19\x10\x18\n\x0e\n\x07\x04\x03\x03\0\x02\
    \x04\x05\x12\x03\x19\x19\x1e\n\x0e\n\x07\x04\x03\x03\0\x02\x04\x01\x12\
    \x03\x19\x1f+\n\x0e\n\x07\x04\x03\x03\0\x02\x04\x03\x12\x03\x19./\n\r\n\
    \x06\x04\x03\x03\0\x02\x05\x12\x03\x1a\x103\n\x0e\n\x07\x04\x03\x03\0\
    \x02\x05\x04\x12\x03\x1a\x10\x18\n\x0e\n\x07\x04\x03\x03\0\x02\x05\x05\
    \x12\x03\x1a\x19\x1e\n\x0e\n\x07\x04\x03\x03\0\x02\x05\x01\x12\x03\x1a\
    \x1f.\n\x0e\n\x07\x04\x03\x03\0\x02\x05\x03\x12\x03\x1a12\n\r\n\x06\x04\
    \x03\x03\0\x02\x06\x12\x03\x1b\x101\n\x0e\n\x07\x04\x03\x03\0\x02\x06\
    \x04\x12\x03\x1b\x10\x18\n\x0e\n\x07\x04\x03\x03\0\x02\x06\x05\x12\x03\
    \x1b\x19\x1f\n\x0e\n\x07\x04\x03\x03\0\x02\x06\x01\x12\x03\x1b\x20,\n\
    \x0e\n\x07\x04\x03\x03\0\x02\x06\x03\x12\x03\x1b/0\n\r\n\x06\x04\x03\x03\
    \0\x02\x07\x12\x03\x1c\x101\n\x0e\n\x07\x04\x03\x03\0\x02\x07\x04\x12\
    \x03\x1c\x10\x18\n\x0e\n\x07\x04\x03\x03\0\x02\x07\x05\x12\x03\x1c\x19\
    \x1f\n\x0e\n\x07\x04\x03\x03\0\x02\x07\x01\x12\x03\x1c\x20,\n\x0e\n\x07\
    \x04\x03\x03\0\x02\x07\x03\x12\x03\x1c/0\n\r\n\x06\x04\x03\x03\0\x02\x08\
    \x12\x03\x1d\x100\n\x0e\n\x07\x04\x03\x03\0\x02\x08\x04\x12\x03\x1d\x10\
    \x18\n\x0e\n\x07\x04\x03\x03\0\x02\x08\x05\x12\x03\x1d\x19\x1f\n\x0e\n\
    \x07\x04\x03\x03\0\x02\x08\x01\x12\x03\x1d\x20+\n\x0e\n\x07\x04\x03\x03\
    \0\x02\x08\x03\x12\x03\x1d./\n\r\n\x06\x04\x03\x03\0\x02\t\x12\x03\x1e\
    \x100\n\x0e\n\x07\x04\x03\x03\0\x02\t\x04\x12\x03\x1e\x10\x18\n\x0e\n\
    \x07\x04\x03\x03\0\x02\t\x05\x12\x03\x1e\x19\x1f\n\x0e\n\x07\x04\x03\x03\
    \0\x02\t\x01\x12\x03\x1e\x20*\n\x0e\n\x07\x04\x03\x03\0\x02\t\x03\x12\
    \x03\x1e-/\n\x0b\n\x04\x04\x03\x02\0\x12\x03!\x08%\n\x0c\n\x05\x04\x03\
    \x02\0\x04\x12\x03!\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03!\x11\
    \x18\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03!\x19\x20\n\x0c\n\x05\x04\x03\
    \x02\0\x03\x12\x03!#$\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\"\x08W\n\x0c\n\
    \x05\x04\x03\x02\x01\x04\x12\x03\"\x08\x10\n\x0c\n\x05\x04\x03\x02\x01\
    \x06\x12\x03\"\x11I\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\"JR\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03\"UV\n\n\n\x02\x04\x04\x12\x04%\0)\x01\n\
    \n\n\x03\x04\x04\x01\x12\x03%\x080\n\x0b\n\x04\x04\x04\x02\0\x12\x03&\
    \x08*\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03&\x08\x10\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03&\x11\x18\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03&\x19%\
    \n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03&()\n\x0b\n\x04\x04\x04\x02\x01\
    \x12\x03'\x08-\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03'\x08\x10\n\x0c\n\
    \x05\x04\x04\x02\x01\x05\x12\x03'\x11\x18\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03'\x19(\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03'+,\n\x0b\n\
    \x04\x04\x04\x02\x02\x12\x03(\x08-\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\
    \x03(\x08\x10\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03(\x11\x18\n\x0c\n\
    \x05\x04\x04\x02\x02\x01\x12\x03(\x19(\n\x0c\n\x05\x04\x04\x02\x02\x03\
    \x12\x03(+,\n\n\n\x02\x04\x05\x12\x04+\0-\x01\n\n\n\x03\x04\x05\x01\x12\
    \x03+\x081\n\x0b\n\x04\x04\x05\x02\0\x12\x03,\x08*\n\x0c\n\x05\x04\x05\
    \x02\0\x04\x12\x03,\x08\x10\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03,\x11\
    \x16\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03,\x17%\n\x0c\n\x05\x04\x05\x02\
    \0\x03\x12\x03,()\n\n\n\x02\x04\x06\x12\x04/\01\x01\n\n\n\x03\x04\x06\
    \x01\x12\x03/\x08,\n\x0b\n\x04\x04\x06\x02\0\x12\x030\x08(\n\x0c\n\x05\
    \x04\x06\x02\0\x04\x12\x030\x08\x10\n\x0c\n\x05\x04\x06\x02\0\x05\x12\
    \x030\x11\x18\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x030\x19#\n\x0c\n\x05\
    \x04\x06\x02\0\x03\x12\x030&'\n\n\n\x02\x04\x07\x12\x043\08\x01\n\n\n\
    \x03\x04\x07\x01\x12\x033\x08-\n\x0b\n\x04\x04\x07\x02\0\x12\x034\x08$\n\
    \x0c\n\x05\x04\x07\x02\0\x04\x12\x034\x08\x10\n\x0c\n\x05\x04\x07\x02\0\
    \x05\x12\x034\x11\x17\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x034\x18\x1f\n\
    \x0c\n\x05\x04\x07\x02\0\x03\x12\x034\"#\n\x0b\n\x04\x04\x07\x02\x01\x12\
    \x035\x08&\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x035\x08\x10\n\x0c\n\x05\
    \x04\x07\x02\x01\x05\x12\x035\x11\x17\n\x0c\n\x05\x04\x07\x02\x01\x01\
    \x12\x035\x18!\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x035$%\n\x0b\n\x04\
    \x04\x07\x02\x02\x12\x036\x08&\n\x0c\n\x05\x04\x07\x02\x02\x04\x12\x036\
    \x08\x10\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\x036\x11\x15\n\x0c\n\x05\
    \x04\x07\x02\x02\x01\x12\x036\x16!\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\
    \x036$%\n\x0b\n\x04\x04\x07\x02\x03\x12\x037\x08+\n\x0c\n\x05\x04\x07\
    \x02\x03\x04\x12\x037\x08\x10\n\x0c\n\x05\x04\x07\x02\x03\x05\x12\x037\
    \x11\x15\n\x0c\n\x05\x04\x07\x02\x03\x01\x12\x037\x16&\n\x0c\n\x05\x04\
    \x07\x02\x03\x03\x12\x037)*\n\n\n\x02\x04\x08\x12\x04:\0?\x01\n\n\n\x03\
    \x04\x08\x01\x12\x03:\x08-\n\x0b\n\x04\x04\x08\x02\0\x12\x03;\x08%\n\x0c\
    \n\x05\x04\x08\x02\0\x04\x12\x03;\x08\x10\n\x0c\n\x05\x04\x08\x02\0\x05\
    \x12\x03;\x11\x18\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03;\x19\x20\n\x0c\n\
    \x05\x04\x08\x02\0\x03\x12\x03;#$\n\x0b\n\x04\x04\x08\x02\x01\x12\x03<\
    \x08&\n\x0c\n\x05\x04\x08\x02\x01\x04\x12\x03<\x08\x10\n\x0c\n\x05\x04\
    \x08\x02\x01\x05\x12\x03<\x11\x18\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\
    \x03<\x19!\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03<$%\n\x0b\n\x04\x04\
    \x08\x02\x02\x12\x03=\x08(\n\x0c\n\x05\x04\x08\x02\x02\x04\x12\x03=\x08\
    \x10\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\x03=\x11\x18\n\x0c\n\x05\x04\
    \x08\x02\x02\x01\x12\x03=\x19#\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03=&\
    '\n\x0b\n\x04\x04\x08\x02\x03\x12\x03>\x08)\n\x0c\n\x05\x04\x08\x02\x03\
    \x04\x12\x03>\x08\x10\n\x0c\n\x05\x04\x08\x02\x03\x05\x12\x03>\x11\x17\n\
    \x0c\n\x05\x04\x08\x02\x03\x01\x12\x03>\x18$\n\x0c\n\x05\x04\x08\x02\x03\
    \x03\x12\x03>'(\n\n\n\x02\x04\t\x12\x04A\0B\x01\n\n\n\x03\x04\t\x01\x12\
    \x03A\x08.\n\n\n\x02\x04\n\x12\x04D\0H\x01\n\n\n\x03\x04\n\x01\x12\x03D\
    \x08/\n\x0b\n\x04\x04\n\x02\0\x12\x03E\x08%\n\x0c\n\x05\x04\n\x02\0\x04\
    \x12\x03E\x08\x10\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03E\x11\x18\n\x0c\n\
    \x05\x04\n\x02\0\x01\x12\x03E\x19\x20\n\x0c\n\x05\x04\n\x02\0\x03\x12\
    \x03E#$\n\x0b\n\x04\x04\n\x02\x01\x12\x03F\x08(\n\x0c\n\x05\x04\n\x02\
    \x01\x04\x12\x03F\x08\x10\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03F\x11\x18\
    \n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03F\x19#\n\x0c\n\x05\x04\n\x02\x01\
    \x03\x12\x03F&'\n\x0b\n\x04\x04\n\x02\x02\x12\x03G\x08\"\n\x0c\n\x05\x04\
    \n\x02\x02\x04\x12\x03G\x08\x10\n\x0c\n\x05\x04\n\x02\x02\x05\x12\x03G\
    \x11\x17\n\x0c\n\x05\x04\n\x02\x02\x01\x12\x03G\x18\x1d\n\x0c\n\x05\x04\
    \n\x02\x02\x03\x12\x03G\x20!\n\n\n\x02\x04\x0b\x12\x04J\0K\x01\n\n\n\x03\
    \x04\x0b\x01\x12\x03J\x080\n\n\n\x02\x04\x0c\x12\x04M\0Q\x01\n\n\n\x03\
    \x04\x0c\x01\x12\x03M\x084\n\x0b\n\x04\x04\x0c\x02\0\x12\x03N\x08%\n\x0c\
    \n\x05\x04\x0c\x02\0\x04\x12\x03N\x08\x10\n\x0c\n\x05\x04\x0c\x02\0\x05\
    \x12\x03N\x11\x18\n\x0c\n\x05\x04\x0c\x02\0\x01\x12\x03N\x19\x20\n\x0c\n\
    \x05\x04\x0c\x02\0\x03\x12\x03N#$\n\x0b\n\x04\x04\x0c\x02\x01\x12\x03O\
    \x08(\n\x0c\n\x05\x04\x0c\x02\x01\x04\x12\x03O\x08\x10\n\x0c\n\x05\x04\
    \x0c\x02\x01\x05\x12\x03O\x11\x18\n\x0c\n\x05\x04\x0c\x02\x01\x01\x12\
    \x03O\x19#\n\x0c\n\x05\x04\x0c\x02\x01\x03\x12\x03O&'\n\x0b\n\x04\x04\
    \x0c\x02\x02\x12\x03P\x08\"\n\x0c\n\x05\x04\x0c\x02\x02\x04\x12\x03P\x08\
    \x10\n\x0c\n\x05\x04\x0c\x02\x02\x05\x12\x03P\x11\x17\n\x0c\n\x05\x04\
    \x0c\x02\x02\x01\x12\x03P\x18\x1d\n\x0c\n\x05\x04\x0c\x02\x02\x03\x12\
    \x03P\x20!\n\n\n\x02\x04\r\x12\x04S\0U\x01\n\n\n\x03\x04\r\x01\x12\x03S\
    \x085\n\x0b\n\x04\x04\r\x02\0\x12\x03T\x08,\n\x0c\n\x05\x04\r\x02\0\x04\
    \x12\x03T\x08\x10\n\x0c\n\x05\x04\r\x02\0\x05\x12\x03T\x11\x17\n\x0c\n\
    \x05\x04\r\x02\0\x01\x12\x03T\x18'\n\x0c\n\x05\x04\r\x02\0\x03\x12\x03T*\
    +\n\n\n\x02\x06\0\x12\x04W\0f\x01\n\n\n\x03\x06\0\x01\x12\x03W\x08\x19\n\
    \n\n\x03\x06\0\x03\x12\x03X\x08K\n\r\n\x06\x06\0\x03\xd0\x86\x03\x12\x03\
    X\x08K\n\n\n\x03\x06\0\x03\x12\x03Y\x08K\n\r\n\x06\x06\0\x03\xd8\x86\x03\
    \x12\x03Y\x08K\n\x0c\n\x04\x06\0\x02\0\x12\x04[\x08]\t\n\x0c\n\x05\x06\0\
    \x02\0\x01\x12\x03[\x0c\x1a\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03[\x1cF\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x03[Q|\n\x0c\n\x05\x06\0\x02\0\x04\x12\
    \x03\\\x10q\n\x0f\n\x08\x06\0\x02\0\x04\xd0\x86\x03\x12\x03\\\x10q\n\x0c\
    \n\x04\x06\0\x02\x01\x12\x04_\x08a\t\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03_\x0c*\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03_,Y\n\x0c\n\x05\x06\0\
    \x02\x01\x03\x12\x03_do\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03`\x10b\n\
    \x0f\n\x08\x06\0\x02\x01\x04\xd0\x86\x03\x12\x03`\x10b\n\x0c\n\x04\x06\0\
    \x02\x02\x12\x04c\x08e\t\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03c\x0c'\n\
    \x0c\n\x05\x06\0\x02\x02\x02\x12\x03c)Y\n\x0c\n\x05\x06\0\x02\x02\x03\
    \x12\x03cdo\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03d\x10i\n\x0f\n\x08\x06\
    \0\x02\x02\x04\xd0\x86\x03\x12\x03d\x10i\n\n\n\x02\x06\x01\x12\x04h\0~\
    \x01\n\n\n\x03\x06\x01\x01\x12\x03h\x08\x13\n\n\n\x03\x06\x01\x03\x12\
    \x03i\x08>\n\r\n\x06\x06\x01\x03\xd0\x86\x03\x12\x03i\x08>\n\x0c\n\x04\
    \x06\x01\x02\0\x12\x04k\x08m\t\n\x0c\n\x05\x06\x01\x02\0\x01\x12\x03k\
    \x0c\x1f\n\x0c\n\x05\x06\x01\x02\0\x02\x12\x03k!J\n\x0c\n\x05\x06\x01\
    \x02\0\x03\x12\x03kU\x7f\n\x0c\n\x05\x06\x01\x02\0\x04\x12\x03l\x10c\n\
    \x0f\n\x08\x06\x01\x02\0\x04\xd0\x86\x03\x12\x03l\x10c\n\x0c\n\x04\x06\
    \x01\x02\x01\x12\x04o\x08q\t\n\x0c\n\x05\x06\x01\x02\x01\x01\x12\x03o\
    \x0c\x1b\n\x0c\n\x05\x06\x01\x02\x01\x02\x12\x03o\x1dB\n\x0c\n\x05\x06\
    \x01\x02\x01\x03\x12\x03oMs\n\x0c\n\x05\x06\x01\x02\x01\x04\x12\x03p\x10\
    Q\n\x0f\n\x08\x06\x01\x02\x01\x04\xd0\x86\x03\x12\x03p\x10Q\n\x0c\n\x04\
    \x06\x01\x02\x02\x12\x04s\x08u\t\n\x0c\n\x05\x06\x01\x02\x02\x01\x12\x03\
    s\x0c\x1c\n\x0c\n\x05\x06\x01\x02\x02\x02\x12\x03s\x1eD\n\x0c\n\x05\x06\
    \x01\x02\x02\x03\x12\x03sOv\n\x0c\n\x05\x06\x01\x02\x02\x04\x12\x03t\x10\
    e\n\x0f\n\x08\x06\x01\x02\x02\x04\xd0\x86\x03\x12\x03t\x10e\n\x0c\n\x04\
    \x06\x01\x02\x03\x12\x04w\x08y\t\n\x0c\n\x05\x06\x01\x02\x03\x01\x12\x03\
    w\x0c\x1e\n\x0c\n\x05\x06\x01\x02\x03\x02\x12\x03w\x20H\n\x0c\n\x05\x06\
    \x01\x02\x03\x03\x12\x03wS|\n\x0c\n\x05\x06\x01\x02\x03\x04\x12\x03x\x10\
    `\n\x0f\n\x08\x06\x01\x02\x03\x04\xd0\x86\x03\x12\x03x\x10`\n\x0c\n\x04\
    \x06\x01\x02\x04\x12\x04{\x08}\t\n\x0c\n\x05\x06\x01\x02\x04\x01\x12\x03\
    {\x0c#\n\x0c\n\x05\x06\x01\x02\x04\x02\x12\x03{%R\n\r\n\x05\x06\x01\x02\
    \x04\x03\x12\x04{]\x8b\x01\n\x0c\n\x05\x06\x01\x02\x04\x04\x12\x03|\x10m\
    \n\x0f\n\x08\x06\x01\x02\x04\x04\xd0\x86\x03\x12\x03|\x10m\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(15);
            messages.push(CSiteManagerClient_IncomingClient_Request::generated_message_descriptor_data());
            messages.push(CSiteManagerClient_IncomingClient_Response::generated_message_descriptor_data());
            messages.push(CSiteLicense_ClientSeatCheckout_Notification::generated_message_descriptor_data());
            messages.push(CSiteManagerClient_TrackedPayments_Notification::generated_message_descriptor_data());
            messages.push(CSiteLicense_InitiateAssociation_Request::generated_message_descriptor_data());
            messages.push(CSiteLicense_InitiateAssociation_Response::generated_message_descriptor_data());
            messages.push(CSiteLicense_LCSAuthenticate_Request::generated_message_descriptor_data());
            messages.push(CSiteLicense_LCSAuthenticate_Response::generated_message_descriptor_data());
            messages.push(CSiteLicense_LCSAssociateUser_Request::generated_message_descriptor_data());
            messages.push(CSiteLicense_LCSAssociateUser_Response::generated_message_descriptor_data());
            messages.push(CSiteLicense_ClientSeatCheckout_Request::generated_message_descriptor_data());
            messages.push(CSiteLicense_ClientSeatCheckout_Response::generated_message_descriptor_data());
            messages.push(CSiteLicense_ClientGetAvailableSeats_Request::generated_message_descriptor_data());
            messages.push(CSiteLicense_ClientGetAvailableSeats_Response::generated_message_descriptor_data());
            messages.push(csite_manager_client_tracked_payments_notification::Payment::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
