// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_econ.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CEcon_GetTradeOfferAccessToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEcon_GetTradeOfferAccessToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CEcon_GetTradeOfferAccessToken_Request.generate_new_token)
    pub generate_new_token: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CEcon_GetTradeOfferAccessToken_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEcon_GetTradeOfferAccessToken_Request {
    fn default() -> &'a CEcon_GetTradeOfferAccessToken_Request {
        <CEcon_GetTradeOfferAccessToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CEcon_GetTradeOfferAccessToken_Request {
    pub fn new() -> CEcon_GetTradeOfferAccessToken_Request {
        ::std::default::Default::default()
    }

    // optional bool generate_new_token = 1;

    pub fn generate_new_token(&self) -> bool {
        self.generate_new_token.unwrap_or(false)
    }

    pub fn clear_generate_new_token(&mut self) {
        self.generate_new_token = ::std::option::Option::None;
    }

    pub fn has_generate_new_token(&self) -> bool {
        self.generate_new_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_generate_new_token(&mut self, v: bool) {
        self.generate_new_token = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "generate_new_token",
            |m: &CEcon_GetTradeOfferAccessToken_Request| { &m.generate_new_token },
            |m: &mut CEcon_GetTradeOfferAccessToken_Request| { &mut m.generate_new_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CEcon_GetTradeOfferAccessToken_Request>(
            "CEcon_GetTradeOfferAccessToken_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CEcon_GetTradeOfferAccessToken_Request {
    const NAME: &'static str = "CEcon_GetTradeOfferAccessToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.generate_new_token = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.generate_new_token {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.generate_new_token {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEcon_GetTradeOfferAccessToken_Request {
        CEcon_GetTradeOfferAccessToken_Request::new()
    }

    fn clear(&mut self) {
        self.generate_new_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEcon_GetTradeOfferAccessToken_Request {
        static instance: CEcon_GetTradeOfferAccessToken_Request = CEcon_GetTradeOfferAccessToken_Request {
            generate_new_token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CEcon_GetTradeOfferAccessToken_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEcon_GetTradeOfferAccessToken_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEcon_GetTradeOfferAccessToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEcon_GetTradeOfferAccessToken_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CEcon_GetTradeOfferAccessToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEcon_GetTradeOfferAccessToken_Response {
    // message fields
    // @@protoc_insertion_point(field:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
    pub trade_offer_access_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CEcon_GetTradeOfferAccessToken_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEcon_GetTradeOfferAccessToken_Response {
    fn default() -> &'a CEcon_GetTradeOfferAccessToken_Response {
        <CEcon_GetTradeOfferAccessToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CEcon_GetTradeOfferAccessToken_Response {
    pub fn new() -> CEcon_GetTradeOfferAccessToken_Response {
        ::std::default::Default::default()
    }

    // optional string trade_offer_access_token = 1;

    pub fn trade_offer_access_token(&self) -> &str {
        match self.trade_offer_access_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_trade_offer_access_token(&mut self) {
        self.trade_offer_access_token = ::std::option::Option::None;
    }

    pub fn has_trade_offer_access_token(&self) -> bool {
        self.trade_offer_access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trade_offer_access_token(&mut self, v: ::std::string::String) {
        self.trade_offer_access_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trade_offer_access_token(&mut self) -> &mut ::std::string::String {
        if self.trade_offer_access_token.is_none() {
            self.trade_offer_access_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.trade_offer_access_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_trade_offer_access_token(&mut self) -> ::std::string::String {
        self.trade_offer_access_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "trade_offer_access_token",
            |m: &CEcon_GetTradeOfferAccessToken_Response| { &m.trade_offer_access_token },
            |m: &mut CEcon_GetTradeOfferAccessToken_Response| { &mut m.trade_offer_access_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CEcon_GetTradeOfferAccessToken_Response>(
            "CEcon_GetTradeOfferAccessToken_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CEcon_GetTradeOfferAccessToken_Response {
    const NAME: &'static str = "CEcon_GetTradeOfferAccessToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.trade_offer_access_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.trade_offer_access_token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.trade_offer_access_token.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEcon_GetTradeOfferAccessToken_Response {
        CEcon_GetTradeOfferAccessToken_Response::new()
    }

    fn clear(&mut self) {
        self.trade_offer_access_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEcon_GetTradeOfferAccessToken_Response {
        static instance: CEcon_GetTradeOfferAccessToken_Response = CEcon_GetTradeOfferAccessToken_Response {
            trade_offer_access_token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CEcon_GetTradeOfferAccessToken_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEcon_GetTradeOfferAccessToken_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEcon_GetTradeOfferAccessToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEcon_GetTradeOfferAccessToken_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CEcon_ClientGetItemShopOverlayAuthURL_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEcon_ClientGetItemShopOverlayAuthURL_Request {
    // message fields
    // @@protoc_insertion_point(field:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
    pub return_url: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CEcon_ClientGetItemShopOverlayAuthURL_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEcon_ClientGetItemShopOverlayAuthURL_Request {
    fn default() -> &'a CEcon_ClientGetItemShopOverlayAuthURL_Request {
        <CEcon_ClientGetItemShopOverlayAuthURL_Request as ::protobuf::Message>::default_instance()
    }
}

impl CEcon_ClientGetItemShopOverlayAuthURL_Request {
    pub fn new() -> CEcon_ClientGetItemShopOverlayAuthURL_Request {
        ::std::default::Default::default()
    }

    // optional string return_url = 1;

    pub fn return_url(&self) -> &str {
        match self.return_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_return_url(&mut self) {
        self.return_url = ::std::option::Option::None;
    }

    pub fn has_return_url(&self) -> bool {
        self.return_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_return_url(&mut self, v: ::std::string::String) {
        self.return_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_return_url(&mut self) -> &mut ::std::string::String {
        if self.return_url.is_none() {
            self.return_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.return_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_return_url(&mut self) -> ::std::string::String {
        self.return_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "return_url",
            |m: &CEcon_ClientGetItemShopOverlayAuthURL_Request| { &m.return_url },
            |m: &mut CEcon_ClientGetItemShopOverlayAuthURL_Request| { &mut m.return_url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CEcon_ClientGetItemShopOverlayAuthURL_Request>(
            "CEcon_ClientGetItemShopOverlayAuthURL_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CEcon_ClientGetItemShopOverlayAuthURL_Request {
    const NAME: &'static str = "CEcon_ClientGetItemShopOverlayAuthURL_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.return_url = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.return_url.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.return_url.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEcon_ClientGetItemShopOverlayAuthURL_Request {
        CEcon_ClientGetItemShopOverlayAuthURL_Request::new()
    }

    fn clear(&mut self) {
        self.return_url = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEcon_ClientGetItemShopOverlayAuthURL_Request {
        static instance: CEcon_ClientGetItemShopOverlayAuthURL_Request = CEcon_ClientGetItemShopOverlayAuthURL_Request {
            return_url: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CEcon_ClientGetItemShopOverlayAuthURL_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEcon_ClientGetItemShopOverlayAuthURL_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEcon_ClientGetItemShopOverlayAuthURL_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEcon_ClientGetItemShopOverlayAuthURL_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CEcon_ClientGetItemShopOverlayAuthURL_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEcon_ClientGetItemShopOverlayAuthURL_Response {
    // message fields
    // @@protoc_insertion_point(field:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
    pub url: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CEcon_ClientGetItemShopOverlayAuthURL_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEcon_ClientGetItemShopOverlayAuthURL_Response {
    fn default() -> &'a CEcon_ClientGetItemShopOverlayAuthURL_Response {
        <CEcon_ClientGetItemShopOverlayAuthURL_Response as ::protobuf::Message>::default_instance()
    }
}

impl CEcon_ClientGetItemShopOverlayAuthURL_Response {
    pub fn new() -> CEcon_ClientGetItemShopOverlayAuthURL_Response {
        ::std::default::Default::default()
    }

    // optional string url = 1;

    pub fn url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url(&mut self) {
        self.url = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "url",
            |m: &CEcon_ClientGetItemShopOverlayAuthURL_Response| { &m.url },
            |m: &mut CEcon_ClientGetItemShopOverlayAuthURL_Response| { &mut m.url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CEcon_ClientGetItemShopOverlayAuthURL_Response>(
            "CEcon_ClientGetItemShopOverlayAuthURL_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CEcon_ClientGetItemShopOverlayAuthURL_Response {
    const NAME: &'static str = "CEcon_ClientGetItemShopOverlayAuthURL_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.url.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.url.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEcon_ClientGetItemShopOverlayAuthURL_Response {
        CEcon_ClientGetItemShopOverlayAuthURL_Response::new()
    }

    fn clear(&mut self) {
        self.url = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEcon_ClientGetItemShopOverlayAuthURL_Response {
        static instance: CEcon_ClientGetItemShopOverlayAuthURL_Response = CEcon_ClientGetItemShopOverlayAuthURL_Response {
            url: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CEcon_ClientGetItemShopOverlayAuthURL_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEcon_ClientGetItemShopOverlayAuthURL_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEcon_ClientGetItemShopOverlayAuthURL_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEcon_ClientGetItemShopOverlayAuthURL_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CEcon_GetAssetClassInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEcon_GetAssetClassInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CEcon_GetAssetClassInfo_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEcon_GetAssetClassInfo_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CEcon_GetAssetClassInfo_Request.classes)
    pub classes: ::std::vec::Vec<cecon_get_asset_class_info_request::Class>,
    // special fields
    // @@protoc_insertion_point(special_field:CEcon_GetAssetClassInfo_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEcon_GetAssetClassInfo_Request {
    fn default() -> &'a CEcon_GetAssetClassInfo_Request {
        <CEcon_GetAssetClassInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CEcon_GetAssetClassInfo_Request {
    pub fn new() -> CEcon_GetAssetClassInfo_Request {
        ::std::default::Default::default()
    }

    // optional string language = 1;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CEcon_GetAssetClassInfo_Request| { &m.language },
            |m: &mut CEcon_GetAssetClassInfo_Request| { &mut m.language },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CEcon_GetAssetClassInfo_Request| { &m.appid },
            |m: &mut CEcon_GetAssetClassInfo_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "classes",
            |m: &CEcon_GetAssetClassInfo_Request| { &m.classes },
            |m: &mut CEcon_GetAssetClassInfo_Request| { &mut m.classes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CEcon_GetAssetClassInfo_Request>(
            "CEcon_GetAssetClassInfo_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CEcon_GetAssetClassInfo_Request {
    const NAME: &'static str = "CEcon_GetAssetClassInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.classes.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.language.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        for value in &self.classes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.language.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        for v in &self.classes {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEcon_GetAssetClassInfo_Request {
        CEcon_GetAssetClassInfo_Request::new()
    }

    fn clear(&mut self) {
        self.language = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.classes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEcon_GetAssetClassInfo_Request {
        static instance: CEcon_GetAssetClassInfo_Request = CEcon_GetAssetClassInfo_Request {
            language: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            classes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CEcon_GetAssetClassInfo_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEcon_GetAssetClassInfo_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEcon_GetAssetClassInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEcon_GetAssetClassInfo_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CEcon_GetAssetClassInfo_Request`
pub mod cecon_get_asset_class_info_request {
    // @@protoc_insertion_point(message:CEcon_GetAssetClassInfo_Request.Class)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Class {
        // message fields
        // @@protoc_insertion_point(field:CEcon_GetAssetClassInfo_Request.Class.classid)
        pub classid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CEcon_GetAssetClassInfo_Request.Class.instanceid)
        pub instanceid: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CEcon_GetAssetClassInfo_Request.Class.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Class {
        fn default() -> &'a Class {
            <Class as ::protobuf::Message>::default_instance()
        }
    }

    impl Class {
        pub fn new() -> Class {
            ::std::default::Default::default()
        }

        // optional uint64 classid = 1;

        pub fn classid(&self) -> u64 {
            self.classid.unwrap_or(0)
        }

        pub fn clear_classid(&mut self) {
            self.classid = ::std::option::Option::None;
        }

        pub fn has_classid(&self) -> bool {
            self.classid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_classid(&mut self, v: u64) {
            self.classid = ::std::option::Option::Some(v);
        }

        // optional uint64 instanceid = 2;

        pub fn instanceid(&self) -> u64 {
            self.instanceid.unwrap_or(0)
        }

        pub fn clear_instanceid(&mut self) {
            self.instanceid = ::std::option::Option::None;
        }

        pub fn has_instanceid(&self) -> bool {
            self.instanceid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_instanceid(&mut self, v: u64) {
            self.instanceid = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "classid",
                |m: &Class| { &m.classid },
                |m: &mut Class| { &mut m.classid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "instanceid",
                |m: &Class| { &m.instanceid },
                |m: &mut Class| { &mut m.instanceid },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Class>(
                "CEcon_GetAssetClassInfo_Request.Class",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Class {
        const NAME: &'static str = "Class";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.classid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.instanceid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.classid {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.instanceid {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.classid {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.instanceid {
                os.write_uint64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Class {
            Class::new()
        }

        fn clear(&mut self) {
            self.classid = ::std::option::Option::None;
            self.instanceid = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Class {
            static instance: Class = Class {
                classid: ::std::option::Option::None,
                instanceid: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Class {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CEcon_GetAssetClassInfo_Request.Class").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Class {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Class {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CEconItem_DescriptionLine)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEconItem_DescriptionLine {
    // message fields
    // @@protoc_insertion_point(field:CEconItem_DescriptionLine.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_DescriptionLine.value)
    pub value: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_DescriptionLine.color)
    pub color: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_DescriptionLine.label)
    pub label: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CEconItem_DescriptionLine.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEconItem_DescriptionLine {
    fn default() -> &'a CEconItem_DescriptionLine {
        <CEconItem_DescriptionLine as ::protobuf::Message>::default_instance()
    }
}

impl CEconItem_DescriptionLine {
    pub fn new() -> CEconItem_DescriptionLine {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 2;

    pub fn value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::string::String::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string color = 3;

    pub fn color(&self) -> &str {
        match self.color.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_color(&mut self) {
        self.color = ::std::option::Option::None;
    }

    pub fn has_color(&self) -> bool {
        self.color.is_some()
    }

    // Param is passed by value, moved
    pub fn set_color(&mut self, v: ::std::string::String) {
        self.color = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_color(&mut self) -> &mut ::std::string::String {
        if self.color.is_none() {
            self.color = ::std::option::Option::Some(::std::string::String::new());
        }
        self.color.as_mut().unwrap()
    }

    // Take field
    pub fn take_color(&mut self) -> ::std::string::String {
        self.color.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string label = 4;

    pub fn label(&self) -> &str {
        match self.label.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_label(&mut self) {
        self.label = ::std::option::Option::None;
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        if self.label.is_none() {
            self.label = ::std::option::Option::Some(::std::string::String::new());
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        self.label.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CEconItem_DescriptionLine| { &m.type_ },
            |m: &mut CEconItem_DescriptionLine| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &CEconItem_DescriptionLine| { &m.value },
            |m: &mut CEconItem_DescriptionLine| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "color",
            |m: &CEconItem_DescriptionLine| { &m.color },
            |m: &mut CEconItem_DescriptionLine| { &mut m.color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "label",
            |m: &CEconItem_DescriptionLine| { &m.label },
            |m: &mut CEconItem_DescriptionLine| { &mut m.label },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CEconItem_DescriptionLine>(
            "CEconItem_DescriptionLine",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CEconItem_DescriptionLine {
    const NAME: &'static str = "CEconItem_DescriptionLine";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.value = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.color = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.label = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.color.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.label.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.color.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.label.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEconItem_DescriptionLine {
        CEconItem_DescriptionLine::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.color = ::std::option::Option::None;
        self.label = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEconItem_DescriptionLine {
        static instance: CEconItem_DescriptionLine = CEconItem_DescriptionLine {
            type_: ::std::option::Option::None,
            value: ::std::option::Option::None,
            color: ::std::option::Option::None,
            label: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CEconItem_DescriptionLine {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEconItem_DescriptionLine").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEconItem_DescriptionLine {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEconItem_DescriptionLine {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CEconItem_Action)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEconItem_Action {
    // message fields
    // @@protoc_insertion_point(field:CEconItem_Action.link)
    pub link: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Action.name)
    pub name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CEconItem_Action.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEconItem_Action {
    fn default() -> &'a CEconItem_Action {
        <CEconItem_Action as ::protobuf::Message>::default_instance()
    }
}

impl CEconItem_Action {
    pub fn new() -> CEconItem_Action {
        ::std::default::Default::default()
    }

    // optional string link = 1;

    pub fn link(&self) -> &str {
        match self.link.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_link(&mut self) {
        self.link = ::std::option::Option::None;
    }

    pub fn has_link(&self) -> bool {
        self.link.is_some()
    }

    // Param is passed by value, moved
    pub fn set_link(&mut self, v: ::std::string::String) {
        self.link = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_link(&mut self) -> &mut ::std::string::String {
        if self.link.is_none() {
            self.link = ::std::option::Option::Some(::std::string::String::new());
        }
        self.link.as_mut().unwrap()
    }

    // Take field
    pub fn take_link(&mut self) -> ::std::string::String {
        self.link.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "link",
            |m: &CEconItem_Action| { &m.link },
            |m: &mut CEconItem_Action| { &mut m.link },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &CEconItem_Action| { &m.name },
            |m: &mut CEconItem_Action| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CEconItem_Action>(
            "CEconItem_Action",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CEconItem_Action {
    const NAME: &'static str = "CEconItem_Action";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.link = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.link.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.link.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEconItem_Action {
        CEconItem_Action::new()
    }

    fn clear(&mut self) {
        self.link = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEconItem_Action {
        static instance: CEconItem_Action = CEconItem_Action {
            link: ::std::option::Option::None,
            name: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CEconItem_Action {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEconItem_Action").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEconItem_Action {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEconItem_Action {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CEconItem_Description)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEconItem_Description {
    // message fields
    // @@protoc_insertion_point(field:CEconItem_Description.appid)
    pub appid: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CEconItem_Description.classid)
    pub classid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CEconItem_Description.instanceid)
    pub instanceid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CEconItem_Description.currency)
    pub currency: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CEconItem_Description.background_color)
    pub background_color: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Description.icon_url)
    pub icon_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Description.icon_url_large)
    pub icon_url_large: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Description.descriptions)
    pub descriptions: ::std::vec::Vec<CEconItem_DescriptionLine>,
    // @@protoc_insertion_point(field:CEconItem_Description.tradable)
    pub tradable: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CEconItem_Description.actions)
    pub actions: ::std::vec::Vec<CEconItem_Action>,
    // @@protoc_insertion_point(field:CEconItem_Description.owner_descriptions)
    pub owner_descriptions: ::std::vec::Vec<CEconItem_DescriptionLine>,
    // @@protoc_insertion_point(field:CEconItem_Description.owner_actions)
    pub owner_actions: ::std::vec::Vec<CEconItem_Action>,
    // @@protoc_insertion_point(field:CEconItem_Description.fraudwarnings)
    pub fraudwarnings: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Description.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Description.name_color)
    pub name_color: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Description.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Description.market_name)
    pub market_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Description.market_hash_name)
    pub market_hash_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Description.market_fee)
    pub market_fee: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Description.market_fee_app)
    pub market_fee_app: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CEconItem_Description.contained_item)
    pub contained_item: ::protobuf::MessageField<CEconItem_Description>,
    // @@protoc_insertion_point(field:CEconItem_Description.market_actions)
    pub market_actions: ::std::vec::Vec<CEconItem_Action>,
    // @@protoc_insertion_point(field:CEconItem_Description.commodity)
    pub commodity: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CEconItem_Description.market_tradable_restriction)
    pub market_tradable_restriction: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CEconItem_Description.market_marketable_restriction)
    pub market_marketable_restriction: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CEconItem_Description.marketable)
    pub marketable: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CEconItem_Description.tags)
    pub tags: ::std::vec::Vec<CEconItem_Tag>,
    // @@protoc_insertion_point(field:CEconItem_Description.item_expiration)
    pub item_expiration: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Description.market_buy_country_restriction)
    pub market_buy_country_restriction: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Description.market_sell_country_restriction)
    pub market_sell_country_restriction: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CEconItem_Description.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEconItem_Description {
    fn default() -> &'a CEconItem_Description {
        <CEconItem_Description as ::protobuf::Message>::default_instance()
    }
}

impl CEconItem_Description {
    pub fn new() -> CEconItem_Description {
        ::std::default::Default::default()
    }

    // optional int32 appid = 1;

    pub fn appid(&self) -> i32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: i32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 classid = 2;

    pub fn classid(&self) -> u64 {
        self.classid.unwrap_or(0)
    }

    pub fn clear_classid(&mut self) {
        self.classid = ::std::option::Option::None;
    }

    pub fn has_classid(&self) -> bool {
        self.classid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_classid(&mut self, v: u64) {
        self.classid = ::std::option::Option::Some(v);
    }

    // optional uint64 instanceid = 3;

    pub fn instanceid(&self) -> u64 {
        self.instanceid.unwrap_or(0)
    }

    pub fn clear_instanceid(&mut self) {
        self.instanceid = ::std::option::Option::None;
    }

    pub fn has_instanceid(&self) -> bool {
        self.instanceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instanceid(&mut self, v: u64) {
        self.instanceid = ::std::option::Option::Some(v);
    }

    // optional bool currency = 4;

    pub fn currency(&self) -> bool {
        self.currency.unwrap_or(false)
    }

    pub fn clear_currency(&mut self) {
        self.currency = ::std::option::Option::None;
    }

    pub fn has_currency(&self) -> bool {
        self.currency.is_some()
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: bool) {
        self.currency = ::std::option::Option::Some(v);
    }

    // optional string background_color = 5;

    pub fn background_color(&self) -> &str {
        match self.background_color.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_background_color(&mut self) {
        self.background_color = ::std::option::Option::None;
    }

    pub fn has_background_color(&self) -> bool {
        self.background_color.is_some()
    }

    // Param is passed by value, moved
    pub fn set_background_color(&mut self, v: ::std::string::String) {
        self.background_color = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_background_color(&mut self) -> &mut ::std::string::String {
        if self.background_color.is_none() {
            self.background_color = ::std::option::Option::Some(::std::string::String::new());
        }
        self.background_color.as_mut().unwrap()
    }

    // Take field
    pub fn take_background_color(&mut self) -> ::std::string::String {
        self.background_color.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string icon_url = 6;

    pub fn icon_url(&self) -> &str {
        match self.icon_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_icon_url(&mut self) {
        self.icon_url = ::std::option::Option::None;
    }

    pub fn has_icon_url(&self) -> bool {
        self.icon_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_icon_url(&mut self, v: ::std::string::String) {
        self.icon_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_icon_url(&mut self) -> &mut ::std::string::String {
        if self.icon_url.is_none() {
            self.icon_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.icon_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_icon_url(&mut self) -> ::std::string::String {
        self.icon_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string icon_url_large = 7;

    pub fn icon_url_large(&self) -> &str {
        match self.icon_url_large.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_icon_url_large(&mut self) {
        self.icon_url_large = ::std::option::Option::None;
    }

    pub fn has_icon_url_large(&self) -> bool {
        self.icon_url_large.is_some()
    }

    // Param is passed by value, moved
    pub fn set_icon_url_large(&mut self, v: ::std::string::String) {
        self.icon_url_large = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_icon_url_large(&mut self) -> &mut ::std::string::String {
        if self.icon_url_large.is_none() {
            self.icon_url_large = ::std::option::Option::Some(::std::string::String::new());
        }
        self.icon_url_large.as_mut().unwrap()
    }

    // Take field
    pub fn take_icon_url_large(&mut self) -> ::std::string::String {
        self.icon_url_large.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool tradable = 9;

    pub fn tradable(&self) -> bool {
        self.tradable.unwrap_or(false)
    }

    pub fn clear_tradable(&mut self) {
        self.tradable = ::std::option::Option::None;
    }

    pub fn has_tradable(&self) -> bool {
        self.tradable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tradable(&mut self, v: bool) {
        self.tradable = ::std::option::Option::Some(v);
    }

    // optional string name = 14;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string name_color = 15;

    pub fn name_color(&self) -> &str {
        match self.name_color.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name_color(&mut self) {
        self.name_color = ::std::option::Option::None;
    }

    pub fn has_name_color(&self) -> bool {
        self.name_color.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name_color(&mut self, v: ::std::string::String) {
        self.name_color = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name_color(&mut self) -> &mut ::std::string::String {
        if self.name_color.is_none() {
            self.name_color = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name_color.as_mut().unwrap()
    }

    // Take field
    pub fn take_name_color(&mut self) -> ::std::string::String {
        self.name_color.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string type = 16;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string market_name = 17;

    pub fn market_name(&self) -> &str {
        match self.market_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_market_name(&mut self) {
        self.market_name = ::std::option::Option::None;
    }

    pub fn has_market_name(&self) -> bool {
        self.market_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_market_name(&mut self, v: ::std::string::String) {
        self.market_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market_name(&mut self) -> &mut ::std::string::String {
        if self.market_name.is_none() {
            self.market_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.market_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_market_name(&mut self) -> ::std::string::String {
        self.market_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string market_hash_name = 18;

    pub fn market_hash_name(&self) -> &str {
        match self.market_hash_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_market_hash_name(&mut self) {
        self.market_hash_name = ::std::option::Option::None;
    }

    pub fn has_market_hash_name(&self) -> bool {
        self.market_hash_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_market_hash_name(&mut self, v: ::std::string::String) {
        self.market_hash_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market_hash_name(&mut self) -> &mut ::std::string::String {
        if self.market_hash_name.is_none() {
            self.market_hash_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.market_hash_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_market_hash_name(&mut self) -> ::std::string::String {
        self.market_hash_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string market_fee = 19;

    pub fn market_fee(&self) -> &str {
        match self.market_fee.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_market_fee(&mut self) {
        self.market_fee = ::std::option::Option::None;
    }

    pub fn has_market_fee(&self) -> bool {
        self.market_fee.is_some()
    }

    // Param is passed by value, moved
    pub fn set_market_fee(&mut self, v: ::std::string::String) {
        self.market_fee = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market_fee(&mut self) -> &mut ::std::string::String {
        if self.market_fee.is_none() {
            self.market_fee = ::std::option::Option::Some(::std::string::String::new());
        }
        self.market_fee.as_mut().unwrap()
    }

    // Take field
    pub fn take_market_fee(&mut self) -> ::std::string::String {
        self.market_fee.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 market_fee_app = 28;

    pub fn market_fee_app(&self) -> i32 {
        self.market_fee_app.unwrap_or(0)
    }

    pub fn clear_market_fee_app(&mut self) {
        self.market_fee_app = ::std::option::Option::None;
    }

    pub fn has_market_fee_app(&self) -> bool {
        self.market_fee_app.is_some()
    }

    // Param is passed by value, moved
    pub fn set_market_fee_app(&mut self, v: i32) {
        self.market_fee_app = ::std::option::Option::Some(v);
    }

    // optional bool commodity = 22;

    pub fn commodity(&self) -> bool {
        self.commodity.unwrap_or(false)
    }

    pub fn clear_commodity(&mut self) {
        self.commodity = ::std::option::Option::None;
    }

    pub fn has_commodity(&self) -> bool {
        self.commodity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commodity(&mut self, v: bool) {
        self.commodity = ::std::option::Option::Some(v);
    }

    // optional int32 market_tradable_restriction = 23;

    pub fn market_tradable_restriction(&self) -> i32 {
        self.market_tradable_restriction.unwrap_or(0)
    }

    pub fn clear_market_tradable_restriction(&mut self) {
        self.market_tradable_restriction = ::std::option::Option::None;
    }

    pub fn has_market_tradable_restriction(&self) -> bool {
        self.market_tradable_restriction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_market_tradable_restriction(&mut self, v: i32) {
        self.market_tradable_restriction = ::std::option::Option::Some(v);
    }

    // optional int32 market_marketable_restriction = 24;

    pub fn market_marketable_restriction(&self) -> i32 {
        self.market_marketable_restriction.unwrap_or(0)
    }

    pub fn clear_market_marketable_restriction(&mut self) {
        self.market_marketable_restriction = ::std::option::Option::None;
    }

    pub fn has_market_marketable_restriction(&self) -> bool {
        self.market_marketable_restriction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_market_marketable_restriction(&mut self, v: i32) {
        self.market_marketable_restriction = ::std::option::Option::Some(v);
    }

    // optional bool marketable = 25;

    pub fn marketable(&self) -> bool {
        self.marketable.unwrap_or(false)
    }

    pub fn clear_marketable(&mut self) {
        self.marketable = ::std::option::Option::None;
    }

    pub fn has_marketable(&self) -> bool {
        self.marketable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_marketable(&mut self, v: bool) {
        self.marketable = ::std::option::Option::Some(v);
    }

    // optional string item_expiration = 27;

    pub fn item_expiration(&self) -> &str {
        match self.item_expiration.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_item_expiration(&mut self) {
        self.item_expiration = ::std::option::Option::None;
    }

    pub fn has_item_expiration(&self) -> bool {
        self.item_expiration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_expiration(&mut self, v: ::std::string::String) {
        self.item_expiration = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_item_expiration(&mut self) -> &mut ::std::string::String {
        if self.item_expiration.is_none() {
            self.item_expiration = ::std::option::Option::Some(::std::string::String::new());
        }
        self.item_expiration.as_mut().unwrap()
    }

    // Take field
    pub fn take_item_expiration(&mut self) -> ::std::string::String {
        self.item_expiration.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string market_buy_country_restriction = 30;

    pub fn market_buy_country_restriction(&self) -> &str {
        match self.market_buy_country_restriction.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_market_buy_country_restriction(&mut self) {
        self.market_buy_country_restriction = ::std::option::Option::None;
    }

    pub fn has_market_buy_country_restriction(&self) -> bool {
        self.market_buy_country_restriction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_market_buy_country_restriction(&mut self, v: ::std::string::String) {
        self.market_buy_country_restriction = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market_buy_country_restriction(&mut self) -> &mut ::std::string::String {
        if self.market_buy_country_restriction.is_none() {
            self.market_buy_country_restriction = ::std::option::Option::Some(::std::string::String::new());
        }
        self.market_buy_country_restriction.as_mut().unwrap()
    }

    // Take field
    pub fn take_market_buy_country_restriction(&mut self) -> ::std::string::String {
        self.market_buy_country_restriction.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string market_sell_country_restriction = 31;

    pub fn market_sell_country_restriction(&self) -> &str {
        match self.market_sell_country_restriction.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_market_sell_country_restriction(&mut self) {
        self.market_sell_country_restriction = ::std::option::Option::None;
    }

    pub fn has_market_sell_country_restriction(&self) -> bool {
        self.market_sell_country_restriction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_market_sell_country_restriction(&mut self, v: ::std::string::String) {
        self.market_sell_country_restriction = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market_sell_country_restriction(&mut self) -> &mut ::std::string::String {
        if self.market_sell_country_restriction.is_none() {
            self.market_sell_country_restriction = ::std::option::Option::Some(::std::string::String::new());
        }
        self.market_sell_country_restriction.as_mut().unwrap()
    }

    // Take field
    pub fn take_market_sell_country_restriction(&mut self) -> ::std::string::String {
        self.market_sell_country_restriction.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(30);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CEconItem_Description| { &m.appid },
            |m: &mut CEconItem_Description| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "classid",
            |m: &CEconItem_Description| { &m.classid },
            |m: &mut CEconItem_Description| { &mut m.classid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "instanceid",
            |m: &CEconItem_Description| { &m.instanceid },
            |m: &mut CEconItem_Description| { &mut m.instanceid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "currency",
            |m: &CEconItem_Description| { &m.currency },
            |m: &mut CEconItem_Description| { &mut m.currency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "background_color",
            |m: &CEconItem_Description| { &m.background_color },
            |m: &mut CEconItem_Description| { &mut m.background_color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "icon_url",
            |m: &CEconItem_Description| { &m.icon_url },
            |m: &mut CEconItem_Description| { &mut m.icon_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "icon_url_large",
            |m: &CEconItem_Description| { &m.icon_url_large },
            |m: &mut CEconItem_Description| { &mut m.icon_url_large },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "descriptions",
            |m: &CEconItem_Description| { &m.descriptions },
            |m: &mut CEconItem_Description| { &mut m.descriptions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tradable",
            |m: &CEconItem_Description| { &m.tradable },
            |m: &mut CEconItem_Description| { &mut m.tradable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "actions",
            |m: &CEconItem_Description| { &m.actions },
            |m: &mut CEconItem_Description| { &mut m.actions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "owner_descriptions",
            |m: &CEconItem_Description| { &m.owner_descriptions },
            |m: &mut CEconItem_Description| { &mut m.owner_descriptions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "owner_actions",
            |m: &CEconItem_Description| { &m.owner_actions },
            |m: &mut CEconItem_Description| { &mut m.owner_actions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fraudwarnings",
            |m: &CEconItem_Description| { &m.fraudwarnings },
            |m: &mut CEconItem_Description| { &mut m.fraudwarnings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &CEconItem_Description| { &m.name },
            |m: &mut CEconItem_Description| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name_color",
            |m: &CEconItem_Description| { &m.name_color },
            |m: &mut CEconItem_Description| { &mut m.name_color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CEconItem_Description| { &m.type_ },
            |m: &mut CEconItem_Description| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "market_name",
            |m: &CEconItem_Description| { &m.market_name },
            |m: &mut CEconItem_Description| { &mut m.market_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "market_hash_name",
            |m: &CEconItem_Description| { &m.market_hash_name },
            |m: &mut CEconItem_Description| { &mut m.market_hash_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "market_fee",
            |m: &CEconItem_Description| { &m.market_fee },
            |m: &mut CEconItem_Description| { &mut m.market_fee },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "market_fee_app",
            |m: &CEconItem_Description| { &m.market_fee_app },
            |m: &mut CEconItem_Description| { &mut m.market_fee_app },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CEconItem_Description>(
            "contained_item",
            |m: &CEconItem_Description| { &m.contained_item },
            |m: &mut CEconItem_Description| { &mut m.contained_item },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "market_actions",
            |m: &CEconItem_Description| { &m.market_actions },
            |m: &mut CEconItem_Description| { &mut m.market_actions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "commodity",
            |m: &CEconItem_Description| { &m.commodity },
            |m: &mut CEconItem_Description| { &mut m.commodity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "market_tradable_restriction",
            |m: &CEconItem_Description| { &m.market_tradable_restriction },
            |m: &mut CEconItem_Description| { &mut m.market_tradable_restriction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "market_marketable_restriction",
            |m: &CEconItem_Description| { &m.market_marketable_restriction },
            |m: &mut CEconItem_Description| { &mut m.market_marketable_restriction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "marketable",
            |m: &CEconItem_Description| { &m.marketable },
            |m: &mut CEconItem_Description| { &mut m.marketable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tags",
            |m: &CEconItem_Description| { &m.tags },
            |m: &mut CEconItem_Description| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_expiration",
            |m: &CEconItem_Description| { &m.item_expiration },
            |m: &mut CEconItem_Description| { &mut m.item_expiration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "market_buy_country_restriction",
            |m: &CEconItem_Description| { &m.market_buy_country_restriction },
            |m: &mut CEconItem_Description| { &mut m.market_buy_country_restriction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "market_sell_country_restriction",
            |m: &CEconItem_Description| { &m.market_sell_country_restriction },
            |m: &mut CEconItem_Description| { &mut m.market_sell_country_restriction },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CEconItem_Description>(
            "CEconItem_Description",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CEconItem_Description {
    const NAME: &'static str = "CEconItem_Description";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.classid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.instanceid = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.currency = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    self.background_color = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.icon_url = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.icon_url_large = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.descriptions.push(is.read_message()?);
                },
                72 => {
                    self.tradable = ::std::option::Option::Some(is.read_bool()?);
                },
                82 => {
                    self.actions.push(is.read_message()?);
                },
                90 => {
                    self.owner_descriptions.push(is.read_message()?);
                },
                98 => {
                    self.owner_actions.push(is.read_message()?);
                },
                106 => {
                    self.fraudwarnings.push(is.read_string()?);
                },
                114 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                122 => {
                    self.name_color = ::std::option::Option::Some(is.read_string()?);
                },
                130 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                138 => {
                    self.market_name = ::std::option::Option::Some(is.read_string()?);
                },
                146 => {
                    self.market_hash_name = ::std::option::Option::Some(is.read_string()?);
                },
                154 => {
                    self.market_fee = ::std::option::Option::Some(is.read_string()?);
                },
                224 => {
                    self.market_fee_app = ::std::option::Option::Some(is.read_int32()?);
                },
                162 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.contained_item)?;
                },
                170 => {
                    self.market_actions.push(is.read_message()?);
                },
                176 => {
                    self.commodity = ::std::option::Option::Some(is.read_bool()?);
                },
                184 => {
                    self.market_tradable_restriction = ::std::option::Option::Some(is.read_int32()?);
                },
                192 => {
                    self.market_marketable_restriction = ::std::option::Option::Some(is.read_int32()?);
                },
                200 => {
                    self.marketable = ::std::option::Option::Some(is.read_bool()?);
                },
                210 => {
                    self.tags.push(is.read_message()?);
                },
                218 => {
                    self.item_expiration = ::std::option::Option::Some(is.read_string()?);
                },
                242 => {
                    self.market_buy_country_restriction = ::std::option::Option::Some(is.read_string()?);
                },
                250 => {
                    self.market_sell_country_restriction = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.classid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.instanceid {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.currency {
            my_size += 1 + 1;
        }
        if let Some(v) = self.background_color.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.icon_url.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.icon_url_large.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        for value in &self.descriptions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.tradable {
            my_size += 1 + 1;
        }
        for value in &self.actions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.owner_descriptions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.owner_actions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.fraudwarnings {
            my_size += ::protobuf::rt::string_size(13, &value);
        };
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(14, &v);
        }
        if let Some(v) = self.name_color.as_ref() {
            my_size += ::protobuf::rt::string_size(15, &v);
        }
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(16, &v);
        }
        if let Some(v) = self.market_name.as_ref() {
            my_size += ::protobuf::rt::string_size(17, &v);
        }
        if let Some(v) = self.market_hash_name.as_ref() {
            my_size += ::protobuf::rt::string_size(18, &v);
        }
        if let Some(v) = self.market_fee.as_ref() {
            my_size += ::protobuf::rt::string_size(19, &v);
        }
        if let Some(v) = self.market_fee_app {
            my_size += ::protobuf::rt::int32_size(28, v);
        }
        if let Some(v) = self.contained_item.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.market_actions {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.commodity {
            my_size += 2 + 1;
        }
        if let Some(v) = self.market_tradable_restriction {
            my_size += ::protobuf::rt::int32_size(23, v);
        }
        if let Some(v) = self.market_marketable_restriction {
            my_size += ::protobuf::rt::int32_size(24, v);
        }
        if let Some(v) = self.marketable {
            my_size += 2 + 1;
        }
        for value in &self.tags {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.item_expiration.as_ref() {
            my_size += ::protobuf::rt::string_size(27, &v);
        }
        if let Some(v) = self.market_buy_country_restriction.as_ref() {
            my_size += ::protobuf::rt::string_size(30, &v);
        }
        if let Some(v) = self.market_sell_country_restriction.as_ref() {
            my_size += ::protobuf::rt::string_size(31, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.classid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.instanceid {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.currency {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.background_color.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.icon_url.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.icon_url_large.as_ref() {
            os.write_string(7, v)?;
        }
        for v in &self.descriptions {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if let Some(v) = self.tradable {
            os.write_bool(9, v)?;
        }
        for v in &self.actions {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        for v in &self.owner_descriptions {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        for v in &self.owner_actions {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        for v in &self.fraudwarnings {
            os.write_string(13, &v)?;
        };
        if let Some(v) = self.name.as_ref() {
            os.write_string(14, v)?;
        }
        if let Some(v) = self.name_color.as_ref() {
            os.write_string(15, v)?;
        }
        if let Some(v) = self.type_.as_ref() {
            os.write_string(16, v)?;
        }
        if let Some(v) = self.market_name.as_ref() {
            os.write_string(17, v)?;
        }
        if let Some(v) = self.market_hash_name.as_ref() {
            os.write_string(18, v)?;
        }
        if let Some(v) = self.market_fee.as_ref() {
            os.write_string(19, v)?;
        }
        if let Some(v) = self.market_fee_app {
            os.write_int32(28, v)?;
        }
        if let Some(v) = self.contained_item.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
        }
        for v in &self.market_actions {
            ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        };
        if let Some(v) = self.commodity {
            os.write_bool(22, v)?;
        }
        if let Some(v) = self.market_tradable_restriction {
            os.write_int32(23, v)?;
        }
        if let Some(v) = self.market_marketable_restriction {
            os.write_int32(24, v)?;
        }
        if let Some(v) = self.marketable {
            os.write_bool(25, v)?;
        }
        for v in &self.tags {
            ::protobuf::rt::write_message_field_with_cached_size(26, v, os)?;
        };
        if let Some(v) = self.item_expiration.as_ref() {
            os.write_string(27, v)?;
        }
        if let Some(v) = self.market_buy_country_restriction.as_ref() {
            os.write_string(30, v)?;
        }
        if let Some(v) = self.market_sell_country_restriction.as_ref() {
            os.write_string(31, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEconItem_Description {
        CEconItem_Description::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.classid = ::std::option::Option::None;
        self.instanceid = ::std::option::Option::None;
        self.currency = ::std::option::Option::None;
        self.background_color = ::std::option::Option::None;
        self.icon_url = ::std::option::Option::None;
        self.icon_url_large = ::std::option::Option::None;
        self.descriptions.clear();
        self.tradable = ::std::option::Option::None;
        self.actions.clear();
        self.owner_descriptions.clear();
        self.owner_actions.clear();
        self.fraudwarnings.clear();
        self.name = ::std::option::Option::None;
        self.name_color = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.market_name = ::std::option::Option::None;
        self.market_hash_name = ::std::option::Option::None;
        self.market_fee = ::std::option::Option::None;
        self.market_fee_app = ::std::option::Option::None;
        self.contained_item.clear();
        self.market_actions.clear();
        self.commodity = ::std::option::Option::None;
        self.market_tradable_restriction = ::std::option::Option::None;
        self.market_marketable_restriction = ::std::option::Option::None;
        self.marketable = ::std::option::Option::None;
        self.tags.clear();
        self.item_expiration = ::std::option::Option::None;
        self.market_buy_country_restriction = ::std::option::Option::None;
        self.market_sell_country_restriction = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEconItem_Description {
        static instance: CEconItem_Description = CEconItem_Description {
            appid: ::std::option::Option::None,
            classid: ::std::option::Option::None,
            instanceid: ::std::option::Option::None,
            currency: ::std::option::Option::None,
            background_color: ::std::option::Option::None,
            icon_url: ::std::option::Option::None,
            icon_url_large: ::std::option::Option::None,
            descriptions: ::std::vec::Vec::new(),
            tradable: ::std::option::Option::None,
            actions: ::std::vec::Vec::new(),
            owner_descriptions: ::std::vec::Vec::new(),
            owner_actions: ::std::vec::Vec::new(),
            fraudwarnings: ::std::vec::Vec::new(),
            name: ::std::option::Option::None,
            name_color: ::std::option::Option::None,
            type_: ::std::option::Option::None,
            market_name: ::std::option::Option::None,
            market_hash_name: ::std::option::Option::None,
            market_fee: ::std::option::Option::None,
            market_fee_app: ::std::option::Option::None,
            contained_item: ::protobuf::MessageField::none(),
            market_actions: ::std::vec::Vec::new(),
            commodity: ::std::option::Option::None,
            market_tradable_restriction: ::std::option::Option::None,
            market_marketable_restriction: ::std::option::Option::None,
            marketable: ::std::option::Option::None,
            tags: ::std::vec::Vec::new(),
            item_expiration: ::std::option::Option::None,
            market_buy_country_restriction: ::std::option::Option::None,
            market_sell_country_restriction: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CEconItem_Description {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEconItem_Description").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEconItem_Description {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEconItem_Description {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CEconItem_Tag)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEconItem_Tag {
    // message fields
    // @@protoc_insertion_point(field:CEconItem_Tag.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CEconItem_Tag.category)
    pub category: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Tag.internal_name)
    pub internal_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Tag.localized_category_name)
    pub localized_category_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Tag.localized_tag_name)
    pub localized_tag_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEconItem_Tag.color)
    pub color: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CEconItem_Tag.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEconItem_Tag {
    fn default() -> &'a CEconItem_Tag {
        <CEconItem_Tag as ::protobuf::Message>::default_instance()
    }
}

impl CEconItem_Tag {
    pub fn new() -> CEconItem_Tag {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string category = 2;

    pub fn category(&self) -> &str {
        match self.category.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_category(&mut self) {
        self.category = ::std::option::Option::None;
    }

    pub fn has_category(&self) -> bool {
        self.category.is_some()
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        if self.category.is_none() {
            self.category = ::std::option::Option::Some(::std::string::String::new());
        }
        self.category.as_mut().unwrap()
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        self.category.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string internal_name = 3;

    pub fn internal_name(&self) -> &str {
        match self.internal_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_internal_name(&mut self) {
        self.internal_name = ::std::option::Option::None;
    }

    pub fn has_internal_name(&self) -> bool {
        self.internal_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_internal_name(&mut self, v: ::std::string::String) {
        self.internal_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_internal_name(&mut self) -> &mut ::std::string::String {
        if self.internal_name.is_none() {
            self.internal_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.internal_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_internal_name(&mut self) -> ::std::string::String {
        self.internal_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string localized_category_name = 4;

    pub fn localized_category_name(&self) -> &str {
        match self.localized_category_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_localized_category_name(&mut self) {
        self.localized_category_name = ::std::option::Option::None;
    }

    pub fn has_localized_category_name(&self) -> bool {
        self.localized_category_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_localized_category_name(&mut self, v: ::std::string::String) {
        self.localized_category_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localized_category_name(&mut self) -> &mut ::std::string::String {
        if self.localized_category_name.is_none() {
            self.localized_category_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.localized_category_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_localized_category_name(&mut self) -> ::std::string::String {
        self.localized_category_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string localized_tag_name = 5;

    pub fn localized_tag_name(&self) -> &str {
        match self.localized_tag_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_localized_tag_name(&mut self) {
        self.localized_tag_name = ::std::option::Option::None;
    }

    pub fn has_localized_tag_name(&self) -> bool {
        self.localized_tag_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_localized_tag_name(&mut self, v: ::std::string::String) {
        self.localized_tag_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localized_tag_name(&mut self) -> &mut ::std::string::String {
        if self.localized_tag_name.is_none() {
            self.localized_tag_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.localized_tag_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_localized_tag_name(&mut self) -> ::std::string::String {
        self.localized_tag_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string color = 6;

    pub fn color(&self) -> &str {
        match self.color.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_color(&mut self) {
        self.color = ::std::option::Option::None;
    }

    pub fn has_color(&self) -> bool {
        self.color.is_some()
    }

    // Param is passed by value, moved
    pub fn set_color(&mut self, v: ::std::string::String) {
        self.color = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_color(&mut self) -> &mut ::std::string::String {
        if self.color.is_none() {
            self.color = ::std::option::Option::Some(::std::string::String::new());
        }
        self.color.as_mut().unwrap()
    }

    // Take field
    pub fn take_color(&mut self) -> ::std::string::String {
        self.color.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CEconItem_Tag| { &m.appid },
            |m: &mut CEconItem_Tag| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "category",
            |m: &CEconItem_Tag| { &m.category },
            |m: &mut CEconItem_Tag| { &mut m.category },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "internal_name",
            |m: &CEconItem_Tag| { &m.internal_name },
            |m: &mut CEconItem_Tag| { &mut m.internal_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "localized_category_name",
            |m: &CEconItem_Tag| { &m.localized_category_name },
            |m: &mut CEconItem_Tag| { &mut m.localized_category_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "localized_tag_name",
            |m: &CEconItem_Tag| { &m.localized_tag_name },
            |m: &mut CEconItem_Tag| { &mut m.localized_tag_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "color",
            |m: &CEconItem_Tag| { &m.color },
            |m: &mut CEconItem_Tag| { &mut m.color },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CEconItem_Tag>(
            "CEconItem_Tag",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CEconItem_Tag {
    const NAME: &'static str = "CEconItem_Tag";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.category = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.internal_name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.localized_category_name = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.localized_tag_name = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.color = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.category.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.internal_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.localized_category_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.localized_tag_name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.color.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.category.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.internal_name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.localized_category_name.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.localized_tag_name.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.color.as_ref() {
            os.write_string(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEconItem_Tag {
        CEconItem_Tag::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.category = ::std::option::Option::None;
        self.internal_name = ::std::option::Option::None;
        self.localized_category_name = ::std::option::Option::None;
        self.localized_tag_name = ::std::option::Option::None;
        self.color = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEconItem_Tag {
        static instance: CEconItem_Tag = CEconItem_Tag {
            appid: ::std::option::Option::None,
            category: ::std::option::Option::None,
            internal_name: ::std::option::Option::None,
            localized_category_name: ::std::option::Option::None,
            localized_tag_name: ::std::option::Option::None,
            color: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CEconItem_Tag {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEconItem_Tag").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEconItem_Tag {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEconItem_Tag {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CEcon_GetAssetClassInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEcon_GetAssetClassInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CEcon_GetAssetClassInfo_Response.descriptions)
    pub descriptions: ::std::vec::Vec<CEconItem_Description>,
    // special fields
    // @@protoc_insertion_point(special_field:CEcon_GetAssetClassInfo_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEcon_GetAssetClassInfo_Response {
    fn default() -> &'a CEcon_GetAssetClassInfo_Response {
        <CEcon_GetAssetClassInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CEcon_GetAssetClassInfo_Response {
    pub fn new() -> CEcon_GetAssetClassInfo_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "descriptions",
            |m: &CEcon_GetAssetClassInfo_Response| { &m.descriptions },
            |m: &mut CEcon_GetAssetClassInfo_Response| { &mut m.descriptions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CEcon_GetAssetClassInfo_Response>(
            "CEcon_GetAssetClassInfo_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CEcon_GetAssetClassInfo_Response {
    const NAME: &'static str = "CEcon_GetAssetClassInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.descriptions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.descriptions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.descriptions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEcon_GetAssetClassInfo_Response {
        CEcon_GetAssetClassInfo_Response::new()
    }

    fn clear(&mut self) {
        self.descriptions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEcon_GetAssetClassInfo_Response {
        static instance: CEcon_GetAssetClassInfo_Response = CEcon_GetAssetClassInfo_Response {
            descriptions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CEcon_GetAssetClassInfo_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEcon_GetAssetClassInfo_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEcon_GetAssetClassInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEcon_GetAssetClassInfo_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$steammessages_econ.steamclient.proto\x1a,steammessages_unified_base.s\
    teamclient.proto\"V\n&CEcon_GetTradeOfferAccessToken_Request\x12,\n\x12g\
    enerate_new_token\x18\x01\x20\x01(\x08R\x10generateNewToken\"b\n'CEcon_G\
    etTradeOfferAccessToken_Response\x127\n\x18trade_offer_access_token\x18\
    \x01\x20\x01(\tR\x15tradeOfferAccessToken\"N\n-CEcon_ClientGetItemShopOv\
    erlayAuthURL_Request\x12\x1d\n\nreturn_url\x18\x01\x20\x01(\tR\treturnUr\
    l\"B\n.CEcon_ClientGetItemShopOverlayAuthURL_Response\x12\x10\n\x03url\
    \x18\x01\x20\x01(\tR\x03url\"\xd8\x01\n\x1fCEcon_GetAssetClassInfo_Reque\
    st\x12\x1a\n\x08language\x18\x01\x20\x01(\tR\x08language\x12\x14\n\x05ap\
    pid\x18\x02\x20\x01(\rR\x05appid\x12@\n\x07classes\x18\x03\x20\x03(\x0b2\
    &.CEcon_GetAssetClassInfo_Request.ClassR\x07classes\x1aA\n\x05Class\x12\
    \x18\n\x07classid\x18\x01\x20\x01(\x04R\x07classid\x12\x1e\n\ninstanceid\
    \x18\x02\x20\x01(\x04R\ninstanceid\"q\n\x19CEconItem_DescriptionLine\x12\
    \x12\n\x04type\x18\x01\x20\x01(\tR\x04type\x12\x14\n\x05value\x18\x02\
    \x20\x01(\tR\x05value\x12\x14\n\x05color\x18\x03\x20\x01(\tR\x05color\
    \x12\x14\n\x05label\x18\x04\x20\x01(\tR\x05label\":\n\x10CEconItem_Actio\
    n\x12\x12\n\x04link\x18\x01\x20\x01(\tR\x04link\x12\x12\n\x04name\x18\
    \x02\x20\x01(\tR\x04name\"\x8c\n\n\x15CEconItem_Description\x12\x14\n\
    \x05appid\x18\x01\x20\x01(\x05R\x05appid\x12\x18\n\x07classid\x18\x02\
    \x20\x01(\x04R\x07classid\x12\x1e\n\ninstanceid\x18\x03\x20\x01(\x04R\ni\
    nstanceid\x12\x1a\n\x08currency\x18\x04\x20\x01(\x08R\x08currency\x12)\n\
    \x10background_color\x18\x05\x20\x01(\tR\x0fbackgroundColor\x12\x19\n\
    \x08icon_url\x18\x06\x20\x01(\tR\x07iconUrl\x12$\n\x0eicon_url_large\x18\
    \x07\x20\x01(\tR\x0ciconUrlLarge\x12>\n\x0cdescriptions\x18\x08\x20\x03(\
    \x0b2\x1a.CEconItem_DescriptionLineR\x0cdescriptions\x12\x1a\n\x08tradab\
    le\x18\t\x20\x01(\x08R\x08tradable\x12+\n\x07actions\x18\n\x20\x03(\x0b2\
    \x11.CEconItem_ActionR\x07actions\x12I\n\x12owner_descriptions\x18\x0b\
    \x20\x03(\x0b2\x1a.CEconItem_DescriptionLineR\x11ownerDescriptions\x126\
    \n\rowner_actions\x18\x0c\x20\x03(\x0b2\x11.CEconItem_ActionR\x0cownerAc\
    tions\x12$\n\rfraudwarnings\x18\r\x20\x03(\tR\rfraudwarnings\x12\x12\n\
    \x04name\x18\x0e\x20\x01(\tR\x04name\x12\x1d\n\nname_color\x18\x0f\x20\
    \x01(\tR\tnameColor\x12\x12\n\x04type\x18\x10\x20\x01(\tR\x04type\x12\
    \x1f\n\x0bmarket_name\x18\x11\x20\x01(\tR\nmarketName\x12(\n\x10market_h\
    ash_name\x18\x12\x20\x01(\tR\x0emarketHashName\x12\x1d\n\nmarket_fee\x18\
    \x13\x20\x01(\tR\tmarketFee\x12$\n\x0emarket_fee_app\x18\x1c\x20\x01(\
    \x05R\x0cmarketFeeApp\x12=\n\x0econtained_item\x18\x14\x20\x01(\x0b2\x16\
    .CEconItem_DescriptionR\rcontainedItem\x128\n\x0emarket_actions\x18\x15\
    \x20\x03(\x0b2\x11.CEconItem_ActionR\rmarketActions\x12\x1c\n\tcommodity\
    \x18\x16\x20\x01(\x08R\tcommodity\x12>\n\x1bmarket_tradable_restriction\
    \x18\x17\x20\x01(\x05R\x19marketTradableRestriction\x12B\n\x1dmarket_mar\
    ketable_restriction\x18\x18\x20\x01(\x05R\x1bmarketMarketableRestriction\
    \x12\x1e\n\nmarketable\x18\x19\x20\x01(\x08R\nmarketable\x12\"\n\x04tags\
    \x18\x1a\x20\x03(\x0b2\x0e.CEconItem_TagR\x04tags\x12'\n\x0fitem_expirat\
    ion\x18\x1b\x20\x01(\tR\x0eitemExpiration\x12C\n\x1emarket_buy_country_r\
    estriction\x18\x1e\x20\x01(\tR\x1bmarketBuyCountryRestriction\x12E\n\x1f\
    market_sell_country_restriction\x18\x1f\x20\x01(\tR\x1cmarketSellCountry\
    Restriction\"\xe7\x03\n\rCEconItem_Tag\x128\n\x05appid\x18\x01\x20\x01(\
    \rR\x05appidB\"\x82\xb5\x18\x1eThe\x20app\x20that\x20contains\x20the\x20\
    item\x12T\n\x08category\x18\x02\x20\x01(\tR\x08categoryB8\x82\xb5\x184Th\
    e\x20internal\x20name\x20of\x20the\x20category\x20the\x20tag\x20belongs\
    \x20to\x12E\n\rinternal_name\x18\x03\x20\x01(\tR\x0cinternalNameB\x20\
    \x82\xb5\x18\x1cThe\x20internal\x20name\x20of\x20the\x20tag\x12^\n\x17lo\
    calized_category_name\x18\x04\x20\x01(\tR\x15localizedCategoryNameB&\x82\
    \xb5\x18\"The\x20localized\x20name\x20of\x20the\x20category\x12O\n\x12lo\
    calized_tag_name\x18\x05\x20\x01(\tR\x10localizedTagNameB!\x82\xb5\x18\
    \x1dThe\x20localized\x20name\x20of\x20the\x20tag\x12N\n\x05color\x18\x06\
    \x20\x01(\tR\x05colorB8\x82\xb5\x184The\x20color\x20to\x20use\x20when\
    \x20displaying\x20the\x20tag\x20to\x20the\x20user\"^\n\x20CEcon_GetAsset\
    ClassInfo_Response\x12:\n\x0cdescriptions\x18\x01\x20\x03(\x0b2\x16.CEco\
    nItem_DescriptionR\x0cdescriptions2\xe2\x04\n\x04Econ\x12\x9a\x01\n\x18G\
    etTradeOfferAccessToken\x12'.CEcon_GetTradeOfferAccessToken_Request\x1a(\
    .CEcon_GetTradeOfferAccessToken_Response\"+\x82\xb5\x18'Get\x20the\x20us\
    er's\x20trade\x20offer\x20access\x20token\x12\xd9\x01\n\x1fClientGetItem\
    ShopOverlayAuthURL\x12..CEcon_ClientGetItemShopOverlayAuthURL_Request\
    \x1a/.CEcon_ClientGetItemShopOverlayAuthURL_Response\"U\x82\xb5\x18QGene\
    rates\x20a\x20URL\x20which\x20sets\x20a\x20secure\x20cookie\x20for\x20in\
    -game-browser\x20itemshop\x20purchases\x12\x9f\x01\n\x11GetAssetClassInf\
    o\x12\x20.CEcon_GetAssetClassInfo_Request\x1a!.CEcon_GetAssetClassInfo_R\
    esponse\"E\x82\xb5\x18AReturns\x20description\x20information\x20about\
    \x20the\x20passed\x20in\x20asset\x20classes\x1a?\x82\xb5\x18;A\x20servic\
    e\x20that\x20provides\x20communication\x20with\x20the\x20econ\x20servers\
    B\x03\x80\x01\x01J\xc2\"\n\x06\x12\x04\0\0g\x01\n\t\n\x02\x03\0\x12\x03\
    \0\06\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\x10\x12\x03\x02\0\"\
    \n\n\n\x02\x04\0\x12\x04\x04\0\x06\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\
    \x08.\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x08-\n\x0c\n\x05\x04\0\x02\0\
    \x04\x12\x03\x05\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x11\x15\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x16(\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x05+,\n\n\n\x02\x04\x01\x12\x04\x08\0\n\x01\n\n\n\x03\x04\
    \x01\x01\x12\x03\x08\x08/\n\x0b\n\x04\x04\x01\x02\0\x12\x03\t\x085\n\x0c\
    \n\x05\x04\x01\x02\0\x04\x12\x03\t\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03\t\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\t\x180\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\t34\n\n\n\x02\x04\x02\x12\x04\x0c\0\x0e\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03\x0c\x085\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03\r\x08'\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\r\x08\x10\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03\r\x11\x17\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\r\x18\"\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\r%&\n\n\n\x02\x04\
    \x03\x12\x04\x10\0\x12\x01\n\n\n\x03\x04\x03\x01\x12\x03\x10\x086\n\x0b\
    \n\x04\x04\x03\x02\0\x12\x03\x11\x08\x20\n\x0c\n\x05\x04\x03\x02\0\x04\
    \x12\x03\x11\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x11\x11\x17\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x11\x18\x1b\n\x0c\n\x05\x04\x03\x02\
    \0\x03\x12\x03\x11\x1e\x1f\n\n\n\x02\x04\x04\x12\x04\x14\0\x1d\x01\n\n\n\
    \x03\x04\x04\x01\x12\x03\x14\x08'\n\x0c\n\x04\x04\x04\x03\0\x12\x04\x15\
    \x08\x18\t\n\x0c\n\x05\x04\x04\x03\0\x01\x12\x03\x15\x10\x15\n\r\n\x06\
    \x04\x04\x03\0\x02\0\x12\x03\x16\x10,\n\x0e\n\x07\x04\x04\x03\0\x02\0\
    \x04\x12\x03\x16\x10\x18\n\x0e\n\x07\x04\x04\x03\0\x02\0\x05\x12\x03\x16\
    \x19\x1f\n\x0e\n\x07\x04\x04\x03\0\x02\0\x01\x12\x03\x16\x20'\n\x0e\n\
    \x07\x04\x04\x03\0\x02\0\x03\x12\x03\x16*+\n\r\n\x06\x04\x04\x03\0\x02\
    \x01\x12\x03\x17\x10/\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x04\x12\x03\x17\
    \x10\x18\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x05\x12\x03\x17\x19\x1f\n\x0e\
    \n\x07\x04\x04\x03\0\x02\x01\x01\x12\x03\x17\x20*\n\x0e\n\x07\x04\x04\
    \x03\0\x02\x01\x03\x12\x03\x17-.\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x1a\
    \x08%\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03\x1a\x08\x10\n\x0c\n\x05\x04\
    \x04\x02\0\x05\x12\x03\x1a\x11\x17\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\
    \x1a\x18\x20\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1a#$\n\x0b\n\x04\x04\
    \x04\x02\x01\x12\x03\x1b\x08\"\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03\
    \x1b\x08\x10\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03\x1b\x11\x17\n\x0c\n\
    \x05\x04\x04\x02\x01\x01\x12\x03\x1b\x18\x1d\n\x0c\n\x05\x04\x04\x02\x01\
    \x03\x12\x03\x1b\x20!\n\x0b\n\x04\x04\x04\x02\x02\x12\x03\x1c\x08D\n\x0c\
    \n\x05\x04\x04\x02\x02\x04\x12\x03\x1c\x08\x10\n\x0c\n\x05\x04\x04\x02\
    \x02\x06\x12\x03\x1c\x117\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03\x1c8?\
    \n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03\x1cBC\n\n\n\x02\x04\x05\x12\x04\
    \x1f\0$\x01\n\n\n\x03\x04\x05\x01\x12\x03\x1f\x08!\n\x0b\n\x04\x04\x05\
    \x02\0\x12\x03\x20\x08!\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03\x20\x08\
    \x10\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03\x20\x11\x17\n\x0c\n\x05\x04\
    \x05\x02\0\x01\x12\x03\x20\x18\x1c\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03\
    \x20\x1f\x20\n\x0b\n\x04\x04\x05\x02\x01\x12\x03!\x08\"\n\x0c\n\x05\x04\
    \x05\x02\x01\x04\x12\x03!\x08\x10\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\
    \x03!\x11\x17\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03!\x18\x1d\n\x0c\n\
    \x05\x04\x05\x02\x01\x03\x12\x03!\x20!\n\x0b\n\x04\x04\x05\x02\x02\x12\
    \x03\"\x08\"\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\x03\"\x08\x10\n\x0c\n\
    \x05\x04\x05\x02\x02\x05\x12\x03\"\x11\x17\n\x0c\n\x05\x04\x05\x02\x02\
    \x01\x12\x03\"\x18\x1d\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03\"\x20!\n\
    \x0b\n\x04\x04\x05\x02\x03\x12\x03#\x08\"\n\x0c\n\x05\x04\x05\x02\x03\
    \x04\x12\x03#\x08\x10\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\x03#\x11\x17\n\
    \x0c\n\x05\x04\x05\x02\x03\x01\x12\x03#\x18\x1d\n\x0c\n\x05\x04\x05\x02\
    \x03\x03\x12\x03#\x20!\n\n\n\x02\x04\x06\x12\x04&\0)\x01\n\n\n\x03\x04\
    \x06\x01\x12\x03&\x08\x18\n\x0b\n\x04\x04\x06\x02\0\x12\x03'\x08!\n\x0c\
    \n\x05\x04\x06\x02\0\x04\x12\x03'\x08\x10\n\x0c\n\x05\x04\x06\x02\0\x05\
    \x12\x03'\x11\x17\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03'\x18\x1c\n\x0c\n\
    \x05\x04\x06\x02\0\x03\x12\x03'\x1f\x20\n\x0b\n\x04\x04\x06\x02\x01\x12\
    \x03(\x08!\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x03(\x08\x10\n\x0c\n\x05\
    \x04\x06\x02\x01\x05\x12\x03(\x11\x17\n\x0c\n\x05\x04\x06\x02\x01\x01\
    \x12\x03(\x18\x1c\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03(\x1f\x20\n\n\n\
    \x02\x04\x07\x12\x04+\0J\x01\n\n\n\x03\x04\x07\x01\x12\x03+\x08\x1d\n\
    \x0b\n\x04\x04\x07\x02\0\x12\x03,\x08!\n\x0c\n\x05\x04\x07\x02\0\x04\x12\
    \x03,\x08\x10\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03,\x11\x16\n\x0c\n\x05\
    \x04\x07\x02\0\x01\x12\x03,\x17\x1c\n\x0c\n\x05\x04\x07\x02\0\x03\x12\
    \x03,\x1f\x20\n\x0b\n\x04\x04\x07\x02\x01\x12\x03-\x08$\n\x0c\n\x05\x04\
    \x07\x02\x01\x04\x12\x03-\x08\x10\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\
    \x03-\x11\x17\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03-\x18\x1f\n\x0c\n\
    \x05\x04\x07\x02\x01\x03\x12\x03-\"#\n\x0b\n\x04\x04\x07\x02\x02\x12\x03\
    .\x08'\n\x0c\n\x05\x04\x07\x02\x02\x04\x12\x03.\x08\x10\n\x0c\n\x05\x04\
    \x07\x02\x02\x05\x12\x03.\x11\x17\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\
    \x03.\x18\"\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03.%&\n\x0b\n\x04\x04\
    \x07\x02\x03\x12\x03/\x08#\n\x0c\n\x05\x04\x07\x02\x03\x04\x12\x03/\x08\
    \x10\n\x0c\n\x05\x04\x07\x02\x03\x05\x12\x03/\x11\x15\n\x0c\n\x05\x04\
    \x07\x02\x03\x01\x12\x03/\x16\x1e\n\x0c\n\x05\x04\x07\x02\x03\x03\x12\
    \x03/!\"\n\x0b\n\x04\x04\x07\x02\x04\x12\x030\x08-\n\x0c\n\x05\x04\x07\
    \x02\x04\x04\x12\x030\x08\x10\n\x0c\n\x05\x04\x07\x02\x04\x05\x12\x030\
    \x11\x17\n\x0c\n\x05\x04\x07\x02\x04\x01\x12\x030\x18(\n\x0c\n\x05\x04\
    \x07\x02\x04\x03\x12\x030+,\n\x0b\n\x04\x04\x07\x02\x05\x12\x031\x08%\n\
    \x0c\n\x05\x04\x07\x02\x05\x04\x12\x031\x08\x10\n\x0c\n\x05\x04\x07\x02\
    \x05\x05\x12\x031\x11\x17\n\x0c\n\x05\x04\x07\x02\x05\x01\x12\x031\x18\
    \x20\n\x0c\n\x05\x04\x07\x02\x05\x03\x12\x031#$\n\x0b\n\x04\x04\x07\x02\
    \x06\x12\x032\x08+\n\x0c\n\x05\x04\x07\x02\x06\x04\x12\x032\x08\x10\n\
    \x0c\n\x05\x04\x07\x02\x06\x05\x12\x032\x11\x17\n\x0c\n\x05\x04\x07\x02\
    \x06\x01\x12\x032\x18&\n\x0c\n\x05\x04\x07\x02\x06\x03\x12\x032)*\n\x0b\
    \n\x04\x04\x07\x02\x07\x12\x033\x08=\n\x0c\n\x05\x04\x07\x02\x07\x04\x12\
    \x033\x08\x10\n\x0c\n\x05\x04\x07\x02\x07\x06\x12\x033\x11+\n\x0c\n\x05\
    \x04\x07\x02\x07\x01\x12\x033,8\n\x0c\n\x05\x04\x07\x02\x07\x03\x12\x033\
    ;<\n\x0b\n\x04\x04\x07\x02\x08\x12\x034\x08#\n\x0c\n\x05\x04\x07\x02\x08\
    \x04\x12\x034\x08\x10\n\x0c\n\x05\x04\x07\x02\x08\x05\x12\x034\x11\x15\n\
    \x0c\n\x05\x04\x07\x02\x08\x01\x12\x034\x16\x1e\n\x0c\n\x05\x04\x07\x02\
    \x08\x03\x12\x034!\"\n\x0b\n\x04\x04\x07\x02\t\x12\x035\x080\n\x0c\n\x05\
    \x04\x07\x02\t\x04\x12\x035\x08\x10\n\x0c\n\x05\x04\x07\x02\t\x06\x12\
    \x035\x11\"\n\x0c\n\x05\x04\x07\x02\t\x01\x12\x035#*\n\x0c\n\x05\x04\x07\
    \x02\t\x03\x12\x035-/\n\x0b\n\x04\x04\x07\x02\n\x12\x036\x08D\n\x0c\n\
    \x05\x04\x07\x02\n\x04\x12\x036\x08\x10\n\x0c\n\x05\x04\x07\x02\n\x06\
    \x12\x036\x11+\n\x0c\n\x05\x04\x07\x02\n\x01\x12\x036,>\n\x0c\n\x05\x04\
    \x07\x02\n\x03\x12\x036AC\n\x0b\n\x04\x04\x07\x02\x0b\x12\x037\x086\n\
    \x0c\n\x05\x04\x07\x02\x0b\x04\x12\x037\x08\x10\n\x0c\n\x05\x04\x07\x02\
    \x0b\x06\x12\x037\x11\"\n\x0c\n\x05\x04\x07\x02\x0b\x01\x12\x037#0\n\x0c\
    \n\x05\x04\x07\x02\x0b\x03\x12\x03735\n\x0b\n\x04\x04\x07\x02\x0c\x12\
    \x038\x08+\n\x0c\n\x05\x04\x07\x02\x0c\x04\x12\x038\x08\x10\n\x0c\n\x05\
    \x04\x07\x02\x0c\x05\x12\x038\x11\x17\n\x0c\n\x05\x04\x07\x02\x0c\x01\
    \x12\x038\x18%\n\x0c\n\x05\x04\x07\x02\x0c\x03\x12\x038(*\n\x0b\n\x04\
    \x04\x07\x02\r\x12\x039\x08\"\n\x0c\n\x05\x04\x07\x02\r\x04\x12\x039\x08\
    \x10\n\x0c\n\x05\x04\x07\x02\r\x05\x12\x039\x11\x17\n\x0c\n\x05\x04\x07\
    \x02\r\x01\x12\x039\x18\x1c\n\x0c\n\x05\x04\x07\x02\r\x03\x12\x039\x1f!\
    \n\x0b\n\x04\x04\x07\x02\x0e\x12\x03:\x08(\n\x0c\n\x05\x04\x07\x02\x0e\
    \x04\x12\x03:\x08\x10\n\x0c\n\x05\x04\x07\x02\x0e\x05\x12\x03:\x11\x17\n\
    \x0c\n\x05\x04\x07\x02\x0e\x01\x12\x03:\x18\"\n\x0c\n\x05\x04\x07\x02\
    \x0e\x03\x12\x03:%'\n\x0b\n\x04\x04\x07\x02\x0f\x12\x03;\x08\"\n\x0c\n\
    \x05\x04\x07\x02\x0f\x04\x12\x03;\x08\x10\n\x0c\n\x05\x04\x07\x02\x0f\
    \x05\x12\x03;\x11\x17\n\x0c\n\x05\x04\x07\x02\x0f\x01\x12\x03;\x18\x1c\n\
    \x0c\n\x05\x04\x07\x02\x0f\x03\x12\x03;\x1f!\n\x0b\n\x04\x04\x07\x02\x10\
    \x12\x03<\x08)\n\x0c\n\x05\x04\x07\x02\x10\x04\x12\x03<\x08\x10\n\x0c\n\
    \x05\x04\x07\x02\x10\x05\x12\x03<\x11\x17\n\x0c\n\x05\x04\x07\x02\x10\
    \x01\x12\x03<\x18#\n\x0c\n\x05\x04\x07\x02\x10\x03\x12\x03<&(\n\x0b\n\
    \x04\x04\x07\x02\x11\x12\x03=\x08.\n\x0c\n\x05\x04\x07\x02\x11\x04\x12\
    \x03=\x08\x10\n\x0c\n\x05\x04\x07\x02\x11\x05\x12\x03=\x11\x17\n\x0c\n\
    \x05\x04\x07\x02\x11\x01\x12\x03=\x18(\n\x0c\n\x05\x04\x07\x02\x11\x03\
    \x12\x03=+-\n\x0b\n\x04\x04\x07\x02\x12\x12\x03>\x08(\n\x0c\n\x05\x04\
    \x07\x02\x12\x04\x12\x03>\x08\x10\n\x0c\n\x05\x04\x07\x02\x12\x05\x12\
    \x03>\x11\x17\n\x0c\n\x05\x04\x07\x02\x12\x01\x12\x03>\x18\"\n\x0c\n\x05\
    \x04\x07\x02\x12\x03\x12\x03>%'\n\x0b\n\x04\x04\x07\x02\x13\x12\x03?\x08\
    +\n\x0c\n\x05\x04\x07\x02\x13\x04\x12\x03?\x08\x10\n\x0c\n\x05\x04\x07\
    \x02\x13\x05\x12\x03?\x11\x16\n\x0c\n\x05\x04\x07\x02\x13\x01\x12\x03?\
    \x17%\n\x0c\n\x05\x04\x07\x02\x13\x03\x12\x03?(*\n\x0b\n\x04\x04\x07\x02\
    \x14\x12\x03@\x08<\n\x0c\n\x05\x04\x07\x02\x14\x04\x12\x03@\x08\x10\n\
    \x0c\n\x05\x04\x07\x02\x14\x06\x12\x03@\x11'\n\x0c\n\x05\x04\x07\x02\x14\
    \x01\x12\x03@(6\n\x0c\n\x05\x04\x07\x02\x14\x03\x12\x03@9;\n\x0b\n\x04\
    \x04\x07\x02\x15\x12\x03A\x087\n\x0c\n\x05\x04\x07\x02\x15\x04\x12\x03A\
    \x08\x10\n\x0c\n\x05\x04\x07\x02\x15\x06\x12\x03A\x11\"\n\x0c\n\x05\x04\
    \x07\x02\x15\x01\x12\x03A#1\n\x0c\n\x05\x04\x07\x02\x15\x03\x12\x03A46\n\
    \x0b\n\x04\x04\x07\x02\x16\x12\x03B\x08%\n\x0c\n\x05\x04\x07\x02\x16\x04\
    \x12\x03B\x08\x10\n\x0c\n\x05\x04\x07\x02\x16\x05\x12\x03B\x11\x15\n\x0c\
    \n\x05\x04\x07\x02\x16\x01\x12\x03B\x16\x1f\n\x0c\n\x05\x04\x07\x02\x16\
    \x03\x12\x03B\"$\n\x0b\n\x04\x04\x07\x02\x17\x12\x03C\x088\n\x0c\n\x05\
    \x04\x07\x02\x17\x04\x12\x03C\x08\x10\n\x0c\n\x05\x04\x07\x02\x17\x05\
    \x12\x03C\x11\x16\n\x0c\n\x05\x04\x07\x02\x17\x01\x12\x03C\x172\n\x0c\n\
    \x05\x04\x07\x02\x17\x03\x12\x03C57\n\x0b\n\x04\x04\x07\x02\x18\x12\x03D\
    \x08:\n\x0c\n\x05\x04\x07\x02\x18\x04\x12\x03D\x08\x10\n\x0c\n\x05\x04\
    \x07\x02\x18\x05\x12\x03D\x11\x16\n\x0c\n\x05\x04\x07\x02\x18\x01\x12\
    \x03D\x174\n\x0c\n\x05\x04\x07\x02\x18\x03\x12\x03D79\n\x0b\n\x04\x04\
    \x07\x02\x19\x12\x03E\x08&\n\x0c\n\x05\x04\x07\x02\x19\x04\x12\x03E\x08\
    \x10\n\x0c\n\x05\x04\x07\x02\x19\x05\x12\x03E\x11\x15\n\x0c\n\x05\x04\
    \x07\x02\x19\x01\x12\x03E\x16\x20\n\x0c\n\x05\x04\x07\x02\x19\x03\x12\
    \x03E#%\n\x0b\n\x04\x04\x07\x02\x1a\x12\x03F\x08*\n\x0c\n\x05\x04\x07\
    \x02\x1a\x04\x12\x03F\x08\x10\n\x0c\n\x05\x04\x07\x02\x1a\x06\x12\x03F\
    \x11\x1f\n\x0c\n\x05\x04\x07\x02\x1a\x01\x12\x03F\x20$\n\x0c\n\x05\x04\
    \x07\x02\x1a\x03\x12\x03F')\n\x0b\n\x04\x04\x07\x02\x1b\x12\x03G\x08-\n\
    \x0c\n\x05\x04\x07\x02\x1b\x04\x12\x03G\x08\x10\n\x0c\n\x05\x04\x07\x02\
    \x1b\x05\x12\x03G\x11\x17\n\x0c\n\x05\x04\x07\x02\x1b\x01\x12\x03G\x18'\
    \n\x0c\n\x05\x04\x07\x02\x1b\x03\x12\x03G*,\n\x0b\n\x04\x04\x07\x02\x1c\
    \x12\x03H\x08<\n\x0c\n\x05\x04\x07\x02\x1c\x04\x12\x03H\x08\x10\n\x0c\n\
    \x05\x04\x07\x02\x1c\x05\x12\x03H\x11\x17\n\x0c\n\x05\x04\x07\x02\x1c\
    \x01\x12\x03H\x186\n\x0c\n\x05\x04\x07\x02\x1c\x03\x12\x03H9;\n\x0b\n\
    \x04\x04\x07\x02\x1d\x12\x03I\x08=\n\x0c\n\x05\x04\x07\x02\x1d\x04\x12\
    \x03I\x08\x10\n\x0c\n\x05\x04\x07\x02\x1d\x05\x12\x03I\x11\x17\n\x0c\n\
    \x05\x04\x07\x02\x1d\x01\x12\x03I\x187\n\x0c\n\x05\x04\x07\x02\x1d\x03\
    \x12\x03I:<\n\n\n\x02\x04\x08\x12\x04L\0S\x01\n\n\n\x03\x04\x08\x01\x12\
    \x03L\x08\x15\n\x0b\n\x04\x04\x08\x02\0\x12\x03M\x08U\n\x0c\n\x05\x04\
    \x08\x02\0\x04\x12\x03M\x08\x10\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03M\
    \x11\x17\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03M\x18\x1d\n\x0c\n\x05\x04\
    \x08\x02\0\x03\x12\x03M\x20!\n\x0c\n\x05\x04\x08\x02\0\x08\x12\x03M\"T\n\
    \x0f\n\x08\x04\x08\x02\0\x08\xd0\x86\x03\x12\x03M#S\n\x0b\n\x04\x04\x08\
    \x02\x01\x12\x03N\x08n\n\x0c\n\x05\x04\x08\x02\x01\x04\x12\x03N\x08\x10\
    \n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03N\x11\x17\n\x0c\n\x05\x04\x08\
    \x02\x01\x01\x12\x03N\x18\x20\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03N#$\
    \n\x0c\n\x05\x04\x08\x02\x01\x08\x12\x03N%m\n\x0f\n\x08\x04\x08\x02\x01\
    \x08\xd0\x86\x03\x12\x03N&l\n\x0b\n\x04\x04\x08\x02\x02\x12\x03O\x08[\n\
    \x0c\n\x05\x04\x08\x02\x02\x04\x12\x03O\x08\x10\n\x0c\n\x05\x04\x08\x02\
    \x02\x05\x12\x03O\x11\x17\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03O\x18%\
    \n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03O()\n\x0c\n\x05\x04\x08\x02\x02\
    \x08\x12\x03O*Z\n\x0f\n\x08\x04\x08\x02\x02\x08\xd0\x86\x03\x12\x03O+Y\n\
    \x0b\n\x04\x04\x08\x02\x03\x12\x03P\x08k\n\x0c\n\x05\x04\x08\x02\x03\x04\
    \x12\x03P\x08\x10\n\x0c\n\x05\x04\x08\x02\x03\x05\x12\x03P\x11\x17\n\x0c\
    \n\x05\x04\x08\x02\x03\x01\x12\x03P\x18/\n\x0c\n\x05\x04\x08\x02\x03\x03\
    \x12\x03P23\n\x0c\n\x05\x04\x08\x02\x03\x08\x12\x03P4j\n\x0f\n\x08\x04\
    \x08\x02\x03\x08\xd0\x86\x03\x12\x03P5i\n\x0b\n\x04\x04\x08\x02\x04\x12\
    \x03Q\x08a\n\x0c\n\x05\x04\x08\x02\x04\x04\x12\x03Q\x08\x10\n\x0c\n\x05\
    \x04\x08\x02\x04\x05\x12\x03Q\x11\x17\n\x0c\n\x05\x04\x08\x02\x04\x01\
    \x12\x03Q\x18*\n\x0c\n\x05\x04\x08\x02\x04\x03\x12\x03Q-.\n\x0c\n\x05\
    \x04\x08\x02\x04\x08\x12\x03Q/`\n\x0f\n\x08\x04\x08\x02\x04\x08\xd0\x86\
    \x03\x12\x03Q0_\n\x0b\n\x04\x04\x08\x02\x05\x12\x03R\x08k\n\x0c\n\x05\
    \x04\x08\x02\x05\x04\x12\x03R\x08\x10\n\x0c\n\x05\x04\x08\x02\x05\x05\
    \x12\x03R\x11\x17\n\x0c\n\x05\x04\x08\x02\x05\x01\x12\x03R\x18\x1d\n\x0c\
    \n\x05\x04\x08\x02\x05\x03\x12\x03R\x20!\n\x0c\n\x05\x04\x08\x02\x05\x08\
    \x12\x03R\"j\n\x0f\n\x08\x04\x08\x02\x05\x08\xd0\x86\x03\x12\x03R#i\n\n\
    \n\x02\x04\t\x12\x04U\0W\x01\n\n\n\x03\x04\t\x01\x12\x03U\x08(\n\x0b\n\
    \x04\x04\t\x02\0\x12\x03V\x089\n\x0c\n\x05\x04\t\x02\0\x04\x12\x03V\x08\
    \x10\n\x0c\n\x05\x04\t\x02\0\x06\x12\x03V\x11'\n\x0c\n\x05\x04\t\x02\0\
    \x01\x12\x03V(4\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03V78\n\n\n\x02\x06\0\
    \x12\x04Y\0g\x01\n\n\n\x03\x06\0\x01\x12\x03Y\x08\x0c\n\n\n\x03\x06\0\
    \x03\x12\x03Z\x08e\n\r\n\x06\x06\0\x03\xd0\x86\x03\x12\x03Z\x08e\n\x0c\n\
    \x04\x06\0\x02\0\x12\x04\\\x08^\t\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\\\
    \x0c$\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\\&M\n\r\n\x05\x06\0\x02\0\x03\
    \x12\x04\\X\x80\x01\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03]\x10X\n\x0f\n\
    \x08\x06\0\x02\0\x04\xd0\x86\x03\x12\x03]\x10X\n\x0c\n\x04\x06\0\x02\x01\
    \x12\x04`\x08b\t\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03`\x0c+\n\x0c\n\x05\
    \x06\0\x02\x01\x02\x12\x03`-[\n\r\n\x05\x06\0\x02\x01\x03\x12\x04`f\x95\
    \x01\n\r\n\x05\x06\0\x02\x01\x04\x12\x04a\x10\x82\x01\n\x10\n\x08\x06\0\
    \x02\x01\x04\xd0\x86\x03\x12\x04a\x10\x82\x01\n\x0c\n\x04\x06\0\x02\x02\
    \x12\x04d\x08f\t\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03d\x0c\x1d\n\x0c\n\
    \x05\x06\0\x02\x02\x02\x12\x03d\x1f?\n\x0c\n\x05\x06\0\x02\x02\x03\x12\
    \x03dJk\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03e\x10r\n\x0f\n\x08\x06\0\
    \x02\x02\x04\xd0\x86\x03\x12\x03e\x10r\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(CEcon_GetTradeOfferAccessToken_Request::generated_message_descriptor_data());
            messages.push(CEcon_GetTradeOfferAccessToken_Response::generated_message_descriptor_data());
            messages.push(CEcon_ClientGetItemShopOverlayAuthURL_Request::generated_message_descriptor_data());
            messages.push(CEcon_ClientGetItemShopOverlayAuthURL_Response::generated_message_descriptor_data());
            messages.push(CEcon_GetAssetClassInfo_Request::generated_message_descriptor_data());
            messages.push(CEconItem_DescriptionLine::generated_message_descriptor_data());
            messages.push(CEconItem_Action::generated_message_descriptor_data());
            messages.push(CEconItem_Description::generated_message_descriptor_data());
            messages.push(CEconItem_Tag::generated_message_descriptor_data());
            messages.push(CEcon_GetAssetClassInfo_Response::generated_message_descriptor_data());
            messages.push(cecon_get_asset_class_info_request::Class::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
