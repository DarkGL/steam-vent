// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_market.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CEconMarket_IsMarketplaceAllowed_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEconMarket_IsMarketplaceAllowed_Request {
    // message fields
    // @@protoc_insertion_point(field:CEconMarket_IsMarketplaceAllowed_Request.webcookie)
    pub webcookie: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CEconMarket_IsMarketplaceAllowed_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEconMarket_IsMarketplaceAllowed_Request {
    fn default() -> &'a CEconMarket_IsMarketplaceAllowed_Request {
        <CEconMarket_IsMarketplaceAllowed_Request as ::protobuf::Message>::default_instance()
    }
}

impl CEconMarket_IsMarketplaceAllowed_Request {
    pub fn new() -> CEconMarket_IsMarketplaceAllowed_Request {
        ::std::default::Default::default()
    }

    // optional string webcookie = 1;

    pub fn webcookie(&self) -> &str {
        match self.webcookie.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_webcookie(&mut self) {
        self.webcookie = ::std::option::Option::None;
    }

    pub fn has_webcookie(&self) -> bool {
        self.webcookie.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webcookie(&mut self, v: ::std::string::String) {
        self.webcookie = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_webcookie(&mut self) -> &mut ::std::string::String {
        if self.webcookie.is_none() {
            self.webcookie = ::std::option::Option::Some(::std::string::String::new());
        }
        self.webcookie.as_mut().unwrap()
    }

    // Take field
    pub fn take_webcookie(&mut self) -> ::std::string::String {
        self.webcookie.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "webcookie",
            |m: &CEconMarket_IsMarketplaceAllowed_Request| { &m.webcookie },
            |m: &mut CEconMarket_IsMarketplaceAllowed_Request| { &mut m.webcookie },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CEconMarket_IsMarketplaceAllowed_Request>(
            "CEconMarket_IsMarketplaceAllowed_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CEconMarket_IsMarketplaceAllowed_Request {
    const NAME: &'static str = "CEconMarket_IsMarketplaceAllowed_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.webcookie = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.webcookie.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.webcookie.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEconMarket_IsMarketplaceAllowed_Request {
        CEconMarket_IsMarketplaceAllowed_Request::new()
    }

    fn clear(&mut self) {
        self.webcookie = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEconMarket_IsMarketplaceAllowed_Request {
        static instance: CEconMarket_IsMarketplaceAllowed_Request = CEconMarket_IsMarketplaceAllowed_Request {
            webcookie: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CEconMarket_IsMarketplaceAllowed_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEconMarket_IsMarketplaceAllowed_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEconMarket_IsMarketplaceAllowed_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEconMarket_IsMarketplaceAllowed_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CEconMarket_IsMarketplaceAllowed_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEconMarket_IsMarketplaceAllowed_Response {
    // message fields
    // @@protoc_insertion_point(field:CEconMarket_IsMarketplaceAllowed_Response.allowed)
    pub allowed: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CEconMarket_IsMarketplaceAllowed_Response.reason)
    pub reason: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CEconMarket_IsMarketplaceAllowed_Response.allowed_at_time)
    pub allowed_at_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CEconMarket_IsMarketplaceAllowed_Response.steamguard_required_days)
    pub steamguard_required_days: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CEconMarket_IsMarketplaceAllowed_Response.forms_requested)
    pub forms_requested: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CEconMarket_IsMarketplaceAllowed_Response.forms_require_verification)
    pub forms_require_verification: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CEconMarket_IsMarketplaceAllowed_Response.new_device_cooldown_days)
    pub new_device_cooldown_days: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CEconMarket_IsMarketplaceAllowed_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEconMarket_IsMarketplaceAllowed_Response {
    fn default() -> &'a CEconMarket_IsMarketplaceAllowed_Response {
        <CEconMarket_IsMarketplaceAllowed_Response as ::protobuf::Message>::default_instance()
    }
}

impl CEconMarket_IsMarketplaceAllowed_Response {
    pub fn new() -> CEconMarket_IsMarketplaceAllowed_Response {
        ::std::default::Default::default()
    }

    // optional bool allowed = 1;

    pub fn allowed(&self) -> bool {
        self.allowed.unwrap_or(false)
    }

    pub fn clear_allowed(&mut self) {
        self.allowed = ::std::option::Option::None;
    }

    pub fn has_allowed(&self) -> bool {
        self.allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allowed(&mut self, v: bool) {
        self.allowed = ::std::option::Option::Some(v);
    }

    // optional uint32 reason = 2;

    pub fn reason(&self) -> u32 {
        self.reason.unwrap_or(0)
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: u32) {
        self.reason = ::std::option::Option::Some(v);
    }

    // optional uint32 allowed_at_time = 3;

    pub fn allowed_at_time(&self) -> u32 {
        self.allowed_at_time.unwrap_or(0)
    }

    pub fn clear_allowed_at_time(&mut self) {
        self.allowed_at_time = ::std::option::Option::None;
    }

    pub fn has_allowed_at_time(&self) -> bool {
        self.allowed_at_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allowed_at_time(&mut self, v: u32) {
        self.allowed_at_time = ::std::option::Option::Some(v);
    }

    // optional uint32 steamguard_required_days = 4;

    pub fn steamguard_required_days(&self) -> u32 {
        self.steamguard_required_days.unwrap_or(0)
    }

    pub fn clear_steamguard_required_days(&mut self) {
        self.steamguard_required_days = ::std::option::Option::None;
    }

    pub fn has_steamguard_required_days(&self) -> bool {
        self.steamguard_required_days.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamguard_required_days(&mut self, v: u32) {
        self.steamguard_required_days = ::std::option::Option::Some(v);
    }

    // optional bool forms_requested = 7;

    pub fn forms_requested(&self) -> bool {
        self.forms_requested.unwrap_or(false)
    }

    pub fn clear_forms_requested(&mut self) {
        self.forms_requested = ::std::option::Option::None;
    }

    pub fn has_forms_requested(&self) -> bool {
        self.forms_requested.is_some()
    }

    // Param is passed by value, moved
    pub fn set_forms_requested(&mut self, v: bool) {
        self.forms_requested = ::std::option::Option::Some(v);
    }

    // optional bool forms_require_verification = 8;

    pub fn forms_require_verification(&self) -> bool {
        self.forms_require_verification.unwrap_or(false)
    }

    pub fn clear_forms_require_verification(&mut self) {
        self.forms_require_verification = ::std::option::Option::None;
    }

    pub fn has_forms_require_verification(&self) -> bool {
        self.forms_require_verification.is_some()
    }

    // Param is passed by value, moved
    pub fn set_forms_require_verification(&mut self, v: bool) {
        self.forms_require_verification = ::std::option::Option::Some(v);
    }

    // optional uint32 new_device_cooldown_days = 9;

    pub fn new_device_cooldown_days(&self) -> u32 {
        self.new_device_cooldown_days.unwrap_or(0)
    }

    pub fn clear_new_device_cooldown_days(&mut self) {
        self.new_device_cooldown_days = ::std::option::Option::None;
    }

    pub fn has_new_device_cooldown_days(&self) -> bool {
        self.new_device_cooldown_days.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_device_cooldown_days(&mut self, v: u32) {
        self.new_device_cooldown_days = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "allowed",
            |m: &CEconMarket_IsMarketplaceAllowed_Response| { &m.allowed },
            |m: &mut CEconMarket_IsMarketplaceAllowed_Response| { &mut m.allowed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason",
            |m: &CEconMarket_IsMarketplaceAllowed_Response| { &m.reason },
            |m: &mut CEconMarket_IsMarketplaceAllowed_Response| { &mut m.reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "allowed_at_time",
            |m: &CEconMarket_IsMarketplaceAllowed_Response| { &m.allowed_at_time },
            |m: &mut CEconMarket_IsMarketplaceAllowed_Response| { &mut m.allowed_at_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamguard_required_days",
            |m: &CEconMarket_IsMarketplaceAllowed_Response| { &m.steamguard_required_days },
            |m: &mut CEconMarket_IsMarketplaceAllowed_Response| { &mut m.steamguard_required_days },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "forms_requested",
            |m: &CEconMarket_IsMarketplaceAllowed_Response| { &m.forms_requested },
            |m: &mut CEconMarket_IsMarketplaceAllowed_Response| { &mut m.forms_requested },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "forms_require_verification",
            |m: &CEconMarket_IsMarketplaceAllowed_Response| { &m.forms_require_verification },
            |m: &mut CEconMarket_IsMarketplaceAllowed_Response| { &mut m.forms_require_verification },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "new_device_cooldown_days",
            |m: &CEconMarket_IsMarketplaceAllowed_Response| { &m.new_device_cooldown_days },
            |m: &mut CEconMarket_IsMarketplaceAllowed_Response| { &mut m.new_device_cooldown_days },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CEconMarket_IsMarketplaceAllowed_Response>(
            "CEconMarket_IsMarketplaceAllowed_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CEconMarket_IsMarketplaceAllowed_Response {
    const NAME: &'static str = "CEconMarket_IsMarketplaceAllowed_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.allowed = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.reason = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.allowed_at_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.steamguard_required_days = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.forms_requested = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.forms_require_verification = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.new_device_cooldown_days = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.allowed {
            my_size += 1 + 1;
        }
        if let Some(v) = self.reason {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.allowed_at_time {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.steamguard_required_days {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.forms_requested {
            my_size += 1 + 1;
        }
        if let Some(v) = self.forms_require_verification {
            my_size += 1 + 1;
        }
        if let Some(v) = self.new_device_cooldown_days {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.allowed {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.reason {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.allowed_at_time {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.steamguard_required_days {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.forms_requested {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.forms_require_verification {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.new_device_cooldown_days {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEconMarket_IsMarketplaceAllowed_Response {
        CEconMarket_IsMarketplaceAllowed_Response::new()
    }

    fn clear(&mut self) {
        self.allowed = ::std::option::Option::None;
        self.reason = ::std::option::Option::None;
        self.allowed_at_time = ::std::option::Option::None;
        self.steamguard_required_days = ::std::option::Option::None;
        self.forms_requested = ::std::option::Option::None;
        self.forms_require_verification = ::std::option::Option::None;
        self.new_device_cooldown_days = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEconMarket_IsMarketplaceAllowed_Response {
        static instance: CEconMarket_IsMarketplaceAllowed_Response = CEconMarket_IsMarketplaceAllowed_Response {
            allowed: ::std::option::Option::None,
            reason: ::std::option::Option::None,
            allowed_at_time: ::std::option::Option::None,
            steamguard_required_days: ::std::option::Option::None,
            forms_requested: ::std::option::Option::None,
            forms_require_verification: ::std::option::Option::None,
            new_device_cooldown_days: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CEconMarket_IsMarketplaceAllowed_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEconMarket_IsMarketplaceAllowed_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEconMarket_IsMarketplaceAllowed_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CEconMarket_IsMarketplaceAllowed_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&steammessages_market.steamclient.proto\x1a,steammessages_unified_base\
    .steamclient.proto\"y\n(CEconMarket_IsMarketplaceAllowed_Request\x12M\n\
    \twebcookie\x18\x01\x20\x01(\tR\twebcookieB/\x82\xb5\x18+The\x20user's\
    \x20Steam\x20Guard\x20machine\x20auth\x20cookie.\"\xef\x06\n)CEconMarket\
    _IsMarketplaceAllowed_Response\x12R\n\x07allowed\x18\x01\x20\x01(\x08R\
    \x07allowedB8\x82\xb5\x184Whether\x20or\x20not\x20the\x20user\x20is\x20a\
    llowed\x20to\x20use\x20the\x20market\x12S\n\x06reason\x18\x02\x20\x01(\r\
    R\x06reasonB;\x82\xb5\x187The\x20reason\x20the\x20user\x20can't\x20use\
    \x20the\x20market,\x20if\x20applicable\x12_\n\x0fallowed_at_time\x18\x03\
    \x20\x01(\rR\rallowedAtTimeB7\x82\xb5\x183The\x20time\x20the\x20user\x20\
    will\x20be\x20allowed\x20to\x20use\x20the\x20market\x12\x9c\x01\n\x18ste\
    amguard_required_days\x18\x04\x20\x01(\rR\x16steamguardRequiredDaysBb\
    \x82\xb5\x18^The\x20number\x20of\x20days\x20any\x20user\x20is\x20require\
    d\x20to\x20have\x20had\x20Steam\x20Guard\x20before\x20they\x20can\x20use\
    \x20the\x20market\x12g\n\x0fforms_requested\x18\x07\x20\x01(\x08R\x0efor\
    msRequestedB>\x82\xb5\x18:Whether\x20or\x20not\x20we've\x20requested\x20\
    the\x20user\x20fill\x20out\x20tax\x20forms\x12\x82\x01\n\x1aforms_requir\
    e_verification\x18\x08\x20\x01(\x08R\x18formsRequireVerificationBD\x82\
    \xb5\x18@True\x20if\x20we've\x20received\x20forms\x20but\x20they\x20requ\
    ire\x20verification\x20first\x12\xaa\x01\n\x18new_device_cooldown_days\
    \x18\t\x20\x01(\rR\x15newDeviceCooldownDaysBq\x82\xb5\x18mThe\x20number\
    \x20of\x20days\x20after\x20initial\x20device\x20authorization\x20a\x20us\
    er\x20must\x20wait\x20before\x20using\x20the\x20market\x20on\x20that\x20\
    device2\xee\x01\n\nEconMarket\x12\xb8\x01\n\x14IsMarketplaceAllowed\x12)\
    .CEconMarket_IsMarketplaceAllowed_Request\x1a*.CEconMarket_IsMarketplace\
    Allowed_Response\"I\x82\xb5\x18EChecks\x20whether\x20or\x20not\x20the\
    \x20authed\x20account\x20is\x20allowed\x20to\x20use\x20the\x20market\x1a\
    %\x82\xb5\x18!A\x20service\x20to\x20use\x20market\x20functionsB\x03\x80\
    \x01\x01J\x8c\x08\n\x06\x12\x04\0\0\x18\x01\n\t\n\x02\x03\0\x12\x03\0\06\
    \n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\x10\x12\x03\x02\0\"\n\n\n\
    \x02\x04\0\x12\x04\x04\0\x06\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x080\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x05\x08f\n\x0c\n\x05\x04\0\x02\0\x04\x12\
    \x03\x05\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x11\x17\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x05\x18!\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x05$%\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x05&e\n\x0f\n\x08\x04\0\
    \x02\0\x08\xd0\x86\x03\x12\x03\x05'd\n\n\n\x02\x04\x01\x12\x04\x08\0\x10\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\x08\x081\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\t\x08k\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\t\x08\x10\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\t\x11\x15\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\t\x16\x1d\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\t\x20!\n\x0c\n\
    \x05\x04\x01\x02\0\x08\x12\x03\t\"j\n\x0f\n\x08\x04\x01\x02\0\x08\xd0\
    \x86\x03\x12\x03\t#i\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\n\x08o\n\x0c\n\
    \x05\x04\x01\x02\x01\x04\x12\x03\n\x08\x10\n\x0c\n\x05\x04\x01\x02\x01\
    \x05\x12\x03\n\x11\x17\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\n\x18\x1e\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\n!\"\n\x0c\n\x05\x04\x01\x02\
    \x01\x08\x12\x03\n#n\n\x0f\n\x08\x04\x01\x02\x01\x08\xd0\x86\x03\x12\x03\
    \n$m\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0b\x08t\n\x0c\n\x05\x04\x01\
    \x02\x02\x04\x12\x03\x0b\x08\x10\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\
    \x0b\x11\x17\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x0b\x18'\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03\x0b*+\n\x0c\n\x05\x04\x01\x02\x02\x08\
    \x12\x03\x0b,s\n\x0f\n\x08\x04\x01\x02\x02\x08\xd0\x86\x03\x12\x03\x0b-r\
    \n\x0c\n\x04\x04\x01\x02\x03\x12\x04\x0c\x08\xa8\x01\n\x0c\n\x05\x04\x01\
    \x02\x03\x04\x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\
    \x0c\x11\x17\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x0c\x180\n\x0c\n\
    \x05\x04\x01\x02\x03\x03\x12\x03\x0c34\n\r\n\x05\x04\x01\x02\x03\x08\x12\
    \x04\x0c5\xa7\x01\n\x10\n\x08\x04\x01\x02\x03\x08\xd0\x86\x03\x12\x04\
    \x0c6\xa6\x01\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\r\x08y\n\x0c\n\x05\x04\
    \x01\x02\x04\x04\x12\x03\r\x08\x10\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\
    \x03\r\x11\x15\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\r\x16%\n\x0c\n\
    \x05\x04\x01\x02\x04\x03\x12\x03\r()\n\x0c\n\x05\x04\x01\x02\x04\x08\x12\
    \x03\r*x\n\x0f\n\x08\x04\x01\x02\x04\x08\xd0\x86\x03\x12\x03\r+w\n\x0c\n\
    \x04\x04\x01\x02\x05\x12\x04\x0e\x08\x8a\x01\n\x0c\n\x05\x04\x01\x02\x05\
    \x04\x12\x03\x0e\x08\x10\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03\x0e\x11\
    \x15\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x0e\x160\n\x0c\n\x05\x04\
    \x01\x02\x05\x03\x12\x03\x0e34\n\r\n\x05\x04\x01\x02\x05\x08\x12\x04\x0e\
    5\x89\x01\n\x10\n\x08\x04\x01\x02\x05\x08\xd0\x86\x03\x12\x04\x0e6\x88\
    \x01\n\x0c\n\x04\x04\x01\x02\x06\x12\x04\x0f\x08\xb7\x01\n\x0c\n\x05\x04\
    \x01\x02\x06\x04\x12\x03\x0f\x08\x10\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\
    \x03\x0f\x11\x17\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\x0f\x180\n\x0c\
    \n\x05\x04\x01\x02\x06\x03\x12\x03\x0f34\n\r\n\x05\x04\x01\x02\x06\x08\
    \x12\x04\x0f5\xb6\x01\n\x10\n\x08\x04\x01\x02\x06\x08\xd0\x86\x03\x12\
    \x04\x0f6\xb5\x01\n\n\n\x02\x06\0\x12\x04\x12\0\x18\x01\n\n\n\x03\x06\0\
    \x01\x12\x03\x12\x08\x12\n\n\n\x03\x06\0\x03\x12\x03\x13\x08K\n\r\n\x06\
    \x06\0\x03\xd0\x86\x03\x12\x03\x13\x08K\n\x0c\n\x04\x06\0\x02\0\x12\x04\
    \x15\x08\x17\t\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x15\x0c\x20\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\x15\"K\n\r\n\x05\x06\0\x02\0\x03\x12\x04\
    \x15V\x80\x01\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03\x16\x10v\n\x0f\n\x08\
    \x06\0\x02\0\x04\xd0\x86\x03\x12\x03\x16\x10v\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(CEconMarket_IsMarketplaceAllowed_Request::generated_message_descriptor_data());
            messages.push(CEconMarket_IsMarketplaceAllowed_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
