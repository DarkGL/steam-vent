// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_qms.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:GameSearchParam)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GameSearchParam {
    // message fields
    // @@protoc_insertion_point(field:GameSearchParam.key_name)
    pub key_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:GameSearchParam.value)
    pub value: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:GameSearchParam.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GameSearchParam {
    fn default() -> &'a GameSearchParam {
        <GameSearchParam as ::protobuf::Message>::default_instance()
    }
}

impl GameSearchParam {
    pub fn new() -> GameSearchParam {
        ::std::default::Default::default()
    }

    // optional string key_name = 1;

    pub fn key_name(&self) -> &str {
        match self.key_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key_name(&mut self) {
        self.key_name = ::std::option::Option::None;
    }

    pub fn has_key_name(&self) -> bool {
        self.key_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_name(&mut self, v: ::std::string::String) {
        self.key_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_name(&mut self) -> &mut ::std::string::String {
        if self.key_name.is_none() {
            self.key_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_key_name(&mut self) -> ::std::string::String {
        self.key_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key_name",
            |m: &GameSearchParam| { &m.key_name },
            |m: &mut GameSearchParam| { &mut m.key_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "value",
            |m: &GameSearchParam| { &m.value },
            |m: &mut GameSearchParam| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GameSearchParam>(
            "GameSearchParam",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GameSearchParam {
    const NAME: &'static str = "GameSearchParam";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key_name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.value.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.value {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key_name.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.value {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GameSearchParam {
        GameSearchParam::new()
    }

    fn clear(&mut self) {
        self.key_name = ::std::option::Option::None;
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GameSearchParam {
        static instance: GameSearchParam = GameSearchParam {
            key_name: ::std::option::Option::None,
            value: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GameSearchParam {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GameSearchParam").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GameSearchParam {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameSearchParam {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CQueuedMatchmaking_SearchForGame_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CQueuedMatchmaking_SearchForGame_Request {
    // message fields
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Request.action)
    pub action: ::std::option::Option<::protobuf::EnumOrUnknown<EGameSearchAction>>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Request.params)
    pub params: ::std::vec::Vec<GameSearchParam>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Request.player_min)
    pub player_min: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Request.player_max)
    pub player_max: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Request.steamidlobby)
    pub steamidlobby: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Request.searchid)
    pub searchid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CQueuedMatchmaking_SearchForGame_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CQueuedMatchmaking_SearchForGame_Request {
    fn default() -> &'a CQueuedMatchmaking_SearchForGame_Request {
        <CQueuedMatchmaking_SearchForGame_Request as ::protobuf::Message>::default_instance()
    }
}

impl CQueuedMatchmaking_SearchForGame_Request {
    pub fn new() -> CQueuedMatchmaking_SearchForGame_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional .EGameSearchAction action = 2;

    pub fn action(&self) -> EGameSearchAction {
        match self.action {
            Some(e) => e.enum_value_or(EGameSearchAction::k_EGameSearchAction_None),
            None => EGameSearchAction::k_EGameSearchAction_None,
        }
    }

    pub fn clear_action(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_action(&self) -> bool {
        self.action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: EGameSearchAction) {
        self.action = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 player_min = 4;

    pub fn player_min(&self) -> u32 {
        self.player_min.unwrap_or(0)
    }

    pub fn clear_player_min(&mut self) {
        self.player_min = ::std::option::Option::None;
    }

    pub fn has_player_min(&self) -> bool {
        self.player_min.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_min(&mut self, v: u32) {
        self.player_min = ::std::option::Option::Some(v);
    }

    // optional uint32 player_max = 5;

    pub fn player_max(&self) -> u32 {
        self.player_max.unwrap_or(0)
    }

    pub fn clear_player_max(&mut self) {
        self.player_max = ::std::option::Option::None;
    }

    pub fn has_player_max(&self) -> bool {
        self.player_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_max(&mut self, v: u32) {
        self.player_max = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamidlobby = 6;

    pub fn steamidlobby(&self) -> u64 {
        self.steamidlobby.unwrap_or(0)
    }

    pub fn clear_steamidlobby(&mut self) {
        self.steamidlobby = ::std::option::Option::None;
    }

    pub fn has_steamidlobby(&self) -> bool {
        self.steamidlobby.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamidlobby(&mut self, v: u64) {
        self.steamidlobby = ::std::option::Option::Some(v);
    }

    // optional uint64 searchid = 7;

    pub fn searchid(&self) -> u64 {
        self.searchid.unwrap_or(0)
    }

    pub fn clear_searchid(&mut self) {
        self.searchid = ::std::option::Option::None;
    }

    pub fn has_searchid(&self) -> bool {
        self.searchid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_searchid(&mut self, v: u64) {
        self.searchid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CQueuedMatchmaking_SearchForGame_Request| { &m.appid },
            |m: &mut CQueuedMatchmaking_SearchForGame_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "action",
            |m: &CQueuedMatchmaking_SearchForGame_Request| { &m.action },
            |m: &mut CQueuedMatchmaking_SearchForGame_Request| { &mut m.action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "params",
            |m: &CQueuedMatchmaking_SearchForGame_Request| { &m.params },
            |m: &mut CQueuedMatchmaking_SearchForGame_Request| { &mut m.params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_min",
            |m: &CQueuedMatchmaking_SearchForGame_Request| { &m.player_min },
            |m: &mut CQueuedMatchmaking_SearchForGame_Request| { &mut m.player_min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_max",
            |m: &CQueuedMatchmaking_SearchForGame_Request| { &m.player_max },
            |m: &mut CQueuedMatchmaking_SearchForGame_Request| { &mut m.player_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamidlobby",
            |m: &CQueuedMatchmaking_SearchForGame_Request| { &m.steamidlobby },
            |m: &mut CQueuedMatchmaking_SearchForGame_Request| { &mut m.steamidlobby },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "searchid",
            |m: &CQueuedMatchmaking_SearchForGame_Request| { &m.searchid },
            |m: &mut CQueuedMatchmaking_SearchForGame_Request| { &mut m.searchid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CQueuedMatchmaking_SearchForGame_Request>(
            "CQueuedMatchmaking_SearchForGame_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CQueuedMatchmaking_SearchForGame_Request {
    const NAME: &'static str = "CQueuedMatchmaking_SearchForGame_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.action = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                26 => {
                    self.params.push(is.read_message()?);
                },
                32 => {
                    self.player_min = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.player_max = ::std::option::Option::Some(is.read_uint32()?);
                },
                49 => {
                    self.steamidlobby = ::std::option::Option::Some(is.read_fixed64()?);
                },
                56 => {
                    self.searchid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.action {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        for value in &self.params {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.player_min {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.player_max {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.steamidlobby {
            my_size += 1 + 8;
        }
        if let Some(v) = self.searchid {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.action {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.params {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.player_min {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.player_max {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.steamidlobby {
            os.write_fixed64(6, v)?;
        }
        if let Some(v) = self.searchid {
            os.write_uint64(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CQueuedMatchmaking_SearchForGame_Request {
        CQueuedMatchmaking_SearchForGame_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.params.clear();
        self.player_min = ::std::option::Option::None;
        self.player_max = ::std::option::Option::None;
        self.steamidlobby = ::std::option::Option::None;
        self.searchid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CQueuedMatchmaking_SearchForGame_Request {
        static instance: CQueuedMatchmaking_SearchForGame_Request = CQueuedMatchmaking_SearchForGame_Request {
            appid: ::std::option::Option::None,
            action: ::std::option::Option::None,
            params: ::std::vec::Vec::new(),
            player_min: ::std::option::Option::None,
            player_max: ::std::option::Option::None,
            steamidlobby: ::std::option::Option::None,
            searchid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CQueuedMatchmaking_SearchForGame_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CQueuedMatchmaking_SearchForGame_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CQueuedMatchmaking_SearchForGame_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CQueuedMatchmaking_SearchForGame_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CQueuedMatchmaking_SearchForGame_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CQueuedMatchmaking_SearchForGame_Response {
    // message fields
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Response.gamesearchresult)
    pub gamesearchresult: ::std::option::Option<::protobuf::EnumOrUnknown<EGameSearchResult>>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Response.searchid)
    pub searchid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Response.seconds_time_estimate)
    pub seconds_time_estimate: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Response.poll_frequency)
    pub poll_frequency: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Response.count_searching)
    pub count_searching: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Response.players_in_match)
    pub players_in_match: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Response.players_accepted)
    pub players_accepted: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Response.connect_string)
    pub connect_string: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Response.steamidhost)
    pub steamidhost: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Response.rtime_match_made)
    pub rtime_match_made: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Response.rtime_now)
    pub rtime_now: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmaking_SearchForGame_Response.steamid_canceled_search)
    pub steamid_canceled_search: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CQueuedMatchmaking_SearchForGame_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CQueuedMatchmaking_SearchForGame_Response {
    fn default() -> &'a CQueuedMatchmaking_SearchForGame_Response {
        <CQueuedMatchmaking_SearchForGame_Response as ::protobuf::Message>::default_instance()
    }
}

impl CQueuedMatchmaking_SearchForGame_Response {
    pub fn new() -> CQueuedMatchmaking_SearchForGame_Response {
        ::std::default::Default::default()
    }

    // optional .EGameSearchResult gamesearchresult = 1;

    pub fn gamesearchresult(&self) -> EGameSearchResult {
        match self.gamesearchresult {
            Some(e) => e.enum_value_or(EGameSearchResult::k_EGameSearchResult_Invalid),
            None => EGameSearchResult::k_EGameSearchResult_Invalid,
        }
    }

    pub fn clear_gamesearchresult(&mut self) {
        self.gamesearchresult = ::std::option::Option::None;
    }

    pub fn has_gamesearchresult(&self) -> bool {
        self.gamesearchresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gamesearchresult(&mut self, v: EGameSearchResult) {
        self.gamesearchresult = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint64 searchid = 2;

    pub fn searchid(&self) -> u64 {
        self.searchid.unwrap_or(0)
    }

    pub fn clear_searchid(&mut self) {
        self.searchid = ::std::option::Option::None;
    }

    pub fn has_searchid(&self) -> bool {
        self.searchid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_searchid(&mut self, v: u64) {
        self.searchid = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_time_estimate = 3;

    pub fn seconds_time_estimate(&self) -> u32 {
        self.seconds_time_estimate.unwrap_or(0)
    }

    pub fn clear_seconds_time_estimate(&mut self) {
        self.seconds_time_estimate = ::std::option::Option::None;
    }

    pub fn has_seconds_time_estimate(&self) -> bool {
        self.seconds_time_estimate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_time_estimate(&mut self, v: u32) {
        self.seconds_time_estimate = ::std::option::Option::Some(v);
    }

    // optional uint32 poll_frequency = 4;

    pub fn poll_frequency(&self) -> u32 {
        self.poll_frequency.unwrap_or(0)
    }

    pub fn clear_poll_frequency(&mut self) {
        self.poll_frequency = ::std::option::Option::None;
    }

    pub fn has_poll_frequency(&self) -> bool {
        self.poll_frequency.is_some()
    }

    // Param is passed by value, moved
    pub fn set_poll_frequency(&mut self, v: u32) {
        self.poll_frequency = ::std::option::Option::Some(v);
    }

    // optional uint32 count_searching = 5;

    pub fn count_searching(&self) -> u32 {
        self.count_searching.unwrap_or(0)
    }

    pub fn clear_count_searching(&mut self) {
        self.count_searching = ::std::option::Option::None;
    }

    pub fn has_count_searching(&self) -> bool {
        self.count_searching.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count_searching(&mut self, v: u32) {
        self.count_searching = ::std::option::Option::Some(v);
    }

    // optional uint32 players_in_match = 6;

    pub fn players_in_match(&self) -> u32 {
        self.players_in_match.unwrap_or(0)
    }

    pub fn clear_players_in_match(&mut self) {
        self.players_in_match = ::std::option::Option::None;
    }

    pub fn has_players_in_match(&self) -> bool {
        self.players_in_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_players_in_match(&mut self, v: u32) {
        self.players_in_match = ::std::option::Option::Some(v);
    }

    // optional uint32 players_accepted = 7;

    pub fn players_accepted(&self) -> u32 {
        self.players_accepted.unwrap_or(0)
    }

    pub fn clear_players_accepted(&mut self) {
        self.players_accepted = ::std::option::Option::None;
    }

    pub fn has_players_accepted(&self) -> bool {
        self.players_accepted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_players_accepted(&mut self, v: u32) {
        self.players_accepted = ::std::option::Option::Some(v);
    }

    // optional string connect_string = 9;

    pub fn connect_string(&self) -> &str {
        match self.connect_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_connect_string(&mut self) {
        self.connect_string = ::std::option::Option::None;
    }

    pub fn has_connect_string(&self) -> bool {
        self.connect_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connect_string(&mut self, v: ::std::string::String) {
        self.connect_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connect_string(&mut self) -> &mut ::std::string::String {
        if self.connect_string.is_none() {
            self.connect_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.connect_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_connect_string(&mut self) -> ::std::string::String {
        self.connect_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 steamidhost = 10;

    pub fn steamidhost(&self) -> u64 {
        self.steamidhost.unwrap_or(0)
    }

    pub fn clear_steamidhost(&mut self) {
        self.steamidhost = ::std::option::Option::None;
    }

    pub fn has_steamidhost(&self) -> bool {
        self.steamidhost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamidhost(&mut self, v: u64) {
        self.steamidhost = ::std::option::Option::Some(v);
    }

    // optional uint32 rtime_match_made = 11;

    pub fn rtime_match_made(&self) -> u32 {
        self.rtime_match_made.unwrap_or(0)
    }

    pub fn clear_rtime_match_made(&mut self) {
        self.rtime_match_made = ::std::option::Option::None;
    }

    pub fn has_rtime_match_made(&self) -> bool {
        self.rtime_match_made.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime_match_made(&mut self, v: u32) {
        self.rtime_match_made = ::std::option::Option::Some(v);
    }

    // optional uint32 rtime_now = 12;

    pub fn rtime_now(&self) -> u32 {
        self.rtime_now.unwrap_or(0)
    }

    pub fn clear_rtime_now(&mut self) {
        self.rtime_now = ::std::option::Option::None;
    }

    pub fn has_rtime_now(&self) -> bool {
        self.rtime_now.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime_now(&mut self, v: u32) {
        self.rtime_now = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_canceled_search = 13;

    pub fn steamid_canceled_search(&self) -> u64 {
        self.steamid_canceled_search.unwrap_or(0)
    }

    pub fn clear_steamid_canceled_search(&mut self) {
        self.steamid_canceled_search = ::std::option::Option::None;
    }

    pub fn has_steamid_canceled_search(&self) -> bool {
        self.steamid_canceled_search.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_canceled_search(&mut self, v: u64) {
        self.steamid_canceled_search = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gamesearchresult",
            |m: &CQueuedMatchmaking_SearchForGame_Response| { &m.gamesearchresult },
            |m: &mut CQueuedMatchmaking_SearchForGame_Response| { &mut m.gamesearchresult },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "searchid",
            |m: &CQueuedMatchmaking_SearchForGame_Response| { &m.searchid },
            |m: &mut CQueuedMatchmaking_SearchForGame_Response| { &mut m.searchid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_time_estimate",
            |m: &CQueuedMatchmaking_SearchForGame_Response| { &m.seconds_time_estimate },
            |m: &mut CQueuedMatchmaking_SearchForGame_Response| { &mut m.seconds_time_estimate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "poll_frequency",
            |m: &CQueuedMatchmaking_SearchForGame_Response| { &m.poll_frequency },
            |m: &mut CQueuedMatchmaking_SearchForGame_Response| { &mut m.poll_frequency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "count_searching",
            |m: &CQueuedMatchmaking_SearchForGame_Response| { &m.count_searching },
            |m: &mut CQueuedMatchmaking_SearchForGame_Response| { &mut m.count_searching },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "players_in_match",
            |m: &CQueuedMatchmaking_SearchForGame_Response| { &m.players_in_match },
            |m: &mut CQueuedMatchmaking_SearchForGame_Response| { &mut m.players_in_match },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "players_accepted",
            |m: &CQueuedMatchmaking_SearchForGame_Response| { &m.players_accepted },
            |m: &mut CQueuedMatchmaking_SearchForGame_Response| { &mut m.players_accepted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connect_string",
            |m: &CQueuedMatchmaking_SearchForGame_Response| { &m.connect_string },
            |m: &mut CQueuedMatchmaking_SearchForGame_Response| { &mut m.connect_string },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamidhost",
            |m: &CQueuedMatchmaking_SearchForGame_Response| { &m.steamidhost },
            |m: &mut CQueuedMatchmaking_SearchForGame_Response| { &mut m.steamidhost },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rtime_match_made",
            |m: &CQueuedMatchmaking_SearchForGame_Response| { &m.rtime_match_made },
            |m: &mut CQueuedMatchmaking_SearchForGame_Response| { &mut m.rtime_match_made },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rtime_now",
            |m: &CQueuedMatchmaking_SearchForGame_Response| { &m.rtime_now },
            |m: &mut CQueuedMatchmaking_SearchForGame_Response| { &mut m.rtime_now },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_canceled_search",
            |m: &CQueuedMatchmaking_SearchForGame_Response| { &m.steamid_canceled_search },
            |m: &mut CQueuedMatchmaking_SearchForGame_Response| { &mut m.steamid_canceled_search },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CQueuedMatchmaking_SearchForGame_Response>(
            "CQueuedMatchmaking_SearchForGame_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CQueuedMatchmaking_SearchForGame_Response {
    const NAME: &'static str = "CQueuedMatchmaking_SearchForGame_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gamesearchresult = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.searchid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.seconds_time_estimate = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.poll_frequency = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.count_searching = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.players_in_match = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.players_accepted = ::std::option::Option::Some(is.read_uint32()?);
                },
                74 => {
                    self.connect_string = ::std::option::Option::Some(is.read_string()?);
                },
                81 => {
                    self.steamidhost = ::std::option::Option::Some(is.read_fixed64()?);
                },
                88 => {
                    self.rtime_match_made = ::std::option::Option::Some(is.read_uint32()?);
                },
                96 => {
                    self.rtime_now = ::std::option::Option::Some(is.read_uint32()?);
                },
                105 => {
                    self.steamid_canceled_search = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gamesearchresult {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.searchid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.seconds_time_estimate {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.poll_frequency {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.count_searching {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.players_in_match {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.players_accepted {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.connect_string.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.steamidhost {
            my_size += 1 + 8;
        }
        if let Some(v) = self.rtime_match_made {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.rtime_now {
            my_size += ::protobuf::rt::uint32_size(12, v);
        }
        if let Some(v) = self.steamid_canceled_search {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.gamesearchresult {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.searchid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.seconds_time_estimate {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.poll_frequency {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.count_searching {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.players_in_match {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.players_accepted {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.connect_string.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.steamidhost {
            os.write_fixed64(10, v)?;
        }
        if let Some(v) = self.rtime_match_made {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.rtime_now {
            os.write_uint32(12, v)?;
        }
        if let Some(v) = self.steamid_canceled_search {
            os.write_fixed64(13, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CQueuedMatchmaking_SearchForGame_Response {
        CQueuedMatchmaking_SearchForGame_Response::new()
    }

    fn clear(&mut self) {
        self.gamesearchresult = ::std::option::Option::None;
        self.searchid = ::std::option::Option::None;
        self.seconds_time_estimate = ::std::option::Option::None;
        self.poll_frequency = ::std::option::Option::None;
        self.count_searching = ::std::option::Option::None;
        self.players_in_match = ::std::option::Option::None;
        self.players_accepted = ::std::option::Option::None;
        self.connect_string = ::std::option::Option::None;
        self.steamidhost = ::std::option::Option::None;
        self.rtime_match_made = ::std::option::Option::None;
        self.rtime_now = ::std::option::Option::None;
        self.steamid_canceled_search = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CQueuedMatchmaking_SearchForGame_Response {
        static instance: CQueuedMatchmaking_SearchForGame_Response = CQueuedMatchmaking_SearchForGame_Response {
            gamesearchresult: ::std::option::Option::None,
            searchid: ::std::option::Option::None,
            seconds_time_estimate: ::std::option::Option::None,
            poll_frequency: ::std::option::Option::None,
            count_searching: ::std::option::Option::None,
            players_in_match: ::std::option::Option::None,
            players_accepted: ::std::option::Option::None,
            connect_string: ::std::option::Option::None,
            steamidhost: ::std::option::Option::None,
            rtime_match_made: ::std::option::Option::None,
            rtime_now: ::std::option::Option::None,
            steamid_canceled_search: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CQueuedMatchmaking_SearchForGame_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CQueuedMatchmaking_SearchForGame_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CQueuedMatchmaking_SearchForGame_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CQueuedMatchmaking_SearchForGame_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CQueuedMatchmakingGameHost_SearchForPlayers_Request {
    // message fields
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Request.action)
    pub action: ::std::option::Option<::protobuf::EnumOrUnknown<EGameSearchAction>>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Request.params)
    pub params: ::std::vec::Vec<GameSearchParam>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Request.player_min)
    pub player_min: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Request.player_max)
    pub player_max: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Request.player_max_team_size)
    pub player_max_team_size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Request.connection_string)
    pub connection_string: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Request.searchid)
    pub searchid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CQueuedMatchmakingGameHost_SearchForPlayers_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CQueuedMatchmakingGameHost_SearchForPlayers_Request {
    fn default() -> &'a CQueuedMatchmakingGameHost_SearchForPlayers_Request {
        <CQueuedMatchmakingGameHost_SearchForPlayers_Request as ::protobuf::Message>::default_instance()
    }
}

impl CQueuedMatchmakingGameHost_SearchForPlayers_Request {
    pub fn new() -> CQueuedMatchmakingGameHost_SearchForPlayers_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional .EGameSearchAction action = 2;

    pub fn action(&self) -> EGameSearchAction {
        match self.action {
            Some(e) => e.enum_value_or(EGameSearchAction::k_EGameSearchAction_None),
            None => EGameSearchAction::k_EGameSearchAction_None,
        }
    }

    pub fn clear_action(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_action(&self) -> bool {
        self.action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: EGameSearchAction) {
        self.action = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 player_min = 4;

    pub fn player_min(&self) -> u32 {
        self.player_min.unwrap_or(0)
    }

    pub fn clear_player_min(&mut self) {
        self.player_min = ::std::option::Option::None;
    }

    pub fn has_player_min(&self) -> bool {
        self.player_min.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_min(&mut self, v: u32) {
        self.player_min = ::std::option::Option::Some(v);
    }

    // optional uint32 player_max = 5;

    pub fn player_max(&self) -> u32 {
        self.player_max.unwrap_or(0)
    }

    pub fn clear_player_max(&mut self) {
        self.player_max = ::std::option::Option::None;
    }

    pub fn has_player_max(&self) -> bool {
        self.player_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_max(&mut self, v: u32) {
        self.player_max = ::std::option::Option::Some(v);
    }

    // optional uint32 player_max_team_size = 6;

    pub fn player_max_team_size(&self) -> u32 {
        self.player_max_team_size.unwrap_or(0)
    }

    pub fn clear_player_max_team_size(&mut self) {
        self.player_max_team_size = ::std::option::Option::None;
    }

    pub fn has_player_max_team_size(&self) -> bool {
        self.player_max_team_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_max_team_size(&mut self, v: u32) {
        self.player_max_team_size = ::std::option::Option::Some(v);
    }

    // optional string connection_string = 7;

    pub fn connection_string(&self) -> &str {
        match self.connection_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_connection_string(&mut self) {
        self.connection_string = ::std::option::Option::None;
    }

    pub fn has_connection_string(&self) -> bool {
        self.connection_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_string(&mut self, v: ::std::string::String) {
        self.connection_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_string(&mut self) -> &mut ::std::string::String {
        if self.connection_string.is_none() {
            self.connection_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.connection_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_connection_string(&mut self) -> ::std::string::String {
        self.connection_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 searchid = 8;

    pub fn searchid(&self) -> u64 {
        self.searchid.unwrap_or(0)
    }

    pub fn clear_searchid(&mut self) {
        self.searchid = ::std::option::Option::None;
    }

    pub fn has_searchid(&self) -> bool {
        self.searchid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_searchid(&mut self, v: u64) {
        self.searchid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &m.appid },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "action",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &m.action },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &mut m.action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "params",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &m.params },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &mut m.params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_min",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &m.player_min },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &mut m.player_min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_max",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &m.player_max },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &mut m.player_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_max_team_size",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &m.player_max_team_size },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &mut m.player_max_team_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_string",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &m.connection_string },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &mut m.connection_string },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "searchid",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &m.searchid },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Request| { &mut m.searchid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CQueuedMatchmakingGameHost_SearchForPlayers_Request>(
            "CQueuedMatchmakingGameHost_SearchForPlayers_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CQueuedMatchmakingGameHost_SearchForPlayers_Request {
    const NAME: &'static str = "CQueuedMatchmakingGameHost_SearchForPlayers_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.action = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                26 => {
                    self.params.push(is.read_message()?);
                },
                32 => {
                    self.player_min = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.player_max = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.player_max_team_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.connection_string = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.searchid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.action {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        for value in &self.params {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.player_min {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.player_max {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.player_max_team_size {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.connection_string.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.searchid {
            my_size += ::protobuf::rt::uint64_size(8, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.action {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.params {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.player_min {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.player_max {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.player_max_team_size {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.connection_string.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.searchid {
            os.write_uint64(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CQueuedMatchmakingGameHost_SearchForPlayers_Request {
        CQueuedMatchmakingGameHost_SearchForPlayers_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.params.clear();
        self.player_min = ::std::option::Option::None;
        self.player_max = ::std::option::Option::None;
        self.player_max_team_size = ::std::option::Option::None;
        self.connection_string = ::std::option::Option::None;
        self.searchid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CQueuedMatchmakingGameHost_SearchForPlayers_Request {
        static instance: CQueuedMatchmakingGameHost_SearchForPlayers_Request = CQueuedMatchmakingGameHost_SearchForPlayers_Request {
            appid: ::std::option::Option::None,
            action: ::std::option::Option::None,
            params: ::std::vec::Vec::new(),
            player_min: ::std::option::Option::None,
            player_max: ::std::option::Option::None,
            player_max_team_size: ::std::option::Option::None,
            connection_string: ::std::option::Option::None,
            searchid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CQueuedMatchmakingGameHost_SearchForPlayers_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CQueuedMatchmakingGameHost_SearchForPlayers_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CQueuedMatchmakingGameHost_SearchForPlayers_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CQueuedMatchmakingGameHost_SearchForPlayers_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:PlayerFound)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerFound {
    // message fields
    // @@protoc_insertion_point(field:PlayerFound.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:PlayerFound.action)
    pub action: ::std::option::Option<::protobuf::EnumOrUnknown<EGameSearchAction>>,
    // @@protoc_insertion_point(field:PlayerFound.params)
    pub params: ::std::vec::Vec<GameSearchParam>,
    // @@protoc_insertion_point(field:PlayerFound.team_number)
    pub team_number: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerFound.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerFound {
    fn default() -> &'a PlayerFound {
        <PlayerFound as ::protobuf::Message>::default_instance()
    }
}

impl PlayerFound {
    pub fn new() -> PlayerFound {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional .EGameSearchAction action = 2;

    pub fn action(&self) -> EGameSearchAction {
        match self.action {
            Some(e) => e.enum_value_or(EGameSearchAction::k_EGameSearchAction_None),
            None => EGameSearchAction::k_EGameSearchAction_None,
        }
    }

    pub fn clear_action(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_action(&self) -> bool {
        self.action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: EGameSearchAction) {
        self.action = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 team_number = 4;

    pub fn team_number(&self) -> u32 {
        self.team_number.unwrap_or(0)
    }

    pub fn clear_team_number(&mut self) {
        self.team_number = ::std::option::Option::None;
    }

    pub fn has_team_number(&self) -> bool {
        self.team_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_number(&mut self, v: u32) {
        self.team_number = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &PlayerFound| { &m.steamid },
            |m: &mut PlayerFound| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "action",
            |m: &PlayerFound| { &m.action },
            |m: &mut PlayerFound| { &mut m.action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "params",
            |m: &PlayerFound| { &m.params },
            |m: &mut PlayerFound| { &mut m.params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "team_number",
            |m: &PlayerFound| { &m.team_number },
            |m: &mut PlayerFound| { &mut m.team_number },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerFound>(
            "PlayerFound",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerFound {
    const NAME: &'static str = "PlayerFound";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.action = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                26 => {
                    self.params.push(is.read_message()?);
                },
                32 => {
                    self.team_number = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.action {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        for value in &self.params {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.team_number {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.action {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.params {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.team_number {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerFound {
        PlayerFound::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.params.clear();
        self.team_number = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerFound {
        static instance: PlayerFound = PlayerFound {
            steamid: ::std::option::Option::None,
            action: ::std::option::Option::None,
            params: ::std::vec::Vec::new(),
            team_number: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerFound {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerFound").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerFound {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerFound {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CQueuedMatchmakingGameHost_SearchForPlayers_Response {
    // message fields
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Response.gamesearchresult)
    pub gamesearchresult: ::std::option::Option<::protobuf::EnumOrUnknown<EGameSearchResult>>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Response.searchid)
    pub searchid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Response.poll_frequency)
    pub poll_frequency: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Response.matchid)
    pub matchid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Response.players)
    pub players: ::std::vec::Vec<PlayerFound>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Response.rtime_match_made)
    pub rtime_match_made: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SearchForPlayers_Response.rtime_now)
    pub rtime_now: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CQueuedMatchmakingGameHost_SearchForPlayers_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CQueuedMatchmakingGameHost_SearchForPlayers_Response {
    fn default() -> &'a CQueuedMatchmakingGameHost_SearchForPlayers_Response {
        <CQueuedMatchmakingGameHost_SearchForPlayers_Response as ::protobuf::Message>::default_instance()
    }
}

impl CQueuedMatchmakingGameHost_SearchForPlayers_Response {
    pub fn new() -> CQueuedMatchmakingGameHost_SearchForPlayers_Response {
        ::std::default::Default::default()
    }

    // optional .EGameSearchResult gamesearchresult = 1;

    pub fn gamesearchresult(&self) -> EGameSearchResult {
        match self.gamesearchresult {
            Some(e) => e.enum_value_or(EGameSearchResult::k_EGameSearchResult_Invalid),
            None => EGameSearchResult::k_EGameSearchResult_Invalid,
        }
    }

    pub fn clear_gamesearchresult(&mut self) {
        self.gamesearchresult = ::std::option::Option::None;
    }

    pub fn has_gamesearchresult(&self) -> bool {
        self.gamesearchresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gamesearchresult(&mut self, v: EGameSearchResult) {
        self.gamesearchresult = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint64 searchid = 2;

    pub fn searchid(&self) -> u64 {
        self.searchid.unwrap_or(0)
    }

    pub fn clear_searchid(&mut self) {
        self.searchid = ::std::option::Option::None;
    }

    pub fn has_searchid(&self) -> bool {
        self.searchid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_searchid(&mut self, v: u64) {
        self.searchid = ::std::option::Option::Some(v);
    }

    // optional uint32 poll_frequency = 3;

    pub fn poll_frequency(&self) -> u32 {
        self.poll_frequency.unwrap_or(0)
    }

    pub fn clear_poll_frequency(&mut self) {
        self.poll_frequency = ::std::option::Option::None;
    }

    pub fn has_poll_frequency(&self) -> bool {
        self.poll_frequency.is_some()
    }

    // Param is passed by value, moved
    pub fn set_poll_frequency(&mut self, v: u32) {
        self.poll_frequency = ::std::option::Option::Some(v);
    }

    // optional uint64 matchid = 4;

    pub fn matchid(&self) -> u64 {
        self.matchid.unwrap_or(0)
    }

    pub fn clear_matchid(&mut self) {
        self.matchid = ::std::option::Option::None;
    }

    pub fn has_matchid(&self) -> bool {
        self.matchid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matchid(&mut self, v: u64) {
        self.matchid = ::std::option::Option::Some(v);
    }

    // optional uint32 rtime_match_made = 6;

    pub fn rtime_match_made(&self) -> u32 {
        self.rtime_match_made.unwrap_or(0)
    }

    pub fn clear_rtime_match_made(&mut self) {
        self.rtime_match_made = ::std::option::Option::None;
    }

    pub fn has_rtime_match_made(&self) -> bool {
        self.rtime_match_made.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime_match_made(&mut self, v: u32) {
        self.rtime_match_made = ::std::option::Option::Some(v);
    }

    // optional uint32 rtime_now = 7;

    pub fn rtime_now(&self) -> u32 {
        self.rtime_now.unwrap_or(0)
    }

    pub fn clear_rtime_now(&mut self) {
        self.rtime_now = ::std::option::Option::None;
    }

    pub fn has_rtime_now(&self) -> bool {
        self.rtime_now.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime_now(&mut self, v: u32) {
        self.rtime_now = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gamesearchresult",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &m.gamesearchresult },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &mut m.gamesearchresult },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "searchid",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &m.searchid },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &mut m.searchid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "poll_frequency",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &m.poll_frequency },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &mut m.poll_frequency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "matchid",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &m.matchid },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &mut m.matchid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "players",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &m.players },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &mut m.players },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rtime_match_made",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &m.rtime_match_made },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &mut m.rtime_match_made },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rtime_now",
            |m: &CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &m.rtime_now },
            |m: &mut CQueuedMatchmakingGameHost_SearchForPlayers_Response| { &mut m.rtime_now },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CQueuedMatchmakingGameHost_SearchForPlayers_Response>(
            "CQueuedMatchmakingGameHost_SearchForPlayers_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CQueuedMatchmakingGameHost_SearchForPlayers_Response {
    const NAME: &'static str = "CQueuedMatchmakingGameHost_SearchForPlayers_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gamesearchresult = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.searchid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.poll_frequency = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.matchid = ::std::option::Option::Some(is.read_uint64()?);
                },
                42 => {
                    self.players.push(is.read_message()?);
                },
                48 => {
                    self.rtime_match_made = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.rtime_now = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gamesearchresult {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.searchid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.poll_frequency {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.matchid {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        for value in &self.players {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.rtime_match_made {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.rtime_now {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.gamesearchresult {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.searchid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.poll_frequency {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.matchid {
            os.write_uint64(4, v)?;
        }
        for v in &self.players {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.rtime_match_made {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.rtime_now {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CQueuedMatchmakingGameHost_SearchForPlayers_Response {
        CQueuedMatchmakingGameHost_SearchForPlayers_Response::new()
    }

    fn clear(&mut self) {
        self.gamesearchresult = ::std::option::Option::None;
        self.searchid = ::std::option::Option::None;
        self.poll_frequency = ::std::option::Option::None;
        self.matchid = ::std::option::Option::None;
        self.players.clear();
        self.rtime_match_made = ::std::option::Option::None;
        self.rtime_now = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CQueuedMatchmakingGameHost_SearchForPlayers_Response {
        static instance: CQueuedMatchmakingGameHost_SearchForPlayers_Response = CQueuedMatchmakingGameHost_SearchForPlayers_Response {
            gamesearchresult: ::std::option::Option::None,
            searchid: ::std::option::Option::None,
            poll_frequency: ::std::option::Option::None,
            matchid: ::std::option::Option::None,
            players: ::std::vec::Vec::new(),
            rtime_match_made: ::std::option::Option::None,
            rtime_now: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CQueuedMatchmakingGameHost_SearchForPlayers_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CQueuedMatchmakingGameHost_SearchForPlayers_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CQueuedMatchmakingGameHost_SearchForPlayers_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CQueuedMatchmakingGameHost_SearchForPlayers_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:PlayerResult)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayerResult {
    // message fields
    // @@protoc_insertion_point(field:PlayerResult.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:PlayerResult.value)
    pub value: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerResult {
    fn default() -> &'a PlayerResult {
        <PlayerResult as ::protobuf::Message>::default_instance()
    }
}

impl PlayerResult {
    pub fn new() -> PlayerResult {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 value = 2;

    pub fn value(&self) -> u32 {
        self.value.unwrap_or(0)
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u32) {
        self.value = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &PlayerResult| { &m.steamid },
            |m: &mut PlayerResult| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &PlayerResult| { &m.value },
            |m: &mut PlayerResult| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerResult>(
            "PlayerResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerResult {
    const NAME: &'static str = "PlayerResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.value = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.value {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.value {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerResult {
        PlayerResult::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerResult {
        static instance: PlayerResult = PlayerResult {
            steamid: ::std::option::Option::None,
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CQueuedMatchmakingGameHost_SubmitPlayerResult_Request {
    // message fields
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.matchid)
    pub matchid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.player_results)
    pub player_results: ::std::vec::Vec<PlayerResult>,
    // special fields
    // @@protoc_insertion_point(special_field:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CQueuedMatchmakingGameHost_SubmitPlayerResult_Request {
    fn default() -> &'a CQueuedMatchmakingGameHost_SubmitPlayerResult_Request {
        <CQueuedMatchmakingGameHost_SubmitPlayerResult_Request as ::protobuf::Message>::default_instance()
    }
}

impl CQueuedMatchmakingGameHost_SubmitPlayerResult_Request {
    pub fn new() -> CQueuedMatchmakingGameHost_SubmitPlayerResult_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 matchid = 2;

    pub fn matchid(&self) -> u64 {
        self.matchid.unwrap_or(0)
    }

    pub fn clear_matchid(&mut self) {
        self.matchid = ::std::option::Option::None;
    }

    pub fn has_matchid(&self) -> bool {
        self.matchid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matchid(&mut self, v: u64) {
        self.matchid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CQueuedMatchmakingGameHost_SubmitPlayerResult_Request| { &m.appid },
            |m: &mut CQueuedMatchmakingGameHost_SubmitPlayerResult_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "matchid",
            |m: &CQueuedMatchmakingGameHost_SubmitPlayerResult_Request| { &m.matchid },
            |m: &mut CQueuedMatchmakingGameHost_SubmitPlayerResult_Request| { &mut m.matchid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "player_results",
            |m: &CQueuedMatchmakingGameHost_SubmitPlayerResult_Request| { &m.player_results },
            |m: &mut CQueuedMatchmakingGameHost_SubmitPlayerResult_Request| { &mut m.player_results },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CQueuedMatchmakingGameHost_SubmitPlayerResult_Request>(
            "CQueuedMatchmakingGameHost_SubmitPlayerResult_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CQueuedMatchmakingGameHost_SubmitPlayerResult_Request {
    const NAME: &'static str = "CQueuedMatchmakingGameHost_SubmitPlayerResult_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.matchid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.player_results.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.matchid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        for value in &self.player_results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.matchid {
            os.write_uint64(2, v)?;
        }
        for v in &self.player_results {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CQueuedMatchmakingGameHost_SubmitPlayerResult_Request {
        CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.matchid = ::std::option::Option::None;
        self.player_results.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CQueuedMatchmakingGameHost_SubmitPlayerResult_Request {
        static instance: CQueuedMatchmakingGameHost_SubmitPlayerResult_Request = CQueuedMatchmakingGameHost_SubmitPlayerResult_Request {
            appid: ::std::option::Option::None,
            matchid: ::std::option::Option::None,
            player_results: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CQueuedMatchmakingGameHost_SubmitPlayerResult_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CQueuedMatchmakingGameHost_SubmitPlayerResult_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CQueuedMatchmakingGameHost_SubmitPlayerResult_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CQueuedMatchmakingGameHost_SubmitPlayerResult_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CQueuedMatchmakingGameHost_SubmitPlayerResult_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CQueuedMatchmakingGameHost_SubmitPlayerResult_Response {
    fn default() -> &'a CQueuedMatchmakingGameHost_SubmitPlayerResult_Response {
        <CQueuedMatchmakingGameHost_SubmitPlayerResult_Response as ::protobuf::Message>::default_instance()
    }
}

impl CQueuedMatchmakingGameHost_SubmitPlayerResult_Response {
    pub fn new() -> CQueuedMatchmakingGameHost_SubmitPlayerResult_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CQueuedMatchmakingGameHost_SubmitPlayerResult_Response>(
            "CQueuedMatchmakingGameHost_SubmitPlayerResult_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CQueuedMatchmakingGameHost_SubmitPlayerResult_Response {
    const NAME: &'static str = "CQueuedMatchmakingGameHost_SubmitPlayerResult_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CQueuedMatchmakingGameHost_SubmitPlayerResult_Response {
        CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CQueuedMatchmakingGameHost_SubmitPlayerResult_Response {
        static instance: CQueuedMatchmakingGameHost_SubmitPlayerResult_Response = CQueuedMatchmakingGameHost_SubmitPlayerResult_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CQueuedMatchmakingGameHost_SubmitPlayerResult_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CQueuedMatchmakingGameHost_SubmitPlayerResult_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CQueuedMatchmakingGameHost_SubmitPlayerResult_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CQueuedMatchmakingGameHost_SubmitPlayerResult_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CQueuedMatchmakingGameHost_EndGame_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CQueuedMatchmakingGameHost_EndGame_Request {
    // message fields
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_EndGame_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQueuedMatchmakingGameHost_EndGame_Request.matchid)
    pub matchid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CQueuedMatchmakingGameHost_EndGame_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CQueuedMatchmakingGameHost_EndGame_Request {
    fn default() -> &'a CQueuedMatchmakingGameHost_EndGame_Request {
        <CQueuedMatchmakingGameHost_EndGame_Request as ::protobuf::Message>::default_instance()
    }
}

impl CQueuedMatchmakingGameHost_EndGame_Request {
    pub fn new() -> CQueuedMatchmakingGameHost_EndGame_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 matchid = 2;

    pub fn matchid(&self) -> u64 {
        self.matchid.unwrap_or(0)
    }

    pub fn clear_matchid(&mut self) {
        self.matchid = ::std::option::Option::None;
    }

    pub fn has_matchid(&self) -> bool {
        self.matchid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matchid(&mut self, v: u64) {
        self.matchid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CQueuedMatchmakingGameHost_EndGame_Request| { &m.appid },
            |m: &mut CQueuedMatchmakingGameHost_EndGame_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "matchid",
            |m: &CQueuedMatchmakingGameHost_EndGame_Request| { &m.matchid },
            |m: &mut CQueuedMatchmakingGameHost_EndGame_Request| { &mut m.matchid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CQueuedMatchmakingGameHost_EndGame_Request>(
            "CQueuedMatchmakingGameHost_EndGame_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CQueuedMatchmakingGameHost_EndGame_Request {
    const NAME: &'static str = "CQueuedMatchmakingGameHost_EndGame_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.matchid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.matchid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.matchid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CQueuedMatchmakingGameHost_EndGame_Request {
        CQueuedMatchmakingGameHost_EndGame_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.matchid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CQueuedMatchmakingGameHost_EndGame_Request {
        static instance: CQueuedMatchmakingGameHost_EndGame_Request = CQueuedMatchmakingGameHost_EndGame_Request {
            appid: ::std::option::Option::None,
            matchid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CQueuedMatchmakingGameHost_EndGame_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CQueuedMatchmakingGameHost_EndGame_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CQueuedMatchmakingGameHost_EndGame_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CQueuedMatchmakingGameHost_EndGame_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CQueuedMatchmakingGameHost_EndGame_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CQueuedMatchmakingGameHost_EndGame_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CQueuedMatchmakingGameHost_EndGame_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CQueuedMatchmakingGameHost_EndGame_Response {
    fn default() -> &'a CQueuedMatchmakingGameHost_EndGame_Response {
        <CQueuedMatchmakingGameHost_EndGame_Response as ::protobuf::Message>::default_instance()
    }
}

impl CQueuedMatchmakingGameHost_EndGame_Response {
    pub fn new() -> CQueuedMatchmakingGameHost_EndGame_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CQueuedMatchmakingGameHost_EndGame_Response>(
            "CQueuedMatchmakingGameHost_EndGame_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CQueuedMatchmakingGameHost_EndGame_Response {
    const NAME: &'static str = "CQueuedMatchmakingGameHost_EndGame_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CQueuedMatchmakingGameHost_EndGame_Response {
        CQueuedMatchmakingGameHost_EndGame_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CQueuedMatchmakingGameHost_EndGame_Response {
        static instance: CQueuedMatchmakingGameHost_EndGame_Response = CQueuedMatchmakingGameHost_EndGame_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CQueuedMatchmakingGameHost_EndGame_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CQueuedMatchmakingGameHost_EndGame_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CQueuedMatchmakingGameHost_EndGame_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CQueuedMatchmakingGameHost_EndGame_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGameSearchAction)
pub enum EGameSearchAction {
    // @@protoc_insertion_point(enum_value:EGameSearchAction.k_EGameSearchAction_None)
    k_EGameSearchAction_None = 0,
    // @@protoc_insertion_point(enum_value:EGameSearchAction.k_EGameSearchAction_Accept)
    k_EGameSearchAction_Accept = 1,
    // @@protoc_insertion_point(enum_value:EGameSearchAction.k_EGameSearchAction_Decline)
    k_EGameSearchAction_Decline = 2,
    // @@protoc_insertion_point(enum_value:EGameSearchAction.k_EGameSearchAction_Cancel)
    k_EGameSearchAction_Cancel = 3,
}

impl ::protobuf::Enum for EGameSearchAction {
    const NAME: &'static str = "EGameSearchAction";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGameSearchAction> {
        match value {
            0 => ::std::option::Option::Some(EGameSearchAction::k_EGameSearchAction_None),
            1 => ::std::option::Option::Some(EGameSearchAction::k_EGameSearchAction_Accept),
            2 => ::std::option::Option::Some(EGameSearchAction::k_EGameSearchAction_Decline),
            3 => ::std::option::Option::Some(EGameSearchAction::k_EGameSearchAction_Cancel),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGameSearchAction> {
        match str {
            "k_EGameSearchAction_None" => ::std::option::Option::Some(EGameSearchAction::k_EGameSearchAction_None),
            "k_EGameSearchAction_Accept" => ::std::option::Option::Some(EGameSearchAction::k_EGameSearchAction_Accept),
            "k_EGameSearchAction_Decline" => ::std::option::Option::Some(EGameSearchAction::k_EGameSearchAction_Decline),
            "k_EGameSearchAction_Cancel" => ::std::option::Option::Some(EGameSearchAction::k_EGameSearchAction_Cancel),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGameSearchAction] = &[
        EGameSearchAction::k_EGameSearchAction_None,
        EGameSearchAction::k_EGameSearchAction_Accept,
        EGameSearchAction::k_EGameSearchAction_Decline,
        EGameSearchAction::k_EGameSearchAction_Cancel,
    ];
}

impl ::protobuf::EnumFull for EGameSearchAction {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGameSearchAction").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EGameSearchAction {
    fn default() -> Self {
        EGameSearchAction::k_EGameSearchAction_None
    }
}

impl EGameSearchAction {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGameSearchAction>("EGameSearchAction")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGameSearchResult)
pub enum EGameSearchResult {
    // @@protoc_insertion_point(enum_value:EGameSearchResult.k_EGameSearchResult_Invalid)
    k_EGameSearchResult_Invalid = 0,
    // @@protoc_insertion_point(enum_value:EGameSearchResult.k_EGameSearchResult_SearchInProgress)
    k_EGameSearchResult_SearchInProgress = 1,
    // @@protoc_insertion_point(enum_value:EGameSearchResult.k_EGameSearchResult_SearchFailedNoHosts)
    k_EGameSearchResult_SearchFailedNoHosts = 2,
    // @@protoc_insertion_point(enum_value:EGameSearchResult.k_EGameSearchResult_SearchGameFound)
    k_EGameSearchResult_SearchGameFound = 3,
    // @@protoc_insertion_point(enum_value:EGameSearchResult.k_EGameSearchResult_SearchCompleteAccepted)
    k_EGameSearchResult_SearchCompleteAccepted = 4,
    // @@protoc_insertion_point(enum_value:EGameSearchResult.k_EGameSearchResult_SearchCompleteDeclined)
    k_EGameSearchResult_SearchCompleteDeclined = 5,
    // @@protoc_insertion_point(enum_value:EGameSearchResult.k_EGameSearchResult_SearchCanceled)
    k_EGameSearchResult_SearchCanceled = 6,
}

impl ::protobuf::Enum for EGameSearchResult {
    const NAME: &'static str = "EGameSearchResult";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGameSearchResult> {
        match value {
            0 => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_Invalid),
            1 => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_SearchInProgress),
            2 => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_SearchFailedNoHosts),
            3 => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_SearchGameFound),
            4 => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_SearchCompleteAccepted),
            5 => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_SearchCompleteDeclined),
            6 => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_SearchCanceled),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGameSearchResult> {
        match str {
            "k_EGameSearchResult_Invalid" => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_Invalid),
            "k_EGameSearchResult_SearchInProgress" => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_SearchInProgress),
            "k_EGameSearchResult_SearchFailedNoHosts" => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_SearchFailedNoHosts),
            "k_EGameSearchResult_SearchGameFound" => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_SearchGameFound),
            "k_EGameSearchResult_SearchCompleteAccepted" => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_SearchCompleteAccepted),
            "k_EGameSearchResult_SearchCompleteDeclined" => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_SearchCompleteDeclined),
            "k_EGameSearchResult_SearchCanceled" => ::std::option::Option::Some(EGameSearchResult::k_EGameSearchResult_SearchCanceled),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGameSearchResult] = &[
        EGameSearchResult::k_EGameSearchResult_Invalid,
        EGameSearchResult::k_EGameSearchResult_SearchInProgress,
        EGameSearchResult::k_EGameSearchResult_SearchFailedNoHosts,
        EGameSearchResult::k_EGameSearchResult_SearchGameFound,
        EGameSearchResult::k_EGameSearchResult_SearchCompleteAccepted,
        EGameSearchResult::k_EGameSearchResult_SearchCompleteDeclined,
        EGameSearchResult::k_EGameSearchResult_SearchCanceled,
    ];
}

impl ::protobuf::EnumFull for EGameSearchResult {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGameSearchResult").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EGameSearchResult {
    fn default() -> Self {
        EGameSearchResult::k_EGameSearchResult_Invalid
    }
}

impl EGameSearchResult {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGameSearchResult>("EGameSearchResult")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#steammessages_qms.steamclient.proto\x1a,steammessages_unified_base.st\
    eamclient.proto\"B\n\x0fGameSearchParam\x12\x19\n\x08key_name\x18\x01\
    \x20\x01(\tR\x07keyName\x12\x14\n\x05value\x18\x02\x20\x03(\tR\x05value\
    \"\xae\x02\n(CQueuedMatchmaking_SearchForGame_Request\x12\x14\n\x05appid\
    \x18\x01\x20\x01(\rR\x05appid\x12D\n\x06action\x18\x02\x20\x01(\x0e2\x12\
    .EGameSearchAction:\x18k_EGameSearchAction_NoneR\x06action\x12(\n\x06par\
    ams\x18\x03\x20\x03(\x0b2\x10.GameSearchParamR\x06params\x12\x1d\n\nplay\
    er_min\x18\x04\x20\x01(\rR\tplayerMin\x12\x1d\n\nplayer_max\x18\x05\x20\
    \x01(\rR\tplayerMax\x12\"\n\x0csteamidlobby\x18\x06\x20\x01(\x06R\x0cste\
    amidlobby\x12\x1a\n\x08searchid\x18\x07\x20\x01(\x04R\x08searchid\"\xc5\
    \x04\n)CQueuedMatchmaking_SearchForGame_Response\x12[\n\x10gamesearchres\
    ult\x18\x01\x20\x01(\x0e2\x12.EGameSearchResult:\x1bk_EGameSearchResult_\
    InvalidR\x10gamesearchresult\x12\x1a\n\x08searchid\x18\x02\x20\x01(\x04R\
    \x08searchid\x122\n\x15seconds_time_estimate\x18\x03\x20\x01(\rR\x13seco\
    ndsTimeEstimate\x12%\n\x0epoll_frequency\x18\x04\x20\x01(\rR\rpollFreque\
    ncy\x12'\n\x0fcount_searching\x18\x05\x20\x01(\rR\x0ecountSearching\x12(\
    \n\x10players_in_match\x18\x06\x20\x01(\rR\x0eplayersInMatch\x12)\n\x10p\
    layers_accepted\x18\x07\x20\x01(\rR\x0fplayersAccepted\x12%\n\x0econnect\
    _string\x18\t\x20\x01(\tR\rconnectString\x12\x20\n\x0bsteamidhost\x18\n\
    \x20\x01(\x06R\x0bsteamidhost\x12(\n\x10rtime_match_made\x18\x0b\x20\x01\
    (\rR\x0ertimeMatchMade\x12\x1b\n\trtime_now\x18\x0c\x20\x01(\rR\x08rtime\
    Now\x126\n\x17steamid_canceled_search\x18\r\x20\x01(\x06R\x15steamidCanc\
    eledSearch\"\xf3\x02\n3CQueuedMatchmakingGameHost_SearchForPlayers_Reque\
    st\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12D\n\x06action\x18\
    \x02\x20\x01(\x0e2\x12.EGameSearchAction:\x18k_EGameSearchAction_NoneR\
    \x06action\x12(\n\x06params\x18\x03\x20\x03(\x0b2\x10.GameSearchParamR\
    \x06params\x12\x1d\n\nplayer_min\x18\x04\x20\x01(\rR\tplayerMin\x12\x1d\
    \n\nplayer_max\x18\x05\x20\x01(\rR\tplayerMax\x12/\n\x14player_max_team_\
    size\x18\x06\x20\x01(\rR\x11playerMaxTeamSize\x12+\n\x11connection_strin\
    g\x18\x07\x20\x01(\tR\x10connectionString\x12\x1a\n\x08searchid\x18\x08\
    \x20\x01(\x04R\x08searchid\"\xb8\x01\n\x0bPlayerFound\x12\x18\n\x07steam\
    id\x18\x01\x20\x01(\x06R\x07steamid\x12D\n\x06action\x18\x02\x20\x01(\
    \x0e2\x12.EGameSearchAction:\x18k_EGameSearchAction_NoneR\x06action\x12(\
    \n\x06params\x18\x03\x20\x03(\x0b2\x10.GameSearchParamR\x06params\x12\
    \x1f\n\x0bteam_number\x18\x04\x20\x01(\rR\nteamNumber\"\xdf\x02\n4CQueue\
    dMatchmakingGameHost_SearchForPlayers_Response\x12[\n\x10gamesearchresul\
    t\x18\x01\x20\x01(\x0e2\x12.EGameSearchResult:\x1bk_EGameSearchResult_In\
    validR\x10gamesearchresult\x12\x1a\n\x08searchid\x18\x02\x20\x01(\x04R\
    \x08searchid\x12%\n\x0epoll_frequency\x18\x03\x20\x01(\rR\rpollFrequency\
    \x12\x18\n\x07matchid\x18\x04\x20\x01(\x04R\x07matchid\x12&\n\x07players\
    \x18\x05\x20\x03(\x0b2\x0c.PlayerFoundR\x07players\x12(\n\x10rtime_match\
    _made\x18\x06\x20\x01(\rR\x0ertimeMatchMade\x12\x1b\n\trtime_now\x18\x07\
    \x20\x01(\rR\x08rtimeNow\">\n\x0cPlayerResult\x12\x18\n\x07steamid\x18\
    \x01\x20\x01(\x06R\x07steamid\x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05\
    value\"\x9d\x01\n5CQueuedMatchmakingGameHost_SubmitPlayerResult_Request\
    \x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\n\x07matchid\
    \x18\x02\x20\x01(\x04R\x07matchid\x124\n\x0eplayer_results\x18\x03\x20\
    \x03(\x0b2\r.PlayerResultR\rplayerResults\"8\n6CQueuedMatchmakingGameHos\
    t_SubmitPlayerResult_Response\"\\\n*CQueuedMatchmakingGameHost_EndGame_R\
    equest\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\n\x07matc\
    hid\x18\x02\x20\x01(\x04R\x07matchid\"-\n+CQueuedMatchmakingGameHost_End\
    Game_Response*\x92\x01\n\x11EGameSearchAction\x12\x1c\n\x18k_EGameSearch\
    Action_None\x10\0\x12\x1e\n\x1ak_EGameSearchAction_Accept\x10\x01\x12\
    \x1f\n\x1bk_EGameSearchAction_Decline\x10\x02\x12\x1e\n\x1ak_EGameSearch\
    Action_Cancel\x10\x03*\xbc\x02\n\x11EGameSearchResult\x12\x1f\n\x1bk_EGa\
    meSearchResult_Invalid\x10\0\x12(\n$k_EGameSearchResult_SearchInProgress\
    \x10\x01\x12+\n'k_EGameSearchResult_SearchFailedNoHosts\x10\x02\x12'\n#k\
    _EGameSearchResult_SearchGameFound\x10\x03\x12.\n*k_EGameSearchResult_Se\
    archCompleteAccepted\x10\x04\x12.\n*k_EGameSearchResult_SearchCompleteDe\
    clined\x10\x05\x12&\n\"k_EGameSearchResult_SearchCanceled\x10\x062\xb2\
    \x01\n\x11QueuedMatchmaking\x12}\n\rSearchForGame\x12).CQueuedMatchmakin\
    g_SearchForGame_Request\x1a*.CQueuedMatchmaking_SearchForGame_Response\"\
    \x15\x82\xb5\x18\x11Search\x20for\x20a\x20game\x1a\x1e\x82\xb5\x18\x1aQu\
    eued\x20matchmaking\x20service2\xeb\x03\n\x19QueuedMatchmakingGameHost\
    \x12\x95\x01\n\x10SearchForPlayers\x124.CQueuedMatchmakingGameHost_Searc\
    hForPlayers_Request\x1a5.CQueuedMatchmakingGameHost_SearchForPlayers_Res\
    ponse\"\x14\x82\xb5\x18\x10SearchForPlayers\x12\x9d\x01\n\x12SubmitPlaye\
    rResult\x126.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request\x1a7.\
    CQueuedMatchmakingGameHost_SubmitPlayerResult_Response\"\x16\x82\xb5\x18\
    \x12SubmitPlayerResult\x12q\n\x07EndGame\x12+.CQueuedMatchmakingGameHost\
    _EndGame_Request\x1a,.CQueuedMatchmakingGameHost_EndGame_Response\"\x0b\
    \x82\xb5\x18\x07EndGame\x1a#\x82\xb5\x18\x1fQueued\x20matchmaking\x20hos\
    t\x20serviceB\x03\x80\x01\x01J\x9e$\n\x06\x12\x04\0\0{\x01\n\t\n\x02\x03\
    \0\x12\x03\0\06\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\x10\x12\
    \x03\x02\0\"\n\n\n\x02\x05\0\x12\x04\x04\0\t\x01\n\n\n\x03\x05\0\x01\x12\
    \x03\x04\x05\x16\n\x0b\n\x04\x05\0\x02\0\x12\x03\x05\x08%\n\x0c\n\x05\
    \x05\0\x02\0\x01\x12\x03\x05\x08\x20\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\
    \x05#$\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x06\x08'\n\x0c\n\x05\x05\0\x02\
    \x01\x01\x12\x03\x06\x08\"\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x06%&\n\
    \x0b\n\x04\x05\0\x02\x02\x12\x03\x07\x08(\n\x0c\n\x05\x05\0\x02\x02\x01\
    \x12\x03\x07\x08#\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x07&'\n\x0b\n\
    \x04\x05\0\x02\x03\x12\x03\x08\x08'\n\x0c\n\x05\x05\0\x02\x03\x01\x12\
    \x03\x08\x08\"\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x08%&\n\n\n\x02\x05\
    \x01\x12\x04\x0b\0\x13\x01\n\n\n\x03\x05\x01\x01\x12\x03\x0b\x05\x16\n\
    \x0b\n\x04\x05\x01\x02\0\x12\x03\x0c\x08(\n\x0c\n\x05\x05\x01\x02\0\x01\
    \x12\x03\x0c\x08#\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x0c&'\n\x0b\n\
    \x04\x05\x01\x02\x01\x12\x03\r\x081\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\
    \x03\r\x08,\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\r/0\n\x0b\n\x04\x05\
    \x01\x02\x02\x12\x03\x0e\x084\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\
    \x0e\x08/\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x0e23\n\x0b\n\x04\x05\
    \x01\x02\x03\x12\x03\x0f\x080\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03\
    \x0f\x08+\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03\x0f./\n\x0b\n\x04\x05\
    \x01\x02\x04\x12\x03\x10\x087\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\x03\
    \x10\x082\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03\x1056\n\x0b\n\x04\x05\
    \x01\x02\x05\x12\x03\x11\x087\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\x03\
    \x11\x082\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\x03\x1156\n\x0b\n\x04\x05\
    \x01\x02\x06\x12\x03\x12\x08/\n\x0c\n\x05\x05\x01\x02\x06\x01\x12\x03\
    \x12\x08*\n\x0c\n\x05\x05\x01\x02\x06\x02\x12\x03\x12-.\n\n\n\x02\x04\0\
    \x12\x04\x15\0\x18\x01\n\n\n\x03\x04\0\x01\x12\x03\x15\x08\x17\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x16\x08%\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\
    \x16\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x16\x11\x17\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x16\x18\x20\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x16#$\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x17\x08\"\n\x0c\n\x05\x04\0\x02\
    \x01\x04\x12\x03\x17\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x17\
    \x11\x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x17\x18\x1d\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x17\x20!\n\n\n\x02\x04\x01\x12\x04\x1a\0\"\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\x1a\x080\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\x1b\x08\"\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x1b\x08\x10\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1b\x11\x17\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x1b\x18\x1d\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1b\x20\
    !\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x1c\x08T\n\x0c\n\x05\x04\x01\x02\
    \x01\x04\x12\x03\x1c\x08\x10\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x1c\
    \x11#\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1c$*\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x1c-.\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\x03\x1c/S\
    \n\x0c\n\x05\x04\x01\x02\x01\x07\x12\x03\x1c:R\n\x0b\n\x04\x04\x01\x02\
    \x02\x12\x03\x1d\x08-\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\x1d\x08\
    \x10\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\x1d\x11!\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03\x1d\"(\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\
    \x1d+,\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x1e\x08'\n\x0c\n\x05\x04\x01\
    \x02\x03\x04\x12\x03\x1e\x08\x10\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\
    \x1e\x11\x17\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x1e\x18\"\n\x0c\n\
    \x05\x04\x01\x02\x03\x03\x12\x03\x1e%&\n\x0b\n\x04\x04\x01\x02\x04\x12\
    \x03\x1f\x08'\n\x0c\n\x05\x04\x01\x02\x04\x04\x12\x03\x1f\x08\x10\n\x0c\
    \n\x05\x04\x01\x02\x04\x05\x12\x03\x1f\x11\x17\n\x0c\n\x05\x04\x01\x02\
    \x04\x01\x12\x03\x1f\x18\"\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x1f%&\
    \n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x20\x08*\n\x0c\n\x05\x04\x01\x02\
    \x05\x04\x12\x03\x20\x08\x10\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03\x20\
    \x11\x18\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x20\x19%\n\x0c\n\x05\
    \x04\x01\x02\x05\x03\x12\x03\x20()\n\x0b\n\x04\x04\x01\x02\x06\x12\x03!\
    \x08%\n\x0c\n\x05\x04\x01\x02\x06\x04\x12\x03!\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\x06\x05\x12\x03!\x11\x17\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\
    \x03!\x18\x20\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03!#$\n\n\n\x02\x04\
    \x02\x12\x04$\01\x01\n\n\n\x03\x04\x02\x01\x12\x03$\x081\n\x0b\n\x04\x04\
    \x02\x02\0\x12\x03%\x08a\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03%\x08\x10\
    \n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03%\x11#\n\x0c\n\x05\x04\x02\x02\0\
    \x01\x12\x03%$4\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03%78\n\x0c\n\x05\x04\
    \x02\x02\0\x08\x12\x03%9`\n\x0c\n\x05\x04\x02\x02\0\x07\x12\x03%D_\n\x0b\
    \n\x04\x04\x02\x02\x01\x12\x03&\x08%\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\
    \x03&\x08\x10\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03&\x11\x17\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03&\x18\x20\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03&#$\n\x0b\n\x04\x04\x02\x02\x02\x12\x03'\x082\n\x0c\n\x05\
    \x04\x02\x02\x02\x04\x12\x03'\x08\x10\n\x0c\n\x05\x04\x02\x02\x02\x05\
    \x12\x03'\x11\x17\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03'\x18-\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x03'01\n\x0b\n\x04\x04\x02\x02\x03\x12\x03(\
    \x08+\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\x03(\x08\x10\n\x0c\n\x05\x04\
    \x02\x02\x03\x05\x12\x03(\x11\x17\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\
    \x03(\x18&\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03()*\n\x0b\n\x04\x04\
    \x02\x02\x04\x12\x03)\x08,\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03)\x08\
    \x10\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03)\x11\x17\n\x0c\n\x05\x04\
    \x02\x02\x04\x01\x12\x03)\x18'\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03)*\
    +\n\x0b\n\x04\x04\x02\x02\x05\x12\x03*\x08-\n\x0c\n\x05\x04\x02\x02\x05\
    \x04\x12\x03*\x08\x10\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03*\x11\x17\n\
    \x0c\n\x05\x04\x02\x02\x05\x01\x12\x03*\x18(\n\x0c\n\x05\x04\x02\x02\x05\
    \x03\x12\x03*+,\n\x0b\n\x04\x04\x02\x02\x06\x12\x03+\x08-\n\x0c\n\x05\
    \x04\x02\x02\x06\x04\x12\x03+\x08\x10\n\x0c\n\x05\x04\x02\x02\x06\x05\
    \x12\x03+\x11\x17\n\x0c\n\x05\x04\x02\x02\x06\x01\x12\x03+\x18(\n\x0c\n\
    \x05\x04\x02\x02\x06\x03\x12\x03++,\n\x0b\n\x04\x04\x02\x02\x07\x12\x03,\
    \x08+\n\x0c\n\x05\x04\x02\x02\x07\x04\x12\x03,\x08\x10\n\x0c\n\x05\x04\
    \x02\x02\x07\x05\x12\x03,\x11\x17\n\x0c\n\x05\x04\x02\x02\x07\x01\x12\
    \x03,\x18&\n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03,)*\n\x0b\n\x04\x04\
    \x02\x02\x08\x12\x03-\x08*\n\x0c\n\x05\x04\x02\x02\x08\x04\x12\x03-\x08\
    \x10\n\x0c\n\x05\x04\x02\x02\x08\x05\x12\x03-\x11\x18\n\x0c\n\x05\x04\
    \x02\x02\x08\x01\x12\x03-\x19$\n\x0c\n\x05\x04\x02\x02\x08\x03\x12\x03-'\
    )\n\x0b\n\x04\x04\x02\x02\t\x12\x03.\x08.\n\x0c\n\x05\x04\x02\x02\t\x04\
    \x12\x03.\x08\x10\n\x0c\n\x05\x04\x02\x02\t\x05\x12\x03.\x11\x17\n\x0c\n\
    \x05\x04\x02\x02\t\x01\x12\x03.\x18(\n\x0c\n\x05\x04\x02\x02\t\x03\x12\
    \x03.+-\n\x0b\n\x04\x04\x02\x02\n\x12\x03/\x08'\n\x0c\n\x05\x04\x02\x02\
    \n\x04\x12\x03/\x08\x10\n\x0c\n\x05\x04\x02\x02\n\x05\x12\x03/\x11\x17\n\
    \x0c\n\x05\x04\x02\x02\n\x01\x12\x03/\x18!\n\x0c\n\x05\x04\x02\x02\n\x03\
    \x12\x03/$&\n\x0b\n\x04\x04\x02\x02\x0b\x12\x030\x086\n\x0c\n\x05\x04\
    \x02\x02\x0b\x04\x12\x030\x08\x10\n\x0c\n\x05\x04\x02\x02\x0b\x05\x12\
    \x030\x11\x18\n\x0c\n\x05\x04\x02\x02\x0b\x01\x12\x030\x190\n\x0c\n\x05\
    \x04\x02\x02\x0b\x03\x12\x03035\n\n\n\x02\x04\x03\x12\x043\0<\x01\n\n\n\
    \x03\x04\x03\x01\x12\x033\x08;\n\x0b\n\x04\x04\x03\x02\0\x12\x034\x08\"\
    \n\x0c\n\x05\x04\x03\x02\0\x04\x12\x034\x08\x10\n\x0c\n\x05\x04\x03\x02\
    \0\x05\x12\x034\x11\x17\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x034\x18\x1d\n\
    \x0c\n\x05\x04\x03\x02\0\x03\x12\x034\x20!\n\x0b\n\x04\x04\x03\x02\x01\
    \x12\x035\x08T\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x035\x08\x10\n\x0c\n\
    \x05\x04\x03\x02\x01\x06\x12\x035\x11#\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x035$*\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x035-.\n\x0c\n\x05\x04\
    \x03\x02\x01\x08\x12\x035/S\n\x0c\n\x05\x04\x03\x02\x01\x07\x12\x035:R\n\
    \x0b\n\x04\x04\x03\x02\x02\x12\x036\x08-\n\x0c\n\x05\x04\x03\x02\x02\x04\
    \x12\x036\x08\x10\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x036\x11!\n\x0c\n\
    \x05\x04\x03\x02\x02\x01\x12\x036\"(\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\
    \x036+,\n\x0b\n\x04\x04\x03\x02\x03\x12\x037\x08'\n\x0c\n\x05\x04\x03\
    \x02\x03\x04\x12\x037\x08\x10\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x037\
    \x11\x17\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x037\x18\"\n\x0c\n\x05\x04\
    \x03\x02\x03\x03\x12\x037%&\n\x0b\n\x04\x04\x03\x02\x04\x12\x038\x08'\n\
    \x0c\n\x05\x04\x03\x02\x04\x04\x12\x038\x08\x10\n\x0c\n\x05\x04\x03\x02\
    \x04\x05\x12\x038\x11\x17\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x038\x18\"\
    \n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x038%&\n\x0b\n\x04\x04\x03\x02\x05\
    \x12\x039\x081\n\x0c\n\x05\x04\x03\x02\x05\x04\x12\x039\x08\x10\n\x0c\n\
    \x05\x04\x03\x02\x05\x05\x12\x039\x11\x17\n\x0c\n\x05\x04\x03\x02\x05\
    \x01\x12\x039\x18,\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x039/0\n\x0b\n\
    \x04\x04\x03\x02\x06\x12\x03:\x08.\n\x0c\n\x05\x04\x03\x02\x06\x04\x12\
    \x03:\x08\x10\n\x0c\n\x05\x04\x03\x02\x06\x05\x12\x03:\x11\x17\n\x0c\n\
    \x05\x04\x03\x02\x06\x01\x12\x03:\x18)\n\x0c\n\x05\x04\x03\x02\x06\x03\
    \x12\x03:,-\n\x0b\n\x04\x04\x03\x02\x07\x12\x03;\x08%\n\x0c\n\x05\x04\
    \x03\x02\x07\x04\x12\x03;\x08\x10\n\x0c\n\x05\x04\x03\x02\x07\x05\x12\
    \x03;\x11\x17\n\x0c\n\x05\x04\x03\x02\x07\x01\x12\x03;\x18\x20\n\x0c\n\
    \x05\x04\x03\x02\x07\x03\x12\x03;#$\n\n\n\x02\x04\x04\x12\x04>\0C\x01\n\
    \n\n\x03\x04\x04\x01\x12\x03>\x08\x13\n\x0b\n\x04\x04\x04\x02\0\x12\x03?\
    \x08%\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03?\x08\x10\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03?\x11\x18\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03?\x19\
    \x20\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03?#$\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x03@\x08T\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03@\x08\x10\n\
    \x0c\n\x05\x04\x04\x02\x01\x06\x12\x03@\x11#\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03@$*\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03@-.\n\x0c\n\x05\
    \x04\x04\x02\x01\x08\x12\x03@/S\n\x0c\n\x05\x04\x04\x02\x01\x07\x12\x03@\
    :R\n\x0b\n\x04\x04\x04\x02\x02\x12\x03A\x08-\n\x0c\n\x05\x04\x04\x02\x02\
    \x04\x12\x03A\x08\x10\n\x0c\n\x05\x04\x04\x02\x02\x06\x12\x03A\x11!\n\
    \x0c\n\x05\x04\x04\x02\x02\x01\x12\x03A\"(\n\x0c\n\x05\x04\x04\x02\x02\
    \x03\x12\x03A+,\n\x0b\n\x04\x04\x04\x02\x03\x12\x03B\x08(\n\x0c\n\x05\
    \x04\x04\x02\x03\x04\x12\x03B\x08\x10\n\x0c\n\x05\x04\x04\x02\x03\x05\
    \x12\x03B\x11\x17\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03B\x18#\n\x0c\n\
    \x05\x04\x04\x02\x03\x03\x12\x03B&'\n\n\n\x02\x04\x05\x12\x04E\0M\x01\n\
    \n\n\x03\x04\x05\x01\x12\x03E\x08<\n\x0b\n\x04\x04\x05\x02\0\x12\x03F\
    \x08a\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03F\x08\x10\n\x0c\n\x05\x04\x05\
    \x02\0\x06\x12\x03F\x11#\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03F$4\n\x0c\
    \n\x05\x04\x05\x02\0\x03\x12\x03F78\n\x0c\n\x05\x04\x05\x02\0\x08\x12\
    \x03F9`\n\x0c\n\x05\x04\x05\x02\0\x07\x12\x03FD_\n\x0b\n\x04\x04\x05\x02\
    \x01\x12\x03G\x08%\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03G\x08\x10\n\
    \x0c\n\x05\x04\x05\x02\x01\x05\x12\x03G\x11\x17\n\x0c\n\x05\x04\x05\x02\
    \x01\x01\x12\x03G\x18\x20\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03G#$\n\
    \x0b\n\x04\x04\x05\x02\x02\x12\x03H\x08+\n\x0c\n\x05\x04\x05\x02\x02\x04\
    \x12\x03H\x08\x10\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x03H\x11\x17\n\x0c\
    \n\x05\x04\x05\x02\x02\x01\x12\x03H\x18&\n\x0c\n\x05\x04\x05\x02\x02\x03\
    \x12\x03H)*\n\x0b\n\x04\x04\x05\x02\x03\x12\x03I\x08$\n\x0c\n\x05\x04\
    \x05\x02\x03\x04\x12\x03I\x08\x10\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\
    \x03I\x11\x17\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x03I\x18\x1f\n\x0c\n\
    \x05\x04\x05\x02\x03\x03\x12\x03I\"#\n\x0b\n\x04\x04\x05\x02\x04\x12\x03\
    J\x08*\n\x0c\n\x05\x04\x05\x02\x04\x04\x12\x03J\x08\x10\n\x0c\n\x05\x04\
    \x05\x02\x04\x06\x12\x03J\x11\x1d\n\x0c\n\x05\x04\x05\x02\x04\x01\x12\
    \x03J\x1e%\n\x0c\n\x05\x04\x05\x02\x04\x03\x12\x03J()\n\x0b\n\x04\x04\
    \x05\x02\x05\x12\x03K\x08-\n\x0c\n\x05\x04\x05\x02\x05\x04\x12\x03K\x08\
    \x10\n\x0c\n\x05\x04\x05\x02\x05\x05\x12\x03K\x11\x17\n\x0c\n\x05\x04\
    \x05\x02\x05\x01\x12\x03K\x18(\n\x0c\n\x05\x04\x05\x02\x05\x03\x12\x03K+\
    ,\n\x0b\n\x04\x04\x05\x02\x06\x12\x03L\x08&\n\x0c\n\x05\x04\x05\x02\x06\
    \x04\x12\x03L\x08\x10\n\x0c\n\x05\x04\x05\x02\x06\x05\x12\x03L\x11\x17\n\
    \x0c\n\x05\x04\x05\x02\x06\x01\x12\x03L\x18!\n\x0c\n\x05\x04\x05\x02\x06\
    \x03\x12\x03L$%\n\n\n\x02\x04\x06\x12\x04O\0R\x01\n\n\n\x03\x04\x06\x01\
    \x12\x03O\x08\x14\n\x0b\n\x04\x04\x06\x02\0\x12\x03P\x08%\n\x0c\n\x05\
    \x04\x06\x02\0\x04\x12\x03P\x08\x10\n\x0c\n\x05\x04\x06\x02\0\x05\x12\
    \x03P\x11\x18\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03P\x19\x20\n\x0c\n\x05\
    \x04\x06\x02\0\x03\x12\x03P#$\n\x0b\n\x04\x04\x06\x02\x01\x12\x03Q\x08\"\
    \n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x03Q\x08\x10\n\x0c\n\x05\x04\x06\
    \x02\x01\x05\x12\x03Q\x11\x17\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03Q\
    \x18\x1d\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03Q\x20!\n\n\n\x02\x04\x07\
    \x12\x04T\0X\x01\n\n\n\x03\x04\x07\x01\x12\x03T\x08=\n\x0b\n\x04\x04\x07\
    \x02\0\x12\x03U\x08\"\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03U\x08\x10\n\
    \x0c\n\x05\x04\x07\x02\0\x05\x12\x03U\x11\x17\n\x0c\n\x05\x04\x07\x02\0\
    \x01\x12\x03U\x18\x1d\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03U\x20!\n\x0b\
    \n\x04\x04\x07\x02\x01\x12\x03V\x08$\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\
    \x03V\x08\x10\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03V\x11\x17\n\x0c\n\
    \x05\x04\x07\x02\x01\x01\x12\x03V\x18\x1f\n\x0c\n\x05\x04\x07\x02\x01\
    \x03\x12\x03V\"#\n\x0b\n\x04\x04\x07\x02\x02\x12\x03W\x082\n\x0c\n\x05\
    \x04\x07\x02\x02\x04\x12\x03W\x08\x10\n\x0c\n\x05\x04\x07\x02\x02\x06\
    \x12\x03W\x11\x1e\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03W\x1f-\n\x0c\n\
    \x05\x04\x07\x02\x02\x03\x12\x03W01\n\n\n\x02\x04\x08\x12\x04Z\0[\x01\n\
    \n\n\x03\x04\x08\x01\x12\x03Z\x08>\n\n\n\x02\x04\t\x12\x04]\0`\x01\n\n\n\
    \x03\x04\t\x01\x12\x03]\x082\n\x0b\n\x04\x04\t\x02\0\x12\x03^\x08\"\n\
    \x0c\n\x05\x04\t\x02\0\x04\x12\x03^\x08\x10\n\x0c\n\x05\x04\t\x02\0\x05\
    \x12\x03^\x11\x17\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03^\x18\x1d\n\x0c\n\
    \x05\x04\t\x02\0\x03\x12\x03^\x20!\n\x0b\n\x04\x04\t\x02\x01\x12\x03_\
    \x08$\n\x0c\n\x05\x04\t\x02\x01\x04\x12\x03_\x08\x10\n\x0c\n\x05\x04\t\
    \x02\x01\x05\x12\x03_\x11\x17\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03_\x18\
    \x1f\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03_\"#\n\n\n\x02\x04\n\x12\x04b\
    \0c\x01\n\n\n\x03\x04\n\x01\x12\x03b\x083\n\n\n\x02\x06\0\x12\x04e\0k\
    \x01\n\n\n\x03\x06\0\x01\x12\x03e\x08\x19\n\n\n\x03\x06\0\x03\x12\x03f\
    \x08D\n\r\n\x06\x06\0\x03\xd0\x86\x03\x12\x03f\x08D\n\x0c\n\x04\x06\0\
    \x02\0\x12\x04h\x08j\t\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03h\x0c\x19\n\
    \x0c\n\x05\x06\0\x02\0\x02\x12\x03h\x1bD\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03hOy\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03i\x10B\n\x0f\n\x08\x06\0\x02\
    \0\x04\xd0\x86\x03\x12\x03i\x10B\n\n\n\x02\x06\x01\x12\x04m\0{\x01\n\n\n\
    \x03\x06\x01\x01\x12\x03m\x08!\n\n\n\x03\x06\x01\x03\x12\x03n\x08I\n\r\n\
    \x06\x06\x01\x03\xd0\x86\x03\x12\x03n\x08I\n\x0c\n\x04\x06\x01\x02\0\x12\
    \x04p\x08r\t\n\x0c\n\x05\x06\x01\x02\0\x01\x12\x03p\x0c\x1c\n\x0c\n\x05\
    \x06\x01\x02\0\x02\x12\x03p\x1eR\n\r\n\x05\x06\x01\x02\0\x03\x12\x04p]\
    \x92\x01\n\x0c\n\x05\x06\x01\x02\0\x04\x12\x03q\x10A\n\x0f\n\x08\x06\x01\
    \x02\0\x04\xd0\x86\x03\x12\x03q\x10A\n\x0c\n\x04\x06\x01\x02\x01\x12\x04\
    t\x08v\t\n\x0c\n\x05\x06\x01\x02\x01\x01\x12\x03t\x0c\x1e\n\x0c\n\x05\
    \x06\x01\x02\x01\x02\x12\x03t\x20V\n\r\n\x05\x06\x01\x02\x01\x03\x12\x04\
    ta\x98\x01\n\x0c\n\x05\x06\x01\x02\x01\x04\x12\x03u\x10C\n\x0f\n\x08\x06\
    \x01\x02\x01\x04\xd0\x86\x03\x12\x03u\x10C\n\x0c\n\x04\x06\x01\x02\x02\
    \x12\x04x\x08z\t\n\x0c\n\x05\x06\x01\x02\x02\x01\x12\x03x\x0c\x13\n\x0c\
    \n\x05\x06\x01\x02\x02\x02\x12\x03x\x15@\n\x0c\n\x05\x06\x01\x02\x02\x03\
    \x12\x03xKw\n\x0c\n\x05\x06\x01\x02\x02\x04\x12\x03y\x108\n\x0f\n\x08\
    \x06\x01\x02\x02\x04\xd0\x86\x03\x12\x03y\x108\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(GameSearchParam::generated_message_descriptor_data());
            messages.push(CQueuedMatchmaking_SearchForGame_Request::generated_message_descriptor_data());
            messages.push(CQueuedMatchmaking_SearchForGame_Response::generated_message_descriptor_data());
            messages.push(CQueuedMatchmakingGameHost_SearchForPlayers_Request::generated_message_descriptor_data());
            messages.push(PlayerFound::generated_message_descriptor_data());
            messages.push(CQueuedMatchmakingGameHost_SearchForPlayers_Response::generated_message_descriptor_data());
            messages.push(PlayerResult::generated_message_descriptor_data());
            messages.push(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::generated_message_descriptor_data());
            messages.push(CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::generated_message_descriptor_data());
            messages.push(CQueuedMatchmakingGameHost_EndGame_Request::generated_message_descriptor_data());
            messages.push(CQueuedMatchmakingGameHost_EndGame_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(EGameSearchAction::generated_enum_descriptor_data());
            enums.push(EGameSearchResult::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
