// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_parties.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CParties_JoinParty_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_JoinParty_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_JoinParty_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_JoinParty_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_JoinParty_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_JoinParty_Request {
    fn default() -> &'a CParties_JoinParty_Request {
        <CParties_JoinParty_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_JoinParty_Request {
    pub fn new() -> CParties_JoinParty_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 beacon_id = 2;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParties_JoinParty_Request| { &m.steamid },
            |m: &mut CParties_JoinParty_Request| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_JoinParty_Request| { &m.beacon_id },
            |m: &mut CParties_JoinParty_Request| { &mut m.beacon_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParties_JoinParty_Request>(
            "CParties_JoinParty_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParties_JoinParty_Request {
    const NAME: &'static str = "CParties_JoinParty_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.beacon_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_JoinParty_Request {
        CParties_JoinParty_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_JoinParty_Request {
        static instance: CParties_JoinParty_Request = CParties_JoinParty_Request {
            steamid: ::std::option::Option::None,
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParties_JoinParty_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_JoinParty_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_JoinParty_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_JoinParty_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_JoinParty_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_JoinParty_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_JoinParty_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_JoinParty_Response.connect_string)
    pub connect_string: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_JoinParty_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_JoinParty_Response {
    fn default() -> &'a CParties_JoinParty_Response {
        <CParties_JoinParty_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_JoinParty_Response {
    pub fn new() -> CParties_JoinParty_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional string connect_string = 2;

    pub fn connect_string(&self) -> &str {
        match self.connect_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_connect_string(&mut self) {
        self.connect_string = ::std::option::Option::None;
    }

    pub fn has_connect_string(&self) -> bool {
        self.connect_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connect_string(&mut self, v: ::std::string::String) {
        self.connect_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connect_string(&mut self) -> &mut ::std::string::String {
        if self.connect_string.is_none() {
            self.connect_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.connect_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_connect_string(&mut self) -> ::std::string::String {
        self.connect_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_JoinParty_Response| { &m.beacon_id },
            |m: &mut CParties_JoinParty_Response| { &mut m.beacon_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connect_string",
            |m: &CParties_JoinParty_Response| { &m.connect_string },
            |m: &mut CParties_JoinParty_Response| { &mut m.connect_string },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParties_JoinParty_Response>(
            "CParties_JoinParty_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParties_JoinParty_Response {
    const NAME: &'static str = "CParties_JoinParty_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.connect_string = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.connect_string.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.connect_string.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_JoinParty_Response {
        CParties_JoinParty_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.connect_string = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_JoinParty_Response {
        static instance: CParties_JoinParty_Response = CParties_JoinParty_Response {
            beacon_id: ::std::option::Option::None,
            connect_string: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParties_JoinParty_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_JoinParty_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_JoinParty_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_JoinParty_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_BeaconLocation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_BeaconLocation {
    // message fields
    // @@protoc_insertion_point(field:CParties_BeaconLocation.location_type)
    pub location_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParties_BeaconLocation.location_id)
    pub location_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_BeaconLocation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_BeaconLocation {
    fn default() -> &'a CParties_BeaconLocation {
        <CParties_BeaconLocation as ::protobuf::Message>::default_instance()
    }
}

impl CParties_BeaconLocation {
    pub fn new() -> CParties_BeaconLocation {
        ::std::default::Default::default()
    }

    // optional uint32 location_type = 1;

    pub fn location_type(&self) -> u32 {
        self.location_type.unwrap_or(0)
    }

    pub fn clear_location_type(&mut self) {
        self.location_type = ::std::option::Option::None;
    }

    pub fn has_location_type(&self) -> bool {
        self.location_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location_type(&mut self, v: u32) {
        self.location_type = ::std::option::Option::Some(v);
    }

    // optional uint64 location_id = 2;

    pub fn location_id(&self) -> u64 {
        self.location_id.unwrap_or(0)
    }

    pub fn clear_location_id(&mut self) {
        self.location_id = ::std::option::Option::None;
    }

    pub fn has_location_id(&self) -> bool {
        self.location_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location_id(&mut self, v: u64) {
        self.location_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "location_type",
            |m: &CParties_BeaconLocation| { &m.location_type },
            |m: &mut CParties_BeaconLocation| { &mut m.location_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "location_id",
            |m: &CParties_BeaconLocation| { &m.location_id },
            |m: &mut CParties_BeaconLocation| { &mut m.location_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParties_BeaconLocation>(
            "CParties_BeaconLocation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParties_BeaconLocation {
    const NAME: &'static str = "CParties_BeaconLocation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.location_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.location_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.location_type {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.location_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.location_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.location_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_BeaconLocation {
        CParties_BeaconLocation::new()
    }

    fn clear(&mut self) {
        self.location_type = ::std::option::Option::None;
        self.location_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_BeaconLocation {
        static instance: CParties_BeaconLocation = CParties_BeaconLocation {
            location_type: ::std::option::Option::None,
            location_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParties_BeaconLocation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_BeaconLocation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_BeaconLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_BeaconLocation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_CreateBeacon_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_CreateBeacon_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.num_open_slots)
    pub num_open_slots: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.locations)
    pub locations: ::std::vec::Vec<CParties_BeaconLocation>,
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.connect_string)
    pub connect_string: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.metadata)
    pub metadata: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_CreateBeacon_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_CreateBeacon_Request {
    fn default() -> &'a CParties_CreateBeacon_Request {
        <CParties_CreateBeacon_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_CreateBeacon_Request {
    pub fn new() -> CParties_CreateBeacon_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 num_open_slots = 2;

    pub fn num_open_slots(&self) -> u32 {
        self.num_open_slots.unwrap_or(0)
    }

    pub fn clear_num_open_slots(&mut self) {
        self.num_open_slots = ::std::option::Option::None;
    }

    pub fn has_num_open_slots(&self) -> bool {
        self.num_open_slots.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_open_slots(&mut self, v: u32) {
        self.num_open_slots = ::std::option::Option::Some(v);
    }

    // optional string connect_string = 4;

    pub fn connect_string(&self) -> &str {
        match self.connect_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_connect_string(&mut self) {
        self.connect_string = ::std::option::Option::None;
    }

    pub fn has_connect_string(&self) -> bool {
        self.connect_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connect_string(&mut self, v: ::std::string::String) {
        self.connect_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connect_string(&mut self) -> &mut ::std::string::String {
        if self.connect_string.is_none() {
            self.connect_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.connect_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_connect_string(&mut self) -> ::std::string::String {
        self.connect_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string metadata = 5;

    pub fn metadata(&self) -> &str {
        match self.metadata.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_metadata(&mut self) {
        self.metadata = ::std::option::Option::None;
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::string::String) {
        self.metadata = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut ::std::string::String {
        if self.metadata.is_none() {
            self.metadata = ::std::option::Option::Some(::std::string::String::new());
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::string::String {
        self.metadata.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CParties_CreateBeacon_Request| { &m.appid },
            |m: &mut CParties_CreateBeacon_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_open_slots",
            |m: &CParties_CreateBeacon_Request| { &m.num_open_slots },
            |m: &mut CParties_CreateBeacon_Request| { &mut m.num_open_slots },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "locations",
            |m: &CParties_CreateBeacon_Request| { &m.locations },
            |m: &mut CParties_CreateBeacon_Request| { &mut m.locations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "connect_string",
            |m: &CParties_CreateBeacon_Request| { &m.connect_string },
            |m: &mut CParties_CreateBeacon_Request| { &mut m.connect_string },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "metadata",
            |m: &CParties_CreateBeacon_Request| { &m.metadata },
            |m: &mut CParties_CreateBeacon_Request| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParties_CreateBeacon_Request>(
            "CParties_CreateBeacon_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParties_CreateBeacon_Request {
    const NAME: &'static str = "CParties_CreateBeacon_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.num_open_slots = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.locations.push(is.read_message()?);
                },
                34 => {
                    self.connect_string = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.metadata = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.num_open_slots {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        for value in &self.locations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.connect_string.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.metadata.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.num_open_slots {
            os.write_uint32(2, v)?;
        }
        for v in &self.locations {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.connect_string.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.metadata.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_CreateBeacon_Request {
        CParties_CreateBeacon_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.num_open_slots = ::std::option::Option::None;
        self.locations.clear();
        self.connect_string = ::std::option::Option::None;
        self.metadata = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_CreateBeacon_Request {
        static instance: CParties_CreateBeacon_Request = CParties_CreateBeacon_Request {
            appid: ::std::option::Option::None,
            num_open_slots: ::std::option::Option::None,
            locations: ::std::vec::Vec::new(),
            connect_string: ::std::option::Option::None,
            metadata: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParties_CreateBeacon_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_CreateBeacon_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_CreateBeacon_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_CreateBeacon_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_CreateBeacon_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_CreateBeacon_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_CreateBeacon_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_CreateBeacon_Response {
    fn default() -> &'a CParties_CreateBeacon_Response {
        <CParties_CreateBeacon_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_CreateBeacon_Response {
    pub fn new() -> CParties_CreateBeacon_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_CreateBeacon_Response| { &m.beacon_id },
            |m: &mut CParties_CreateBeacon_Response| { &mut m.beacon_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParties_CreateBeacon_Response>(
            "CParties_CreateBeacon_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParties_CreateBeacon_Response {
    const NAME: &'static str = "CParties_CreateBeacon_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_CreateBeacon_Response {
        CParties_CreateBeacon_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_CreateBeacon_Response {
        static instance: CParties_CreateBeacon_Response = CParties_CreateBeacon_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParties_CreateBeacon_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_CreateBeacon_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_CreateBeacon_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_CreateBeacon_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_OnReservationCompleted_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_OnReservationCompleted_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_OnReservationCompleted_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_OnReservationCompleted_Request.user_steamid)
    pub user_steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_OnReservationCompleted_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_OnReservationCompleted_Request {
    fn default() -> &'a CParties_OnReservationCompleted_Request {
        <CParties_OnReservationCompleted_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_OnReservationCompleted_Request {
    pub fn new() -> CParties_OnReservationCompleted_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 user_steamid = 2;

    pub fn user_steamid(&self) -> u64 {
        self.user_steamid.unwrap_or(0)
    }

    pub fn clear_user_steamid(&mut self) {
        self.user_steamid = ::std::option::Option::None;
    }

    pub fn has_user_steamid(&self) -> bool {
        self.user_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_steamid(&mut self, v: u64) {
        self.user_steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_OnReservationCompleted_Request| { &m.beacon_id },
            |m: &mut CParties_OnReservationCompleted_Request| { &mut m.beacon_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "user_steamid",
            |m: &CParties_OnReservationCompleted_Request| { &m.user_steamid },
            |m: &mut CParties_OnReservationCompleted_Request| { &mut m.user_steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParties_OnReservationCompleted_Request>(
            "CParties_OnReservationCompleted_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParties_OnReservationCompleted_Request {
    const NAME: &'static str = "CParties_OnReservationCompleted_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                17 => {
                    self.user_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.user_steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.user_steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_OnReservationCompleted_Request {
        CParties_OnReservationCompleted_Request::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.user_steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_OnReservationCompleted_Request {
        static instance: CParties_OnReservationCompleted_Request = CParties_OnReservationCompleted_Request {
            beacon_id: ::std::option::Option::None,
            user_steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParties_OnReservationCompleted_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_OnReservationCompleted_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_OnReservationCompleted_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_OnReservationCompleted_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_OnReservationCompleted_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_OnReservationCompleted_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_OnReservationCompleted_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_OnReservationCompleted_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_OnReservationCompleted_Response {
    fn default() -> &'a CParties_OnReservationCompleted_Response {
        <CParties_OnReservationCompleted_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_OnReservationCompleted_Response {
    pub fn new() -> CParties_OnReservationCompleted_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_OnReservationCompleted_Response| { &m.beacon_id },
            |m: &mut CParties_OnReservationCompleted_Response| { &mut m.beacon_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParties_OnReservationCompleted_Response>(
            "CParties_OnReservationCompleted_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParties_OnReservationCompleted_Response {
    const NAME: &'static str = "CParties_OnReservationCompleted_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_OnReservationCompleted_Response {
        CParties_OnReservationCompleted_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_OnReservationCompleted_Response {
        static instance: CParties_OnReservationCompleted_Response = CParties_OnReservationCompleted_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParties_OnReservationCompleted_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_OnReservationCompleted_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_OnReservationCompleted_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_OnReservationCompleted_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_CancelReservation_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_CancelReservation_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_CancelReservation_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_CancelReservation_Request.user_steamid)
    pub user_steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_CancelReservation_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_CancelReservation_Request {
    fn default() -> &'a CParties_CancelReservation_Request {
        <CParties_CancelReservation_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_CancelReservation_Request {
    pub fn new() -> CParties_CancelReservation_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 user_steamid = 2;

    pub fn user_steamid(&self) -> u64 {
        self.user_steamid.unwrap_or(0)
    }

    pub fn clear_user_steamid(&mut self) {
        self.user_steamid = ::std::option::Option::None;
    }

    pub fn has_user_steamid(&self) -> bool {
        self.user_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_steamid(&mut self, v: u64) {
        self.user_steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_CancelReservation_Request| { &m.beacon_id },
            |m: &mut CParties_CancelReservation_Request| { &mut m.beacon_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "user_steamid",
            |m: &CParties_CancelReservation_Request| { &m.user_steamid },
            |m: &mut CParties_CancelReservation_Request| { &mut m.user_steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParties_CancelReservation_Request>(
            "CParties_CancelReservation_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParties_CancelReservation_Request {
    const NAME: &'static str = "CParties_CancelReservation_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                17 => {
                    self.user_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.user_steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.user_steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_CancelReservation_Request {
        CParties_CancelReservation_Request::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.user_steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_CancelReservation_Request {
        static instance: CParties_CancelReservation_Request = CParties_CancelReservation_Request {
            beacon_id: ::std::option::Option::None,
            user_steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParties_CancelReservation_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_CancelReservation_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_CancelReservation_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_CancelReservation_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_CancelReservation_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_CancelReservation_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_CancelReservation_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_CancelReservation_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_CancelReservation_Response {
    fn default() -> &'a CParties_CancelReservation_Response {
        <CParties_CancelReservation_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_CancelReservation_Response {
    pub fn new() -> CParties_CancelReservation_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_CancelReservation_Response| { &m.beacon_id },
            |m: &mut CParties_CancelReservation_Response| { &mut m.beacon_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParties_CancelReservation_Response>(
            "CParties_CancelReservation_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParties_CancelReservation_Response {
    const NAME: &'static str = "CParties_CancelReservation_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_CancelReservation_Response {
        CParties_CancelReservation_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_CancelReservation_Response {
        static instance: CParties_CancelReservation_Response = CParties_CancelReservation_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParties_CancelReservation_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_CancelReservation_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_CancelReservation_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_CancelReservation_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_ChangeNumOpenSlots_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_ChangeNumOpenSlots_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_ChangeNumOpenSlots_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_ChangeNumOpenSlots_Request.num_open_slots)
    pub num_open_slots: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_ChangeNumOpenSlots_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_ChangeNumOpenSlots_Request {
    fn default() -> &'a CParties_ChangeNumOpenSlots_Request {
        <CParties_ChangeNumOpenSlots_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_ChangeNumOpenSlots_Request {
    pub fn new() -> CParties_ChangeNumOpenSlots_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional uint32 num_open_slots = 2;

    pub fn num_open_slots(&self) -> u32 {
        self.num_open_slots.unwrap_or(0)
    }

    pub fn clear_num_open_slots(&mut self) {
        self.num_open_slots = ::std::option::Option::None;
    }

    pub fn has_num_open_slots(&self) -> bool {
        self.num_open_slots.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_open_slots(&mut self, v: u32) {
        self.num_open_slots = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_ChangeNumOpenSlots_Request| { &m.beacon_id },
            |m: &mut CParties_ChangeNumOpenSlots_Request| { &mut m.beacon_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_open_slots",
            |m: &CParties_ChangeNumOpenSlots_Request| { &m.num_open_slots },
            |m: &mut CParties_ChangeNumOpenSlots_Request| { &mut m.num_open_slots },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParties_ChangeNumOpenSlots_Request>(
            "CParties_ChangeNumOpenSlots_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParties_ChangeNumOpenSlots_Request {
    const NAME: &'static str = "CParties_ChangeNumOpenSlots_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.num_open_slots = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.num_open_slots {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.num_open_slots {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_ChangeNumOpenSlots_Request {
        CParties_ChangeNumOpenSlots_Request::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.num_open_slots = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_ChangeNumOpenSlots_Request {
        static instance: CParties_ChangeNumOpenSlots_Request = CParties_ChangeNumOpenSlots_Request {
            beacon_id: ::std::option::Option::None,
            num_open_slots: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParties_ChangeNumOpenSlots_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_ChangeNumOpenSlots_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_ChangeNumOpenSlots_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_ChangeNumOpenSlots_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_ChangeNumOpenSlots_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_ChangeNumOpenSlots_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_ChangeNumOpenSlots_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_ChangeNumOpenSlots_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_ChangeNumOpenSlots_Response {
    fn default() -> &'a CParties_ChangeNumOpenSlots_Response {
        <CParties_ChangeNumOpenSlots_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_ChangeNumOpenSlots_Response {
    pub fn new() -> CParties_ChangeNumOpenSlots_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_ChangeNumOpenSlots_Response| { &m.beacon_id },
            |m: &mut CParties_ChangeNumOpenSlots_Response| { &mut m.beacon_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParties_ChangeNumOpenSlots_Response>(
            "CParties_ChangeNumOpenSlots_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParties_ChangeNumOpenSlots_Response {
    const NAME: &'static str = "CParties_ChangeNumOpenSlots_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_ChangeNumOpenSlots_Response {
        CParties_ChangeNumOpenSlots_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_ChangeNumOpenSlots_Response {
        static instance: CParties_ChangeNumOpenSlots_Response = CParties_ChangeNumOpenSlots_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParties_ChangeNumOpenSlots_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_ChangeNumOpenSlots_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_ChangeNumOpenSlots_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_ChangeNumOpenSlots_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_DestroyBeacon_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_DestroyBeacon_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_DestroyBeacon_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_DestroyBeacon_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_DestroyBeacon_Request {
    fn default() -> &'a CParties_DestroyBeacon_Request {
        <CParties_DestroyBeacon_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_DestroyBeacon_Request {
    pub fn new() -> CParties_DestroyBeacon_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_DestroyBeacon_Request| { &m.beacon_id },
            |m: &mut CParties_DestroyBeacon_Request| { &mut m.beacon_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParties_DestroyBeacon_Request>(
            "CParties_DestroyBeacon_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParties_DestroyBeacon_Request {
    const NAME: &'static str = "CParties_DestroyBeacon_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_DestroyBeacon_Request {
        CParties_DestroyBeacon_Request::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_DestroyBeacon_Request {
        static instance: CParties_DestroyBeacon_Request = CParties_DestroyBeacon_Request {
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParties_DestroyBeacon_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_DestroyBeacon_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_DestroyBeacon_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_DestroyBeacon_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_DestroyBeacon_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_DestroyBeacon_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_DestroyBeacon_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_DestroyBeacon_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_DestroyBeacon_Response {
    fn default() -> &'a CParties_DestroyBeacon_Response {
        <CParties_DestroyBeacon_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_DestroyBeacon_Response {
    pub fn new() -> CParties_DestroyBeacon_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_DestroyBeacon_Response| { &m.beacon_id },
            |m: &mut CParties_DestroyBeacon_Response| { &mut m.beacon_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParties_DestroyBeacon_Response>(
            "CParties_DestroyBeacon_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParties_DestroyBeacon_Response {
    const NAME: &'static str = "CParties_DestroyBeacon_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_DestroyBeacon_Response {
        CParties_DestroyBeacon_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_DestroyBeacon_Response {
        static instance: CParties_DestroyBeacon_Response = CParties_DestroyBeacon_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParties_DestroyBeacon_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_DestroyBeacon_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_DestroyBeacon_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParties_DestroyBeacon_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'steammessages_parties.steamclient.proto\x1a,steammessages_unified_bas\
    e.steamclient.proto\"S\n\x1aCParties_JoinParty_Request\x12\x18\n\x07stea\
    mid\x18\x01\x20\x01(\x06R\x07steamid\x12\x1b\n\tbeacon_id\x18\x02\x20\
    \x01(\x04R\x08beaconId\"a\n\x1bCParties_JoinParty_Response\x12\x1b\n\tbe\
    acon_id\x18\x01\x20\x01(\x04R\x08beaconId\x12%\n\x0econnect_string\x18\
    \x02\x20\x01(\tR\rconnectString\"_\n\x17CParties_BeaconLocation\x12#\n\r\
    location_type\x18\x01\x20\x01(\rR\x0clocationType\x12\x1f\n\x0blocation_\
    id\x18\x02\x20\x01(\x04R\nlocationId\"\xd6\x01\n\x1dCParties_CreateBeaco\
    n_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12$\n\x0enum_\
    open_slots\x18\x02\x20\x01(\rR\x0cnumOpenSlots\x126\n\tlocations\x18\x03\
    \x20\x03(\x0b2\x18.CParties_BeaconLocationR\tlocations\x12%\n\x0econnect\
    _string\x18\x04\x20\x01(\tR\rconnectString\x12\x1a\n\x08metadata\x18\x05\
    \x20\x01(\tR\x08metadata\"=\n\x1eCParties_CreateBeacon_Response\x12\x1b\
    \n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaconId\"i\n'CParties_OnReservat\
    ionCompleted_Request\x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaco\
    nId\x12!\n\x0cuser_steamid\x18\x02\x20\x01(\x06R\x0buserSteamid\"G\n(CPa\
    rties_OnReservationCompleted_Response\x12\x1b\n\tbeacon_id\x18\x01\x20\
    \x01(\x04R\x08beaconId\"d\n\"CParties_CancelReservation_Request\x12\x1b\
    \n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaconId\x12!\n\x0cuser_steamid\
    \x18\x02\x20\x01(\x06R\x0buserSteamid\"B\n#CParties_CancelReservation_Re\
    sponse\x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaconId\"h\n#CPart\
    ies_ChangeNumOpenSlots_Request\x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04\
    R\x08beaconId\x12$\n\x0enum_open_slots\x18\x02\x20\x01(\rR\x0cnumOpenSlo\
    ts\"C\n$CParties_ChangeNumOpenSlots_Response\x12\x1b\n\tbeacon_id\x18\
    \x01\x20\x01(\x04R\x08beaconId\"=\n\x1eCParties_DestroyBeacon_Request\
    \x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaconId\">\n\x1fCParties\
    _DestroyBeacon_Response\x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\x08be\
    aconId2\xd9\x07\n\x07Parties\x12\xb9\x01\n\tJoinParty\x12\x1b.CParties_J\
    oinParty_Request\x1a\x1c.CParties_JoinParty_Response\"q\x82\xb5\x18mRequ\
    est\x20to\x20join\x20a\x20Party\x20via\x20the\x20given\x20Beacon\x20ID.\
    \x20If\x20successful,\x20will\x20be\x20given\x20the\x20necessary\x20'con\
    nect'\x20string.\x12\x85\x01\n\x0cCreateBeacon\x12\x1e.CParties_CreateBe\
    acon_Request\x1a\x1f.CParties_CreateBeacon_Response\"4\x82\xb5\x180Creat\
    e\x20a\x20Beacon\x20to\x20attract\x20people\x20to\x20your\x20Party.\x12\
    \xb7\x01\n\x16OnReservationCompleted\x12(.CParties_OnReservationComplete\
    d_Request\x1a).CParties_OnReservationCompleted_Response\"H\x82\xb5\x18DN\
    otify\x20Steam\x20that\x20a\x20user\x20with\x20a\x20reservation\x20has\
    \x20successfully\x20joined.\x12\xbe\x01\n\x11CancelReservation\x12#.CPar\
    ties_CancelReservation_Request\x1a$.CParties_CancelReservation_Response\
    \"^\x82\xb5\x18ZNotify\x20Steam\x20that\x20a\x20user\x20with\x20a\x20res\
    ervation\x20either\x20never\x20showed\x20up,\x20or\x20has\x20left\x20the\
    \x20party.\x12\x86\x01\n\x12ChangeNumOpenSlots\x12$.CParties_ChangeNumOp\
    enSlots_Request\x1a%.CParties_ChangeNumOpenSlots_Response\"#\x82\xb5\x18\
    \x1fChange\x20the\x20number\x20of\x20open\x20slots\x12j\n\rDestroyBeacon\
    \x12\x1f.CParties_DestroyBeacon_Request\x1a\x20.CParties_DestroyBeacon_R\
    esponse\"\x16\x82\xb5\x18\x12Delete\x20the\x20Beacon.\x1a\x1a\x82\xb5\
    \x18\x16Party-related\x20servicesB\x03\x80\x01\x01J\xd5\x13\n\x06\x12\
    \x04\0\0\\\x01\n\t\n\x02\x03\0\x12\x03\0\06\n\x08\n\x01\x08\x12\x03\x02\
    \0\"\n\t\n\x02\x08\x10\x12\x03\x02\0\"\n\n\n\x02\x04\0\x12\x04\x04\0\x07\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\"\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x05\x08%\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x05\x08\x10\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x05\x11\x18\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x05\x19\x20\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05#$\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x06\x08&\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\
    \x06\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x11\x17\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x06\x18!\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x06$%\n\n\n\x02\x04\x01\x12\x04\t\0\x0c\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\t\x08#\n\x0b\n\x04\x04\x01\x02\0\x12\x03\n\x08&\n\x0c\n\x05\
    \x04\x01\x02\0\x04\x12\x03\n\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\n\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\x18!\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\n$%\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0b\
    \x08+\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x0b\x08\x10\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\x0b\x11\x17\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x0b\x18&\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0b)*\n\n\n\
    \x02\x04\x02\x12\x04\x0e\0\x11\x01\n\n\n\x03\x04\x02\x01\x12\x03\x0e\x08\
    \x1f\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x0f\x08*\n\x0c\n\x05\x04\x02\x02\
    \0\x04\x12\x03\x0f\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x0f\x11\
    \x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0f\x18%\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03\x0f()\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x10\x08(\n\
    \x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x10\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x03\x10\x11\x17\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\
    \x10\x18#\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x10&'\n\n\n\x02\x04\
    \x03\x12\x04\x13\0\x19\x01\n\n\n\x03\x04\x03\x01\x12\x03\x13\x08%\n\x0b\
    \n\x04\x04\x03\x02\0\x12\x03\x14\x08\"\n\x0c\n\x05\x04\x03\x02\0\x04\x12\
    \x03\x14\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x14\x11\x17\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x03\x14\x18\x1d\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03\x14\x20!\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x15\x08+\n\x0c\
    \n\x05\x04\x03\x02\x01\x04\x12\x03\x15\x08\x10\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03\x15\x11\x17\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x15\
    \x18&\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x15)*\n\x0b\n\x04\x04\x03\
    \x02\x02\x12\x03\x16\x088\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03\x16\
    \x08\x10\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03\x16\x11)\n\x0c\n\x05\
    \x04\x03\x02\x02\x01\x12\x03\x16*3\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\
    \x03\x1667\n\x0b\n\x04\x04\x03\x02\x03\x12\x03\x17\x08+\n\x0c\n\x05\x04\
    \x03\x02\x03\x04\x12\x03\x17\x08\x10\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\
    \x03\x17\x11\x17\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03\x17\x18&\n\x0c\
    \n\x05\x04\x03\x02\x03\x03\x12\x03\x17)*\n\x0b\n\x04\x04\x03\x02\x04\x12\
    \x03\x18\x08%\n\x0c\n\x05\x04\x03\x02\x04\x04\x12\x03\x18\x08\x10\n\x0c\
    \n\x05\x04\x03\x02\x04\x05\x12\x03\x18\x11\x17\n\x0c\n\x05\x04\x03\x02\
    \x04\x01\x12\x03\x18\x18\x20\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03\x18\
    #$\n\n\n\x02\x04\x04\x12\x04\x1b\0\x1d\x01\n\n\n\x03\x04\x04\x01\x12\x03\
    \x1b\x08&\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x1c\x08&\n\x0c\n\x05\x04\x04\
    \x02\0\x04\x12\x03\x1c\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x1c\
    \x11\x17\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1c\x18!\n\x0c\n\x05\x04\
    \x04\x02\0\x03\x12\x03\x1c$%\n\n\n\x02\x04\x05\x12\x04\x1f\0\"\x01\n\n\n\
    \x03\x04\x05\x01\x12\x03\x1f\x08/\n\x0b\n\x04\x04\x05\x02\0\x12\x03\x20\
    \x08&\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03\x20\x08\x10\n\x0c\n\x05\x04\
    \x05\x02\0\x05\x12\x03\x20\x11\x17\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03\
    \x20\x18!\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03\x20$%\n\x0b\n\x04\x04\
    \x05\x02\x01\x12\x03!\x08*\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03!\x08\
    \x10\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03!\x11\x18\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x03!\x19%\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03!(\
    )\n\n\n\x02\x04\x06\x12\x04$\0&\x01\n\n\n\x03\x04\x06\x01\x12\x03$\x080\
    \n\x0b\n\x04\x04\x06\x02\0\x12\x03%\x08&\n\x0c\n\x05\x04\x06\x02\0\x04\
    \x12\x03%\x08\x10\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03%\x11\x17\n\x0c\n\
    \x05\x04\x06\x02\0\x01\x12\x03%\x18!\n\x0c\n\x05\x04\x06\x02\0\x03\x12\
    \x03%$%\n\n\n\x02\x04\x07\x12\x04(\0+\x01\n\n\n\x03\x04\x07\x01\x12\x03(\
    \x08*\n\x0b\n\x04\x04\x07\x02\0\x12\x03)\x08&\n\x0c\n\x05\x04\x07\x02\0\
    \x04\x12\x03)\x08\x10\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03)\x11\x17\n\
    \x0c\n\x05\x04\x07\x02\0\x01\x12\x03)\x18!\n\x0c\n\x05\x04\x07\x02\0\x03\
    \x12\x03)$%\n\x0b\n\x04\x04\x07\x02\x01\x12\x03*\x08*\n\x0c\n\x05\x04\
    \x07\x02\x01\x04\x12\x03*\x08\x10\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\
    \x03*\x11\x18\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03*\x19%\n\x0c\n\x05\
    \x04\x07\x02\x01\x03\x12\x03*()\n\n\n\x02\x04\x08\x12\x04-\0/\x01\n\n\n\
    \x03\x04\x08\x01\x12\x03-\x08+\n\x0b\n\x04\x04\x08\x02\0\x12\x03.\x08&\n\
    \x0c\n\x05\x04\x08\x02\0\x04\x12\x03.\x08\x10\n\x0c\n\x05\x04\x08\x02\0\
    \x05\x12\x03.\x11\x17\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03.\x18!\n\x0c\
    \n\x05\x04\x08\x02\0\x03\x12\x03.$%\n\n\n\x02\x04\t\x12\x041\04\x01\n\n\
    \n\x03\x04\t\x01\x12\x031\x08+\n\x0b\n\x04\x04\t\x02\0\x12\x032\x08&\n\
    \x0c\n\x05\x04\t\x02\0\x04\x12\x032\x08\x10\n\x0c\n\x05\x04\t\x02\0\x05\
    \x12\x032\x11\x17\n\x0c\n\x05\x04\t\x02\0\x01\x12\x032\x18!\n\x0c\n\x05\
    \x04\t\x02\0\x03\x12\x032$%\n\x0b\n\x04\x04\t\x02\x01\x12\x033\x08+\n\
    \x0c\n\x05\x04\t\x02\x01\x04\x12\x033\x08\x10\n\x0c\n\x05\x04\t\x02\x01\
    \x05\x12\x033\x11\x17\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x033\x18&\n\x0c\
    \n\x05\x04\t\x02\x01\x03\x12\x033)*\n\n\n\x02\x04\n\x12\x046\08\x01\n\n\
    \n\x03\x04\n\x01\x12\x036\x08,\n\x0b\n\x04\x04\n\x02\0\x12\x037\x08&\n\
    \x0c\n\x05\x04\n\x02\0\x04\x12\x037\x08\x10\n\x0c\n\x05\x04\n\x02\0\x05\
    \x12\x037\x11\x17\n\x0c\n\x05\x04\n\x02\0\x01\x12\x037\x18!\n\x0c\n\x05\
    \x04\n\x02\0\x03\x12\x037$%\n\n\n\x02\x04\x0b\x12\x04:\0<\x01\n\n\n\x03\
    \x04\x0b\x01\x12\x03:\x08&\n\x0b\n\x04\x04\x0b\x02\0\x12\x03;\x08&\n\x0c\
    \n\x05\x04\x0b\x02\0\x04\x12\x03;\x08\x10\n\x0c\n\x05\x04\x0b\x02\0\x05\
    \x12\x03;\x11\x17\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03;\x18!\n\x0c\n\
    \x05\x04\x0b\x02\0\x03\x12\x03;$%\n\n\n\x02\x04\x0c\x12\x04>\0@\x01\n\n\
    \n\x03\x04\x0c\x01\x12\x03>\x08'\n\x0b\n\x04\x04\x0c\x02\0\x12\x03?\x08&\
    \n\x0c\n\x05\x04\x0c\x02\0\x04\x12\x03?\x08\x10\n\x0c\n\x05\x04\x0c\x02\
    \0\x05\x12\x03?\x11\x17\n\x0c\n\x05\x04\x0c\x02\0\x01\x12\x03?\x18!\n\
    \x0c\n\x05\x04\x0c\x02\0\x03\x12\x03?$%\n\n\n\x02\x06\0\x12\x04B\0\\\x01\
    \n\n\n\x03\x06\0\x01\x12\x03B\x08\x0f\n\n\n\x03\x06\0\x03\x12\x03C\x08@\
    \n\r\n\x06\x06\0\x03\xd0\x86\x03\x12\x03C\x08@\n\x0c\n\x04\x06\0\x02\0\
    \x12\x04E\x08G\t\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03E\x0c\x15\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03E\x172\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03E=\
    Y\n\r\n\x05\x06\0\x02\0\x04\x12\x04F\x10\x9e\x01\n\x10\n\x08\x06\0\x02\0\
    \x04\xd0\x86\x03\x12\x04F\x10\x9e\x01\n\x0c\n\x04\x06\0\x02\x01\x12\x04I\
    \x08K\t\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03I\x0c\x18\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03I\x1a8\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03ICb\n\
    \x0c\n\x05\x06\0\x02\x01\x04\x12\x03J\x10a\n\x0f\n\x08\x06\0\x02\x01\x04\
    \xd0\x86\x03\x12\x03J\x10a\n\x0c\n\x04\x06\0\x02\x02\x12\x04M\x08O\t\n\
    \x0c\n\x05\x06\0\x02\x02\x01\x12\x03M\x0c\"\n\x0c\n\x05\x06\0\x02\x02\
    \x02\x12\x03M$L\n\r\n\x05\x06\0\x02\x02\x03\x12\x04MW\x80\x01\n\x0c\n\
    \x05\x06\0\x02\x02\x04\x12\x03N\x10u\n\x0f\n\x08\x06\0\x02\x02\x04\xd0\
    \x86\x03\x12\x03N\x10u\n\x0c\n\x04\x06\0\x02\x03\x12\x04Q\x08S\t\n\x0c\n\
    \x05\x06\0\x02\x03\x01\x12\x03Q\x0c\x1d\n\x0c\n\x05\x06\0\x02\x03\x02\
    \x12\x03Q\x1fB\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03QMq\n\r\n\x05\x06\0\
    \x02\x03\x04\x12\x04R\x10\x8b\x01\n\x10\n\x08\x06\0\x02\x03\x04\xd0\x86\
    \x03\x12\x04R\x10\x8b\x01\n\x0c\n\x04\x06\0\x02\x04\x12\x04U\x08W\t\n\
    \x0c\n\x05\x06\0\x02\x04\x01\x12\x03U\x0c\x1e\n\x0c\n\x05\x06\0\x02\x04\
    \x02\x12\x03U\x20D\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03UOt\n\x0c\n\x05\
    \x06\0\x02\x04\x04\x12\x03V\x10P\n\x0f\n\x08\x06\0\x02\x04\x04\xd0\x86\
    \x03\x12\x03V\x10P\n\x0c\n\x04\x06\0\x02\x05\x12\x04Y\x08[\t\n\x0c\n\x05\
    \x06\0\x02\x05\x01\x12\x03Y\x0c\x19\n\x0c\n\x05\x06\0\x02\x05\x02\x12\
    \x03Y\x1b:\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03YEe\n\x0c\n\x05\x06\0\
    \x02\x05\x04\x12\x03Z\x10C\n\x0f\n\x08\x06\0\x02\x05\x04\xd0\x86\x03\x12\
    \x03Z\x10C\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(13);
            messages.push(CParties_JoinParty_Request::generated_message_descriptor_data());
            messages.push(CParties_JoinParty_Response::generated_message_descriptor_data());
            messages.push(CParties_BeaconLocation::generated_message_descriptor_data());
            messages.push(CParties_CreateBeacon_Request::generated_message_descriptor_data());
            messages.push(CParties_CreateBeacon_Response::generated_message_descriptor_data());
            messages.push(CParties_OnReservationCompleted_Request::generated_message_descriptor_data());
            messages.push(CParties_OnReservationCompleted_Response::generated_message_descriptor_data());
            messages.push(CParties_CancelReservation_Request::generated_message_descriptor_data());
            messages.push(CParties_CancelReservation_Response::generated_message_descriptor_data());
            messages.push(CParties_ChangeNumOpenSlots_Request::generated_message_descriptor_data());
            messages.push(CParties_ChangeNumOpenSlots_Response::generated_message_descriptor_data());
            messages.push(CParties_DestroyBeacon_Request::generated_message_descriptor_data());
            messages.push(CParties_DestroyBeacon_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
