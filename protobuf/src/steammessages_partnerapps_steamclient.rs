// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_partnerapps.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CPartnerApps_RequestUploadToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_RequestUploadToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_RequestUploadToken_Request.filename)
    pub filename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_RequestUploadToken_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_RequestUploadToken_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_RequestUploadToken_Request {
    fn default() -> &'a CPartnerApps_RequestUploadToken_Request {
        <CPartnerApps_RequestUploadToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_RequestUploadToken_Request {
    pub fn new() -> CPartnerApps_RequestUploadToken_Request {
        ::std::default::Default::default()
    }

    // optional string filename = 1;

    pub fn filename(&self) -> &str {
        match self.filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_filename(&mut self) {
        self.filename = ::std::option::Option::None;
    }

    pub fn has_filename(&self) -> bool {
        self.filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        if self.filename.is_none() {
            self.filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        self.filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "filename",
            |m: &CPartnerApps_RequestUploadToken_Request| { &m.filename },
            |m: &mut CPartnerApps_RequestUploadToken_Request| { &mut m.filename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPartnerApps_RequestUploadToken_Request| { &m.appid },
            |m: &mut CPartnerApps_RequestUploadToken_Request| { &mut m.appid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_RequestUploadToken_Request>(
            "CPartnerApps_RequestUploadToken_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_RequestUploadToken_Request {
    const NAME: &'static str = "CPartnerApps_RequestUploadToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.filename = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.filename.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.filename.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_RequestUploadToken_Request {
        CPartnerApps_RequestUploadToken_Request::new()
    }

    fn clear(&mut self) {
        self.filename = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_RequestUploadToken_Request {
        static instance: CPartnerApps_RequestUploadToken_Request = CPartnerApps_RequestUploadToken_Request {
            filename: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_RequestUploadToken_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_RequestUploadToken_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_RequestUploadToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_RequestUploadToken_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_RequestUploadToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_RequestUploadToken_Response {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_RequestUploadToken_Response.upload_token)
    pub upload_token: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_RequestUploadToken_Response.location)
    pub location: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_RequestUploadToken_Response.routing_id)
    pub routing_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_RequestUploadToken_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_RequestUploadToken_Response {
    fn default() -> &'a CPartnerApps_RequestUploadToken_Response {
        <CPartnerApps_RequestUploadToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_RequestUploadToken_Response {
    pub fn new() -> CPartnerApps_RequestUploadToken_Response {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;

    pub fn upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }

    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional string location = 2;

    pub fn location(&self) -> &str {
        match self.location.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_location(&mut self) {
        self.location = ::std::option::Option::None;
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: ::std::string::String) {
        self.location = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut ::std::string::String {
        if self.location.is_none() {
            self.location = ::std::option::Option::Some(::std::string::String::new());
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> ::std::string::String {
        self.location.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 routing_id = 3;

    pub fn routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }

    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "upload_token",
            |m: &CPartnerApps_RequestUploadToken_Response| { &m.upload_token },
            |m: &mut CPartnerApps_RequestUploadToken_Response| { &mut m.upload_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "location",
            |m: &CPartnerApps_RequestUploadToken_Response| { &m.location },
            |m: &mut CPartnerApps_RequestUploadToken_Response| { &mut m.location },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "routing_id",
            |m: &CPartnerApps_RequestUploadToken_Response| { &m.routing_id },
            |m: &mut CPartnerApps_RequestUploadToken_Response| { &mut m.routing_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_RequestUploadToken_Response>(
            "CPartnerApps_RequestUploadToken_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_RequestUploadToken_Response {
    const NAME: &'static str = "CPartnerApps_RequestUploadToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.upload_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.location = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.routing_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.location.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.location.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_RequestUploadToken_Response {
        CPartnerApps_RequestUploadToken_Response::new()
    }

    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.location = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_RequestUploadToken_Response {
        static instance: CPartnerApps_RequestUploadToken_Response = CPartnerApps_RequestUploadToken_Response {
            upload_token: ::std::option::Option::None,
            location: ::std::option::Option::None,
            routing_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_RequestUploadToken_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_RequestUploadToken_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_RequestUploadToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_RequestUploadToken_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_FinishUpload_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUpload_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FinishUpload_Request.upload_token)
    pub upload_token: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUpload_Request.routing_id)
    pub routing_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUpload_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUpload_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUpload_Request {
    fn default() -> &'a CPartnerApps_FinishUpload_Request {
        <CPartnerApps_FinishUpload_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUpload_Request {
    pub fn new() -> CPartnerApps_FinishUpload_Request {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;

    pub fn upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }

    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional uint64 routing_id = 2;

    pub fn routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }

    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 3;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "upload_token",
            |m: &CPartnerApps_FinishUpload_Request| { &m.upload_token },
            |m: &mut CPartnerApps_FinishUpload_Request| { &mut m.upload_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "routing_id",
            |m: &CPartnerApps_FinishUpload_Request| { &m.routing_id },
            |m: &mut CPartnerApps_FinishUpload_Request| { &mut m.routing_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CPartnerApps_FinishUpload_Request| { &m.app_id },
            |m: &mut CPartnerApps_FinishUpload_Request| { &mut m.app_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_FinishUpload_Request>(
            "CPartnerApps_FinishUpload_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUpload_Request {
    const NAME: &'static str = "CPartnerApps_FinishUpload_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.upload_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.routing_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUpload_Request {
        CPartnerApps_FinishUpload_Request::new()
    }

    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUpload_Request {
        static instance: CPartnerApps_FinishUpload_Request = CPartnerApps_FinishUpload_Request {
            upload_token: ::std::option::Option::None,
            routing_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_FinishUpload_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_FinishUpload_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_FinishUpload_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUpload_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_FinishUploadKVSign_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUploadKVSign_Response {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadKVSign_Response.signed_installscript)
    pub signed_installscript: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUploadKVSign_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadKVSign_Response {
    fn default() -> &'a CPartnerApps_FinishUploadKVSign_Response {
        <CPartnerApps_FinishUploadKVSign_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadKVSign_Response {
    pub fn new() -> CPartnerApps_FinishUploadKVSign_Response {
        ::std::default::Default::default()
    }

    // optional string signed_installscript = 1;

    pub fn signed_installscript(&self) -> &str {
        match self.signed_installscript.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_signed_installscript(&mut self) {
        self.signed_installscript = ::std::option::Option::None;
    }

    pub fn has_signed_installscript(&self) -> bool {
        self.signed_installscript.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signed_installscript(&mut self, v: ::std::string::String) {
        self.signed_installscript = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_installscript(&mut self) -> &mut ::std::string::String {
        if self.signed_installscript.is_none() {
            self.signed_installscript = ::std::option::Option::Some(::std::string::String::new());
        }
        self.signed_installscript.as_mut().unwrap()
    }

    // Take field
    pub fn take_signed_installscript(&mut self) -> ::std::string::String {
        self.signed_installscript.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signed_installscript",
            |m: &CPartnerApps_FinishUploadKVSign_Response| { &m.signed_installscript },
            |m: &mut CPartnerApps_FinishUploadKVSign_Response| { &mut m.signed_installscript },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_FinishUploadKVSign_Response>(
            "CPartnerApps_FinishUploadKVSign_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadKVSign_Response {
    const NAME: &'static str = "CPartnerApps_FinishUploadKVSign_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signed_installscript = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signed_installscript.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signed_installscript.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUploadKVSign_Response {
        CPartnerApps_FinishUploadKVSign_Response::new()
    }

    fn clear(&mut self) {
        self.signed_installscript = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadKVSign_Response {
        static instance: CPartnerApps_FinishUploadKVSign_Response = CPartnerApps_FinishUploadKVSign_Response {
            signed_installscript: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_FinishUploadKVSign_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_FinishUploadKVSign_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_FinishUploadKVSign_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUploadKVSign_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_FinishUploadLegacyDRM_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUploadLegacyDRM_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadLegacyDRM_Request.upload_token)
    pub upload_token: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadLegacyDRM_Request.routing_id)
    pub routing_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadLegacyDRM_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadLegacyDRM_Request.flags)
    pub flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadLegacyDRM_Request.tool_name)
    pub tool_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUploadLegacyDRM_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadLegacyDRM_Request {
    fn default() -> &'a CPartnerApps_FinishUploadLegacyDRM_Request {
        <CPartnerApps_FinishUploadLegacyDRM_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadLegacyDRM_Request {
    pub fn new() -> CPartnerApps_FinishUploadLegacyDRM_Request {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;

    pub fn upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }

    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional uint64 routing_id = 2;

    pub fn routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }

    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 3;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 flags = 4;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional string tool_name = 5;

    pub fn tool_name(&self) -> &str {
        match self.tool_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_tool_name(&mut self) {
        self.tool_name = ::std::option::Option::None;
    }

    pub fn has_tool_name(&self) -> bool {
        self.tool_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tool_name(&mut self, v: ::std::string::String) {
        self.tool_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tool_name(&mut self) -> &mut ::std::string::String {
        if self.tool_name.is_none() {
            self.tool_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.tool_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_tool_name(&mut self) -> ::std::string::String {
        self.tool_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "upload_token",
            |m: &CPartnerApps_FinishUploadLegacyDRM_Request| { &m.upload_token },
            |m: &mut CPartnerApps_FinishUploadLegacyDRM_Request| { &mut m.upload_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "routing_id",
            |m: &CPartnerApps_FinishUploadLegacyDRM_Request| { &m.routing_id },
            |m: &mut CPartnerApps_FinishUploadLegacyDRM_Request| { &mut m.routing_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CPartnerApps_FinishUploadLegacyDRM_Request| { &m.app_id },
            |m: &mut CPartnerApps_FinishUploadLegacyDRM_Request| { &mut m.app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "flags",
            |m: &CPartnerApps_FinishUploadLegacyDRM_Request| { &m.flags },
            |m: &mut CPartnerApps_FinishUploadLegacyDRM_Request| { &mut m.flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tool_name",
            |m: &CPartnerApps_FinishUploadLegacyDRM_Request| { &m.tool_name },
            |m: &mut CPartnerApps_FinishUploadLegacyDRM_Request| { &mut m.tool_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_FinishUploadLegacyDRM_Request>(
            "CPartnerApps_FinishUploadLegacyDRM_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadLegacyDRM_Request {
    const NAME: &'static str = "CPartnerApps_FinishUploadLegacyDRM_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.upload_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.routing_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.tool_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.tool_name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.flags {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.tool_name.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUploadLegacyDRM_Request {
        CPartnerApps_FinishUploadLegacyDRM_Request::new()
    }

    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.flags = ::std::option::Option::None;
        self.tool_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadLegacyDRM_Request {
        static instance: CPartnerApps_FinishUploadLegacyDRM_Request = CPartnerApps_FinishUploadLegacyDRM_Request {
            upload_token: ::std::option::Option::None,
            routing_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            flags: ::std::option::Option::None,
            tool_name: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_FinishUploadLegacyDRM_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_FinishUploadLegacyDRM_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_FinishUploadLegacyDRM_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUploadLegacyDRM_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_FinishUploadLegacyDRM_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUploadLegacyDRM_Response {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadLegacyDRM_Response.file_id)
    pub file_id: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUploadLegacyDRM_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadLegacyDRM_Response {
    fn default() -> &'a CPartnerApps_FinishUploadLegacyDRM_Response {
        <CPartnerApps_FinishUploadLegacyDRM_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadLegacyDRM_Response {
    pub fn new() -> CPartnerApps_FinishUploadLegacyDRM_Response {
        ::std::default::Default::default()
    }

    // optional string file_id = 1;

    pub fn file_id(&self) -> &str {
        match self.file_id.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_id(&mut self) {
        self.file_id = ::std::option::Option::None;
    }

    pub fn has_file_id(&self) -> bool {
        self.file_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_id(&mut self, v: ::std::string::String) {
        self.file_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_id(&mut self) -> &mut ::std::string::String {
        if self.file_id.is_none() {
            self.file_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_id(&mut self) -> ::std::string::String {
        self.file_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_id",
            |m: &CPartnerApps_FinishUploadLegacyDRM_Response| { &m.file_id },
            |m: &mut CPartnerApps_FinishUploadLegacyDRM_Response| { &mut m.file_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_FinishUploadLegacyDRM_Response>(
            "CPartnerApps_FinishUploadLegacyDRM_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadLegacyDRM_Response {
    const NAME: &'static str = "CPartnerApps_FinishUploadLegacyDRM_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.file_id = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.file_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.file_id.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUploadLegacyDRM_Response {
        CPartnerApps_FinishUploadLegacyDRM_Response::new()
    }

    fn clear(&mut self) {
        self.file_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadLegacyDRM_Response {
        static instance: CPartnerApps_FinishUploadLegacyDRM_Response = CPartnerApps_FinishUploadLegacyDRM_Response {
            file_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_FinishUploadLegacyDRM_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_FinishUploadLegacyDRM_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_FinishUploadLegacyDRM_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUploadLegacyDRM_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_FinishUpload_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUpload_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUpload_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUpload_Response {
    fn default() -> &'a CPartnerApps_FinishUpload_Response {
        <CPartnerApps_FinishUpload_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUpload_Response {
    pub fn new() -> CPartnerApps_FinishUpload_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_FinishUpload_Response>(
            "CPartnerApps_FinishUpload_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUpload_Response {
    const NAME: &'static str = "CPartnerApps_FinishUpload_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUpload_Response {
        CPartnerApps_FinishUpload_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUpload_Response {
        static instance: CPartnerApps_FinishUpload_Response = CPartnerApps_FinishUpload_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_FinishUpload_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_FinishUpload_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_FinishUpload_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUpload_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_FinishUploadDepot_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUploadDepot_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadDepot_Request.upload_token)
    pub upload_token: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadDepot_Request.routing_id)
    pub routing_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadDepot_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadDepot_Request.depot_id)
    pub depot_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadDepot_Request.build_flags)
    pub build_flags: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUploadDepot_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadDepot_Request {
    fn default() -> &'a CPartnerApps_FinishUploadDepot_Request {
        <CPartnerApps_FinishUploadDepot_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadDepot_Request {
    pub fn new() -> CPartnerApps_FinishUploadDepot_Request {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;

    pub fn upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }

    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional uint64 routing_id = 2;

    pub fn routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }

    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 3;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 depot_id = 4;

    pub fn depot_id(&self) -> u32 {
        self.depot_id.unwrap_or(0)
    }

    pub fn clear_depot_id(&mut self) {
        self.depot_id = ::std::option::Option::None;
    }

    pub fn has_depot_id(&self) -> bool {
        self.depot_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depot_id(&mut self, v: u32) {
        self.depot_id = ::std::option::Option::Some(v);
    }

    // optional uint32 build_flags = 5;

    pub fn build_flags(&self) -> u32 {
        self.build_flags.unwrap_or(0)
    }

    pub fn clear_build_flags(&mut self) {
        self.build_flags = ::std::option::Option::None;
    }

    pub fn has_build_flags(&self) -> bool {
        self.build_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_build_flags(&mut self, v: u32) {
        self.build_flags = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "upload_token",
            |m: &CPartnerApps_FinishUploadDepot_Request| { &m.upload_token },
            |m: &mut CPartnerApps_FinishUploadDepot_Request| { &mut m.upload_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "routing_id",
            |m: &CPartnerApps_FinishUploadDepot_Request| { &m.routing_id },
            |m: &mut CPartnerApps_FinishUploadDepot_Request| { &mut m.routing_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CPartnerApps_FinishUploadDepot_Request| { &m.app_id },
            |m: &mut CPartnerApps_FinishUploadDepot_Request| { &mut m.app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "depot_id",
            |m: &CPartnerApps_FinishUploadDepot_Request| { &m.depot_id },
            |m: &mut CPartnerApps_FinishUploadDepot_Request| { &mut m.depot_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "build_flags",
            |m: &CPartnerApps_FinishUploadDepot_Request| { &m.build_flags },
            |m: &mut CPartnerApps_FinishUploadDepot_Request| { &mut m.build_flags },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_FinishUploadDepot_Request>(
            "CPartnerApps_FinishUploadDepot_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadDepot_Request {
    const NAME: &'static str = "CPartnerApps_FinishUploadDepot_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.upload_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.routing_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.depot_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.build_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.depot_id {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.build_flags {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.depot_id {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.build_flags {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUploadDepot_Request {
        CPartnerApps_FinishUploadDepot_Request::new()
    }

    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.depot_id = ::std::option::Option::None;
        self.build_flags = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadDepot_Request {
        static instance: CPartnerApps_FinishUploadDepot_Request = CPartnerApps_FinishUploadDepot_Request {
            upload_token: ::std::option::Option::None,
            routing_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            depot_id: ::std::option::Option::None,
            build_flags: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_FinishUploadDepot_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_FinishUploadDepot_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_FinishUploadDepot_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUploadDepot_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_FinishUploadDepot_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUploadDepot_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUploadDepot_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadDepot_Response {
    fn default() -> &'a CPartnerApps_FinishUploadDepot_Response {
        <CPartnerApps_FinishUploadDepot_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadDepot_Response {
    pub fn new() -> CPartnerApps_FinishUploadDepot_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_FinishUploadDepot_Response>(
            "CPartnerApps_FinishUploadDepot_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadDepot_Response {
    const NAME: &'static str = "CPartnerApps_FinishUploadDepot_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUploadDepot_Response {
        CPartnerApps_FinishUploadDepot_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadDepot_Response {
        static instance: CPartnerApps_FinishUploadDepot_Response = CPartnerApps_FinishUploadDepot_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_FinishUploadDepot_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_FinishUploadDepot_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_FinishUploadDepot_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FinishUploadDepot_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_GetDepotBuildResult_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_GetDepotBuildResult_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_GetDepotBuildResult_Request.upload_token)
    pub upload_token: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_GetDepotBuildResult_Request.routing_id)
    pub routing_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_GetDepotBuildResult_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_GetDepotBuildResult_Request {
    fn default() -> &'a CPartnerApps_GetDepotBuildResult_Request {
        <CPartnerApps_GetDepotBuildResult_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_GetDepotBuildResult_Request {
    pub fn new() -> CPartnerApps_GetDepotBuildResult_Request {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;

    pub fn upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }

    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional uint64 routing_id = 2;

    pub fn routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }

    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "upload_token",
            |m: &CPartnerApps_GetDepotBuildResult_Request| { &m.upload_token },
            |m: &mut CPartnerApps_GetDepotBuildResult_Request| { &mut m.upload_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "routing_id",
            |m: &CPartnerApps_GetDepotBuildResult_Request| { &m.routing_id },
            |m: &mut CPartnerApps_GetDepotBuildResult_Request| { &mut m.routing_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_GetDepotBuildResult_Request>(
            "CPartnerApps_GetDepotBuildResult_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_GetDepotBuildResult_Request {
    const NAME: &'static str = "CPartnerApps_GetDepotBuildResult_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.upload_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.routing_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_GetDepotBuildResult_Request {
        CPartnerApps_GetDepotBuildResult_Request::new()
    }

    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_GetDepotBuildResult_Request {
        static instance: CPartnerApps_GetDepotBuildResult_Request = CPartnerApps_GetDepotBuildResult_Request {
            upload_token: ::std::option::Option::None,
            routing_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_GetDepotBuildResult_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_GetDepotBuildResult_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_GetDepotBuildResult_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_GetDepotBuildResult_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_GetDepotBuildResult_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_GetDepotBuildResult_Response {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_GetDepotBuildResult_Response.manifest_id)
    pub manifest_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_GetDepotBuildResult_Response.error_msg)
    pub error_msg: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_GetDepotBuildResult_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_GetDepotBuildResult_Response {
    fn default() -> &'a CPartnerApps_GetDepotBuildResult_Response {
        <CPartnerApps_GetDepotBuildResult_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_GetDepotBuildResult_Response {
    pub fn new() -> CPartnerApps_GetDepotBuildResult_Response {
        ::std::default::Default::default()
    }

    // optional uint64 manifest_id = 1;

    pub fn manifest_id(&self) -> u64 {
        self.manifest_id.unwrap_or(0)
    }

    pub fn clear_manifest_id(&mut self) {
        self.manifest_id = ::std::option::Option::None;
    }

    pub fn has_manifest_id(&self) -> bool {
        self.manifest_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifest_id(&mut self, v: u64) {
        self.manifest_id = ::std::option::Option::Some(v);
    }

    // optional string error_msg = 2;

    pub fn error_msg(&self) -> &str {
        match self.error_msg.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_error_msg(&mut self) {
        self.error_msg = ::std::option::Option::None;
    }

    pub fn has_error_msg(&self) -> bool {
        self.error_msg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_msg(&mut self, v: ::std::string::String) {
        self.error_msg = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_msg(&mut self) -> &mut ::std::string::String {
        if self.error_msg.is_none() {
            self.error_msg = ::std::option::Option::Some(::std::string::String::new());
        }
        self.error_msg.as_mut().unwrap()
    }

    // Take field
    pub fn take_error_msg(&mut self) -> ::std::string::String {
        self.error_msg.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "manifest_id",
            |m: &CPartnerApps_GetDepotBuildResult_Response| { &m.manifest_id },
            |m: &mut CPartnerApps_GetDepotBuildResult_Response| { &mut m.manifest_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "error_msg",
            |m: &CPartnerApps_GetDepotBuildResult_Response| { &m.error_msg },
            |m: &mut CPartnerApps_GetDepotBuildResult_Response| { &mut m.error_msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_GetDepotBuildResult_Response>(
            "CPartnerApps_GetDepotBuildResult_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_GetDepotBuildResult_Response {
    const NAME: &'static str = "CPartnerApps_GetDepotBuildResult_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.manifest_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.error_msg = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.manifest_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.error_msg.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.manifest_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.error_msg.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_GetDepotBuildResult_Response {
        CPartnerApps_GetDepotBuildResult_Response::new()
    }

    fn clear(&mut self) {
        self.manifest_id = ::std::option::Option::None;
        self.error_msg = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_GetDepotBuildResult_Response {
        static instance: CPartnerApps_GetDepotBuildResult_Response = CPartnerApps_GetDepotBuildResult_Response {
            manifest_id: ::std::option::Option::None,
            error_msg: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_GetDepotBuildResult_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_GetDepotBuildResult_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_GetDepotBuildResult_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_GetDepotBuildResult_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_FindDRMUploads_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FindDRMUploads_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FindDRMUploads_Request.app_id)
    pub app_id: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FindDRMUploads_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FindDRMUploads_Request {
    fn default() -> &'a CPartnerApps_FindDRMUploads_Request {
        <CPartnerApps_FindDRMUploads_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FindDRMUploads_Request {
    pub fn new() -> CPartnerApps_FindDRMUploads_Request {
        ::std::default::Default::default()
    }

    // optional int32 app_id = 1;

    pub fn app_id(&self) -> i32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: i32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CPartnerApps_FindDRMUploads_Request| { &m.app_id },
            |m: &mut CPartnerApps_FindDRMUploads_Request| { &mut m.app_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_FindDRMUploads_Request>(
            "CPartnerApps_FindDRMUploads_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_FindDRMUploads_Request {
    const NAME: &'static str = "CPartnerApps_FindDRMUploads_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.app_id {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FindDRMUploads_Request {
        CPartnerApps_FindDRMUploads_Request::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FindDRMUploads_Request {
        static instance: CPartnerApps_FindDRMUploads_Request = CPartnerApps_FindDRMUploads_Request {
            app_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_FindDRMUploads_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_FindDRMUploads_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_FindDRMUploads_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FindDRMUploads_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_ExistingDRMUpload)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_ExistingDRMUpload {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.file_id)
    pub file_id: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.actor_id)
    pub actor_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.supplied_name)
    pub supplied_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.flags)
    pub flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.mod_type)
    pub mod_type: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.timestamp)
    pub timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.orig_file_id)
    pub orig_file_id: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_ExistingDRMUpload.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_ExistingDRMUpload {
    fn default() -> &'a CPartnerApps_ExistingDRMUpload {
        <CPartnerApps_ExistingDRMUpload as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_ExistingDRMUpload {
    pub fn new() -> CPartnerApps_ExistingDRMUpload {
        ::std::default::Default::default()
    }

    // optional string file_id = 1;

    pub fn file_id(&self) -> &str {
        match self.file_id.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_id(&mut self) {
        self.file_id = ::std::option::Option::None;
    }

    pub fn has_file_id(&self) -> bool {
        self.file_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_id(&mut self, v: ::std::string::String) {
        self.file_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_id(&mut self) -> &mut ::std::string::String {
        if self.file_id.is_none() {
            self.file_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_id(&mut self) -> ::std::string::String {
        self.file_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 app_id = 2;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional int32 actor_id = 3;

    pub fn actor_id(&self) -> i32 {
        self.actor_id.unwrap_or(0)
    }

    pub fn clear_actor_id(&mut self) {
        self.actor_id = ::std::option::Option::None;
    }

    pub fn has_actor_id(&self) -> bool {
        self.actor_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_actor_id(&mut self, v: i32) {
        self.actor_id = ::std::option::Option::Some(v);
    }

    // optional string supplied_name = 5;

    pub fn supplied_name(&self) -> &str {
        match self.supplied_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_supplied_name(&mut self) {
        self.supplied_name = ::std::option::Option::None;
    }

    pub fn has_supplied_name(&self) -> bool {
        self.supplied_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_supplied_name(&mut self, v: ::std::string::String) {
        self.supplied_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_supplied_name(&mut self) -> &mut ::std::string::String {
        if self.supplied_name.is_none() {
            self.supplied_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.supplied_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_supplied_name(&mut self) -> ::std::string::String {
        self.supplied_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 flags = 6;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional string mod_type = 7;

    pub fn mod_type(&self) -> &str {
        match self.mod_type.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_mod_type(&mut self) {
        self.mod_type = ::std::option::Option::None;
    }

    pub fn has_mod_type(&self) -> bool {
        self.mod_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mod_type(&mut self, v: ::std::string::String) {
        self.mod_type = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mod_type(&mut self) -> &mut ::std::string::String {
        if self.mod_type.is_none() {
            self.mod_type = ::std::option::Option::Some(::std::string::String::new());
        }
        self.mod_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_mod_type(&mut self) -> ::std::string::String {
        self.mod_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed32 timestamp = 8;

    pub fn timestamp(&self) -> u32 {
        self.timestamp.unwrap_or(0)
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u32) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional string orig_file_id = 9;

    pub fn orig_file_id(&self) -> &str {
        match self.orig_file_id.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_orig_file_id(&mut self) {
        self.orig_file_id = ::std::option::Option::None;
    }

    pub fn has_orig_file_id(&self) -> bool {
        self.orig_file_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orig_file_id(&mut self, v: ::std::string::String) {
        self.orig_file_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orig_file_id(&mut self) -> &mut ::std::string::String {
        if self.orig_file_id.is_none() {
            self.orig_file_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.orig_file_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_orig_file_id(&mut self) -> ::std::string::String {
        self.orig_file_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_id",
            |m: &CPartnerApps_ExistingDRMUpload| { &m.file_id },
            |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.file_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CPartnerApps_ExistingDRMUpload| { &m.app_id },
            |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.app_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "actor_id",
            |m: &CPartnerApps_ExistingDRMUpload| { &m.actor_id },
            |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.actor_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "supplied_name",
            |m: &CPartnerApps_ExistingDRMUpload| { &m.supplied_name },
            |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.supplied_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "flags",
            |m: &CPartnerApps_ExistingDRMUpload| { &m.flags },
            |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "mod_type",
            |m: &CPartnerApps_ExistingDRMUpload| { &m.mod_type },
            |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.mod_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timestamp",
            |m: &CPartnerApps_ExistingDRMUpload| { &m.timestamp },
            |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "orig_file_id",
            |m: &CPartnerApps_ExistingDRMUpload| { &m.orig_file_id },
            |m: &mut CPartnerApps_ExistingDRMUpload| { &mut m.orig_file_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_ExistingDRMUpload>(
            "CPartnerApps_ExistingDRMUpload",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_ExistingDRMUpload {
    const NAME: &'static str = "CPartnerApps_ExistingDRMUpload";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.file_id = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.actor_id = ::std::option::Option::Some(is.read_int32()?);
                },
                42 => {
                    self.supplied_name = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.mod_type = ::std::option::Option::Some(is.read_string()?);
                },
                69 => {
                    self.timestamp = ::std::option::Option::Some(is.read_fixed32()?);
                },
                74 => {
                    self.orig_file_id = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.file_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.actor_id {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.supplied_name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.mod_type.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.timestamp {
            my_size += 1 + 4;
        }
        if let Some(v) = self.orig_file_id.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.file_id.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.actor_id {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.supplied_name.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.flags {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.mod_type.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_fixed32(8, v)?;
        }
        if let Some(v) = self.orig_file_id.as_ref() {
            os.write_string(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_ExistingDRMUpload {
        CPartnerApps_ExistingDRMUpload::new()
    }

    fn clear(&mut self) {
        self.file_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.actor_id = ::std::option::Option::None;
        self.supplied_name = ::std::option::Option::None;
        self.flags = ::std::option::Option::None;
        self.mod_type = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.orig_file_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_ExistingDRMUpload {
        static instance: CPartnerApps_ExistingDRMUpload = CPartnerApps_ExistingDRMUpload {
            file_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            actor_id: ::std::option::Option::None,
            supplied_name: ::std::option::Option::None,
            flags: ::std::option::Option::None,
            mod_type: ::std::option::Option::None,
            timestamp: ::std::option::Option::None,
            orig_file_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_ExistingDRMUpload {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_ExistingDRMUpload").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_ExistingDRMUpload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_ExistingDRMUpload {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_FindDRMUploads_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FindDRMUploads_Response {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FindDRMUploads_Response.uploads)
    pub uploads: ::std::vec::Vec<CPartnerApps_ExistingDRMUpload>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FindDRMUploads_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FindDRMUploads_Response {
    fn default() -> &'a CPartnerApps_FindDRMUploads_Response {
        <CPartnerApps_FindDRMUploads_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FindDRMUploads_Response {
    pub fn new() -> CPartnerApps_FindDRMUploads_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "uploads",
            |m: &CPartnerApps_FindDRMUploads_Response| { &m.uploads },
            |m: &mut CPartnerApps_FindDRMUploads_Response| { &mut m.uploads },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_FindDRMUploads_Response>(
            "CPartnerApps_FindDRMUploads_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_FindDRMUploads_Response {
    const NAME: &'static str = "CPartnerApps_FindDRMUploads_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uploads.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.uploads {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.uploads {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FindDRMUploads_Response {
        CPartnerApps_FindDRMUploads_Response::new()
    }

    fn clear(&mut self) {
        self.uploads.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FindDRMUploads_Response {
        static instance: CPartnerApps_FindDRMUploads_Response = CPartnerApps_FindDRMUploads_Response {
            uploads: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_FindDRMUploads_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_FindDRMUploads_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_FindDRMUploads_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_FindDRMUploads_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_Download_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_Download_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_Download_Request.file_id)
    pub file_id: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_Download_Request.app_id)
    pub app_id: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_Download_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_Download_Request {
    fn default() -> &'a CPartnerApps_Download_Request {
        <CPartnerApps_Download_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_Download_Request {
    pub fn new() -> CPartnerApps_Download_Request {
        ::std::default::Default::default()
    }

    // optional string file_id = 1;

    pub fn file_id(&self) -> &str {
        match self.file_id.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_id(&mut self) {
        self.file_id = ::std::option::Option::None;
    }

    pub fn has_file_id(&self) -> bool {
        self.file_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_id(&mut self, v: ::std::string::String) {
        self.file_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_id(&mut self) -> &mut ::std::string::String {
        if self.file_id.is_none() {
            self.file_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_id(&mut self) -> ::std::string::String {
        self.file_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 app_id = 2;

    pub fn app_id(&self) -> i32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: i32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_id",
            |m: &CPartnerApps_Download_Request| { &m.file_id },
            |m: &mut CPartnerApps_Download_Request| { &mut m.file_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CPartnerApps_Download_Request| { &m.app_id },
            |m: &mut CPartnerApps_Download_Request| { &mut m.app_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_Download_Request>(
            "CPartnerApps_Download_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_Download_Request {
    const NAME: &'static str = "CPartnerApps_Download_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.file_id = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.app_id = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.file_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.file_id.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_Download_Request {
        CPartnerApps_Download_Request::new()
    }

    fn clear(&mut self) {
        self.file_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_Download_Request {
        static instance: CPartnerApps_Download_Request = CPartnerApps_Download_Request {
            file_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_Download_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_Download_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_Download_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_Download_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPartnerApps_Download_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_Download_Response {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_Download_Response.download_url)
    pub download_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_Download_Response.app_id)
    pub app_id: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_Download_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_Download_Response {
    fn default() -> &'a CPartnerApps_Download_Response {
        <CPartnerApps_Download_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_Download_Response {
    pub fn new() -> CPartnerApps_Download_Response {
        ::std::default::Default::default()
    }

    // optional string download_url = 1;

    pub fn download_url(&self) -> &str {
        match self.download_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_download_url(&mut self) {
        self.download_url = ::std::option::Option::None;
    }

    pub fn has_download_url(&self) -> bool {
        self.download_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_download_url(&mut self, v: ::std::string::String) {
        self.download_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_download_url(&mut self) -> &mut ::std::string::String {
        if self.download_url.is_none() {
            self.download_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.download_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_download_url(&mut self) -> ::std::string::String {
        self.download_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 app_id = 2;

    pub fn app_id(&self) -> i32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: i32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "download_url",
            |m: &CPartnerApps_Download_Response| { &m.download_url },
            |m: &mut CPartnerApps_Download_Response| { &mut m.download_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CPartnerApps_Download_Response| { &m.app_id },
            |m: &mut CPartnerApps_Download_Response| { &mut m.app_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPartnerApps_Download_Response>(
            "CPartnerApps_Download_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPartnerApps_Download_Response {
    const NAME: &'static str = "CPartnerApps_Download_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.download_url = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.app_id = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.download_url.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.download_url.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_Download_Response {
        CPartnerApps_Download_Response::new()
    }

    fn clear(&mut self) {
        self.download_url = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_Download_Response {
        static instance: CPartnerApps_Download_Response = CPartnerApps_Download_Response {
            download_url: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPartnerApps_Download_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPartnerApps_Download_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPartnerApps_Download_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPartnerApps_Download_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+steammessages_partnerapps.steamclient.proto\x1a,steammessages_unified\
    _base.steamclient.proto\"[\n'CPartnerApps_RequestUploadToken_Request\x12\
    \x1a\n\x08filename\x18\x01\x20\x01(\tR\x08filename\x12\x14\n\x05appid\
    \x18\x02\x20\x01(\rR\x05appid\"\x88\x01\n(CPartnerApps_RequestUploadToke\
    n_Response\x12!\n\x0cupload_token\x18\x01\x20\x01(\x04R\x0buploadToken\
    \x12\x1a\n\x08location\x18\x02\x20\x01(\tR\x08location\x12\x1d\n\nroutin\
    g_id\x18\x03\x20\x01(\x04R\troutingId\"|\n!CPartnerApps_FinishUpload_Req\
    uest\x12!\n\x0cupload_token\x18\x01\x20\x01(\x04R\x0buploadToken\x12\x1d\
    \n\nrouting_id\x18\x02\x20\x01(\x04R\troutingId\x12\x15\n\x06app_id\x18\
    \x03\x20\x01(\rR\x05appId\"]\n(CPartnerApps_FinishUploadKVSign_Response\
    \x121\n\x14signed_installscript\x18\x01\x20\x01(\tR\x13signedInstallscri\
    pt\"\xb8\x01\n*CPartnerApps_FinishUploadLegacyDRM_Request\x12!\n\x0cuplo\
    ad_token\x18\x01\x20\x01(\x04R\x0buploadToken\x12\x1d\n\nrouting_id\x18\
    \x02\x20\x01(\x04R\troutingId\x12\x15\n\x06app_id\x18\x03\x20\x01(\rR\
    \x05appId\x12\x14\n\x05flags\x18\x04\x20\x01(\rR\x05flags\x12\x1b\n\ttoo\
    l_name\x18\x05\x20\x01(\tR\x08toolName\"F\n+CPartnerApps_FinishUploadLeg\
    acyDRM_Response\x12\x17\n\x07file_id\x18\x01\x20\x01(\tR\x06fileId\"$\n\
    \"CPartnerApps_FinishUpload_Response\"\xbd\x01\n&CPartnerApps_FinishUplo\
    adDepot_Request\x12!\n\x0cupload_token\x18\x01\x20\x01(\x04R\x0buploadTo\
    ken\x12\x1d\n\nrouting_id\x18\x02\x20\x01(\x04R\troutingId\x12\x15\n\x06\
    app_id\x18\x03\x20\x01(\rR\x05appId\x12\x19\n\x08depot_id\x18\x04\x20\
    \x01(\rR\x07depotId\x12\x1f\n\x0bbuild_flags\x18\x05\x20\x01(\rR\nbuildF\
    lags\")\n'CPartnerApps_FinishUploadDepot_Response\"l\n(CPartnerApps_GetD\
    epotBuildResult_Request\x12!\n\x0cupload_token\x18\x01\x20\x01(\x04R\x0b\
    uploadToken\x12\x1d\n\nrouting_id\x18\x02\x20\x01(\x04R\troutingId\"i\n)\
    CPartnerApps_GetDepotBuildResult_Response\x12\x1f\n\x0bmanifest_id\x18\
    \x01\x20\x01(\x04R\nmanifestId\x12\x1b\n\terror_msg\x18\x02\x20\x01(\tR\
    \x08errorMsg\"<\n#CPartnerApps_FindDRMUploads_Request\x12\x15\n\x06app_i\
    d\x18\x01\x20\x01(\x05R\x05appId\"\x81\x02\n\x1eCPartnerApps_ExistingDRM\
    Upload\x12\x17\n\x07file_id\x18\x01\x20\x01(\tR\x06fileId\x12\x15\n\x06a\
    pp_id\x18\x02\x20\x01(\rR\x05appId\x12\x19\n\x08actor_id\x18\x03\x20\x01\
    (\x05R\x07actorId\x12#\n\rsupplied_name\x18\x05\x20\x01(\tR\x0csuppliedN\
    ame\x12\x14\n\x05flags\x18\x06\x20\x01(\rR\x05flags\x12\x19\n\x08mod_typ\
    e\x18\x07\x20\x01(\tR\x07modType\x12\x1c\n\ttimestamp\x18\x08\x20\x01(\
    \x07R\ttimestamp\x12\x20\n\x0corig_file_id\x18\t\x20\x01(\tR\norigFileId\
    \"a\n$CPartnerApps_FindDRMUploads_Response\x129\n\x07uploads\x18\x01\x20\
    \x03(\x0b2\x1f.CPartnerApps_ExistingDRMUploadR\x07uploads\"O\n\x1dCPartn\
    erApps_Download_Request\x12\x17\n\x07file_id\x18\x01\x20\x01(\tR\x06file\
    Id\x12\x15\n\x06app_id\x18\x02\x20\x01(\x05R\x05appId\"Z\n\x1eCPartnerAp\
    ps_Download_Response\x12!\n\x0cdownload_url\x18\x01\x20\x01(\tR\x0bdownl\
    oadUrl\x12\x15\n\x06app_id\x18\x02\x20\x01(\x05R\x05appId2\xa1\x0e\n\x0b\
    PartnerApps\x12\xb1\x01\n\x18RequestKVSignUploadToken\x12(.CPartnerApps_\
    RequestUploadToken_Request\x1a).CPartnerApps_RequestUploadToken_Response\
    \"@\x82\xb5\x18<Request\x20upload\x20token\x20for\x20installscript\x20fi\
    le\x20upload\x20/\x20signing\x12\xae\x01\n\x15RequestDRMUploadToken\x12(\
    .CPartnerApps_RequestUploadToken_Request\x1a).CPartnerApps_RequestUpload\
    Token_Response\"@\x82\xb5\x18<Request\x20upload\x20token\x20for\x20execu\
    table\x20file\x20upload\x20/\x20processing\x12\xb5\x01\n\x15RequestCEGUp\
    loadToken\x12(.CPartnerApps_RequestUploadToken_Request\x1a).CPartnerApps\
    _RequestUploadToken_Response\"G\x82\xb5\x18CRequest\x20upload\x20token\
    \x20for\x20custom\x20executable\x20file\x20upload\x20/\x20processing\x12\
    \xa3\x01\n\x17RequestDepotUploadToken\x12(.CPartnerApps_RequestUploadTok\
    en_Request\x1a).CPartnerApps_RequestUploadToken_Response\"3\x82\xb5\x18/\
    Request\x20upload\x20token\x20for\x20steampipe\x20depot\x20upload\x12\
    \xab\x01\n\x12FinishUploadKVSign\x12\".CPartnerApps_FinishUpload_Request\
    \x1a).CPartnerApps_FinishUploadKVSign_Response\"F\x82\xb5\x18BCommit\x20\
    method\x20to\x20sign\x20an\x20installscript\x20after\x20an\x20upload\x20\
    is\x20complete\x12\xa4\x01\n\x15FinishUploadDRMUpload\x12+.CPartnerApps_\
    FinishUploadLegacyDRM_Request\x1a,.CPartnerApps_FinishUploadLegacyDRM_Re\
    sponse\"0\x82\xb5\x18,Commit\x20method\x20for\x20executable\x20file\x20p\
    rocessing\x12\x99\x01\n\x15FinishUploadCEGUpload\x12\".CPartnerApps_Fini\
    shUpload_Request\x1a#.CPartnerApps_FinishUpload_Response\"7\x82\xb5\x183\
    Commit\x20method\x20for\x20custom\x20executable\x20file\x20processing\
    \x12\xa5\x01\n\x17FinishUploadDepotUpload\x12'.CPartnerApps_FinishUpload\
    Depot_Request\x1a(.CPartnerApps_FinishUploadDepot_Response\"7\x82\xb5\
    \x183Commit\x20method\x20for\x20custom\x20executable\x20file\x20processi\
    ng\x12\xa4\x01\n\x13GetDepotBuildResult\x12).CPartnerApps_GetDepotBuildR\
    esult_Request\x1a*.CPartnerApps_GetDepotBuildResult_Response\"6\x82\xb5\
    \x182Get\x20build\x20status\x20for\x20previously\x20uploaded\x20depot\
    \x20ZIP\x12\x8d\x01\n\x0eFindDRMUploads\x12$.CPartnerApps_FindDRMUploads\
    _Request\x1a%.CPartnerApps_FindDRMUploads_Response\".\x82\xb5\x18*Finds\
    \x20N\x20most\x20recent\x20prior\x20uploads\x20by\x20appid\x12K\n\x08Dow\
    nload\x12\x1e.CPartnerApps_Download_Request\x1a\x1f.CPartnerApps_Downloa\
    d_Response\x1a2\x82\xb5\x18.Service\x20methods\x20for\x20app\x20manageme\
    nt\x20by\x20partnersB\x03\x80\x01\x01J\xc6\x1f\n\x07\x12\x05\0\0\x86\x01\
    \x01\n\t\n\x02\x03\0\x12\x03\0\06\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\
    \x02\x08\x10\x12\x03\x02\0\"\n\n\n\x02\x04\0\x12\x04\x04\0\x07\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x04\x08/\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x08%\
    \n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x05\x08\x10\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x05\x11\x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x18\x20\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05#$\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x06\x08\"\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x06\x08\x10\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x06\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x06\x18\x1d\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x20!\n\n\
    \n\x02\x04\x01\x12\x04\t\0\r\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x080\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\n\x08)\n\x0c\n\x05\x04\x01\x02\0\x04\
    \x12\x03\n\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\n\x11\x17\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03\n\x18$\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\n'(\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0b\x08%\n\x0c\n\x05\
    \x04\x01\x02\x01\x04\x12\x03\x0b\x08\x10\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03\x0b\x11\x17\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0b\x18\x20\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0b#$\n\x0b\n\x04\x04\x01\x02\
    \x02\x12\x03\x0c\x08'\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\x0c\x08\
    \x10\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x0c\x11\x17\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03\x0c\x18\"\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03\x0c%&\n\n\n\x02\x04\x02\x12\x04\x0f\0\x13\x01\n\n\n\x03\x04\x02\x01\
    \x12\x03\x0f\x08)\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x10\x08)\n\x0c\n\x05\
    \x04\x02\x02\0\x04\x12\x03\x10\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x03\x10\x11\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x10\x18$\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03\x10'(\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\
    \x11\x08'\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x11\x08\x10\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03\x11\x11\x17\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03\x11\x18\"\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x11%&\n\
    \x0b\n\x04\x04\x02\x02\x02\x12\x03\x12\x08#\n\x0c\n\x05\x04\x02\x02\x02\
    \x04\x12\x03\x12\x08\x10\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x12\x11\
    \x17\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x12\x18\x1e\n\x0c\n\x05\x04\
    \x02\x02\x02\x03\x12\x03\x12!\"\n\n\n\x02\x04\x03\x12\x04\x15\0\x17\x01\
    \n\n\n\x03\x04\x03\x01\x12\x03\x15\x080\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03\x16\x081\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x16\x08\x10\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03\x16\x11\x17\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03\x16\x18,\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x16/0\n\n\n\x02\
    \x04\x04\x12\x04\x19\0\x1f\x01\n\n\n\x03\x04\x04\x01\x12\x03\x19\x082\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03\x1a\x08)\n\x0c\n\x05\x04\x04\x02\0\x04\
    \x12\x03\x1a\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x1a\x11\x17\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1a\x18$\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03\x1a'(\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x1b\x08'\n\x0c\n\
    \x05\x04\x04\x02\x01\x04\x12\x03\x1b\x08\x10\n\x0c\n\x05\x04\x04\x02\x01\
    \x05\x12\x03\x1b\x11\x17\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1b\x18\
    \"\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x1b%&\n\x0b\n\x04\x04\x04\x02\
    \x02\x12\x03\x1c\x08#\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x03\x1c\x08\
    \x10\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03\x1c\x11\x17\n\x0c\n\x05\x04\
    \x04\x02\x02\x01\x12\x03\x1c\x18\x1e\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\
    \x03\x1c!\"\n\x0b\n\x04\x04\x04\x02\x03\x12\x03\x1d\x08\"\n\x0c\n\x05\
    \x04\x04\x02\x03\x04\x12\x03\x1d\x08\x10\n\x0c\n\x05\x04\x04\x02\x03\x05\
    \x12\x03\x1d\x11\x17\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03\x1d\x18\x1d\
    \n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03\x1d\x20!\n\x0b\n\x04\x04\x04\
    \x02\x04\x12\x03\x1e\x08&\n\x0c\n\x05\x04\x04\x02\x04\x04\x12\x03\x1e\
    \x08\x10\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\x03\x1e\x11\x17\n\x0c\n\x05\
    \x04\x04\x02\x04\x01\x12\x03\x1e\x18!\n\x0c\n\x05\x04\x04\x02\x04\x03\
    \x12\x03\x1e$%\n\n\n\x02\x04\x05\x12\x04!\0#\x01\n\n\n\x03\x04\x05\x01\
    \x12\x03!\x083\n\x0b\n\x04\x04\x05\x02\0\x12\x03\"\x08$\n\x0c\n\x05\x04\
    \x05\x02\0\x04\x12\x03\"\x08\x10\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03\"\
    \x11\x17\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03\"\x18\x1f\n\x0c\n\x05\x04\
    \x05\x02\0\x03\x12\x03\"\"#\n\n\n\x02\x04\x06\x12\x04%\0&\x01\n\n\n\x03\
    \x04\x06\x01\x12\x03%\x08*\n\n\n\x02\x04\x07\x12\x04(\0.\x01\n\n\n\x03\
    \x04\x07\x01\x12\x03(\x08.\n\x0b\n\x04\x04\x07\x02\0\x12\x03)\x08)\n\x0c\
    \n\x05\x04\x07\x02\0\x04\x12\x03)\x08\x10\n\x0c\n\x05\x04\x07\x02\0\x05\
    \x12\x03)\x11\x17\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03)\x18$\n\x0c\n\
    \x05\x04\x07\x02\0\x03\x12\x03)'(\n\x0b\n\x04\x04\x07\x02\x01\x12\x03*\
    \x08'\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03*\x08\x10\n\x0c\n\x05\x04\
    \x07\x02\x01\x05\x12\x03*\x11\x17\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\
    \x03*\x18\"\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03*%&\n\x0b\n\x04\x04\
    \x07\x02\x02\x12\x03+\x08#\n\x0c\n\x05\x04\x07\x02\x02\x04\x12\x03+\x08\
    \x10\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\x03+\x11\x17\n\x0c\n\x05\x04\
    \x07\x02\x02\x01\x12\x03+\x18\x1e\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\
    \x03+!\"\n\x0b\n\x04\x04\x07\x02\x03\x12\x03,\x08%\n\x0c\n\x05\x04\x07\
    \x02\x03\x04\x12\x03,\x08\x10\n\x0c\n\x05\x04\x07\x02\x03\x05\x12\x03,\
    \x11\x17\n\x0c\n\x05\x04\x07\x02\x03\x01\x12\x03,\x18\x20\n\x0c\n\x05\
    \x04\x07\x02\x03\x03\x12\x03,#$\n\x0b\n\x04\x04\x07\x02\x04\x12\x03-\x08\
    (\n\x0c\n\x05\x04\x07\x02\x04\x04\x12\x03-\x08\x10\n\x0c\n\x05\x04\x07\
    \x02\x04\x05\x12\x03-\x11\x17\n\x0c\n\x05\x04\x07\x02\x04\x01\x12\x03-\
    \x18#\n\x0c\n\x05\x04\x07\x02\x04\x03\x12\x03-&'\n\n\n\x02\x04\x08\x12\
    \x040\01\x01\n\n\n\x03\x04\x08\x01\x12\x030\x08/\n\n\n\x02\x04\t\x12\x04\
    3\06\x01\n\n\n\x03\x04\t\x01\x12\x033\x080\n\x0b\n\x04\x04\t\x02\0\x12\
    \x034\x08)\n\x0c\n\x05\x04\t\x02\0\x04\x12\x034\x08\x10\n\x0c\n\x05\x04\
    \t\x02\0\x05\x12\x034\x11\x17\n\x0c\n\x05\x04\t\x02\0\x01\x12\x034\x18$\
    \n\x0c\n\x05\x04\t\x02\0\x03\x12\x034'(\n\x0b\n\x04\x04\t\x02\x01\x12\
    \x035\x08'\n\x0c\n\x05\x04\t\x02\x01\x04\x12\x035\x08\x10\n\x0c\n\x05\
    \x04\t\x02\x01\x05\x12\x035\x11\x17\n\x0c\n\x05\x04\t\x02\x01\x01\x12\
    \x035\x18\"\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x035%&\n\n\n\x02\x04\n\x12\
    \x048\0;\x01\n\n\n\x03\x04\n\x01\x12\x038\x081\n\x0b\n\x04\x04\n\x02\0\
    \x12\x039\x08(\n\x0c\n\x05\x04\n\x02\0\x04\x12\x039\x08\x10\n\x0c\n\x05\
    \x04\n\x02\0\x05\x12\x039\x11\x17\n\x0c\n\x05\x04\n\x02\0\x01\x12\x039\
    \x18#\n\x0c\n\x05\x04\n\x02\0\x03\x12\x039&'\n\x0b\n\x04\x04\n\x02\x01\
    \x12\x03:\x08&\n\x0c\n\x05\x04\n\x02\x01\x04\x12\x03:\x08\x10\n\x0c\n\
    \x05\x04\n\x02\x01\x05\x12\x03:\x11\x17\n\x0c\n\x05\x04\n\x02\x01\x01\
    \x12\x03:\x18!\n\x0c\n\x05\x04\n\x02\x01\x03\x12\x03:$%\n\n\n\x02\x04\
    \x0b\x12\x04=\0?\x01\n\n\n\x03\x04\x0b\x01\x12\x03=\x08+\n\x0b\n\x04\x04\
    \x0b\x02\0\x12\x03>\x08\"\n\x0c\n\x05\x04\x0b\x02\0\x04\x12\x03>\x08\x10\
    \n\x0c\n\x05\x04\x0b\x02\0\x05\x12\x03>\x11\x16\n\x0c\n\x05\x04\x0b\x02\
    \0\x01\x12\x03>\x17\x1d\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03>\x20!\n\n\
    \n\x02\x04\x0c\x12\x04A\0J\x01\n\n\n\x03\x04\x0c\x01\x12\x03A\x08&\n\x0b\
    \n\x04\x04\x0c\x02\0\x12\x03B\x08$\n\x0c\n\x05\x04\x0c\x02\0\x04\x12\x03\
    B\x08\x10\n\x0c\n\x05\x04\x0c\x02\0\x05\x12\x03B\x11\x17\n\x0c\n\x05\x04\
    \x0c\x02\0\x01\x12\x03B\x18\x1f\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03B\"\
    #\n\x0b\n\x04\x04\x0c\x02\x01\x12\x03C\x08#\n\x0c\n\x05\x04\x0c\x02\x01\
    \x04\x12\x03C\x08\x10\n\x0c\n\x05\x04\x0c\x02\x01\x05\x12\x03C\x11\x17\n\
    \x0c\n\x05\x04\x0c\x02\x01\x01\x12\x03C\x18\x1e\n\x0c\n\x05\x04\x0c\x02\
    \x01\x03\x12\x03C!\"\n\x0b\n\x04\x04\x0c\x02\x02\x12\x03D\x08$\n\x0c\n\
    \x05\x04\x0c\x02\x02\x04\x12\x03D\x08\x10\n\x0c\n\x05\x04\x0c\x02\x02\
    \x05\x12\x03D\x11\x16\n\x0c\n\x05\x04\x0c\x02\x02\x01\x12\x03D\x17\x1f\n\
    \x0c\n\x05\x04\x0c\x02\x02\x03\x12\x03D\"#\n\x0b\n\x04\x04\x0c\x02\x03\
    \x12\x03E\x08*\n\x0c\n\x05\x04\x0c\x02\x03\x04\x12\x03E\x08\x10\n\x0c\n\
    \x05\x04\x0c\x02\x03\x05\x12\x03E\x11\x17\n\x0c\n\x05\x04\x0c\x02\x03\
    \x01\x12\x03E\x18%\n\x0c\n\x05\x04\x0c\x02\x03\x03\x12\x03E()\n\x0b\n\
    \x04\x04\x0c\x02\x04\x12\x03F\x08\"\n\x0c\n\x05\x04\x0c\x02\x04\x04\x12\
    \x03F\x08\x10\n\x0c\n\x05\x04\x0c\x02\x04\x05\x12\x03F\x11\x17\n\x0c\n\
    \x05\x04\x0c\x02\x04\x01\x12\x03F\x18\x1d\n\x0c\n\x05\x04\x0c\x02\x04\
    \x03\x12\x03F\x20!\n\x0b\n\x04\x04\x0c\x02\x05\x12\x03G\x08%\n\x0c\n\x05\
    \x04\x0c\x02\x05\x04\x12\x03G\x08\x10\n\x0c\n\x05\x04\x0c\x02\x05\x05\
    \x12\x03G\x11\x17\n\x0c\n\x05\x04\x0c\x02\x05\x01\x12\x03G\x18\x20\n\x0c\
    \n\x05\x04\x0c\x02\x05\x03\x12\x03G#$\n\x0b\n\x04\x04\x0c\x02\x06\x12\
    \x03H\x08'\n\x0c\n\x05\x04\x0c\x02\x06\x04\x12\x03H\x08\x10\n\x0c\n\x05\
    \x04\x0c\x02\x06\x05\x12\x03H\x11\x18\n\x0c\n\x05\x04\x0c\x02\x06\x01\
    \x12\x03H\x19\"\n\x0c\n\x05\x04\x0c\x02\x06\x03\x12\x03H%&\n\x0b\n\x04\
    \x04\x0c\x02\x07\x12\x03I\x08)\n\x0c\n\x05\x04\x0c\x02\x07\x04\x12\x03I\
    \x08\x10\n\x0c\n\x05\x04\x0c\x02\x07\x05\x12\x03I\x11\x17\n\x0c\n\x05\
    \x04\x0c\x02\x07\x01\x12\x03I\x18$\n\x0c\n\x05\x04\x0c\x02\x07\x03\x12\
    \x03I'(\n\n\n\x02\x04\r\x12\x04L\0N\x01\n\n\n\x03\x04\r\x01\x12\x03L\x08\
    ,\n\x0b\n\x04\x04\r\x02\0\x12\x03M\x08=\n\x0c\n\x05\x04\r\x02\0\x04\x12\
    \x03M\x08\x10\n\x0c\n\x05\x04\r\x02\0\x06\x12\x03M\x110\n\x0c\n\x05\x04\
    \r\x02\0\x01\x12\x03M18\n\x0c\n\x05\x04\r\x02\0\x03\x12\x03M;<\n\n\n\x02\
    \x04\x0e\x12\x04P\0S\x01\n\n\n\x03\x04\x0e\x01\x12\x03P\x08%\n\x0b\n\x04\
    \x04\x0e\x02\0\x12\x03Q\x08$\n\x0c\n\x05\x04\x0e\x02\0\x04\x12\x03Q\x08\
    \x10\n\x0c\n\x05\x04\x0e\x02\0\x05\x12\x03Q\x11\x17\n\x0c\n\x05\x04\x0e\
    \x02\0\x01\x12\x03Q\x18\x1f\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\x03Q\"#\n\
    \x0b\n\x04\x04\x0e\x02\x01\x12\x03R\x08\"\n\x0c\n\x05\x04\x0e\x02\x01\
    \x04\x12\x03R\x08\x10\n\x0c\n\x05\x04\x0e\x02\x01\x05\x12\x03R\x11\x16\n\
    \x0c\n\x05\x04\x0e\x02\x01\x01\x12\x03R\x17\x1d\n\x0c\n\x05\x04\x0e\x02\
    \x01\x03\x12\x03R\x20!\n\n\n\x02\x04\x0f\x12\x04U\0X\x01\n\n\n\x03\x04\
    \x0f\x01\x12\x03U\x08&\n\x0b\n\x04\x04\x0f\x02\0\x12\x03V\x08)\n\x0c\n\
    \x05\x04\x0f\x02\0\x04\x12\x03V\x08\x10\n\x0c\n\x05\x04\x0f\x02\0\x05\
    \x12\x03V\x11\x17\n\x0c\n\x05\x04\x0f\x02\0\x01\x12\x03V\x18$\n\x0c\n\
    \x05\x04\x0f\x02\0\x03\x12\x03V'(\n\x0b\n\x04\x04\x0f\x02\x01\x12\x03W\
    \x08\"\n\x0c\n\x05\x04\x0f\x02\x01\x04\x12\x03W\x08\x10\n\x0c\n\x05\x04\
    \x0f\x02\x01\x05\x12\x03W\x11\x16\n\x0c\n\x05\x04\x0f\x02\x01\x01\x12\
    \x03W\x17\x1d\n\x0c\n\x05\x04\x0f\x02\x01\x03\x12\x03W\x20!\n\x0b\n\x02\
    \x06\0\x12\x05Z\0\x86\x01\x01\n\n\n\x03\x06\0\x01\x12\x03Z\x08\x13\n\n\n\
    \x03\x06\0\x03\x12\x03[\x08X\n\r\n\x06\x06\0\x03\xd0\x86\x03\x12\x03[\
    \x08X\n\x0c\n\x04\x06\0\x02\0\x12\x04]\x08_\t\n\x0c\n\x05\x06\0\x02\0\
    \x01\x12\x03]\x0c$\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03]&N\n\r\n\x05\x06\
    \0\x02\0\x03\x12\x04]Y\x82\x01\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03^\x10m\
    \n\x0f\n\x08\x06\0\x02\0\x04\xd0\x86\x03\x12\x03^\x10m\n\x0c\n\x04\x06\0\
    \x02\x01\x12\x04a\x08c\t\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03a\x0c!\n\
    \x0c\n\x05\x06\0\x02\x01\x02\x12\x03a#K\n\x0c\n\x05\x06\0\x02\x01\x03\
    \x12\x03aV\x7f\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03b\x10m\n\x0f\n\x08\
    \x06\0\x02\x01\x04\xd0\x86\x03\x12\x03b\x10m\n\x0c\n\x04\x06\0\x02\x02\
    \x12\x04e\x08g\t\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03e\x0c!\n\x0c\n\x05\
    \x06\0\x02\x02\x02\x12\x03e#K\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03eV\
    \x7f\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03f\x10t\n\x0f\n\x08\x06\0\x02\
    \x02\x04\xd0\x86\x03\x12\x03f\x10t\n\x0c\n\x04\x06\0\x02\x03\x12\x04i\
    \x08k\t\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03i\x0c#\n\x0c\n\x05\x06\0\
    \x02\x03\x02\x12\x03i%M\n\r\n\x05\x06\0\x02\x03\x03\x12\x04iX\x81\x01\n\
    \x0c\n\x05\x06\0\x02\x03\x04\x12\x03j\x10`\n\x0f\n\x08\x06\0\x02\x03\x04\
    \xd0\x86\x03\x12\x03j\x10`\n\x0c\n\x04\x06\0\x02\x04\x12\x04m\x08o\t\n\
    \x0c\n\x05\x06\0\x02\x04\x01\x12\x03m\x0c\x1e\n\x0c\n\x05\x06\0\x02\x04\
    \x02\x12\x03m\x20B\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03mMv\n\x0c\n\x05\
    \x06\0\x02\x04\x04\x12\x03n\x10s\n\x0f\n\x08\x06\0\x02\x04\x04\xd0\x86\
    \x03\x12\x03n\x10s\n\x0c\n\x04\x06\0\x02\x05\x12\x04q\x08s\t\n\x0c\n\x05\
    \x06\0\x02\x05\x01\x12\x03q\x0c!\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03q#\
    N\n\r\n\x05\x06\0\x02\x05\x03\x12\x04qY\x85\x01\n\x0c\n\x05\x06\0\x02\
    \x05\x04\x12\x03r\x10]\n\x0f\n\x08\x06\0\x02\x05\x04\xd0\x86\x03\x12\x03\
    r\x10]\n\x0c\n\x04\x06\0\x02\x06\x12\x04u\x08w\t\n\x0c\n\x05\x06\0\x02\
    \x06\x01\x12\x03u\x0c!\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03u#E\n\x0c\n\
    \x05\x06\0\x02\x06\x03\x12\x03uPs\n\x0c\n\x05\x06\0\x02\x06\x04\x12\x03v\
    \x10d\n\x0f\n\x08\x06\0\x02\x06\x04\xd0\x86\x03\x12\x03v\x10d\n\x0c\n\
    \x04\x06\0\x02\x07\x12\x04y\x08{\t\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03\
    y\x0c#\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03y%L\n\x0c\n\x05\x06\0\x02\
    \x07\x03\x12\x03yW\x7f\n\x0c\n\x05\x06\0\x02\x07\x04\x12\x03z\x10d\n\x0f\
    \n\x08\x06\0\x02\x07\x04\xd0\x86\x03\x12\x03z\x10d\n\x0c\n\x04\x06\0\x02\
    \x08\x12\x04}\x08\x7f\t\n\x0c\n\x05\x06\0\x02\x08\x01\x12\x03}\x0c\x1f\n\
    \x0c\n\x05\x06\0\x02\x08\x02\x12\x03}!J\n\x0c\n\x05\x06\0\x02\x08\x03\
    \x12\x03}U\x7f\n\x0c\n\x05\x06\0\x02\x08\x04\x12\x03~\x10c\n\x0f\n\x08\
    \x06\0\x02\x08\x04\xd0\x86\x03\x12\x03~\x10c\n\x0e\n\x04\x06\0\x02\t\x12\
    \x06\x81\x01\x08\x83\x01\t\n\r\n\x05\x06\0\x02\t\x01\x12\x04\x81\x01\x0c\
    \x1a\n\r\n\x05\x06\0\x02\t\x02\x12\x04\x81\x01\x1c@\n\r\n\x05\x06\0\x02\
    \t\x03\x12\x04\x81\x01Kp\n\r\n\x05\x06\0\x02\t\x04\x12\x04\x82\x01\x10[\
    \n\x10\n\x08\x06\0\x02\t\x04\xd0\x86\x03\x12\x04\x82\x01\x10[\n\x0c\n\
    \x04\x06\0\x02\n\x12\x04\x85\x01\x08`\n\r\n\x05\x06\0\x02\n\x01\x12\x04\
    \x85\x01\x0c\x14\n\r\n\x05\x06\0\x02\n\x02\x12\x04\x85\x01\x164\n\r\n\
    \x05\x06\0\x02\n\x03\x12\x04\x85\x01?^\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(16);
            messages.push(CPartnerApps_RequestUploadToken_Request::generated_message_descriptor_data());
            messages.push(CPartnerApps_RequestUploadToken_Response::generated_message_descriptor_data());
            messages.push(CPartnerApps_FinishUpload_Request::generated_message_descriptor_data());
            messages.push(CPartnerApps_FinishUploadKVSign_Response::generated_message_descriptor_data());
            messages.push(CPartnerApps_FinishUploadLegacyDRM_Request::generated_message_descriptor_data());
            messages.push(CPartnerApps_FinishUploadLegacyDRM_Response::generated_message_descriptor_data());
            messages.push(CPartnerApps_FinishUpload_Response::generated_message_descriptor_data());
            messages.push(CPartnerApps_FinishUploadDepot_Request::generated_message_descriptor_data());
            messages.push(CPartnerApps_FinishUploadDepot_Response::generated_message_descriptor_data());
            messages.push(CPartnerApps_GetDepotBuildResult_Request::generated_message_descriptor_data());
            messages.push(CPartnerApps_GetDepotBuildResult_Response::generated_message_descriptor_data());
            messages.push(CPartnerApps_FindDRMUploads_Request::generated_message_descriptor_data());
            messages.push(CPartnerApps_ExistingDRMUpload::generated_message_descriptor_data());
            messages.push(CPartnerApps_FindDRMUploads_Response::generated_message_descriptor_data());
            messages.push(CPartnerApps_Download_Request::generated_message_descriptor_data());
            messages.push(CPartnerApps_Download_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
