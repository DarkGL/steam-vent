// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_parental.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:ParentalApp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalApp {
    // message fields
    // @@protoc_insertion_point(field:ParentalApp.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalApp.is_allowed)
    pub is_allowed: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalApp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalApp {
    fn default() -> &'a ParentalApp {
        <ParentalApp as ::protobuf::Message>::default_instance()
    }
}

impl ParentalApp {
    pub fn new() -> ParentalApp {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool is_allowed = 2;

    pub fn is_allowed(&self) -> bool {
        self.is_allowed.unwrap_or(false)
    }

    pub fn clear_is_allowed(&mut self) {
        self.is_allowed = ::std::option::Option::None;
    }

    pub fn has_is_allowed(&self) -> bool {
        self.is_allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_allowed(&mut self, v: bool) {
        self.is_allowed = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &ParentalApp| { &m.appid },
            |m: &mut ParentalApp| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_allowed",
            |m: &ParentalApp| { &m.is_allowed },
            |m: &mut ParentalApp| { &mut m.is_allowed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ParentalApp>(
            "ParentalApp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ParentalApp {
    const NAME: &'static str = "ParentalApp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.is_allowed = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.is_allowed {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.is_allowed {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalApp {
        ParentalApp::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.is_allowed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalApp {
        static instance: ParentalApp = ParentalApp {
            appid: ::std::option::Option::None,
            is_allowed: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ParentalApp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ParentalApp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ParentalApp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ParentalApp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ParentalSettings)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalSettings {
    // message fields
    // @@protoc_insertion_point(field:ParentalSettings.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalSettings.applist_base_id)
    pub applist_base_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.applist_base_description)
    pub applist_base_description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ParentalSettings.applist_base)
    pub applist_base: ::std::vec::Vec<ParentalApp>,
    // @@protoc_insertion_point(field:ParentalSettings.applist_custom)
    pub applist_custom: ::std::vec::Vec<ParentalApp>,
    // @@protoc_insertion_point(field:ParentalSettings.passwordhashtype)
    pub passwordhashtype: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.salt)
    pub salt: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:ParentalSettings.passwordhash)
    pub passwordhash: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:ParentalSettings.is_enabled)
    pub is_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ParentalSettings.enabled_features)
    pub enabled_features: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.recovery_email)
    pub recovery_email: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ParentalSettings.is_site_license_lock)
    pub is_site_license_lock: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalSettings.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalSettings {
    fn default() -> &'a ParentalSettings {
        <ParentalSettings as ::protobuf::Message>::default_instance()
    }
}

impl ParentalSettings {
    pub fn new() -> ParentalSettings {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 applist_base_id = 2;

    pub fn applist_base_id(&self) -> u32 {
        self.applist_base_id.unwrap_or(0)
    }

    pub fn clear_applist_base_id(&mut self) {
        self.applist_base_id = ::std::option::Option::None;
    }

    pub fn has_applist_base_id(&self) -> bool {
        self.applist_base_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_applist_base_id(&mut self, v: u32) {
        self.applist_base_id = ::std::option::Option::Some(v);
    }

    // optional string applist_base_description = 3;

    pub fn applist_base_description(&self) -> &str {
        match self.applist_base_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_applist_base_description(&mut self) {
        self.applist_base_description = ::std::option::Option::None;
    }

    pub fn has_applist_base_description(&self) -> bool {
        self.applist_base_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_applist_base_description(&mut self, v: ::std::string::String) {
        self.applist_base_description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_applist_base_description(&mut self) -> &mut ::std::string::String {
        if self.applist_base_description.is_none() {
            self.applist_base_description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.applist_base_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_applist_base_description(&mut self) -> ::std::string::String {
        self.applist_base_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 passwordhashtype = 6;

    pub fn passwordhashtype(&self) -> u32 {
        self.passwordhashtype.unwrap_or(0)
    }

    pub fn clear_passwordhashtype(&mut self) {
        self.passwordhashtype = ::std::option::Option::None;
    }

    pub fn has_passwordhashtype(&self) -> bool {
        self.passwordhashtype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_passwordhashtype(&mut self, v: u32) {
        self.passwordhashtype = ::std::option::Option::Some(v);
    }

    // optional bytes salt = 7;

    pub fn salt(&self) -> &[u8] {
        match self.salt.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_salt(&mut self) {
        self.salt = ::std::option::Option::None;
    }

    pub fn has_salt(&self) -> bool {
        self.salt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_salt(&mut self, v: ::std::vec::Vec<u8>) {
        self.salt = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_salt(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.salt.is_none() {
            self.salt = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.salt.as_mut().unwrap()
    }

    // Take field
    pub fn take_salt(&mut self) -> ::std::vec::Vec<u8> {
        self.salt.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes passwordhash = 8;

    pub fn passwordhash(&self) -> &[u8] {
        match self.passwordhash.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_passwordhash(&mut self) {
        self.passwordhash = ::std::option::Option::None;
    }

    pub fn has_passwordhash(&self) -> bool {
        self.passwordhash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_passwordhash(&mut self, v: ::std::vec::Vec<u8>) {
        self.passwordhash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_passwordhash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.passwordhash.is_none() {
            self.passwordhash = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.passwordhash.as_mut().unwrap()
    }

    // Take field
    pub fn take_passwordhash(&mut self) -> ::std::vec::Vec<u8> {
        self.passwordhash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bool is_enabled = 9;

    pub fn is_enabled(&self) -> bool {
        self.is_enabled.unwrap_or(false)
    }

    pub fn clear_is_enabled(&mut self) {
        self.is_enabled = ::std::option::Option::None;
    }

    pub fn has_is_enabled(&self) -> bool {
        self.is_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_enabled(&mut self, v: bool) {
        self.is_enabled = ::std::option::Option::Some(v);
    }

    // optional uint32 enabled_features = 10;

    pub fn enabled_features(&self) -> u32 {
        self.enabled_features.unwrap_or(0)
    }

    pub fn clear_enabled_features(&mut self) {
        self.enabled_features = ::std::option::Option::None;
    }

    pub fn has_enabled_features(&self) -> bool {
        self.enabled_features.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enabled_features(&mut self, v: u32) {
        self.enabled_features = ::std::option::Option::Some(v);
    }

    // optional string recovery_email = 11;

    pub fn recovery_email(&self) -> &str {
        match self.recovery_email.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_recovery_email(&mut self) {
        self.recovery_email = ::std::option::Option::None;
    }

    pub fn has_recovery_email(&self) -> bool {
        self.recovery_email.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recovery_email(&mut self, v: ::std::string::String) {
        self.recovery_email = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recovery_email(&mut self) -> &mut ::std::string::String {
        if self.recovery_email.is_none() {
            self.recovery_email = ::std::option::Option::Some(::std::string::String::new());
        }
        self.recovery_email.as_mut().unwrap()
    }

    // Take field
    pub fn take_recovery_email(&mut self) -> ::std::string::String {
        self.recovery_email.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_site_license_lock = 12;

    pub fn is_site_license_lock(&self) -> bool {
        self.is_site_license_lock.unwrap_or(false)
    }

    pub fn clear_is_site_license_lock(&mut self) {
        self.is_site_license_lock = ::std::option::Option::None;
    }

    pub fn has_is_site_license_lock(&self) -> bool {
        self.is_site_license_lock.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_site_license_lock(&mut self, v: bool) {
        self.is_site_license_lock = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &ParentalSettings| { &m.steamid },
            |m: &mut ParentalSettings| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "applist_base_id",
            |m: &ParentalSettings| { &m.applist_base_id },
            |m: &mut ParentalSettings| { &mut m.applist_base_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "applist_base_description",
            |m: &ParentalSettings| { &m.applist_base_description },
            |m: &mut ParentalSettings| { &mut m.applist_base_description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "applist_base",
            |m: &ParentalSettings| { &m.applist_base },
            |m: &mut ParentalSettings| { &mut m.applist_base },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "applist_custom",
            |m: &ParentalSettings| { &m.applist_custom },
            |m: &mut ParentalSettings| { &mut m.applist_custom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "passwordhashtype",
            |m: &ParentalSettings| { &m.passwordhashtype },
            |m: &mut ParentalSettings| { &mut m.passwordhashtype },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "salt",
            |m: &ParentalSettings| { &m.salt },
            |m: &mut ParentalSettings| { &mut m.salt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "passwordhash",
            |m: &ParentalSettings| { &m.passwordhash },
            |m: &mut ParentalSettings| { &mut m.passwordhash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_enabled",
            |m: &ParentalSettings| { &m.is_enabled },
            |m: &mut ParentalSettings| { &mut m.is_enabled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "enabled_features",
            |m: &ParentalSettings| { &m.enabled_features },
            |m: &mut ParentalSettings| { &mut m.enabled_features },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "recovery_email",
            |m: &ParentalSettings| { &m.recovery_email },
            |m: &mut ParentalSettings| { &mut m.recovery_email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_site_license_lock",
            |m: &ParentalSettings| { &m.is_site_license_lock },
            |m: &mut ParentalSettings| { &mut m.is_site_license_lock },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ParentalSettings>(
            "ParentalSettings",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ParentalSettings {
    const NAME: &'static str = "ParentalSettings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.applist_base_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.applist_base_description = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.applist_base.push(is.read_message()?);
                },
                42 => {
                    self.applist_custom.push(is.read_message()?);
                },
                48 => {
                    self.passwordhashtype = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.salt = ::std::option::Option::Some(is.read_bytes()?);
                },
                66 => {
                    self.passwordhash = ::std::option::Option::Some(is.read_bytes()?);
                },
                72 => {
                    self.is_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.enabled_features = ::std::option::Option::Some(is.read_uint32()?);
                },
                90 => {
                    self.recovery_email = ::std::option::Option::Some(is.read_string()?);
                },
                96 => {
                    self.is_site_license_lock = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.applist_base_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.applist_base_description.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        for value in &self.applist_base {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.applist_custom {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.passwordhashtype {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.salt.as_ref() {
            my_size += ::protobuf::rt::bytes_size(7, &v);
        }
        if let Some(v) = self.passwordhash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(8, &v);
        }
        if let Some(v) = self.is_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.enabled_features {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.recovery_email.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.is_site_license_lock {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.applist_base_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.applist_base_description.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.applist_base {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.applist_custom {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.passwordhashtype {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.salt.as_ref() {
            os.write_bytes(7, v)?;
        }
        if let Some(v) = self.passwordhash.as_ref() {
            os.write_bytes(8, v)?;
        }
        if let Some(v) = self.is_enabled {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.enabled_features {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.recovery_email.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.is_site_license_lock {
            os.write_bool(12, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalSettings {
        ParentalSettings::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.applist_base_id = ::std::option::Option::None;
        self.applist_base_description = ::std::option::Option::None;
        self.applist_base.clear();
        self.applist_custom.clear();
        self.passwordhashtype = ::std::option::Option::None;
        self.salt = ::std::option::Option::None;
        self.passwordhash = ::std::option::Option::None;
        self.is_enabled = ::std::option::Option::None;
        self.enabled_features = ::std::option::Option::None;
        self.recovery_email = ::std::option::Option::None;
        self.is_site_license_lock = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalSettings {
        static instance: ParentalSettings = ParentalSettings {
            steamid: ::std::option::Option::None,
            applist_base_id: ::std::option::Option::None,
            applist_base_description: ::std::option::Option::None,
            applist_base: ::std::vec::Vec::new(),
            applist_custom: ::std::vec::Vec::new(),
            passwordhashtype: ::std::option::Option::None,
            salt: ::std::option::Option::None,
            passwordhash: ::std::option::Option::None,
            is_enabled: ::std::option::Option::None,
            enabled_features: ::std::option::Option::None,
            recovery_email: ::std::option::Option::None,
            is_site_license_lock: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ParentalSettings {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ParentalSettings").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ParentalSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ParentalSettings {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_EnableParentalSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_EnableParentalSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_EnableParentalSettings_Request.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_EnableParentalSettings_Request.settings)
    pub settings: ::protobuf::MessageField<ParentalSettings>,
    // @@protoc_insertion_point(field:CParental_EnableParentalSettings_Request.sessionid)
    pub sessionid: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_EnableParentalSettings_Request.enablecode)
    pub enablecode: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParental_EnableParentalSettings_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_EnableParentalSettings_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_EnableParentalSettings_Request {
    fn default() -> &'a CParental_EnableParentalSettings_Request {
        <CParental_EnableParentalSettings_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParental_EnableParentalSettings_Request {
    pub fn new() -> CParental_EnableParentalSettings_Request {
        ::std::default::Default::default()
    }

    // optional string password = 1;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string sessionid = 3;

    pub fn sessionid(&self) -> &str {
        match self.sessionid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: ::std::string::String) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sessionid(&mut self) -> &mut ::std::string::String {
        if self.sessionid.is_none() {
            self.sessionid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sessionid.as_mut().unwrap()
    }

    // Take field
    pub fn take_sessionid(&mut self) -> ::std::string::String {
        self.sessionid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 enablecode = 4;

    pub fn enablecode(&self) -> u32 {
        self.enablecode.unwrap_or(0)
    }

    pub fn clear_enablecode(&mut self) {
        self.enablecode = ::std::option::Option::None;
    }

    pub fn has_enablecode(&self) -> bool {
        self.enablecode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enablecode(&mut self, v: u32) {
        self.enablecode = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CParental_EnableParentalSettings_Request| { &m.password },
            |m: &mut CParental_EnableParentalSettings_Request| { &mut m.password },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ParentalSettings>(
            "settings",
            |m: &CParental_EnableParentalSettings_Request| { &m.settings },
            |m: &mut CParental_EnableParentalSettings_Request| { &mut m.settings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CParental_EnableParentalSettings_Request| { &m.sessionid },
            |m: &mut CParental_EnableParentalSettings_Request| { &mut m.sessionid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "enablecode",
            |m: &CParental_EnableParentalSettings_Request| { &m.enablecode },
            |m: &mut CParental_EnableParentalSettings_Request| { &mut m.enablecode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_EnableParentalSettings_Request| { &m.steamid },
            |m: &mut CParental_EnableParentalSettings_Request| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_EnableParentalSettings_Request>(
            "CParental_EnableParentalSettings_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_EnableParentalSettings_Request {
    const NAME: &'static str = "CParental_EnableParentalSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.settings)?;
                },
                26 => {
                    self.sessionid = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.enablecode = ::std::option::Option::Some(is.read_uint32()?);
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.password.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sessionid.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.enablecode {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.password.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.settings.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.sessionid.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.enablecode {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_EnableParentalSettings_Request {
        CParental_EnableParentalSettings_Request::new()
    }

    fn clear(&mut self) {
        self.password = ::std::option::Option::None;
        self.settings.clear();
        self.sessionid = ::std::option::Option::None;
        self.enablecode = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_EnableParentalSettings_Request {
        static instance: CParental_EnableParentalSettings_Request = CParental_EnableParentalSettings_Request {
            password: ::std::option::Option::None,
            settings: ::protobuf::MessageField::none(),
            sessionid: ::std::option::Option::None,
            enablecode: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_EnableParentalSettings_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_EnableParentalSettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_EnableParentalSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_EnableParentalSettings_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_EnableParentalSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_EnableParentalSettings_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_EnableParentalSettings_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_EnableParentalSettings_Response {
    fn default() -> &'a CParental_EnableParentalSettings_Response {
        <CParental_EnableParentalSettings_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParental_EnableParentalSettings_Response {
    pub fn new() -> CParental_EnableParentalSettings_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_EnableParentalSettings_Response>(
            "CParental_EnableParentalSettings_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_EnableParentalSettings_Response {
    const NAME: &'static str = "CParental_EnableParentalSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_EnableParentalSettings_Response {
        CParental_EnableParentalSettings_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_EnableParentalSettings_Response {
        static instance: CParental_EnableParentalSettings_Response = CParental_EnableParentalSettings_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_EnableParentalSettings_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_EnableParentalSettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_EnableParentalSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_EnableParentalSettings_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_DisableParentalSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_DisableParentalSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_DisableParentalSettings_Request.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_DisableParentalSettings_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_DisableParentalSettings_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_DisableParentalSettings_Request {
    fn default() -> &'a CParental_DisableParentalSettings_Request {
        <CParental_DisableParentalSettings_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParental_DisableParentalSettings_Request {
    pub fn new() -> CParental_DisableParentalSettings_Request {
        ::std::default::Default::default()
    }

    // optional string password = 1;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CParental_DisableParentalSettings_Request| { &m.password },
            |m: &mut CParental_DisableParentalSettings_Request| { &mut m.password },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_DisableParentalSettings_Request| { &m.steamid },
            |m: &mut CParental_DisableParentalSettings_Request| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_DisableParentalSettings_Request>(
            "CParental_DisableParentalSettings_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_DisableParentalSettings_Request {
    const NAME: &'static str = "CParental_DisableParentalSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.password.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.password.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_DisableParentalSettings_Request {
        CParental_DisableParentalSettings_Request::new()
    }

    fn clear(&mut self) {
        self.password = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_DisableParentalSettings_Request {
        static instance: CParental_DisableParentalSettings_Request = CParental_DisableParentalSettings_Request {
            password: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_DisableParentalSettings_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_DisableParentalSettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_DisableParentalSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_DisableParentalSettings_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_DisableParentalSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_DisableParentalSettings_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_DisableParentalSettings_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_DisableParentalSettings_Response {
    fn default() -> &'a CParental_DisableParentalSettings_Response {
        <CParental_DisableParentalSettings_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParental_DisableParentalSettings_Response {
    pub fn new() -> CParental_DisableParentalSettings_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_DisableParentalSettings_Response>(
            "CParental_DisableParentalSettings_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_DisableParentalSettings_Response {
    const NAME: &'static str = "CParental_DisableParentalSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_DisableParentalSettings_Response {
        CParental_DisableParentalSettings_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_DisableParentalSettings_Response {
        static instance: CParental_DisableParentalSettings_Response = CParental_DisableParentalSettings_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_DisableParentalSettings_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_DisableParentalSettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_DisableParentalSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_DisableParentalSettings_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_GetParentalSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_GetParentalSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_GetParentalSettings_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_GetParentalSettings_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_GetParentalSettings_Request {
    fn default() -> &'a CParental_GetParentalSettings_Request {
        <CParental_GetParentalSettings_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParental_GetParentalSettings_Request {
    pub fn new() -> CParental_GetParentalSettings_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_GetParentalSettings_Request| { &m.steamid },
            |m: &mut CParental_GetParentalSettings_Request| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_GetParentalSettings_Request>(
            "CParental_GetParentalSettings_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_GetParentalSettings_Request {
    const NAME: &'static str = "CParental_GetParentalSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_GetParentalSettings_Request {
        CParental_GetParentalSettings_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_GetParentalSettings_Request {
        static instance: CParental_GetParentalSettings_Request = CParental_GetParentalSettings_Request {
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_GetParentalSettings_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_GetParentalSettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_GetParentalSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_GetParentalSettings_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_GetParentalSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_GetParentalSettings_Response {
    // message fields
    // @@protoc_insertion_point(field:CParental_GetParentalSettings_Response.settings)
    pub settings: ::protobuf::MessageField<ParentalSettings>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_GetParentalSettings_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_GetParentalSettings_Response {
    fn default() -> &'a CParental_GetParentalSettings_Response {
        <CParental_GetParentalSettings_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParental_GetParentalSettings_Response {
    pub fn new() -> CParental_GetParentalSettings_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ParentalSettings>(
            "settings",
            |m: &CParental_GetParentalSettings_Response| { &m.settings },
            |m: &mut CParental_GetParentalSettings_Response| { &mut m.settings },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_GetParentalSettings_Response>(
            "CParental_GetParentalSettings_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_GetParentalSettings_Response {
    const NAME: &'static str = "CParental_GetParentalSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.settings)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.settings.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_GetParentalSettings_Response {
        CParental_GetParentalSettings_Response::new()
    }

    fn clear(&mut self) {
        self.settings.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_GetParentalSettings_Response {
        static instance: CParental_GetParentalSettings_Response = CParental_GetParentalSettings_Response {
            settings: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_GetParentalSettings_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_GetParentalSettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_GetParentalSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_GetParentalSettings_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_GetSignedParentalSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_GetSignedParentalSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_GetSignedParentalSettings_Request.priority)
    pub priority: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_GetSignedParentalSettings_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_GetSignedParentalSettings_Request {
    fn default() -> &'a CParental_GetSignedParentalSettings_Request {
        <CParental_GetSignedParentalSettings_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParental_GetSignedParentalSettings_Request {
    pub fn new() -> CParental_GetSignedParentalSettings_Request {
        ::std::default::Default::default()
    }

    // optional uint32 priority = 1;

    pub fn priority(&self) -> u32 {
        self.priority.unwrap_or(0)
    }

    pub fn clear_priority(&mut self) {
        self.priority = ::std::option::Option::None;
    }

    pub fn has_priority(&self) -> bool {
        self.priority.is_some()
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: u32) {
        self.priority = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "priority",
            |m: &CParental_GetSignedParentalSettings_Request| { &m.priority },
            |m: &mut CParental_GetSignedParentalSettings_Request| { &mut m.priority },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_GetSignedParentalSettings_Request>(
            "CParental_GetSignedParentalSettings_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_GetSignedParentalSettings_Request {
    const NAME: &'static str = "CParental_GetSignedParentalSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.priority = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.priority {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.priority {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_GetSignedParentalSettings_Request {
        CParental_GetSignedParentalSettings_Request::new()
    }

    fn clear(&mut self) {
        self.priority = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_GetSignedParentalSettings_Request {
        static instance: CParental_GetSignedParentalSettings_Request = CParental_GetSignedParentalSettings_Request {
            priority: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_GetSignedParentalSettings_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_GetSignedParentalSettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_GetSignedParentalSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_GetSignedParentalSettings_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_GetSignedParentalSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_GetSignedParentalSettings_Response {
    // message fields
    // @@protoc_insertion_point(field:CParental_GetSignedParentalSettings_Response.serialized_settings)
    pub serialized_settings: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CParental_GetSignedParentalSettings_Response.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_GetSignedParentalSettings_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_GetSignedParentalSettings_Response {
    fn default() -> &'a CParental_GetSignedParentalSettings_Response {
        <CParental_GetSignedParentalSettings_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParental_GetSignedParentalSettings_Response {
    pub fn new() -> CParental_GetSignedParentalSettings_Response {
        ::std::default::Default::default()
    }

    // optional bytes serialized_settings = 1;

    pub fn serialized_settings(&self) -> &[u8] {
        match self.serialized_settings.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_serialized_settings(&mut self) {
        self.serialized_settings = ::std::option::Option::None;
    }

    pub fn has_serialized_settings(&self) -> bool {
        self.serialized_settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serialized_settings(&mut self, v: ::std::vec::Vec<u8>) {
        self.serialized_settings = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serialized_settings(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.serialized_settings.is_none() {
            self.serialized_settings = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.serialized_settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_serialized_settings(&mut self) -> ::std::vec::Vec<u8> {
        self.serialized_settings.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serialized_settings",
            |m: &CParental_GetSignedParentalSettings_Response| { &m.serialized_settings },
            |m: &mut CParental_GetSignedParentalSettings_Response| { &mut m.serialized_settings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &CParental_GetSignedParentalSettings_Response| { &m.signature },
            |m: &mut CParental_GetSignedParentalSettings_Response| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_GetSignedParentalSettings_Response>(
            "CParental_GetSignedParentalSettings_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_GetSignedParentalSettings_Response {
    const NAME: &'static str = "CParental_GetSignedParentalSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serialized_settings = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serialized_settings.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serialized_settings.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_GetSignedParentalSettings_Response {
        CParental_GetSignedParentalSettings_Response::new()
    }

    fn clear(&mut self) {
        self.serialized_settings = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_GetSignedParentalSettings_Response {
        static instance: CParental_GetSignedParentalSettings_Response = CParental_GetSignedParentalSettings_Response {
            serialized_settings: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_GetSignedParentalSettings_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_GetSignedParentalSettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_GetSignedParentalSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_GetSignedParentalSettings_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_SetParentalSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_SetParentalSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_SetParentalSettings_Request.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_SetParentalSettings_Request.settings)
    pub settings: ::protobuf::MessageField<ParentalSettings>,
    // @@protoc_insertion_point(field:CParental_SetParentalSettings_Request.new_password)
    pub new_password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_SetParentalSettings_Request.sessionid)
    pub sessionid: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_SetParentalSettings_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_SetParentalSettings_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_SetParentalSettings_Request {
    fn default() -> &'a CParental_SetParentalSettings_Request {
        <CParental_SetParentalSettings_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParental_SetParentalSettings_Request {
    pub fn new() -> CParental_SetParentalSettings_Request {
        ::std::default::Default::default()
    }

    // optional string password = 1;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string new_password = 3;

    pub fn new_password(&self) -> &str {
        match self.new_password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_new_password(&mut self) {
        self.new_password = ::std::option::Option::None;
    }

    pub fn has_new_password(&self) -> bool {
        self.new_password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_password(&mut self, v: ::std::string::String) {
        self.new_password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_password(&mut self) -> &mut ::std::string::String {
        if self.new_password.is_none() {
            self.new_password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.new_password.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_password(&mut self) -> ::std::string::String {
        self.new_password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string sessionid = 4;

    pub fn sessionid(&self) -> &str {
        match self.sessionid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: ::std::string::String) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sessionid(&mut self) -> &mut ::std::string::String {
        if self.sessionid.is_none() {
            self.sessionid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sessionid.as_mut().unwrap()
    }

    // Take field
    pub fn take_sessionid(&mut self) -> ::std::string::String {
        self.sessionid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CParental_SetParentalSettings_Request| { &m.password },
            |m: &mut CParental_SetParentalSettings_Request| { &mut m.password },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ParentalSettings>(
            "settings",
            |m: &CParental_SetParentalSettings_Request| { &m.settings },
            |m: &mut CParental_SetParentalSettings_Request| { &mut m.settings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "new_password",
            |m: &CParental_SetParentalSettings_Request| { &m.new_password },
            |m: &mut CParental_SetParentalSettings_Request| { &mut m.new_password },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CParental_SetParentalSettings_Request| { &m.sessionid },
            |m: &mut CParental_SetParentalSettings_Request| { &mut m.sessionid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_SetParentalSettings_Request| { &m.steamid },
            |m: &mut CParental_SetParentalSettings_Request| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_SetParentalSettings_Request>(
            "CParental_SetParentalSettings_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_SetParentalSettings_Request {
    const NAME: &'static str = "CParental_SetParentalSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.settings)?;
                },
                26 => {
                    self.new_password = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.sessionid = ::std::option::Option::Some(is.read_string()?);
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.password.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.new_password.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.sessionid.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.password.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.settings.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.new_password.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.sessionid.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_SetParentalSettings_Request {
        CParental_SetParentalSettings_Request::new()
    }

    fn clear(&mut self) {
        self.password = ::std::option::Option::None;
        self.settings.clear();
        self.new_password = ::std::option::Option::None;
        self.sessionid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_SetParentalSettings_Request {
        static instance: CParental_SetParentalSettings_Request = CParental_SetParentalSettings_Request {
            password: ::std::option::Option::None,
            settings: ::protobuf::MessageField::none(),
            new_password: ::std::option::Option::None,
            sessionid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_SetParentalSettings_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_SetParentalSettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_SetParentalSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_SetParentalSettings_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_SetParentalSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_SetParentalSettings_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_SetParentalSettings_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_SetParentalSettings_Response {
    fn default() -> &'a CParental_SetParentalSettings_Response {
        <CParental_SetParentalSettings_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParental_SetParentalSettings_Response {
    pub fn new() -> CParental_SetParentalSettings_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_SetParentalSettings_Response>(
            "CParental_SetParentalSettings_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_SetParentalSettings_Response {
    const NAME: &'static str = "CParental_SetParentalSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_SetParentalSettings_Response {
        CParental_SetParentalSettings_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_SetParentalSettings_Response {
        static instance: CParental_SetParentalSettings_Response = CParental_SetParentalSettings_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_SetParentalSettings_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_SetParentalSettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_SetParentalSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_SetParentalSettings_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ValidateToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ValidateToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_ValidateToken_Request.unlock_token)
    pub unlock_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ValidateToken_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ValidateToken_Request {
    fn default() -> &'a CParental_ValidateToken_Request {
        <CParental_ValidateToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParental_ValidateToken_Request {
    pub fn new() -> CParental_ValidateToken_Request {
        ::std::default::Default::default()
    }

    // optional string unlock_token = 1;

    pub fn unlock_token(&self) -> &str {
        match self.unlock_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_unlock_token(&mut self) {
        self.unlock_token = ::std::option::Option::None;
    }

    pub fn has_unlock_token(&self) -> bool {
        self.unlock_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unlock_token(&mut self, v: ::std::string::String) {
        self.unlock_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unlock_token(&mut self) -> &mut ::std::string::String {
        if self.unlock_token.is_none() {
            self.unlock_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.unlock_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_unlock_token(&mut self) -> ::std::string::String {
        self.unlock_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "unlock_token",
            |m: &CParental_ValidateToken_Request| { &m.unlock_token },
            |m: &mut CParental_ValidateToken_Request| { &mut m.unlock_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ValidateToken_Request>(
            "CParental_ValidateToken_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_ValidateToken_Request {
    const NAME: &'static str = "CParental_ValidateToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.unlock_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.unlock_token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.unlock_token.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ValidateToken_Request {
        CParental_ValidateToken_Request::new()
    }

    fn clear(&mut self) {
        self.unlock_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ValidateToken_Request {
        static instance: CParental_ValidateToken_Request = CParental_ValidateToken_Request {
            unlock_token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_ValidateToken_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ValidateToken_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ValidateToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_ValidateToken_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ValidateToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ValidateToken_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ValidateToken_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ValidateToken_Response {
    fn default() -> &'a CParental_ValidateToken_Response {
        <CParental_ValidateToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParental_ValidateToken_Response {
    pub fn new() -> CParental_ValidateToken_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ValidateToken_Response>(
            "CParental_ValidateToken_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_ValidateToken_Response {
    const NAME: &'static str = "CParental_ValidateToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ValidateToken_Response {
        CParental_ValidateToken_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ValidateToken_Response {
        static instance: CParental_ValidateToken_Response = CParental_ValidateToken_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_ValidateToken_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ValidateToken_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ValidateToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_ValidateToken_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ValidatePassword_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ValidatePassword_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_ValidatePassword_Request.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_ValidatePassword_Request.session)
    pub session: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_ValidatePassword_Request.send_unlock_on_success)
    pub send_unlock_on_success: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ValidatePassword_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ValidatePassword_Request {
    fn default() -> &'a CParental_ValidatePassword_Request {
        <CParental_ValidatePassword_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParental_ValidatePassword_Request {
    pub fn new() -> CParental_ValidatePassword_Request {
        ::std::default::Default::default()
    }

    // optional string password = 1;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string session = 2;

    pub fn session(&self) -> &str {
        match self.session.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_session(&mut self) {
        self.session = ::std::option::Option::None;
    }

    pub fn has_session(&self) -> bool {
        self.session.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session(&mut self, v: ::std::string::String) {
        self.session = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session(&mut self) -> &mut ::std::string::String {
        if self.session.is_none() {
            self.session = ::std::option::Option::Some(::std::string::String::new());
        }
        self.session.as_mut().unwrap()
    }

    // Take field
    pub fn take_session(&mut self) -> ::std::string::String {
        self.session.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool send_unlock_on_success = 3;

    pub fn send_unlock_on_success(&self) -> bool {
        self.send_unlock_on_success.unwrap_or(false)
    }

    pub fn clear_send_unlock_on_success(&mut self) {
        self.send_unlock_on_success = ::std::option::Option::None;
    }

    pub fn has_send_unlock_on_success(&self) -> bool {
        self.send_unlock_on_success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_send_unlock_on_success(&mut self, v: bool) {
        self.send_unlock_on_success = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CParental_ValidatePassword_Request| { &m.password },
            |m: &mut CParental_ValidatePassword_Request| { &mut m.password },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "session",
            |m: &CParental_ValidatePassword_Request| { &m.session },
            |m: &mut CParental_ValidatePassword_Request| { &mut m.session },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "send_unlock_on_success",
            |m: &CParental_ValidatePassword_Request| { &m.send_unlock_on_success },
            |m: &mut CParental_ValidatePassword_Request| { &mut m.send_unlock_on_success },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ValidatePassword_Request>(
            "CParental_ValidatePassword_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_ValidatePassword_Request {
    const NAME: &'static str = "CParental_ValidatePassword_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.session = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.send_unlock_on_success = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.password.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.session.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.send_unlock_on_success {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.password.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.session.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.send_unlock_on_success {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ValidatePassword_Request {
        CParental_ValidatePassword_Request::new()
    }

    fn clear(&mut self) {
        self.password = ::std::option::Option::None;
        self.session = ::std::option::Option::None;
        self.send_unlock_on_success = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ValidatePassword_Request {
        static instance: CParental_ValidatePassword_Request = CParental_ValidatePassword_Request {
            password: ::std::option::Option::None,
            session: ::std::option::Option::None,
            send_unlock_on_success: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_ValidatePassword_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ValidatePassword_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ValidatePassword_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_ValidatePassword_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ValidatePassword_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ValidatePassword_Response {
    // message fields
    // @@protoc_insertion_point(field:CParental_ValidatePassword_Response.token)
    pub token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ValidatePassword_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ValidatePassword_Response {
    fn default() -> &'a CParental_ValidatePassword_Response {
        <CParental_ValidatePassword_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParental_ValidatePassword_Response {
    pub fn new() -> CParental_ValidatePassword_Response {
        ::std::default::Default::default()
    }

    // optional string token = 1;

    pub fn token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_token(&mut self) {
        self.token = ::std::option::Option::None;
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "token",
            |m: &CParental_ValidatePassword_Response| { &m.token },
            |m: &mut CParental_ValidatePassword_Response| { &mut m.token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ValidatePassword_Response>(
            "CParental_ValidatePassword_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_ValidatePassword_Response {
    const NAME: &'static str = "CParental_ValidatePassword_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.token.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ValidatePassword_Response {
        CParental_ValidatePassword_Response::new()
    }

    fn clear(&mut self) {
        self.token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ValidatePassword_Response {
        static instance: CParental_ValidatePassword_Response = CParental_ValidatePassword_Response {
            token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_ValidatePassword_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ValidatePassword_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ValidatePassword_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_ValidatePassword_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_LockClient_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_LockClient_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_LockClient_Request.session)
    pub session: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_LockClient_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_LockClient_Request {
    fn default() -> &'a CParental_LockClient_Request {
        <CParental_LockClient_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParental_LockClient_Request {
    pub fn new() -> CParental_LockClient_Request {
        ::std::default::Default::default()
    }

    // optional string session = 1;

    pub fn session(&self) -> &str {
        match self.session.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_session(&mut self) {
        self.session = ::std::option::Option::None;
    }

    pub fn has_session(&self) -> bool {
        self.session.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session(&mut self, v: ::std::string::String) {
        self.session = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session(&mut self) -> &mut ::std::string::String {
        if self.session.is_none() {
            self.session = ::std::option::Option::Some(::std::string::String::new());
        }
        self.session.as_mut().unwrap()
    }

    // Take field
    pub fn take_session(&mut self) -> ::std::string::String {
        self.session.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "session",
            |m: &CParental_LockClient_Request| { &m.session },
            |m: &mut CParental_LockClient_Request| { &mut m.session },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_LockClient_Request>(
            "CParental_LockClient_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_LockClient_Request {
    const NAME: &'static str = "CParental_LockClient_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.session = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.session.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_LockClient_Request {
        CParental_LockClient_Request::new()
    }

    fn clear(&mut self) {
        self.session = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_LockClient_Request {
        static instance: CParental_LockClient_Request = CParental_LockClient_Request {
            session: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_LockClient_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_LockClient_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_LockClient_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_LockClient_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_LockClient_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_LockClient_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_LockClient_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_LockClient_Response {
    fn default() -> &'a CParental_LockClient_Response {
        <CParental_LockClient_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParental_LockClient_Response {
    pub fn new() -> CParental_LockClient_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_LockClient_Response>(
            "CParental_LockClient_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_LockClient_Response {
    const NAME: &'static str = "CParental_LockClient_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_LockClient_Response {
        CParental_LockClient_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_LockClient_Response {
        static instance: CParental_LockClient_Response = CParental_LockClient_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_LockClient_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_LockClient_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_LockClient_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_LockClient_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_RequestRecoveryCode_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_RequestRecoveryCode_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_RequestRecoveryCode_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_RequestRecoveryCode_Request {
    fn default() -> &'a CParental_RequestRecoveryCode_Request {
        <CParental_RequestRecoveryCode_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParental_RequestRecoveryCode_Request {
    pub fn new() -> CParental_RequestRecoveryCode_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_RequestRecoveryCode_Request>(
            "CParental_RequestRecoveryCode_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_RequestRecoveryCode_Request {
    const NAME: &'static str = "CParental_RequestRecoveryCode_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_RequestRecoveryCode_Request {
        CParental_RequestRecoveryCode_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_RequestRecoveryCode_Request {
        static instance: CParental_RequestRecoveryCode_Request = CParental_RequestRecoveryCode_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_RequestRecoveryCode_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_RequestRecoveryCode_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_RequestRecoveryCode_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_RequestRecoveryCode_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_RequestRecoveryCode_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_RequestRecoveryCode_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_RequestRecoveryCode_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_RequestRecoveryCode_Response {
    fn default() -> &'a CParental_RequestRecoveryCode_Response {
        <CParental_RequestRecoveryCode_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParental_RequestRecoveryCode_Response {
    pub fn new() -> CParental_RequestRecoveryCode_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_RequestRecoveryCode_Response>(
            "CParental_RequestRecoveryCode_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_RequestRecoveryCode_Response {
    const NAME: &'static str = "CParental_RequestRecoveryCode_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_RequestRecoveryCode_Response {
        CParental_RequestRecoveryCode_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_RequestRecoveryCode_Response {
        static instance: CParental_RequestRecoveryCode_Response = CParental_RequestRecoveryCode_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_RequestRecoveryCode_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_RequestRecoveryCode_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_RequestRecoveryCode_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_RequestRecoveryCode_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_DisableWithRecoveryCode_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_DisableWithRecoveryCode_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_DisableWithRecoveryCode_Request.recovery_code)
    pub recovery_code: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParental_DisableWithRecoveryCode_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_DisableWithRecoveryCode_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_DisableWithRecoveryCode_Request {
    fn default() -> &'a CParental_DisableWithRecoveryCode_Request {
        <CParental_DisableWithRecoveryCode_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParental_DisableWithRecoveryCode_Request {
    pub fn new() -> CParental_DisableWithRecoveryCode_Request {
        ::std::default::Default::default()
    }

    // optional uint32 recovery_code = 1;

    pub fn recovery_code(&self) -> u32 {
        self.recovery_code.unwrap_or(0)
    }

    pub fn clear_recovery_code(&mut self) {
        self.recovery_code = ::std::option::Option::None;
    }

    pub fn has_recovery_code(&self) -> bool {
        self.recovery_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recovery_code(&mut self, v: u32) {
        self.recovery_code = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "recovery_code",
            |m: &CParental_DisableWithRecoveryCode_Request| { &m.recovery_code },
            |m: &mut CParental_DisableWithRecoveryCode_Request| { &mut m.recovery_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_DisableWithRecoveryCode_Request| { &m.steamid },
            |m: &mut CParental_DisableWithRecoveryCode_Request| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_DisableWithRecoveryCode_Request>(
            "CParental_DisableWithRecoveryCode_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_DisableWithRecoveryCode_Request {
    const NAME: &'static str = "CParental_DisableWithRecoveryCode_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.recovery_code = ::std::option::Option::Some(is.read_uint32()?);
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.recovery_code {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.recovery_code {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_DisableWithRecoveryCode_Request {
        CParental_DisableWithRecoveryCode_Request::new()
    }

    fn clear(&mut self) {
        self.recovery_code = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_DisableWithRecoveryCode_Request {
        static instance: CParental_DisableWithRecoveryCode_Request = CParental_DisableWithRecoveryCode_Request {
            recovery_code: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_DisableWithRecoveryCode_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_DisableWithRecoveryCode_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_DisableWithRecoveryCode_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_DisableWithRecoveryCode_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_DisableWithRecoveryCode_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_DisableWithRecoveryCode_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_DisableWithRecoveryCode_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_DisableWithRecoveryCode_Response {
    fn default() -> &'a CParental_DisableWithRecoveryCode_Response {
        <CParental_DisableWithRecoveryCode_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParental_DisableWithRecoveryCode_Response {
    pub fn new() -> CParental_DisableWithRecoveryCode_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_DisableWithRecoveryCode_Response>(
            "CParental_DisableWithRecoveryCode_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_DisableWithRecoveryCode_Response {
    const NAME: &'static str = "CParental_DisableWithRecoveryCode_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_DisableWithRecoveryCode_Response {
        CParental_DisableWithRecoveryCode_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_DisableWithRecoveryCode_Response {
        static instance: CParental_DisableWithRecoveryCode_Response = CParental_DisableWithRecoveryCode_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_DisableWithRecoveryCode_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_DisableWithRecoveryCode_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_DisableWithRecoveryCode_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_DisableWithRecoveryCode_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ParentalSettingsChange_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ParentalSettingsChange_Notification {
    // message fields
    // @@protoc_insertion_point(field:CParental_ParentalSettingsChange_Notification.serialized_settings)
    pub serialized_settings: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CParental_ParentalSettingsChange_Notification.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CParental_ParentalSettingsChange_Notification.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_ParentalSettingsChange_Notification.sessionid)
    pub sessionid: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ParentalSettingsChange_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ParentalSettingsChange_Notification {
    fn default() -> &'a CParental_ParentalSettingsChange_Notification {
        <CParental_ParentalSettingsChange_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CParental_ParentalSettingsChange_Notification {
    pub fn new() -> CParental_ParentalSettingsChange_Notification {
        ::std::default::Default::default()
    }

    // optional bytes serialized_settings = 1;

    pub fn serialized_settings(&self) -> &[u8] {
        match self.serialized_settings.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_serialized_settings(&mut self) {
        self.serialized_settings = ::std::option::Option::None;
    }

    pub fn has_serialized_settings(&self) -> bool {
        self.serialized_settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serialized_settings(&mut self, v: ::std::vec::Vec<u8>) {
        self.serialized_settings = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serialized_settings(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.serialized_settings.is_none() {
            self.serialized_settings = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.serialized_settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_serialized_settings(&mut self) -> ::std::vec::Vec<u8> {
        self.serialized_settings.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string password = 3;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string sessionid = 4;

    pub fn sessionid(&self) -> &str {
        match self.sessionid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: ::std::string::String) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sessionid(&mut self) -> &mut ::std::string::String {
        if self.sessionid.is_none() {
            self.sessionid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sessionid.as_mut().unwrap()
    }

    // Take field
    pub fn take_sessionid(&mut self) -> ::std::string::String {
        self.sessionid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serialized_settings",
            |m: &CParental_ParentalSettingsChange_Notification| { &m.serialized_settings },
            |m: &mut CParental_ParentalSettingsChange_Notification| { &mut m.serialized_settings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &CParental_ParentalSettingsChange_Notification| { &m.signature },
            |m: &mut CParental_ParentalSettingsChange_Notification| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CParental_ParentalSettingsChange_Notification| { &m.password },
            |m: &mut CParental_ParentalSettingsChange_Notification| { &mut m.password },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CParental_ParentalSettingsChange_Notification| { &m.sessionid },
            |m: &mut CParental_ParentalSettingsChange_Notification| { &mut m.sessionid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ParentalSettingsChange_Notification>(
            "CParental_ParentalSettingsChange_Notification",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_ParentalSettingsChange_Notification {
    const NAME: &'static str = "CParental_ParentalSettingsChange_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serialized_settings = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.sessionid = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serialized_settings.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.password.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.sessionid.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serialized_settings.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.password.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.sessionid.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ParentalSettingsChange_Notification {
        CParental_ParentalSettingsChange_Notification::new()
    }

    fn clear(&mut self) {
        self.serialized_settings = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.password = ::std::option::Option::None;
        self.sessionid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ParentalSettingsChange_Notification {
        static instance: CParental_ParentalSettingsChange_Notification = CParental_ParentalSettingsChange_Notification {
            serialized_settings: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            password: ::std::option::Option::None,
            sessionid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_ParentalSettingsChange_Notification {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ParentalSettingsChange_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ParentalSettingsChange_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_ParentalSettingsChange_Notification {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ParentalUnlock_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ParentalUnlock_Notification {
    // message fields
    // @@protoc_insertion_point(field:CParental_ParentalUnlock_Notification.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_ParentalUnlock_Notification.sessionid)
    pub sessionid: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ParentalUnlock_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ParentalUnlock_Notification {
    fn default() -> &'a CParental_ParentalUnlock_Notification {
        <CParental_ParentalUnlock_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CParental_ParentalUnlock_Notification {
    pub fn new() -> CParental_ParentalUnlock_Notification {
        ::std::default::Default::default()
    }

    // optional string password = 1;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string sessionid = 2;

    pub fn sessionid(&self) -> &str {
        match self.sessionid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: ::std::string::String) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sessionid(&mut self) -> &mut ::std::string::String {
        if self.sessionid.is_none() {
            self.sessionid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sessionid.as_mut().unwrap()
    }

    // Take field
    pub fn take_sessionid(&mut self) -> ::std::string::String {
        self.sessionid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CParental_ParentalUnlock_Notification| { &m.password },
            |m: &mut CParental_ParentalUnlock_Notification| { &mut m.password },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CParental_ParentalUnlock_Notification| { &m.sessionid },
            |m: &mut CParental_ParentalUnlock_Notification| { &mut m.sessionid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ParentalUnlock_Notification>(
            "CParental_ParentalUnlock_Notification",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_ParentalUnlock_Notification {
    const NAME: &'static str = "CParental_ParentalUnlock_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.sessionid = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.password.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.sessionid.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.password.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.sessionid.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ParentalUnlock_Notification {
        CParental_ParentalUnlock_Notification::new()
    }

    fn clear(&mut self) {
        self.password = ::std::option::Option::None;
        self.sessionid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ParentalUnlock_Notification {
        static instance: CParental_ParentalUnlock_Notification = CParental_ParentalUnlock_Notification {
            password: ::std::option::Option::None,
            sessionid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_ParentalUnlock_Notification {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ParentalUnlock_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ParentalUnlock_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_ParentalUnlock_Notification {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ParentalLock_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ParentalLock_Notification {
    // message fields
    // @@protoc_insertion_point(field:CParental_ParentalLock_Notification.sessionid)
    pub sessionid: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ParentalLock_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ParentalLock_Notification {
    fn default() -> &'a CParental_ParentalLock_Notification {
        <CParental_ParentalLock_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CParental_ParentalLock_Notification {
    pub fn new() -> CParental_ParentalLock_Notification {
        ::std::default::Default::default()
    }

    // optional string sessionid = 1;

    pub fn sessionid(&self) -> &str {
        match self.sessionid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: ::std::string::String) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sessionid(&mut self) -> &mut ::std::string::String {
        if self.sessionid.is_none() {
            self.sessionid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sessionid.as_mut().unwrap()
    }

    // Take field
    pub fn take_sessionid(&mut self) -> ::std::string::String {
        self.sessionid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CParental_ParentalLock_Notification| { &m.sessionid },
            |m: &mut CParental_ParentalLock_Notification| { &mut m.sessionid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ParentalLock_Notification>(
            "CParental_ParentalLock_Notification",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CParental_ParentalLock_Notification {
    const NAME: &'static str = "CParental_ParentalLock_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sessionid = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sessionid.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ParentalLock_Notification {
        CParental_ParentalLock_Notification::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ParentalLock_Notification {
        static instance: CParental_ParentalLock_Notification = CParental_ParentalLock_Notification {
            sessionid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CParental_ParentalLock_Notification {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ParentalLock_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ParentalLock_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CParental_ParentalLock_Notification {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(steammessages_parental.steamclient.proto\x1a,steammessages_unified_ba\
    se.steamclient.proto\"B\n\x0bParentalApp\x12\x14\n\x05appid\x18\x01\x20\
    \x01(\rR\x05appid\x12\x1d\n\nis_allowed\x18\x02\x20\x01(\x08R\tisAllowed\
    \"\xfa\x03\n\x10ParentalSettings\x12\x18\n\x07steamid\x18\x01\x20\x01(\
    \x06R\x07steamid\x12&\n\x0fapplist_base_id\x18\x02\x20\x01(\rR\rapplistB\
    aseId\x128\n\x18applist_base_description\x18\x03\x20\x01(\tR\x16applistB\
    aseDescription\x12/\n\x0capplist_base\x18\x04\x20\x03(\x0b2\x0c.Parental\
    AppR\x0bapplistBase\x123\n\x0eapplist_custom\x18\x05\x20\x03(\x0b2\x0c.P\
    arentalAppR\rapplistCustom\x12*\n\x10passwordhashtype\x18\x06\x20\x01(\r\
    R\x10passwordhashtype\x12\x12\n\x04salt\x18\x07\x20\x01(\x0cR\x04salt\
    \x12\"\n\x0cpasswordhash\x18\x08\x20\x01(\x0cR\x0cpasswordhash\x12\x1d\n\
    \nis_enabled\x18\t\x20\x01(\x08R\tisEnabled\x12)\n\x10enabled_features\
    \x18\n\x20\x01(\rR\x0fenabledFeatures\x12%\n\x0erecovery_email\x18\x0b\
    \x20\x01(\tR\rrecoveryEmail\x12/\n\x14is_site_license_lock\x18\x0c\x20\
    \x01(\x08R\x11isSiteLicenseLock\"\xcd\x01\n(CParental_EnableParentalSett\
    ings_Request\x12\x1a\n\x08password\x18\x01\x20\x01(\tR\x08password\x12-\
    \n\x08settings\x18\x02\x20\x01(\x0b2\x11.ParentalSettingsR\x08settings\
    \x12\x1c\n\tsessionid\x18\x03\x20\x01(\tR\tsessionid\x12\x1e\n\nenableco\
    de\x18\x04\x20\x01(\rR\nenablecode\x12\x18\n\x07steamid\x18\n\x20\x01(\
    \x06R\x07steamid\"+\n)CParental_EnableParentalSettings_Response\"a\n)CPa\
    rental_DisableParentalSettings_Request\x12\x1a\n\x08password\x18\x01\x20\
    \x01(\tR\x08password\x12\x18\n\x07steamid\x18\n\x20\x01(\x06R\x07steamid\
    \",\n*CParental_DisableParentalSettings_Response\"A\n%CParental_GetParen\
    talSettings_Request\x12\x18\n\x07steamid\x18\n\x20\x01(\x06R\x07steamid\
    \"W\n&CParental_GetParentalSettings_Response\x12-\n\x08settings\x18\x01\
    \x20\x01(\x0b2\x11.ParentalSettingsR\x08settings\"I\n+CParental_GetSigne\
    dParentalSettings_Request\x12\x1a\n\x08priority\x18\x01\x20\x01(\rR\x08p\
    riority\"}\n,CParental_GetSignedParentalSettings_Response\x12/\n\x13seri\
    alized_settings\x18\x01\x20\x01(\x0cR\x12serializedSettings\x12\x1c\n\ts\
    ignature\x18\x02\x20\x01(\x0cR\tsignature\"\xcd\x01\n%CParental_SetParen\
    talSettings_Request\x12\x1a\n\x08password\x18\x01\x20\x01(\tR\x08passwor\
    d\x12-\n\x08settings\x18\x02\x20\x01(\x0b2\x11.ParentalSettingsR\x08sett\
    ings\x12!\n\x0cnew_password\x18\x03\x20\x01(\tR\x0bnewPassword\x12\x1c\n\
    \tsessionid\x18\x04\x20\x01(\tR\tsessionid\x12\x18\n\x07steamid\x18\n\
    \x20\x01(\x06R\x07steamid\"(\n&CParental_SetParentalSettings_Response\"D\
    \n\x1fCParental_ValidateToken_Request\x12!\n\x0cunlock_token\x18\x01\x20\
    \x01(\tR\x0bunlockToken\"\"\n\x20CParental_ValidateToken_Response\"\x8f\
    \x01\n\"CParental_ValidatePassword_Request\x12\x1a\n\x08password\x18\x01\
    \x20\x01(\tR\x08password\x12\x18\n\x07session\x18\x02\x20\x01(\tR\x07ses\
    sion\x123\n\x16send_unlock_on_success\x18\x03\x20\x01(\x08R\x13sendUnloc\
    kOnSuccess\";\n#CParental_ValidatePassword_Response\x12\x14\n\x05token\
    \x18\x01\x20\x01(\tR\x05token\"8\n\x1cCParental_LockClient_Request\x12\
    \x18\n\x07session\x18\x01\x20\x01(\tR\x07session\"\x1f\n\x1dCParental_Lo\
    ckClient_Response\"'\n%CParental_RequestRecoveryCode_Request\"(\n&CParen\
    tal_RequestRecoveryCode_Response\"j\n)CParental_DisableWithRecoveryCode_\
    Request\x12#\n\rrecovery_code\x18\x01\x20\x01(\rR\x0crecoveryCode\x12\
    \x18\n\x07steamid\x18\n\x20\x01(\x06R\x07steamid\",\n*CParental_DisableW\
    ithRecoveryCode_Response\"\xb8\x01\n-CParental_ParentalSettingsChange_No\
    tification\x12/\n\x13serialized_settings\x18\x01\x20\x01(\x0cR\x12serial\
    izedSettings\x12\x1c\n\tsignature\x18\x02\x20\x01(\x0cR\tsignature\x12\
    \x1a\n\x08password\x18\x03\x20\x01(\tR\x08password\x12\x1c\n\tsessionid\
    \x18\x04\x20\x01(\tR\tsessionid\"a\n%CParental_ParentalUnlock_Notificati\
    on\x12\x1a\n\x08password\x18\x01\x20\x01(\tR\x08password\x12\x1c\n\tsess\
    ionid\x18\x02\x20\x01(\tR\tsessionid\"C\n#CParental_ParentalLock_Notific\
    ation\x12\x1c\n\tsessionid\x18\x01\x20\x01(\tR\tsessionid2\xd2\x0e\n\x08\
    Parental\x12\xd0\x01\n\x16EnableParentalSettings\x12).CParental_EnablePa\
    rentalSettings_Request\x1a*.CParental_EnableParentalSettings_Response\"_\
    \x82\xb5\x18[Enable\x20parental\x20settings\x20for\x20the\x20logged\x20i\
    n\x20account,\x20optionally\x20setting\x20the\x20current\x20settings\x12\
    \xab\x01\n\x17DisableParentalSettings\x12*.CParental_DisableParentalSett\
    ings_Request\x1a+.CParental_DisableParentalSettings_Response\"7\x82\xb5\
    \x183Disable\x20parental\x20settings\x20for\x20the\x20logged\x20in\x20ac\
    count\x12\xa7\x01\n\x13GetParentalSettings\x12&.CParental_GetParentalSet\
    tings_Request\x1a'.CParental_GetParentalSettings_Response\"?\x82\xb5\x18\
    ;Get\x20the\x20current\x20parental\x20settings\x20for\x20the\x20logged\
    \x20in\x20account\x12\xe8\x01\n\x19GetSignedParentalSettings\x12,.CParen\
    tal_GetSignedParentalSettings_Request\x1a-.CParental_GetSignedParentalSe\
    ttings_Response\"n\x82\xb5\x18jGet\x20the\x20current\x20parental\x20sett\
    ings\x20for\x20the\x20logged\x20in\x20account\x20in\x20a\x20form\x20that\
    \x20can\x20by\x20verified\x20by\x20the\x20receiver\x12\xa7\x01\n\x13SetP\
    arentalSettings\x12&.CParental_SetParentalSettings_Request\x1a'.CParenta\
    l_SetParentalSettings_Response\"?\x82\xb5\x18;Set\x20the\x20current\x20p\
    arental\x20settings\x20for\x20the\x20logged\x20in\x20account\x12\xa7\x01\
    \n\rValidateToken\x12\x20.CParental_ValidateToken_Request\x1a!.CParental\
    _ValidateToken_Response\"Q\x82\xb5\x18MCheck\x20if\x20the\x20given\x20pa\
    rental\x20unlock\x20token\x20is\x20correct\x20for\x20the\x20logged\x20in\
    \x20account\x12\xb7\x01\n\x10ValidatePassword\x12#.CParental_ValidatePas\
    sword_Request\x1a$.CParental_ValidatePassword_Response\"X\x82\xb5\x18TVa\
    lidate\x20the\x20plaintext\x20password\x20for\x20the\x20logged\x20in\x20\
    account\x20and\x20return\x20an\x20unlock\x20token\x12\x8f\x01\n\nLockCli\
    ent\x12\x1d.CParental_LockClient_Request\x1a\x1e.CParental_LockClient_Re\
    sponse\"B\x82\xb5\x18>Notify\x20connected\x20clients\x20that\x20a\x20loc\
    k\x20has\x20occurred\x20in\x20a\x20browser\x12\xc3\x01\n\x13RequestRecov\
    eryCode\x12&.CParental_RequestRecoveryCode_Request\x1a'.CParental_Reques\
    tRecoveryCode_Response\"[\x82\xb5\x18WRequest\x20a\x20recovery\x20code\
    \x20be\x20sent\x20to\x20the\x20recovery\x20email\x20address\x20for\x20th\
    e\x20specified\x20account\x12\xaa\x01\n\x17DisableWithRecoveryCode\x12*.\
    CParental_DisableWithRecoveryCode_Request\x1a+.CParental_DisableWithReco\
    veryCode_Response\"6\x82\xb5\x182Attempt\x20a\x20recovery\x20unlock\x20o\
    n\x20the\x20specified\x20account\x1a\x1d\x82\xb5\x18\x19Parental\x20sett\
    ings\x20service2\x86\x04\n\x0eParentalClient\x12\x9c\x01\n\x14NotifySett\
    ingsChange\x12..CParental_ParentalSettingsChange_Notification\x1a\x0b.No\
    Response\"G\x82\xb5\x18CNotification\x20from\x20server\x20to\x20client\
    \x20of\x20a\x20change\x20in\x20parental\x20settings\x12\x94\x01\n\x0cNot\
    ifyUnlock\x12&.CParental_ParentalUnlock_Notification\x1a\x0b.NoResponse\
    \"O\x82\xb5\x18KNotification\x20from\x20server\x20to\x20client\x20that\
    \x20an\x20unlock\x20has\x20occurred\x20in\x20a\x20browser\x12\x8d\x01\n\
    \nNotifyLock\x12$.CParental_ParentalLock_Notification\x1a\x0b.NoResponse\
    \"L\x82\xb5\x18HNotification\x20from\x20server\x20to\x20client\x20that\
    \x20a\x20lock\x20has\x20occurred\x20in\x20a\x20browser\x1a.\x82\xb5\x18&\
    Parental\x20settings\x20client\x20notifications\xc0\xb5\x18\x02B\x03\x80\
    \x01\x01J\xc2(\n\x07\x12\x05\0\0\xb8\x01\x01\n\t\n\x02\x03\0\x12\x03\0\0\
    6\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\x10\x12\x03\x02\0\"\n\n\
    \n\x02\x04\0\x12\x04\x04\0\x07\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\
    \x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x08\"\n\x0c\n\x05\x04\0\x02\0\
    \x04\x12\x03\x05\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x11\x17\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x18\x1d\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x05\x20!\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x08%\n\x0c\n\
    \x05\x04\0\x02\x01\x04\x12\x03\x06\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x06\x11\x15\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\x16\x20\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06#$\n\n\n\x02\x04\x01\x12\x04\t\0\
    \x16\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08\x18\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x03\n\x08%\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\n\x08\x10\n\x0c\
    \n\x05\x04\x01\x02\0\x05\x12\x03\n\x11\x18\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\n\x19\x20\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\n#$\n\x0b\n\x04\
    \x04\x01\x02\x01\x12\x03\x0b\x08,\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\
    \x03\x0b\x08\x10\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0b\x11\x17\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0b\x18'\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03\x0b*+\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0c\x085\n\
    \x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\x01\
    \x02\x02\x05\x12\x03\x0c\x11\x17\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\
    \x0c\x180\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0c34\n\x0b\n\x04\x04\
    \x01\x02\x03\x12\x03\r\x08/\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\x03\r\
    \x08\x10\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03\r\x11\x1d\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x03\r\x1e*\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\
    \x03\r-.\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x0e\x081\n\x0c\n\x05\x04\
    \x01\x02\x04\x04\x12\x03\x0e\x08\x10\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\
    \x03\x0e\x11\x1d\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x0e\x1e,\n\x0c\
    \n\x05\x04\x01\x02\x04\x03\x12\x03\x0e/0\n\x0b\n\x04\x04\x01\x02\x05\x12\
    \x03\x0f\x08-\n\x0c\n\x05\x04\x01\x02\x05\x04\x12\x03\x0f\x08\x10\n\x0c\
    \n\x05\x04\x01\x02\x05\x05\x12\x03\x0f\x11\x17\n\x0c\n\x05\x04\x01\x02\
    \x05\x01\x12\x03\x0f\x18(\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x0f+,\
    \n\x0b\n\x04\x04\x01\x02\x06\x12\x03\x10\x08\x20\n\x0c\n\x05\x04\x01\x02\
    \x06\x04\x12\x03\x10\x08\x10\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x03\x10\
    \x11\x16\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\x10\x17\x1b\n\x0c\n\x05\
    \x04\x01\x02\x06\x03\x12\x03\x10\x1e\x1f\n\x0b\n\x04\x04\x01\x02\x07\x12\
    \x03\x11\x08(\n\x0c\n\x05\x04\x01\x02\x07\x04\x12\x03\x11\x08\x10\n\x0c\
    \n\x05\x04\x01\x02\x07\x05\x12\x03\x11\x11\x16\n\x0c\n\x05\x04\x01\x02\
    \x07\x01\x12\x03\x11\x17#\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\x03\x11&'\
    \n\x0b\n\x04\x04\x01\x02\x08\x12\x03\x12\x08%\n\x0c\n\x05\x04\x01\x02\
    \x08\x04\x12\x03\x12\x08\x10\n\x0c\n\x05\x04\x01\x02\x08\x05\x12\x03\x12\
    \x11\x15\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03\x12\x16\x20\n\x0c\n\x05\
    \x04\x01\x02\x08\x03\x12\x03\x12#$\n\x0b\n\x04\x04\x01\x02\t\x12\x03\x13\
    \x08.\n\x0c\n\x05\x04\x01\x02\t\x04\x12\x03\x13\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\t\x05\x12\x03\x13\x11\x17\n\x0c\n\x05\x04\x01\x02\t\x01\x12\x03\
    \x13\x18(\n\x0c\n\x05\x04\x01\x02\t\x03\x12\x03\x13+-\n\x0b\n\x04\x04\
    \x01\x02\n\x12\x03\x14\x08,\n\x0c\n\x05\x04\x01\x02\n\x04\x12\x03\x14\
    \x08\x10\n\x0c\n\x05\x04\x01\x02\n\x05\x12\x03\x14\x11\x17\n\x0c\n\x05\
    \x04\x01\x02\n\x01\x12\x03\x14\x18&\n\x0c\n\x05\x04\x01\x02\n\x03\x12\
    \x03\x14)+\n\x0b\n\x04\x04\x01\x02\x0b\x12\x03\x15\x080\n\x0c\n\x05\x04\
    \x01\x02\x0b\x04\x12\x03\x15\x08\x10\n\x0c\n\x05\x04\x01\x02\x0b\x05\x12\
    \x03\x15\x11\x15\n\x0c\n\x05\x04\x01\x02\x0b\x01\x12\x03\x15\x16*\n\x0c\
    \n\x05\x04\x01\x02\x0b\x03\x12\x03\x15-/\n\n\n\x02\x04\x02\x12\x04\x18\0\
    \x1e\x01\n\n\n\x03\x04\x02\x01\x12\x03\x18\x080\n\x0b\n\x04\x04\x02\x02\
    \0\x12\x03\x19\x08%\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x19\x08\x10\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x19\x11\x17\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03\x19\x18\x20\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x19#$\n\
    \x0b\n\x04\x04\x02\x02\x01\x12\x03\x1a\x080\n\x0c\n\x05\x04\x02\x02\x01\
    \x04\x12\x03\x1a\x08\x10\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x1a\x11\
    \"\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1a#+\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03\x1a./\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x1b\x08&\n\
    \x0c\n\x05\x04\x02\x02\x02\x04\x12\x03\x1b\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\x02\x05\x12\x03\x1b\x11\x17\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\
    \x1b\x18!\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x1b$%\n\x0b\n\x04\x04\
    \x02\x02\x03\x12\x03\x1c\x08'\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\x03\
    \x1c\x08\x10\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x1c\x11\x17\n\x0c\n\
    \x05\x04\x02\x02\x03\x01\x12\x03\x1c\x18\"\n\x0c\n\x05\x04\x02\x02\x03\
    \x03\x12\x03\x1c%&\n\x0b\n\x04\x04\x02\x02\x04\x12\x03\x1d\x08&\n\x0c\n\
    \x05\x04\x02\x02\x04\x04\x12\x03\x1d\x08\x10\n\x0c\n\x05\x04\x02\x02\x04\
    \x05\x12\x03\x1d\x11\x18\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\x1d\x19\
    \x20\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\x1d#%\n\n\n\x02\x04\x03\x12\
    \x04\x20\0!\x01\n\n\n\x03\x04\x03\x01\x12\x03\x20\x081\n\n\n\x02\x04\x04\
    \x12\x04#\0&\x01\n\n\n\x03\x04\x04\x01\x12\x03#\x081\n\x0b\n\x04\x04\x04\
    \x02\0\x12\x03$\x08%\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03$\x08\x10\n\
    \x0c\n\x05\x04\x04\x02\0\x05\x12\x03$\x11\x17\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x03$\x18\x20\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03$#$\n\x0b\n\
    \x04\x04\x04\x02\x01\x12\x03%\x08&\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\
    \x03%\x08\x10\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03%\x11\x18\n\x0c\n\
    \x05\x04\x04\x02\x01\x01\x12\x03%\x19\x20\n\x0c\n\x05\x04\x04\x02\x01\
    \x03\x12\x03%#%\n\n\n\x02\x04\x05\x12\x04(\0)\x01\n\n\n\x03\x04\x05\x01\
    \x12\x03(\x082\n\n\n\x02\x04\x06\x12\x04+\0-\x01\n\n\n\x03\x04\x06\x01\
    \x12\x03+\x08-\n\x0b\n\x04\x04\x06\x02\0\x12\x03,\x08&\n\x0c\n\x05\x04\
    \x06\x02\0\x04\x12\x03,\x08\x10\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03,\
    \x11\x18\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03,\x19\x20\n\x0c\n\x05\x04\
    \x06\x02\0\x03\x12\x03,#%\n\n\n\x02\x04\x07\x12\x04/\01\x01\n\n\n\x03\
    \x04\x07\x01\x12\x03/\x08.\n\x0b\n\x04\x04\x07\x02\0\x12\x030\x080\n\x0c\
    \n\x05\x04\x07\x02\0\x04\x12\x030\x08\x10\n\x0c\n\x05\x04\x07\x02\0\x06\
    \x12\x030\x11\"\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x030#+\n\x0c\n\x05\x04\
    \x07\x02\0\x03\x12\x030./\n\n\n\x02\x04\x08\x12\x043\05\x01\n\n\n\x03\
    \x04\x08\x01\x12\x033\x083\n\x0b\n\x04\x04\x08\x02\0\x12\x034\x08%\n\x0c\
    \n\x05\x04\x08\x02\0\x04\x12\x034\x08\x10\n\x0c\n\x05\x04\x08\x02\0\x05\
    \x12\x034\x11\x17\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x034\x18\x20\n\x0c\n\
    \x05\x04\x08\x02\0\x03\x12\x034#$\n\n\n\x02\x04\t\x12\x047\0:\x01\n\n\n\
    \x03\x04\t\x01\x12\x037\x084\n\x0b\n\x04\x04\t\x02\0\x12\x038\x08/\n\x0c\
    \n\x05\x04\t\x02\0\x04\x12\x038\x08\x10\n\x0c\n\x05\x04\t\x02\0\x05\x12\
    \x038\x11\x16\n\x0c\n\x05\x04\t\x02\0\x01\x12\x038\x17*\n\x0c\n\x05\x04\
    \t\x02\0\x03\x12\x038-.\n\x0b\n\x04\x04\t\x02\x01\x12\x039\x08%\n\x0c\n\
    \x05\x04\t\x02\x01\x04\x12\x039\x08\x10\n\x0c\n\x05\x04\t\x02\x01\x05\
    \x12\x039\x11\x16\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x039\x17\x20\n\x0c\n\
    \x05\x04\t\x02\x01\x03\x12\x039#$\n\n\n\x02\x04\n\x12\x04<\0B\x01\n\n\n\
    \x03\x04\n\x01\x12\x03<\x08-\n\x0b\n\x04\x04\n\x02\0\x12\x03=\x08%\n\x0c\
    \n\x05\x04\n\x02\0\x04\x12\x03=\x08\x10\n\x0c\n\x05\x04\n\x02\0\x05\x12\
    \x03=\x11\x17\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03=\x18\x20\n\x0c\n\x05\
    \x04\n\x02\0\x03\x12\x03=#$\n\x0b\n\x04\x04\n\x02\x01\x12\x03>\x080\n\
    \x0c\n\x05\x04\n\x02\x01\x04\x12\x03>\x08\x10\n\x0c\n\x05\x04\n\x02\x01\
    \x06\x12\x03>\x11\"\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03>#+\n\x0c\n\x05\
    \x04\n\x02\x01\x03\x12\x03>./\n\x0b\n\x04\x04\n\x02\x02\x12\x03?\x08)\n\
    \x0c\n\x05\x04\n\x02\x02\x04\x12\x03?\x08\x10\n\x0c\n\x05\x04\n\x02\x02\
    \x05\x12\x03?\x11\x17\n\x0c\n\x05\x04\n\x02\x02\x01\x12\x03?\x18$\n\x0c\
    \n\x05\x04\n\x02\x02\x03\x12\x03?'(\n\x0b\n\x04\x04\n\x02\x03\x12\x03@\
    \x08&\n\x0c\n\x05\x04\n\x02\x03\x04\x12\x03@\x08\x10\n\x0c\n\x05\x04\n\
    \x02\x03\x05\x12\x03@\x11\x17\n\x0c\n\x05\x04\n\x02\x03\x01\x12\x03@\x18\
    !\n\x0c\n\x05\x04\n\x02\x03\x03\x12\x03@$%\n\x0b\n\x04\x04\n\x02\x04\x12\
    \x03A\x08&\n\x0c\n\x05\x04\n\x02\x04\x04\x12\x03A\x08\x10\n\x0c\n\x05\
    \x04\n\x02\x04\x05\x12\x03A\x11\x18\n\x0c\n\x05\x04\n\x02\x04\x01\x12\
    \x03A\x19\x20\n\x0c\n\x05\x04\n\x02\x04\x03\x12\x03A#%\n\n\n\x02\x04\x0b\
    \x12\x04D\0E\x01\n\n\n\x03\x04\x0b\x01\x12\x03D\x08.\n\n\n\x02\x04\x0c\
    \x12\x04G\0I\x01\n\n\n\x03\x04\x0c\x01\x12\x03G\x08'\n\x0b\n\x04\x04\x0c\
    \x02\0\x12\x03H\x08)\n\x0c\n\x05\x04\x0c\x02\0\x04\x12\x03H\x08\x10\n\
    \x0c\n\x05\x04\x0c\x02\0\x05\x12\x03H\x11\x17\n\x0c\n\x05\x04\x0c\x02\0\
    \x01\x12\x03H\x18$\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03H'(\n\n\n\x02\
    \x04\r\x12\x04K\0L\x01\n\n\n\x03\x04\r\x01\x12\x03K\x08(\n\n\n\x02\x04\
    \x0e\x12\x04N\0R\x01\n\n\n\x03\x04\x0e\x01\x12\x03N\x08*\n\x0b\n\x04\x04\
    \x0e\x02\0\x12\x03O\x08%\n\x0c\n\x05\x04\x0e\x02\0\x04\x12\x03O\x08\x10\
    \n\x0c\n\x05\x04\x0e\x02\0\x05\x12\x03O\x11\x17\n\x0c\n\x05\x04\x0e\x02\
    \0\x01\x12\x03O\x18\x20\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\x03O#$\n\x0b\n\
    \x04\x04\x0e\x02\x01\x12\x03P\x08$\n\x0c\n\x05\x04\x0e\x02\x01\x04\x12\
    \x03P\x08\x10\n\x0c\n\x05\x04\x0e\x02\x01\x05\x12\x03P\x11\x17\n\x0c\n\
    \x05\x04\x0e\x02\x01\x01\x12\x03P\x18\x1f\n\x0c\n\x05\x04\x0e\x02\x01\
    \x03\x12\x03P\"#\n\x0b\n\x04\x04\x0e\x02\x02\x12\x03Q\x081\n\x0c\n\x05\
    \x04\x0e\x02\x02\x04\x12\x03Q\x08\x10\n\x0c\n\x05\x04\x0e\x02\x02\x05\
    \x12\x03Q\x11\x15\n\x0c\n\x05\x04\x0e\x02\x02\x01\x12\x03Q\x16,\n\x0c\n\
    \x05\x04\x0e\x02\x02\x03\x12\x03Q/0\n\n\n\x02\x04\x0f\x12\x04T\0V\x01\n\
    \n\n\x03\x04\x0f\x01\x12\x03T\x08+\n\x0b\n\x04\x04\x0f\x02\0\x12\x03U\
    \x08\"\n\x0c\n\x05\x04\x0f\x02\0\x04\x12\x03U\x08\x10\n\x0c\n\x05\x04\
    \x0f\x02\0\x05\x12\x03U\x11\x17\n\x0c\n\x05\x04\x0f\x02\0\x01\x12\x03U\
    \x18\x1d\n\x0c\n\x05\x04\x0f\x02\0\x03\x12\x03U\x20!\n\n\n\x02\x04\x10\
    \x12\x04X\0Z\x01\n\n\n\x03\x04\x10\x01\x12\x03X\x08$\n\x0b\n\x04\x04\x10\
    \x02\0\x12\x03Y\x08$\n\x0c\n\x05\x04\x10\x02\0\x04\x12\x03Y\x08\x10\n\
    \x0c\n\x05\x04\x10\x02\0\x05\x12\x03Y\x11\x17\n\x0c\n\x05\x04\x10\x02\0\
    \x01\x12\x03Y\x18\x1f\n\x0c\n\x05\x04\x10\x02\0\x03\x12\x03Y\"#\n\n\n\
    \x02\x04\x11\x12\x04\\\0]\x01\n\n\n\x03\x04\x11\x01\x12\x03\\\x08%\n\n\n\
    \x02\x04\x12\x12\x04_\0`\x01\n\n\n\x03\x04\x12\x01\x12\x03_\x08-\n\n\n\
    \x02\x04\x13\x12\x04b\0c\x01\n\n\n\x03\x04\x13\x01\x12\x03b\x08.\n\n\n\
    \x02\x04\x14\x12\x04e\0h\x01\n\n\n\x03\x04\x14\x01\x12\x03e\x081\n\x0b\n\
    \x04\x04\x14\x02\0\x12\x03f\x08*\n\x0c\n\x05\x04\x14\x02\0\x04\x12\x03f\
    \x08\x10\n\x0c\n\x05\x04\x14\x02\0\x05\x12\x03f\x11\x17\n\x0c\n\x05\x04\
    \x14\x02\0\x01\x12\x03f\x18%\n\x0c\n\x05\x04\x14\x02\0\x03\x12\x03f()\n\
    \x0b\n\x04\x04\x14\x02\x01\x12\x03g\x08&\n\x0c\n\x05\x04\x14\x02\x01\x04\
    \x12\x03g\x08\x10\n\x0c\n\x05\x04\x14\x02\x01\x05\x12\x03g\x11\x18\n\x0c\
    \n\x05\x04\x14\x02\x01\x01\x12\x03g\x19\x20\n\x0c\n\x05\x04\x14\x02\x01\
    \x03\x12\x03g#%\n\n\n\x02\x04\x15\x12\x04j\0k\x01\n\n\n\x03\x04\x15\x01\
    \x12\x03j\x082\n\n\n\x02\x04\x16\x12\x04m\0r\x01\n\n\n\x03\x04\x16\x01\
    \x12\x03m\x085\n\x0b\n\x04\x04\x16\x02\0\x12\x03n\x08/\n\x0c\n\x05\x04\
    \x16\x02\0\x04\x12\x03n\x08\x10\n\x0c\n\x05\x04\x16\x02\0\x05\x12\x03n\
    \x11\x16\n\x0c\n\x05\x04\x16\x02\0\x01\x12\x03n\x17*\n\x0c\n\x05\x04\x16\
    \x02\0\x03\x12\x03n-.\n\x0b\n\x04\x04\x16\x02\x01\x12\x03o\x08%\n\x0c\n\
    \x05\x04\x16\x02\x01\x04\x12\x03o\x08\x10\n\x0c\n\x05\x04\x16\x02\x01\
    \x05\x12\x03o\x11\x16\n\x0c\n\x05\x04\x16\x02\x01\x01\x12\x03o\x17\x20\n\
    \x0c\n\x05\x04\x16\x02\x01\x03\x12\x03o#$\n\x0b\n\x04\x04\x16\x02\x02\
    \x12\x03p\x08%\n\x0c\n\x05\x04\x16\x02\x02\x04\x12\x03p\x08\x10\n\x0c\n\
    \x05\x04\x16\x02\x02\x05\x12\x03p\x11\x17\n\x0c\n\x05\x04\x16\x02\x02\
    \x01\x12\x03p\x18\x20\n\x0c\n\x05\x04\x16\x02\x02\x03\x12\x03p#$\n\x0b\n\
    \x04\x04\x16\x02\x03\x12\x03q\x08&\n\x0c\n\x05\x04\x16\x02\x03\x04\x12\
    \x03q\x08\x10\n\x0c\n\x05\x04\x16\x02\x03\x05\x12\x03q\x11\x17\n\x0c\n\
    \x05\x04\x16\x02\x03\x01\x12\x03q\x18!\n\x0c\n\x05\x04\x16\x02\x03\x03\
    \x12\x03q$%\n\n\n\x02\x04\x17\x12\x04t\0w\x01\n\n\n\x03\x04\x17\x01\x12\
    \x03t\x08-\n\x0b\n\x04\x04\x17\x02\0\x12\x03u\x08%\n\x0c\n\x05\x04\x17\
    \x02\0\x04\x12\x03u\x08\x10\n\x0c\n\x05\x04\x17\x02\0\x05\x12\x03u\x11\
    \x17\n\x0c\n\x05\x04\x17\x02\0\x01\x12\x03u\x18\x20\n\x0c\n\x05\x04\x17\
    \x02\0\x03\x12\x03u#$\n\x0b\n\x04\x04\x17\x02\x01\x12\x03v\x08&\n\x0c\n\
    \x05\x04\x17\x02\x01\x04\x12\x03v\x08\x10\n\x0c\n\x05\x04\x17\x02\x01\
    \x05\x12\x03v\x11\x17\n\x0c\n\x05\x04\x17\x02\x01\x01\x12\x03v\x18!\n\
    \x0c\n\x05\x04\x17\x02\x01\x03\x12\x03v$%\n\n\n\x02\x04\x18\x12\x04y\0{\
    \x01\n\n\n\x03\x04\x18\x01\x12\x03y\x08+\n\x0b\n\x04\x04\x18\x02\0\x12\
    \x03z\x08&\n\x0c\n\x05\x04\x18\x02\0\x04\x12\x03z\x08\x10\n\x0c\n\x05\
    \x04\x18\x02\0\x05\x12\x03z\x11\x17\n\x0c\n\x05\x04\x18\x02\0\x01\x12\
    \x03z\x18!\n\x0c\n\x05\x04\x18\x02\0\x03\x12\x03z$%\n\x0b\n\x02\x06\0\
    \x12\x05}\0\xa7\x01\x01\n\n\n\x03\x06\0\x01\x12\x03}\x08\x10\n\n\n\x03\
    \x06\0\x03\x12\x03~\x08C\n\r\n\x06\x06\0\x03\xd0\x86\x03\x12\x03~\x08C\n\
    \x0e\n\x04\x06\0\x02\0\x12\x06\x80\x01\x08\x82\x01\t\n\r\n\x05\x06\0\x02\
    \0\x01\x12\x04\x80\x01\x0c\"\n\r\n\x05\x06\0\x02\0\x02\x12\x04\x80\x01$M\
    \n\x0e\n\x05\x06\0\x02\0\x03\x12\x05\x80\x01X\x82\x01\n\x0e\n\x05\x06\0\
    \x02\0\x04\x12\x05\x81\x01\x10\x8c\x01\n\x11\n\x08\x06\0\x02\0\x04\xd0\
    \x86\x03\x12\x05\x81\x01\x10\x8c\x01\n\x0e\n\x04\x06\0\x02\x01\x12\x06\
    \x84\x01\x08\x86\x01\t\n\r\n\x05\x06\0\x02\x01\x01\x12\x04\x84\x01\x0c#\
    \n\r\n\x05\x06\0\x02\x01\x02\x12\x04\x84\x01%O\n\x0e\n\x05\x06\0\x02\x01\
    \x03\x12\x05\x84\x01Z\x85\x01\n\r\n\x05\x06\0\x02\x01\x04\x12\x04\x85\
    \x01\x10d\n\x10\n\x08\x06\0\x02\x01\x04\xd0\x86\x03\x12\x04\x85\x01\x10d\
    \n\x0e\n\x04\x06\0\x02\x02\x12\x06\x88\x01\x08\x8a\x01\t\n\r\n\x05\x06\0\
    \x02\x02\x01\x12\x04\x88\x01\x0c\x1f\n\r\n\x05\x06\0\x02\x02\x02\x12\x04\
    \x88\x01!G\n\r\n\x05\x06\0\x02\x02\x03\x12\x04\x88\x01Ry\n\r\n\x05\x06\0\
    \x02\x02\x04\x12\x04\x89\x01\x10l\n\x10\n\x08\x06\0\x02\x02\x04\xd0\x86\
    \x03\x12\x04\x89\x01\x10l\n\x0e\n\x04\x06\0\x02\x03\x12\x06\x8c\x01\x08\
    \x8e\x01\t\n\r\n\x05\x06\0\x02\x03\x01\x12\x04\x8c\x01\x0c%\n\r\n\x05\
    \x06\0\x02\x03\x02\x12\x04\x8c\x01'S\n\x0e\n\x05\x06\0\x02\x03\x03\x12\
    \x05\x8c\x01^\x8b\x01\n\x0e\n\x05\x06\0\x02\x03\x04\x12\x05\x8d\x01\x10\
    \x9b\x01\n\x11\n\x08\x06\0\x02\x03\x04\xd0\x86\x03\x12\x05\x8d\x01\x10\
    \x9b\x01\n\x0e\n\x04\x06\0\x02\x04\x12\x06\x90\x01\x08\x92\x01\t\n\r\n\
    \x05\x06\0\x02\x04\x01\x12\x04\x90\x01\x0c\x1f\n\r\n\x05\x06\0\x02\x04\
    \x02\x12\x04\x90\x01!G\n\r\n\x05\x06\0\x02\x04\x03\x12\x04\x90\x01Ry\n\r\
    \n\x05\x06\0\x02\x04\x04\x12\x04\x91\x01\x10l\n\x10\n\x08\x06\0\x02\x04\
    \x04\xd0\x86\x03\x12\x04\x91\x01\x10l\n\x0e\n\x04\x06\0\x02\x05\x12\x06\
    \x94\x01\x08\x96\x01\t\n\r\n\x05\x06\0\x02\x05\x01\x12\x04\x94\x01\x0c\
    \x19\n\r\n\x05\x06\0\x02\x05\x02\x12\x04\x94\x01\x1b;\n\r\n\x05\x06\0\
    \x02\x05\x03\x12\x04\x94\x01Fg\n\r\n\x05\x06\0\x02\x05\x04\x12\x04\x95\
    \x01\x10~\n\x10\n\x08\x06\0\x02\x05\x04\xd0\x86\x03\x12\x04\x95\x01\x10~\
    \n\x0e\n\x04\x06\0\x02\x06\x12\x06\x98\x01\x08\x9a\x01\t\n\r\n\x05\x06\0\
    \x02\x06\x01\x12\x04\x98\x01\x0c\x1c\n\r\n\x05\x06\0\x02\x06\x02\x12\x04\
    \x98\x01\x1eA\n\r\n\x05\x06\0\x02\x06\x03\x12\x04\x98\x01Lp\n\x0e\n\x05\
    \x06\0\x02\x06\x04\x12\x05\x99\x01\x10\x85\x01\n\x11\n\x08\x06\0\x02\x06\
    \x04\xd0\x86\x03\x12\x05\x99\x01\x10\x85\x01\n\x0e\n\x04\x06\0\x02\x07\
    \x12\x06\x9c\x01\x08\x9e\x01\t\n\r\n\x05\x06\0\x02\x07\x01\x12\x04\x9c\
    \x01\x0c\x16\n\r\n\x05\x06\0\x02\x07\x02\x12\x04\x9c\x01\x185\n\r\n\x05\
    \x06\0\x02\x07\x03\x12\x04\x9c\x01@^\n\r\n\x05\x06\0\x02\x07\x04\x12\x04\
    \x9d\x01\x10o\n\x10\n\x08\x06\0\x02\x07\x04\xd0\x86\x03\x12\x04\x9d\x01\
    \x10o\n\x0e\n\x04\x06\0\x02\x08\x12\x06\xa0\x01\x08\xa2\x01\t\n\r\n\x05\
    \x06\0\x02\x08\x01\x12\x04\xa0\x01\x0c\x1f\n\r\n\x05\x06\0\x02\x08\x02\
    \x12\x04\xa0\x01!G\n\r\n\x05\x06\0\x02\x08\x03\x12\x04\xa0\x01Ry\n\x0e\n\
    \x05\x06\0\x02\x08\x04\x12\x05\xa1\x01\x10\x88\x01\n\x11\n\x08\x06\0\x02\
    \x08\x04\xd0\x86\x03\x12\x05\xa1\x01\x10\x88\x01\n\x0e\n\x04\x06\0\x02\t\
    \x12\x06\xa4\x01\x08\xa6\x01\t\n\r\n\x05\x06\0\x02\t\x01\x12\x04\xa4\x01\
    \x0c#\n\r\n\x05\x06\0\x02\t\x02\x12\x04\xa4\x01%O\n\x0e\n\x05\x06\0\x02\
    \t\x03\x12\x05\xa4\x01Z\x85\x01\n\r\n\x05\x06\0\x02\t\x04\x12\x04\xa5\
    \x01\x10c\n\x10\n\x08\x06\0\x02\t\x04\xd0\x86\x03\x12\x04\xa5\x01\x10c\n\
    \x0c\n\x02\x06\x01\x12\x06\xa9\x01\0\xb8\x01\x01\n\x0b\n\x03\x06\x01\x01\
    \x12\x04\xa9\x01\x08\x16\n\x0b\n\x03\x06\x01\x03\x12\x04\xaa\x01\x08P\n\
    \x0e\n\x06\x06\x01\x03\xd0\x86\x03\x12\x04\xaa\x01\x08P\n\x0b\n\x03\x06\
    \x01\x03\x12\x04\xab\x01\x08K\n\x0e\n\x06\x06\x01\x03\xd8\x86\x03\x12\
    \x04\xab\x01\x08K\n\x0e\n\x04\x06\x01\x02\0\x12\x06\xad\x01\x08\xaf\x01\
    \t\n\r\n\x05\x06\x01\x02\0\x01\x12\x04\xad\x01\x0c\x20\n\r\n\x05\x06\x01\
    \x02\0\x02\x12\x04\xad\x01\"P\n\r\n\x05\x06\x01\x02\0\x03\x12\x04\xad\
    \x01[f\n\r\n\x05\x06\x01\x02\0\x04\x12\x04\xae\x01\x10t\n\x10\n\x08\x06\
    \x01\x02\0\x04\xd0\x86\x03\x12\x04\xae\x01\x10t\n\x0e\n\x04\x06\x01\x02\
    \x01\x12\x06\xb1\x01\x08\xb3\x01\t\n\r\n\x05\x06\x01\x02\x01\x01\x12\x04\
    \xb1\x01\x0c\x18\n\r\n\x05\x06\x01\x02\x01\x02\x12\x04\xb1\x01\x1a@\n\r\
    \n\x05\x06\x01\x02\x01\x03\x12\x04\xb1\x01KV\n\r\n\x05\x06\x01\x02\x01\
    \x04\x12\x04\xb2\x01\x10|\n\x10\n\x08\x06\x01\x02\x01\x04\xd0\x86\x03\
    \x12\x04\xb2\x01\x10|\n\x0e\n\x04\x06\x01\x02\x02\x12\x06\xb5\x01\x08\
    \xb7\x01\t\n\r\n\x05\x06\x01\x02\x02\x01\x12\x04\xb5\x01\x0c\x16\n\r\n\
    \x05\x06\x01\x02\x02\x02\x12\x04\xb5\x01\x18<\n\r\n\x05\x06\x01\x02\x02\
    \x03\x12\x04\xb5\x01GR\n\r\n\x05\x06\x01\x02\x02\x04\x12\x04\xb6\x01\x10\
    y\n\x10\n\x08\x06\x01\x02\x02\x04\xd0\x86\x03\x12\x04\xb6\x01\x10y\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(25);
            messages.push(ParentalApp::generated_message_descriptor_data());
            messages.push(ParentalSettings::generated_message_descriptor_data());
            messages.push(CParental_EnableParentalSettings_Request::generated_message_descriptor_data());
            messages.push(CParental_EnableParentalSettings_Response::generated_message_descriptor_data());
            messages.push(CParental_DisableParentalSettings_Request::generated_message_descriptor_data());
            messages.push(CParental_DisableParentalSettings_Response::generated_message_descriptor_data());
            messages.push(CParental_GetParentalSettings_Request::generated_message_descriptor_data());
            messages.push(CParental_GetParentalSettings_Response::generated_message_descriptor_data());
            messages.push(CParental_GetSignedParentalSettings_Request::generated_message_descriptor_data());
            messages.push(CParental_GetSignedParentalSettings_Response::generated_message_descriptor_data());
            messages.push(CParental_SetParentalSettings_Request::generated_message_descriptor_data());
            messages.push(CParental_SetParentalSettings_Response::generated_message_descriptor_data());
            messages.push(CParental_ValidateToken_Request::generated_message_descriptor_data());
            messages.push(CParental_ValidateToken_Response::generated_message_descriptor_data());
            messages.push(CParental_ValidatePassword_Request::generated_message_descriptor_data());
            messages.push(CParental_ValidatePassword_Response::generated_message_descriptor_data());
            messages.push(CParental_LockClient_Request::generated_message_descriptor_data());
            messages.push(CParental_LockClient_Response::generated_message_descriptor_data());
            messages.push(CParental_RequestRecoveryCode_Request::generated_message_descriptor_data());
            messages.push(CParental_RequestRecoveryCode_Response::generated_message_descriptor_data());
            messages.push(CParental_DisableWithRecoveryCode_Request::generated_message_descriptor_data());
            messages.push(CParental_DisableWithRecoveryCode_Response::generated_message_descriptor_data());
            messages.push(CParental_ParentalSettingsChange_Notification::generated_message_descriptor_data());
            messages.push(CParental_ParentalUnlock_Notification::generated_message_descriptor_data());
            messages.push(CParental_ParentalLock_Notification::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
