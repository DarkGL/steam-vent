// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_offline.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:COffline_GetOfflineLogonTicket_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct COffline_GetOfflineLogonTicket_Request {
    // message fields
    // @@protoc_insertion_point(field:COffline_GetOfflineLogonTicket_Request.priority)
    pub priority: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:COffline_GetOfflineLogonTicket_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a COffline_GetOfflineLogonTicket_Request {
    fn default() -> &'a COffline_GetOfflineLogonTicket_Request {
        <COffline_GetOfflineLogonTicket_Request as ::protobuf::Message>::default_instance()
    }
}

impl COffline_GetOfflineLogonTicket_Request {
    pub fn new() -> COffline_GetOfflineLogonTicket_Request {
        ::std::default::Default::default()
    }

    // optional uint32 priority = 1;

    pub fn priority(&self) -> u32 {
        self.priority.unwrap_or(0)
    }

    pub fn clear_priority(&mut self) {
        self.priority = ::std::option::Option::None;
    }

    pub fn has_priority(&self) -> bool {
        self.priority.is_some()
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: u32) {
        self.priority = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "priority",
            |m: &COffline_GetOfflineLogonTicket_Request| { &m.priority },
            |m: &mut COffline_GetOfflineLogonTicket_Request| { &mut m.priority },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<COffline_GetOfflineLogonTicket_Request>(
            "COffline_GetOfflineLogonTicket_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for COffline_GetOfflineLogonTicket_Request {
    const NAME: &'static str = "COffline_GetOfflineLogonTicket_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.priority = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.priority {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.priority {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> COffline_GetOfflineLogonTicket_Request {
        COffline_GetOfflineLogonTicket_Request::new()
    }

    fn clear(&mut self) {
        self.priority = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static COffline_GetOfflineLogonTicket_Request {
        static instance: COffline_GetOfflineLogonTicket_Request = COffline_GetOfflineLogonTicket_Request {
            priority: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for COffline_GetOfflineLogonTicket_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("COffline_GetOfflineLogonTicket_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for COffline_GetOfflineLogonTicket_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for COffline_GetOfflineLogonTicket_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:COffline_GetOfflineLogonTicket_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct COffline_GetOfflineLogonTicket_Response {
    // message fields
    // @@protoc_insertion_point(field:COffline_GetOfflineLogonTicket_Response.serialized_ticket)
    pub serialized_ticket: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:COffline_GetOfflineLogonTicket_Response.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:COffline_GetOfflineLogonTicket_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a COffline_GetOfflineLogonTicket_Response {
    fn default() -> &'a COffline_GetOfflineLogonTicket_Response {
        <COffline_GetOfflineLogonTicket_Response as ::protobuf::Message>::default_instance()
    }
}

impl COffline_GetOfflineLogonTicket_Response {
    pub fn new() -> COffline_GetOfflineLogonTicket_Response {
        ::std::default::Default::default()
    }

    // optional bytes serialized_ticket = 1;

    pub fn serialized_ticket(&self) -> &[u8] {
        match self.serialized_ticket.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_serialized_ticket(&mut self) {
        self.serialized_ticket = ::std::option::Option::None;
    }

    pub fn has_serialized_ticket(&self) -> bool {
        self.serialized_ticket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serialized_ticket(&mut self, v: ::std::vec::Vec<u8>) {
        self.serialized_ticket = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serialized_ticket(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.serialized_ticket.is_none() {
            self.serialized_ticket = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.serialized_ticket.as_mut().unwrap()
    }

    // Take field
    pub fn take_serialized_ticket(&mut self) -> ::std::vec::Vec<u8> {
        self.serialized_ticket.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serialized_ticket",
            |m: &COffline_GetOfflineLogonTicket_Response| { &m.serialized_ticket },
            |m: &mut COffline_GetOfflineLogonTicket_Response| { &mut m.serialized_ticket },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &COffline_GetOfflineLogonTicket_Response| { &m.signature },
            |m: &mut COffline_GetOfflineLogonTicket_Response| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<COffline_GetOfflineLogonTicket_Response>(
            "COffline_GetOfflineLogonTicket_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for COffline_GetOfflineLogonTicket_Response {
    const NAME: &'static str = "COffline_GetOfflineLogonTicket_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serialized_ticket = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serialized_ticket.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serialized_ticket.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> COffline_GetOfflineLogonTicket_Response {
        COffline_GetOfflineLogonTicket_Response::new()
    }

    fn clear(&mut self) {
        self.serialized_ticket = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static COffline_GetOfflineLogonTicket_Response {
        static instance: COffline_GetOfflineLogonTicket_Response = COffline_GetOfflineLogonTicket_Response {
            serialized_ticket: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for COffline_GetOfflineLogonTicket_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("COffline_GetOfflineLogonTicket_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for COffline_GetOfflineLogonTicket_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for COffline_GetOfflineLogonTicket_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:COffline_GetUnsignedOfflineLogonTicket_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct COffline_GetUnsignedOfflineLogonTicket_Request {
    // special fields
    // @@protoc_insertion_point(special_field:COffline_GetUnsignedOfflineLogonTicket_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a COffline_GetUnsignedOfflineLogonTicket_Request {
    fn default() -> &'a COffline_GetUnsignedOfflineLogonTicket_Request {
        <COffline_GetUnsignedOfflineLogonTicket_Request as ::protobuf::Message>::default_instance()
    }
}

impl COffline_GetUnsignedOfflineLogonTicket_Request {
    pub fn new() -> COffline_GetUnsignedOfflineLogonTicket_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<COffline_GetUnsignedOfflineLogonTicket_Request>(
            "COffline_GetUnsignedOfflineLogonTicket_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for COffline_GetUnsignedOfflineLogonTicket_Request {
    const NAME: &'static str = "COffline_GetUnsignedOfflineLogonTicket_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> COffline_GetUnsignedOfflineLogonTicket_Request {
        COffline_GetUnsignedOfflineLogonTicket_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static COffline_GetUnsignedOfflineLogonTicket_Request {
        static instance: COffline_GetUnsignedOfflineLogonTicket_Request = COffline_GetUnsignedOfflineLogonTicket_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for COffline_GetUnsignedOfflineLogonTicket_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("COffline_GetUnsignedOfflineLogonTicket_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for COffline_GetUnsignedOfflineLogonTicket_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for COffline_GetUnsignedOfflineLogonTicket_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:COffline_OfflineLogonTicket)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct COffline_OfflineLogonTicket {
    // message fields
    // @@protoc_insertion_point(field:COffline_OfflineLogonTicket.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:COffline_OfflineLogonTicket.rtime32_creation_time)
    pub rtime32_creation_time: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:COffline_OfflineLogonTicket.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a COffline_OfflineLogonTicket {
    fn default() -> &'a COffline_OfflineLogonTicket {
        <COffline_OfflineLogonTicket as ::protobuf::Message>::default_instance()
    }
}

impl COffline_OfflineLogonTicket {
    pub fn new() -> COffline_OfflineLogonTicket {
        ::std::default::Default::default()
    }

    // optional uint32 accountid = 1;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional fixed32 rtime32_creation_time = 2;

    pub fn rtime32_creation_time(&self) -> u32 {
        self.rtime32_creation_time.unwrap_or(0)
    }

    pub fn clear_rtime32_creation_time(&mut self) {
        self.rtime32_creation_time = ::std::option::Option::None;
    }

    pub fn has_rtime32_creation_time(&self) -> bool {
        self.rtime32_creation_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime32_creation_time(&mut self, v: u32) {
        self.rtime32_creation_time = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &COffline_OfflineLogonTicket| { &m.accountid },
            |m: &mut COffline_OfflineLogonTicket| { &mut m.accountid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rtime32_creation_time",
            |m: &COffline_OfflineLogonTicket| { &m.rtime32_creation_time },
            |m: &mut COffline_OfflineLogonTicket| { &mut m.rtime32_creation_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<COffline_OfflineLogonTicket>(
            "COffline_OfflineLogonTicket",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for COffline_OfflineLogonTicket {
    const NAME: &'static str = "COffline_OfflineLogonTicket";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                21 => {
                    self.rtime32_creation_time = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.rtime32_creation_time {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.accountid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.rtime32_creation_time {
            os.write_fixed32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> COffline_OfflineLogonTicket {
        COffline_OfflineLogonTicket::new()
    }

    fn clear(&mut self) {
        self.accountid = ::std::option::Option::None;
        self.rtime32_creation_time = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static COffline_OfflineLogonTicket {
        static instance: COffline_OfflineLogonTicket = COffline_OfflineLogonTicket {
            accountid: ::std::option::Option::None,
            rtime32_creation_time: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for COffline_OfflineLogonTicket {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("COffline_OfflineLogonTicket").unwrap()).clone()
    }
}

impl ::std::fmt::Display for COffline_OfflineLogonTicket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for COffline_OfflineLogonTicket {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:COffline_GetUnsignedOfflineLogonTicket_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct COffline_GetUnsignedOfflineLogonTicket_Response {
    // message fields
    // @@protoc_insertion_point(field:COffline_GetUnsignedOfflineLogonTicket_Response.ticket)
    pub ticket: ::protobuf::MessageField<COffline_OfflineLogonTicket>,
    // special fields
    // @@protoc_insertion_point(special_field:COffline_GetUnsignedOfflineLogonTicket_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a COffline_GetUnsignedOfflineLogonTicket_Response {
    fn default() -> &'a COffline_GetUnsignedOfflineLogonTicket_Response {
        <COffline_GetUnsignedOfflineLogonTicket_Response as ::protobuf::Message>::default_instance()
    }
}

impl COffline_GetUnsignedOfflineLogonTicket_Response {
    pub fn new() -> COffline_GetUnsignedOfflineLogonTicket_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, COffline_OfflineLogonTicket>(
            "ticket",
            |m: &COffline_GetUnsignedOfflineLogonTicket_Response| { &m.ticket },
            |m: &mut COffline_GetUnsignedOfflineLogonTicket_Response| { &mut m.ticket },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<COffline_GetUnsignedOfflineLogonTicket_Response>(
            "COffline_GetUnsignedOfflineLogonTicket_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for COffline_GetUnsignedOfflineLogonTicket_Response {
    const NAME: &'static str = "COffline_GetUnsignedOfflineLogonTicket_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ticket)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ticket.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ticket.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> COffline_GetUnsignedOfflineLogonTicket_Response {
        COffline_GetUnsignedOfflineLogonTicket_Response::new()
    }

    fn clear(&mut self) {
        self.ticket.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static COffline_GetUnsignedOfflineLogonTicket_Response {
        static instance: COffline_GetUnsignedOfflineLogonTicket_Response = COffline_GetUnsignedOfflineLogonTicket_Response {
            ticket: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for COffline_GetUnsignedOfflineLogonTicket_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("COffline_GetUnsignedOfflineLogonTicket_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for COffline_GetUnsignedOfflineLogonTicket_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for COffline_GetUnsignedOfflineLogonTicket_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'steammessages_offline.steamclient.proto\x1a,steammessages_unified_bas\
    e.steamclient.proto\"D\n&COffline_GetOfflineLogonTicket_Request\x12\x1a\
    \n\x08priority\x18\x01\x20\x01(\rR\x08priority\"t\n'COffline_GetOfflineL\
    ogonTicket_Response\x12+\n\x11serialized_ticket\x18\x01\x20\x01(\x0cR\
    \x10serializedTicket\x12\x1c\n\tsignature\x18\x02\x20\x01(\x0cR\tsignatu\
    re\"0\n.COffline_GetUnsignedOfflineLogonTicket_Request\"o\n\x1bCOffline_\
    OfflineLogonTicket\x12\x1c\n\taccountid\x18\x01\x20\x01(\rR\taccountid\
    \x122\n\x15rtime32_creation_time\x18\x02\x20\x01(\x07R\x13rtime32Creatio\
    nTime\"g\n/COffline_GetUnsignedOfflineLogonTicket_Response\x124\n\x06tic\
    ket\x18\x01\x20\x01(\x0b2\x1c.COffline_OfflineLogonTicketR\x06ticket2\
    \xa3\x03\n\x07Offline\x12\xb5\x01\n\x15GetOfflineLogonTicket\x12'.COffli\
    ne_GetOfflineLogonTicket_Request\x1a(.COffline_GetOfflineLogonTicket_Res\
    ponse\"I\x82\xb5\x18EGet\x20a\x20serialized\x20and\x20signed\x20offline\
    \x20logon\x20ticket\x20for\x20the\x20current\x20user\x12\xc1\x01\n\x1dGe\
    tUnsignedOfflineLogonTicket\x12/.COffline_GetUnsignedOfflineLogonTicket_\
    Request\x1a0.COffline_GetUnsignedOfflineLogonTicket_Response\"=\x82\xb5\
    \x189Get\x20an\x20unsigned\x20offline\x20logon\x20ticket\x20for\x20the\
    \x20current\x20user\x1a\x1c\x82\xb5\x18\x18Offline\x20settings\x20servic\
    eB\x03\x80\x01\x01J\xa0\x06\n\x06\x12\x04\0\0#\x01\n\t\n\x02\x03\0\x12\
    \x03\0\06\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\x10\x12\x03\x02\
    \0\"\n\n\n\x02\x04\0\x12\x04\x04\0\x06\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x04\x08.\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x08%\n\x0c\n\x05\x04\0\x02\
    \0\x04\x12\x03\x05\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x11\
    \x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x18\x20\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x05#$\n\n\n\x02\x04\x01\x12\x04\x08\0\x0b\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x08\x08/\n\x0b\n\x04\x04\x01\x02\0\x12\x03\t\
    \x08-\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\t\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03\t\x11\x16\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\t\
    \x17(\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\t+,\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03\n\x08%\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\n\x08\x10\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\n\x11\x16\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03\n\x17\x20\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\n#$\n\
    \n\n\x02\x04\x02\x12\x04\r\0\x0e\x01\n\n\n\x03\x04\x02\x01\x12\x03\r\x08\
    6\n\n\n\x02\x04\x03\x12\x04\x10\0\x13\x01\n\n\n\x03\x04\x03\x01\x12\x03\
    \x10\x08#\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x11\x08&\n\x0c\n\x05\x04\x03\
    \x02\0\x04\x12\x03\x11\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x11\
    \x11\x17\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x11\x18!\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03\x11$%\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x12\x08\
    3\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03\x12\x08\x10\n\x0c\n\x05\x04\
    \x03\x02\x01\x05\x12\x03\x12\x11\x18\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x03\x12\x19.\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1212\n\n\n\x02\
    \x04\x04\x12\x04\x15\0\x17\x01\n\n\n\x03\x04\x04\x01\x12\x03\x15\x087\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03\x16\x089\n\x0c\n\x05\x04\x04\x02\0\x04\
    \x12\x03\x16\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03\x16\x11-\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x16.4\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03\x1678\n\n\n\x02\x06\0\x12\x04\x19\0#\x01\n\n\n\x03\x06\0\x01\
    \x12\x03\x19\x08\x0f\n\n\n\x03\x06\0\x03\x12\x03\x1a\x08B\n\r\n\x06\x06\
    \0\x03\xd0\x86\x03\x12\x03\x1a\x08B\n\x0c\n\x04\x06\0\x02\0\x12\x04\x1c\
    \x08\x1e\t\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x1c\x0c!\n\x0c\n\x05\x06\
    \0\x02\0\x02\x12\x03\x1c#J\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x1cU}\n\
    \x0c\n\x05\x06\0\x02\0\x04\x12\x03\x1d\x10v\n\x0f\n\x08\x06\0\x02\0\x04\
    \xd0\x86\x03\x12\x03\x1d\x10v\n\x0c\n\x04\x06\0\x02\x01\x12\x04\x20\x08\
    \"\t\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x20\x0c)\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03\x20+Z\n\r\n\x05\x06\0\x02\x01\x03\x12\x04\x20e\x95\
    \x01\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03!\x10j\n\x0f\n\x08\x06\0\x02\
    \x01\x04\xd0\x86\x03\x12\x03!\x10j\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(COffline_GetOfflineLogonTicket_Request::generated_message_descriptor_data());
            messages.push(COffline_GetOfflineLogonTicket_Response::generated_message_descriptor_data());
            messages.push(COffline_GetUnsignedOfflineLogonTicket_Request::generated_message_descriptor_data());
            messages.push(COffline_OfflineLogonTicket::generated_message_descriptor_data());
            messages.push(COffline_GetUnsignedOfflineLogonTicket_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
