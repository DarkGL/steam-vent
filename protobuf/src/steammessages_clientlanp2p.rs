// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_clientlanp2p.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CMsgClientLANP2PRequestChunks)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientLANP2PRequestChunks {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunks.chunk_keys)
    pub chunk_keys: ::std::vec::Vec<cmsg_client_lanp2prequest_chunks::ChunkKey>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientLANP2PRequestChunks.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientLANP2PRequestChunks {
    fn default() -> &'a CMsgClientLANP2PRequestChunks {
        <CMsgClientLANP2PRequestChunks as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientLANP2PRequestChunks {
    pub fn new() -> CMsgClientLANP2PRequestChunks {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "chunk_keys",
            |m: &CMsgClientLANP2PRequestChunks| { &m.chunk_keys },
            |m: &mut CMsgClientLANP2PRequestChunks| { &mut m.chunk_keys },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientLANP2PRequestChunks>(
            "CMsgClientLANP2PRequestChunks",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientLANP2PRequestChunks {
    const NAME: &'static str = "CMsgClientLANP2PRequestChunks";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.chunk_keys.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.chunk_keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.chunk_keys {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientLANP2PRequestChunks {
        CMsgClientLANP2PRequestChunks::new()
    }

    fn clear(&mut self) {
        self.chunk_keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientLANP2PRequestChunks {
        static instance: CMsgClientLANP2PRequestChunks = CMsgClientLANP2PRequestChunks {
            chunk_keys: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientLANP2PRequestChunks {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientLANP2PRequestChunks").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientLANP2PRequestChunks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientLANP2PRequestChunks {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientLANP2PRequestChunks`
pub mod cmsg_client_lanp2prequest_chunks {
    // @@protoc_insertion_point(message:CMsgClientLANP2PRequestChunks.ChunkKey)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ChunkKey {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunks.ChunkKey.depot_id)
        pub depot_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunks.ChunkKey.sha)
        pub sha: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientLANP2PRequestChunks.ChunkKey.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ChunkKey {
        fn default() -> &'a ChunkKey {
            <ChunkKey as ::protobuf::Message>::default_instance()
        }
    }

    impl ChunkKey {
        pub fn new() -> ChunkKey {
            ::std::default::Default::default()
        }

        // optional uint32 depot_id = 1;

        pub fn depot_id(&self) -> u32 {
            self.depot_id.unwrap_or(0)
        }

        pub fn clear_depot_id(&mut self) {
            self.depot_id = ::std::option::Option::None;
        }

        pub fn has_depot_id(&self) -> bool {
            self.depot_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_depot_id(&mut self, v: u32) {
            self.depot_id = ::std::option::Option::Some(v);
        }

        // optional bytes sha = 2;

        pub fn sha(&self) -> &[u8] {
            match self.sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_sha(&mut self) {
            self.sha = ::std::option::Option::None;
        }

        pub fn has_sha(&self) -> bool {
            self.sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sha(&mut self, v: ::std::vec::Vec<u8>) {
            self.sha = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sha(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.sha.is_none() {
                self.sha = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_sha(&mut self) -> ::std::vec::Vec<u8> {
            self.sha.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "depot_id",
                |m: &ChunkKey| { &m.depot_id },
                |m: &mut ChunkKey| { &mut m.depot_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "sha",
                |m: &ChunkKey| { &m.sha },
                |m: &mut ChunkKey| { &mut m.sha },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChunkKey>(
                "CMsgClientLANP2PRequestChunks.ChunkKey",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ChunkKey {
        const NAME: &'static str = "ChunkKey";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.depot_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.sha = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.depot_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.sha.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.depot_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.sha.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ChunkKey {
            ChunkKey::new()
        }

        fn clear(&mut self) {
            self.depot_id = ::std::option::Option::None;
            self.sha = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ChunkKey {
            static instance: ChunkKey = ChunkKey {
                depot_id: ::std::option::Option::None,
                sha: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ChunkKey {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientLANP2PRequestChunks.ChunkKey").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ChunkKey {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ChunkKey {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgClientLANP2PRequestChunksResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientLANP2PRequestChunksResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.chunk_responses)
    pub chunk_responses: ::std::vec::Vec<cmsg_client_lanp2prequest_chunks_response::ChunkData>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientLANP2PRequestChunksResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientLANP2PRequestChunksResponse {
    fn default() -> &'a CMsgClientLANP2PRequestChunksResponse {
        <CMsgClientLANP2PRequestChunksResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientLANP2PRequestChunksResponse {
    pub fn new() -> CMsgClientLANP2PRequestChunksResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "chunk_responses",
            |m: &CMsgClientLANP2PRequestChunksResponse| { &m.chunk_responses },
            |m: &mut CMsgClientLANP2PRequestChunksResponse| { &mut m.chunk_responses },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientLANP2PRequestChunksResponse>(
            "CMsgClientLANP2PRequestChunksResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgClientLANP2PRequestChunksResponse {
    const NAME: &'static str = "CMsgClientLANP2PRequestChunksResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.chunk_responses.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.chunk_responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.chunk_responses {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientLANP2PRequestChunksResponse {
        CMsgClientLANP2PRequestChunksResponse::new()
    }

    fn clear(&mut self) {
        self.chunk_responses.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientLANP2PRequestChunksResponse {
        static instance: CMsgClientLANP2PRequestChunksResponse = CMsgClientLANP2PRequestChunksResponse {
            chunk_responses: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgClientLANP2PRequestChunksResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientLANP2PRequestChunksResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientLANP2PRequestChunksResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgClientLANP2PRequestChunksResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientLANP2PRequestChunksResponse`
pub mod cmsg_client_lanp2prequest_chunks_response {
    // @@protoc_insertion_point(message:CMsgClientLANP2PRequestChunksResponse.ChunkData)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ChunkData {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.ChunkData.result)
        pub result: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.ChunkData.depot_id)
        pub depot_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
        pub sha: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
        pub chunk_data: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.ChunkData.encrypted)
        pub encrypted: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.ChunkData.compressed)
        pub compressed: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientLANP2PRequestChunksResponse.ChunkData.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ChunkData {
        fn default() -> &'a ChunkData {
            <ChunkData as ::protobuf::Message>::default_instance()
        }
    }

    impl ChunkData {
        pub fn new() -> ChunkData {
            ::std::default::Default::default()
        }

        // optional uint32 result = 1;

        pub fn result(&self) -> u32 {
            self.result.unwrap_or(0)
        }

        pub fn clear_result(&mut self) {
            self.result = ::std::option::Option::None;
        }

        pub fn has_result(&self) -> bool {
            self.result.is_some()
        }

        // Param is passed by value, moved
        pub fn set_result(&mut self, v: u32) {
            self.result = ::std::option::Option::Some(v);
        }

        // optional uint32 depot_id = 2;

        pub fn depot_id(&self) -> u32 {
            self.depot_id.unwrap_or(0)
        }

        pub fn clear_depot_id(&mut self) {
            self.depot_id = ::std::option::Option::None;
        }

        pub fn has_depot_id(&self) -> bool {
            self.depot_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_depot_id(&mut self, v: u32) {
            self.depot_id = ::std::option::Option::Some(v);
        }

        // optional bytes sha = 3;

        pub fn sha(&self) -> &[u8] {
            match self.sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_sha(&mut self) {
            self.sha = ::std::option::Option::None;
        }

        pub fn has_sha(&self) -> bool {
            self.sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sha(&mut self, v: ::std::vec::Vec<u8>) {
            self.sha = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sha(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.sha.is_none() {
                self.sha = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_sha(&mut self) -> ::std::vec::Vec<u8> {
            self.sha.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional bytes chunk_data = 4;

        pub fn chunk_data(&self) -> &[u8] {
            match self.chunk_data.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_chunk_data(&mut self) {
            self.chunk_data = ::std::option::Option::None;
        }

        pub fn has_chunk_data(&self) -> bool {
            self.chunk_data.is_some()
        }

        // Param is passed by value, moved
        pub fn set_chunk_data(&mut self, v: ::std::vec::Vec<u8>) {
            self.chunk_data = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_chunk_data(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.chunk_data.is_none() {
                self.chunk_data = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.chunk_data.as_mut().unwrap()
        }

        // Take field
        pub fn take_chunk_data(&mut self) -> ::std::vec::Vec<u8> {
            self.chunk_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional bool encrypted = 5;

        pub fn encrypted(&self) -> bool {
            self.encrypted.unwrap_or(false)
        }

        pub fn clear_encrypted(&mut self) {
            self.encrypted = ::std::option::Option::None;
        }

        pub fn has_encrypted(&self) -> bool {
            self.encrypted.is_some()
        }

        // Param is passed by value, moved
        pub fn set_encrypted(&mut self, v: bool) {
            self.encrypted = ::std::option::Option::Some(v);
        }

        // optional bool compressed = 6;

        pub fn compressed(&self) -> bool {
            self.compressed.unwrap_or(false)
        }

        pub fn clear_compressed(&mut self) {
            self.compressed = ::std::option::Option::None;
        }

        pub fn has_compressed(&self) -> bool {
            self.compressed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_compressed(&mut self, v: bool) {
            self.compressed = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "result",
                |m: &ChunkData| { &m.result },
                |m: &mut ChunkData| { &mut m.result },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "depot_id",
                |m: &ChunkData| { &m.depot_id },
                |m: &mut ChunkData| { &mut m.depot_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "sha",
                |m: &ChunkData| { &m.sha },
                |m: &mut ChunkData| { &mut m.sha },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "chunk_data",
                |m: &ChunkData| { &m.chunk_data },
                |m: &mut ChunkData| { &mut m.chunk_data },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "encrypted",
                |m: &ChunkData| { &m.encrypted },
                |m: &mut ChunkData| { &mut m.encrypted },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "compressed",
                |m: &ChunkData| { &m.compressed },
                |m: &mut ChunkData| { &mut m.compressed },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChunkData>(
                "CMsgClientLANP2PRequestChunksResponse.ChunkData",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ChunkData {
        const NAME: &'static str = "ChunkData";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.result = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.depot_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.sha = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    34 => {
                        self.chunk_data = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    40 => {
                        self.encrypted = ::std::option::Option::Some(is.read_bool()?);
                    },
                    48 => {
                        self.compressed = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.result {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.depot_id {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.sha.as_ref() {
                my_size += ::protobuf::rt::bytes_size(3, &v);
            }
            if let Some(v) = self.chunk_data.as_ref() {
                my_size += ::protobuf::rt::bytes_size(4, &v);
            }
            if let Some(v) = self.encrypted {
                my_size += 1 + 1;
            }
            if let Some(v) = self.compressed {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.result {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.depot_id {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.sha.as_ref() {
                os.write_bytes(3, v)?;
            }
            if let Some(v) = self.chunk_data.as_ref() {
                os.write_bytes(4, v)?;
            }
            if let Some(v) = self.encrypted {
                os.write_bool(5, v)?;
            }
            if let Some(v) = self.compressed {
                os.write_bool(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ChunkData {
            ChunkData::new()
        }

        fn clear(&mut self) {
            self.result = ::std::option::Option::None;
            self.depot_id = ::std::option::Option::None;
            self.sha = ::std::option::Option::None;
            self.chunk_data = ::std::option::Option::None;
            self.encrypted = ::std::option::Option::None;
            self.compressed = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ChunkData {
            static instance: ChunkData = ChunkData {
                result: ::std::option::Option::None,
                depot_id: ::std::option::Option::None,
                sha: ::std::option::Option::None,
                chunk_data: ::std::option::Option::None,
                encrypted: ::std::option::Option::None,
                compressed: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ChunkData {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientLANP2PRequestChunksResponse.ChunkData").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ChunkData {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ChunkData {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20steammessages_clientlanp2p.proto\x1a\x18steammessages_base.proto\"\
    \xa0\x01\n\x1dCMsgClientLANP2PRequestChunks\x12F\n\nchunk_keys\x18\x01\
    \x20\x03(\x0b2'.CMsgClientLANP2PRequestChunks.ChunkKeyR\tchunkKeys\x1a7\
    \n\x08ChunkKey\x12\x19\n\x08depot_id\x18\x01\x20\x01(\rR\x07depotId\x12\
    \x10\n\x03sha\x18\x02\x20\x01(\x0cR\x03sha\"\xb2\x02\n%CMsgClientLANP2PR\
    equestChunksResponse\x12Y\n\x0fchunk_responses\x18\x01\x20\x03(\x0b20.CM\
    sgClientLANP2PRequestChunksResponse.ChunkDataR\x0echunkResponses\x1a\xad\
    \x01\n\tChunkData\x12\x16\n\x06result\x18\x01\x20\x01(\rR\x06result\x12\
    \x19\n\x08depot_id\x18\x02\x20\x01(\rR\x07depotId\x12\x10\n\x03sha\x18\
    \x03\x20\x01(\x0cR\x03sha\x12\x1d\n\nchunk_data\x18\x04\x20\x01(\x0cR\tc\
    hunkData\x12\x1c\n\tencrypted\x18\x05\x20\x01(\x08R\tencrypted\x12\x1e\n\
    \ncompressed\x18\x06\x20\x01(\x08R\ncompressedB\x05H\x01\x80\x01\0J\xa7\
    \x07\n\x06\x12\x04\0\0\x19\x01\n\t\n\x02\x03\0\x12\x03\0\0\"\n\x08\n\x01\
    \x08\x12\x03\x02\0\x1c\n\t\n\x02\x08\t\x12\x03\x02\0\x1c\n\x08\n\x01\x08\
    \x12\x03\x03\0#\n\t\n\x02\x08\x10\x12\x03\x03\0#\n\n\n\x02\x04\0\x12\x04\
    \x05\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\x05\x08%\n\x0c\n\x04\x04\0\
    \x03\0\x12\x04\x06\x08\t\t\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x06\x10\
    \x18\n\r\n\x06\x04\0\x03\0\x02\0\x12\x03\x07\x10-\n\x0e\n\x07\x04\0\x03\
    \0\x02\0\x04\x12\x03\x07\x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\
    \x03\x07\x19\x1f\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\x07\x20(\n\
    \x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x07+,\n\r\n\x06\x04\0\x03\0\x02\
    \x01\x12\x03\x08\x10'\n\x0e\n\x07\x04\0\x03\0\x02\x01\x04\x12\x03\x08\
    \x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03\x08\x19\x1e\n\x0e\n\
    \x07\x04\0\x03\0\x02\x01\x01\x12\x03\x08\x1f\"\n\x0e\n\x07\x04\0\x03\0\
    \x02\x01\x03\x12\x03\x08%&\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0b\x08H\n\
    \x0c\n\x05\x04\0\x02\0\x04\x12\x03\x0b\x08\x10\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03\x0b\x118\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0b9C\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x0bFG\n\n\n\x02\x04\x01\x12\x04\x0e\0\x19\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08-\n\x0c\n\x04\x04\x01\x03\0\
    \x12\x04\x0f\x08\x16\t\n\x0c\n\x05\x04\x01\x03\0\x01\x12\x03\x0f\x10\x19\
    \n\r\n\x06\x04\x01\x03\0\x02\0\x12\x03\x10\x10+\n\x0e\n\x07\x04\x01\x03\
    \0\x02\0\x04\x12\x03\x10\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\0\x05\x12\
    \x03\x10\x19\x1f\n\x0e\n\x07\x04\x01\x03\0\x02\0\x01\x12\x03\x10\x20&\n\
    \x0e\n\x07\x04\x01\x03\0\x02\0\x03\x12\x03\x10)*\n\r\n\x06\x04\x01\x03\0\
    \x02\x01\x12\x03\x11\x10-\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x04\x12\x03\
    \x11\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x05\x12\x03\x11\x19\x1f\n\
    \x0e\n\x07\x04\x01\x03\0\x02\x01\x01\x12\x03\x11\x20(\n\x0e\n\x07\x04\
    \x01\x03\0\x02\x01\x03\x12\x03\x11+,\n\r\n\x06\x04\x01\x03\0\x02\x02\x12\
    \x03\x12\x10'\n\x0e\n\x07\x04\x01\x03\0\x02\x02\x04\x12\x03\x12\x10\x18\
    \n\x0e\n\x07\x04\x01\x03\0\x02\x02\x05\x12\x03\x12\x19\x1e\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x02\x01\x12\x03\x12\x1f\"\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x02\x03\x12\x03\x12%&\n\r\n\x06\x04\x01\x03\0\x02\x03\x12\x03\x13\
    \x10.\n\x0e\n\x07\x04\x01\x03\0\x02\x03\x04\x12\x03\x13\x10\x18\n\x0e\n\
    \x07\x04\x01\x03\0\x02\x03\x05\x12\x03\x13\x19\x1e\n\x0e\n\x07\x04\x01\
    \x03\0\x02\x03\x01\x12\x03\x13\x1f)\n\x0e\n\x07\x04\x01\x03\0\x02\x03\
    \x03\x12\x03\x13,-\n\r\n\x06\x04\x01\x03\0\x02\x04\x12\x03\x14\x10,\n\
    \x0e\n\x07\x04\x01\x03\0\x02\x04\x04\x12\x03\x14\x10\x18\n\x0e\n\x07\x04\
    \x01\x03\0\x02\x04\x05\x12\x03\x14\x19\x1d\n\x0e\n\x07\x04\x01\x03\0\x02\
    \x04\x01\x12\x03\x14\x1e'\n\x0e\n\x07\x04\x01\x03\0\x02\x04\x03\x12\x03\
    \x14*+\n\r\n\x06\x04\x01\x03\0\x02\x05\x12\x03\x15\x10-\n\x0e\n\x07\x04\
    \x01\x03\0\x02\x05\x04\x12\x03\x15\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\
    \x05\x05\x12\x03\x15\x19\x1d\n\x0e\n\x07\x04\x01\x03\0\x02\x05\x01\x12\
    \x03\x15\x1e(\n\x0e\n\x07\x04\x01\x03\0\x02\x05\x03\x12\x03\x15+,\n\x0b\
    \n\x04\x04\x01\x02\0\x12\x03\x18\x08V\n\x0c\n\x05\x04\x01\x02\0\x04\x12\
    \x03\x18\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x18\x11A\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x18BQ\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x18TU\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_base::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(CMsgClientLANP2PRequestChunks::generated_message_descriptor_data());
            messages.push(CMsgClientLANP2PRequestChunksResponse::generated_message_descriptor_data());
            messages.push(cmsg_client_lanp2prequest_chunks::ChunkKey::generated_message_descriptor_data());
            messages.push(cmsg_client_lanp2prequest_chunks_response::ChunkData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
