// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_star.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CSTAR_KeyValueQuery)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_KeyValueQuery {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_KeyValueQuery.key)
    pub key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSTAR_KeyValueQuery.value)
    pub value: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_KeyValueQuery.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_KeyValueQuery {
    fn default() -> &'a CSTAR_KeyValueQuery {
        <CSTAR_KeyValueQuery as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_KeyValueQuery {
    pub fn new() -> CSTAR_KeyValueQuery {
        ::std::default::Default::default()
    }

    // optional string key = 1;

    pub fn key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 2;

    pub fn value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::string::String::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key",
            |m: &CSTAR_KeyValueQuery| { &m.key },
            |m: &mut CSTAR_KeyValueQuery| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &CSTAR_KeyValueQuery| { &m.value },
            |m: &mut CSTAR_KeyValueQuery| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSTAR_KeyValueQuery>(
            "CSTAR_KeyValueQuery",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSTAR_KeyValueQuery {
    const NAME: &'static str = "CSTAR_KeyValueQuery";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.value = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_KeyValueQuery {
        CSTAR_KeyValueQuery::new()
    }

    fn clear(&mut self) {
        self.key = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_KeyValueQuery {
        static instance: CSTAR_KeyValueQuery = CSTAR_KeyValueQuery {
            key: ::std::option::Option::None,
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSTAR_KeyValueQuery {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSTAR_KeyValueQuery").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSTAR_KeyValueQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_KeyValueQuery {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSTAR_GlyphQueryParams)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_GlyphQueryParams {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_GlyphQueryParams.bundle_id)
    pub bundle_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSTAR_GlyphQueryParams.queries)
    pub queries: ::std::vec::Vec<CSTAR_KeyValueQuery>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_GlyphQueryParams.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_GlyphQueryParams {
    fn default() -> &'a CSTAR_GlyphQueryParams {
        <CSTAR_GlyphQueryParams as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_GlyphQueryParams {
    pub fn new() -> CSTAR_GlyphQueryParams {
        ::std::default::Default::default()
    }

    // optional uint64 bundle_id = 1;

    pub fn bundle_id(&self) -> u64 {
        self.bundle_id.unwrap_or(0)
    }

    pub fn clear_bundle_id(&mut self) {
        self.bundle_id = ::std::option::Option::None;
    }

    pub fn has_bundle_id(&self) -> bool {
        self.bundle_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bundle_id(&mut self, v: u64) {
        self.bundle_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bundle_id",
            |m: &CSTAR_GlyphQueryParams| { &m.bundle_id },
            |m: &mut CSTAR_GlyphQueryParams| { &mut m.bundle_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "queries",
            |m: &CSTAR_GlyphQueryParams| { &m.queries },
            |m: &mut CSTAR_GlyphQueryParams| { &mut m.queries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSTAR_GlyphQueryParams>(
            "CSTAR_GlyphQueryParams",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSTAR_GlyphQueryParams {
    const NAME: &'static str = "CSTAR_GlyphQueryParams";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.bundle_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.queries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bundle_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        for value in &self.queries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.bundle_id {
            os.write_uint64(1, v)?;
        }
        for v in &self.queries {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_GlyphQueryParams {
        CSTAR_GlyphQueryParams::new()
    }

    fn clear(&mut self) {
        self.bundle_id = ::std::option::Option::None;
        self.queries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_GlyphQueryParams {
        static instance: CSTAR_GlyphQueryParams = CSTAR_GlyphQueryParams {
            bundle_id: ::std::option::Option::None,
            queries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSTAR_GlyphQueryParams {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSTAR_GlyphQueryParams").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSTAR_GlyphQueryParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_GlyphQueryParams {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSTAR_ReadGlyphData_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_ReadGlyphData_Request {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_ReadGlyphData_Request.query_params)
    pub query_params: ::protobuf::MessageField<CSTAR_GlyphQueryParams>,
    // @@protoc_insertion_point(field:CSTAR_ReadGlyphData_Request.last_modified_time_lower_limit)
    pub last_modified_time_lower_limit: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_ReadGlyphData_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_ReadGlyphData_Request {
    fn default() -> &'a CSTAR_ReadGlyphData_Request {
        <CSTAR_ReadGlyphData_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_ReadGlyphData_Request {
    pub fn new() -> CSTAR_ReadGlyphData_Request {
        ::std::default::Default::default()
    }

    // optional string last_modified_time_lower_limit = 2;

    pub fn last_modified_time_lower_limit(&self) -> &str {
        match self.last_modified_time_lower_limit.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_last_modified_time_lower_limit(&mut self) {
        self.last_modified_time_lower_limit = ::std::option::Option::None;
    }

    pub fn has_last_modified_time_lower_limit(&self) -> bool {
        self.last_modified_time_lower_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_modified_time_lower_limit(&mut self, v: ::std::string::String) {
        self.last_modified_time_lower_limit = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_modified_time_lower_limit(&mut self) -> &mut ::std::string::String {
        if self.last_modified_time_lower_limit.is_none() {
            self.last_modified_time_lower_limit = ::std::option::Option::Some(::std::string::String::new());
        }
        self.last_modified_time_lower_limit.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_modified_time_lower_limit(&mut self) -> ::std::string::String {
        self.last_modified_time_lower_limit.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CSTAR_GlyphQueryParams>(
            "query_params",
            |m: &CSTAR_ReadGlyphData_Request| { &m.query_params },
            |m: &mut CSTAR_ReadGlyphData_Request| { &mut m.query_params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "last_modified_time_lower_limit",
            |m: &CSTAR_ReadGlyphData_Request| { &m.last_modified_time_lower_limit },
            |m: &mut CSTAR_ReadGlyphData_Request| { &mut m.last_modified_time_lower_limit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSTAR_ReadGlyphData_Request>(
            "CSTAR_ReadGlyphData_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSTAR_ReadGlyphData_Request {
    const NAME: &'static str = "CSTAR_ReadGlyphData_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.query_params)?;
                },
                18 => {
                    self.last_modified_time_lower_limit = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.query_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.last_modified_time_lower_limit.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.query_params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.last_modified_time_lower_limit.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_ReadGlyphData_Request {
        CSTAR_ReadGlyphData_Request::new()
    }

    fn clear(&mut self) {
        self.query_params.clear();
        self.last_modified_time_lower_limit = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_ReadGlyphData_Request {
        static instance: CSTAR_ReadGlyphData_Request = CSTAR_ReadGlyphData_Request {
            query_params: ::protobuf::MessageField::none(),
            last_modified_time_lower_limit: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSTAR_ReadGlyphData_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSTAR_ReadGlyphData_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSTAR_ReadGlyphData_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_ReadGlyphData_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSTAR_GlyphData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_GlyphData {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_GlyphData.glyph_guid)
    pub glyph_guid: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CSTAR_GlyphData.glyph_last_modified)
    pub glyph_last_modified: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSTAR_GlyphData.glyph_json_data)
    pub glyph_json_data: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_GlyphData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_GlyphData {
    fn default() -> &'a CSTAR_GlyphData {
        <CSTAR_GlyphData as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_GlyphData {
    pub fn new() -> CSTAR_GlyphData {
        ::std::default::Default::default()
    }

    // optional bytes glyph_guid = 1;

    pub fn glyph_guid(&self) -> &[u8] {
        match self.glyph_guid.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_glyph_guid(&mut self) {
        self.glyph_guid = ::std::option::Option::None;
    }

    pub fn has_glyph_guid(&self) -> bool {
        self.glyph_guid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_glyph_guid(&mut self, v: ::std::vec::Vec<u8>) {
        self.glyph_guid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_glyph_guid(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.glyph_guid.is_none() {
            self.glyph_guid = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.glyph_guid.as_mut().unwrap()
    }

    // Take field
    pub fn take_glyph_guid(&mut self) -> ::std::vec::Vec<u8> {
        self.glyph_guid.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string glyph_last_modified = 2;

    pub fn glyph_last_modified(&self) -> &str {
        match self.glyph_last_modified.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_glyph_last_modified(&mut self) {
        self.glyph_last_modified = ::std::option::Option::None;
    }

    pub fn has_glyph_last_modified(&self) -> bool {
        self.glyph_last_modified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_glyph_last_modified(&mut self, v: ::std::string::String) {
        self.glyph_last_modified = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_glyph_last_modified(&mut self) -> &mut ::std::string::String {
        if self.glyph_last_modified.is_none() {
            self.glyph_last_modified = ::std::option::Option::Some(::std::string::String::new());
        }
        self.glyph_last_modified.as_mut().unwrap()
    }

    // Take field
    pub fn take_glyph_last_modified(&mut self) -> ::std::string::String {
        self.glyph_last_modified.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string glyph_json_data = 3;

    pub fn glyph_json_data(&self) -> &str {
        match self.glyph_json_data.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_glyph_json_data(&mut self) {
        self.glyph_json_data = ::std::option::Option::None;
    }

    pub fn has_glyph_json_data(&self) -> bool {
        self.glyph_json_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_glyph_json_data(&mut self, v: ::std::string::String) {
        self.glyph_json_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_glyph_json_data(&mut self) -> &mut ::std::string::String {
        if self.glyph_json_data.is_none() {
            self.glyph_json_data = ::std::option::Option::Some(::std::string::String::new());
        }
        self.glyph_json_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_glyph_json_data(&mut self) -> ::std::string::String {
        self.glyph_json_data.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "glyph_guid",
            |m: &CSTAR_GlyphData| { &m.glyph_guid },
            |m: &mut CSTAR_GlyphData| { &mut m.glyph_guid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "glyph_last_modified",
            |m: &CSTAR_GlyphData| { &m.glyph_last_modified },
            |m: &mut CSTAR_GlyphData| { &mut m.glyph_last_modified },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "glyph_json_data",
            |m: &CSTAR_GlyphData| { &m.glyph_json_data },
            |m: &mut CSTAR_GlyphData| { &mut m.glyph_json_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSTAR_GlyphData>(
            "CSTAR_GlyphData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSTAR_GlyphData {
    const NAME: &'static str = "CSTAR_GlyphData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.glyph_guid = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.glyph_last_modified = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.glyph_json_data = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.glyph_guid.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.glyph_last_modified.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.glyph_json_data.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.glyph_guid.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.glyph_last_modified.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.glyph_json_data.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_GlyphData {
        CSTAR_GlyphData::new()
    }

    fn clear(&mut self) {
        self.glyph_guid = ::std::option::Option::None;
        self.glyph_last_modified = ::std::option::Option::None;
        self.glyph_json_data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_GlyphData {
        static instance: CSTAR_GlyphData = CSTAR_GlyphData {
            glyph_guid: ::std::option::Option::None,
            glyph_last_modified: ::std::option::Option::None,
            glyph_json_data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSTAR_GlyphData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSTAR_GlyphData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSTAR_GlyphData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_GlyphData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSTAR_WriteGlyphData_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_WriteGlyphData_Request {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_WriteGlyphData_Request.bundle_id)
    pub bundle_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSTAR_WriteGlyphData_Request.glyph_data)
    pub glyph_data: ::std::vec::Vec<CSTAR_GlyphData>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_WriteGlyphData_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_WriteGlyphData_Request {
    fn default() -> &'a CSTAR_WriteGlyphData_Request {
        <CSTAR_WriteGlyphData_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_WriteGlyphData_Request {
    pub fn new() -> CSTAR_WriteGlyphData_Request {
        ::std::default::Default::default()
    }

    // optional uint64 bundle_id = 1;

    pub fn bundle_id(&self) -> u64 {
        self.bundle_id.unwrap_or(0)
    }

    pub fn clear_bundle_id(&mut self) {
        self.bundle_id = ::std::option::Option::None;
    }

    pub fn has_bundle_id(&self) -> bool {
        self.bundle_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bundle_id(&mut self, v: u64) {
        self.bundle_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bundle_id",
            |m: &CSTAR_WriteGlyphData_Request| { &m.bundle_id },
            |m: &mut CSTAR_WriteGlyphData_Request| { &mut m.bundle_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "glyph_data",
            |m: &CSTAR_WriteGlyphData_Request| { &m.glyph_data },
            |m: &mut CSTAR_WriteGlyphData_Request| { &mut m.glyph_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSTAR_WriteGlyphData_Request>(
            "CSTAR_WriteGlyphData_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSTAR_WriteGlyphData_Request {
    const NAME: &'static str = "CSTAR_WriteGlyphData_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.bundle_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.glyph_data.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bundle_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        for value in &self.glyph_data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.bundle_id {
            os.write_uint64(1, v)?;
        }
        for v in &self.glyph_data {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_WriteGlyphData_Request {
        CSTAR_WriteGlyphData_Request::new()
    }

    fn clear(&mut self) {
        self.bundle_id = ::std::option::Option::None;
        self.glyph_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_WriteGlyphData_Request {
        static instance: CSTAR_WriteGlyphData_Request = CSTAR_WriteGlyphData_Request {
            bundle_id: ::std::option::Option::None,
            glyph_data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSTAR_WriteGlyphData_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSTAR_WriteGlyphData_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSTAR_WriteGlyphData_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_WriteGlyphData_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSTAR_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_Request {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_Request.read_glyph_data)
    pub read_glyph_data: ::protobuf::MessageField<CSTAR_ReadGlyphData_Request>,
    // @@protoc_insertion_point(field:CSTAR_Request.write_glyph_data)
    pub write_glyph_data: ::protobuf::MessageField<CSTAR_WriteGlyphData_Request>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_Request {
    fn default() -> &'a CSTAR_Request {
        <CSTAR_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_Request {
    pub fn new() -> CSTAR_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CSTAR_ReadGlyphData_Request>(
            "read_glyph_data",
            |m: &CSTAR_Request| { &m.read_glyph_data },
            |m: &mut CSTAR_Request| { &mut m.read_glyph_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CSTAR_WriteGlyphData_Request>(
            "write_glyph_data",
            |m: &CSTAR_Request| { &m.write_glyph_data },
            |m: &mut CSTAR_Request| { &mut m.write_glyph_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSTAR_Request>(
            "CSTAR_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSTAR_Request {
    const NAME: &'static str = "CSTAR_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.read_glyph_data)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.write_glyph_data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.read_glyph_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.write_glyph_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.read_glyph_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.write_glyph_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_Request {
        CSTAR_Request::new()
    }

    fn clear(&mut self) {
        self.read_glyph_data.clear();
        self.write_glyph_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_Request {
        static instance: CSTAR_Request = CSTAR_Request {
            read_glyph_data: ::protobuf::MessageField::none(),
            write_glyph_data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSTAR_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSTAR_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSTAR_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSTAR_ReadGlyphData_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_ReadGlyphData_Response {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_ReadGlyphData_Response.bundle_id)
    pub bundle_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSTAR_ReadGlyphData_Response.glyph_data)
    pub glyph_data: ::std::vec::Vec<CSTAR_GlyphData>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_ReadGlyphData_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_ReadGlyphData_Response {
    fn default() -> &'a CSTAR_ReadGlyphData_Response {
        <CSTAR_ReadGlyphData_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_ReadGlyphData_Response {
    pub fn new() -> CSTAR_ReadGlyphData_Response {
        ::std::default::Default::default()
    }

    // optional uint64 bundle_id = 1;

    pub fn bundle_id(&self) -> u64 {
        self.bundle_id.unwrap_or(0)
    }

    pub fn clear_bundle_id(&mut self) {
        self.bundle_id = ::std::option::Option::None;
    }

    pub fn has_bundle_id(&self) -> bool {
        self.bundle_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bundle_id(&mut self, v: u64) {
        self.bundle_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bundle_id",
            |m: &CSTAR_ReadGlyphData_Response| { &m.bundle_id },
            |m: &mut CSTAR_ReadGlyphData_Response| { &mut m.bundle_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "glyph_data",
            |m: &CSTAR_ReadGlyphData_Response| { &m.glyph_data },
            |m: &mut CSTAR_ReadGlyphData_Response| { &mut m.glyph_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSTAR_ReadGlyphData_Response>(
            "CSTAR_ReadGlyphData_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSTAR_ReadGlyphData_Response {
    const NAME: &'static str = "CSTAR_ReadGlyphData_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.bundle_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.glyph_data.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bundle_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        for value in &self.glyph_data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.bundle_id {
            os.write_uint64(1, v)?;
        }
        for v in &self.glyph_data {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_ReadGlyphData_Response {
        CSTAR_ReadGlyphData_Response::new()
    }

    fn clear(&mut self) {
        self.bundle_id = ::std::option::Option::None;
        self.glyph_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_ReadGlyphData_Response {
        static instance: CSTAR_ReadGlyphData_Response = CSTAR_ReadGlyphData_Response {
            bundle_id: ::std::option::Option::None,
            glyph_data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSTAR_ReadGlyphData_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSTAR_ReadGlyphData_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSTAR_ReadGlyphData_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_ReadGlyphData_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSTAR_WriteGlyphData_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_WriteGlyphData_Response {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_WriteGlyphData_Response.result)
    pub result: ::std::vec::Vec<::protobuf::EnumOrUnknown<E_STAR_GlyphWriteResult>>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_WriteGlyphData_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_WriteGlyphData_Response {
    fn default() -> &'a CSTAR_WriteGlyphData_Response {
        <CSTAR_WriteGlyphData_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_WriteGlyphData_Response {
    pub fn new() -> CSTAR_WriteGlyphData_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "result",
            |m: &CSTAR_WriteGlyphData_Response| { &m.result },
            |m: &mut CSTAR_WriteGlyphData_Response| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSTAR_WriteGlyphData_Response>(
            "CSTAR_WriteGlyphData_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSTAR_WriteGlyphData_Response {
    const NAME: &'static str = "CSTAR_WriteGlyphData_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result.push(is.read_enum_or_unknown()?);
                },
                10 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.result)?
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.result {
            my_size += ::protobuf::rt::int32_size(1, value.value());
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(v))?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_WriteGlyphData_Response {
        CSTAR_WriteGlyphData_Response::new()
    }

    fn clear(&mut self) {
        self.result.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_WriteGlyphData_Response {
        static instance: CSTAR_WriteGlyphData_Response = CSTAR_WriteGlyphData_Response {
            result: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSTAR_WriteGlyphData_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSTAR_WriteGlyphData_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSTAR_WriteGlyphData_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_WriteGlyphData_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSTAR_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_Response {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_Response.read_glyph_data)
    pub read_glyph_data: ::protobuf::MessageField<CSTAR_ReadGlyphData_Response>,
    // @@protoc_insertion_point(field:CSTAR_Response.write_glyph_data)
    pub write_glyph_data: ::protobuf::MessageField<CSTAR_WriteGlyphData_Response>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_Response {
    fn default() -> &'a CSTAR_Response {
        <CSTAR_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_Response {
    pub fn new() -> CSTAR_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CSTAR_ReadGlyphData_Response>(
            "read_glyph_data",
            |m: &CSTAR_Response| { &m.read_glyph_data },
            |m: &mut CSTAR_Response| { &mut m.read_glyph_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CSTAR_WriteGlyphData_Response>(
            "write_glyph_data",
            |m: &CSTAR_Response| { &m.write_glyph_data },
            |m: &mut CSTAR_Response| { &mut m.write_glyph_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSTAR_Response>(
            "CSTAR_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSTAR_Response {
    const NAME: &'static str = "CSTAR_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.read_glyph_data)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.write_glyph_data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.read_glyph_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.write_glyph_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.read_glyph_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.write_glyph_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_Response {
        CSTAR_Response::new()
    }

    fn clear(&mut self) {
        self.read_glyph_data.clear();
        self.write_glyph_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_Response {
        static instance: CSTAR_Response = CSTAR_Response {
            read_glyph_data: ::protobuf::MessageField::none(),
            write_glyph_data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSTAR_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSTAR_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSTAR_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSTAR_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:E_STAR_GlyphWriteResult)
pub enum E_STAR_GlyphWriteResult {
    // @@protoc_insertion_point(enum_value:E_STAR_GlyphWriteResult.k_E_STAR_GlyphWriteResult_Success)
    k_E_STAR_GlyphWriteResult_Success = 0,
    // @@protoc_insertion_point(enum_value:E_STAR_GlyphWriteResult.k_E_STAR_GlyphWriteResult_InvalidMessage)
    k_E_STAR_GlyphWriteResult_InvalidMessage = 1,
    // @@protoc_insertion_point(enum_value:E_STAR_GlyphWriteResult.k_E_STAR_GlyphWriteResult_InvalidJSON)
    k_E_STAR_GlyphWriteResult_InvalidJSON = 2,
    // @@protoc_insertion_point(enum_value:E_STAR_GlyphWriteResult.k_E_STAR_GlyphWriteResult_SQLError)
    k_E_STAR_GlyphWriteResult_SQLError = 3,
}

impl ::protobuf::Enum for E_STAR_GlyphWriteResult {
    const NAME: &'static str = "E_STAR_GlyphWriteResult";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<E_STAR_GlyphWriteResult> {
        match value {
            0 => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_Success),
            1 => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidMessage),
            2 => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidJSON),
            3 => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_SQLError),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<E_STAR_GlyphWriteResult> {
        match str {
            "k_E_STAR_GlyphWriteResult_Success" => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_Success),
            "k_E_STAR_GlyphWriteResult_InvalidMessage" => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidMessage),
            "k_E_STAR_GlyphWriteResult_InvalidJSON" => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidJSON),
            "k_E_STAR_GlyphWriteResult_SQLError" => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_SQLError),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [E_STAR_GlyphWriteResult] = &[
        E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_Success,
        E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidMessage,
        E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidJSON,
        E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_SQLError,
    ];
}

impl ::protobuf::EnumFull for E_STAR_GlyphWriteResult {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("E_STAR_GlyphWriteResult").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for E_STAR_GlyphWriteResult {
    fn default() -> Self {
        E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_Success
    }
}

impl E_STAR_GlyphWriteResult {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<E_STAR_GlyphWriteResult>("E_STAR_GlyphWriteResult")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$steammessages_star.steamclient.proto\x1a,steammessages_unified_base.s\
    teamclient.proto\"\xd2\x01\n\x13CSTAR_KeyValueQuery\x12H\n\x03key\x18\
    \x01\x20\x01(\tR\x03keyB6\x82\xb5\x182key\x20to\x20search\x20for\x20in\
    \x20JSON\x20path\x20format\x20(SQL\x20subset)\x12q\n\x05value\x18\x02\
    \x20\x01(\tR\x05valueB[\x82\xb5\x18Wthe\x20value\x20to\x20compare\x20aga\
    inst\x20(the\x20JSON\x20value\x20will\x20be\x20compared\x20for\x20equali\
    ty\x20as\x20a\x20string)\"\xde\x01\n\x16CSTAR_GlyphQueryParams\x12}\n\tb\
    undle_id\x18\x01\x20\x01(\x04R\x08bundleIdB`\x82\xb5\x18\\if\x20provided\
    ,\x20Bundle\x20ID\x20is\x20used\x20instead\x20of\x20the\x20other\x20quer\
    y\x20parameters\x20(much\x20faster\x20SQL\x20query)\x12E\n\x07queries\
    \x18\x02\x20\x03(\x0b2\x14.CSTAR_KeyValueQueryR\x07queriesB\x15\x82\xb5\
    \x18\x11key\x20value\x20queries\"\xbd\x02\n\x1bCSTAR_ReadGlyphData_Reque\
    st\x12r\n\x0cquery_params\x18\x01\x20\x01(\x0b2\x17.CSTAR_GlyphQueryPara\
    msR\x0bqueryParamsB6\x82\xb5\x182parameters\x20to\x20identify\x20the\x20\
    glyphs\x20to\x20read\x20from\x20SQL\x12\xa9\x01\n\x1elast_modified_time_\
    lower_limit\x18\x02\x20\x01(\tR\x1alastModifiedTimeLowerLimitBe\x82\xb5\
    \x18aif\x20provided,\x20only\x20return\x20glyphs\x20modified\x20more\x20\
    recently\x20than\x20this\x20timestamp\x20\x20(RFC\x203339\x20UTC\x20form\
    at)\"\x99\x02\n\x0fCSTAR_GlyphData\x12G\n\nglyph_guid\x18\x01\x20\x01(\
    \x0cR\tglyphGuidB(\x82\xb5\x18$GUID\x20uniquely\x20identifying\x20this\
    \x20glyph\x12x\n\x13glyph_last_modified\x18\x02\x20\x01(\tR\x11glyphLast\
    ModifiedBH\x82\xb5\x18Dtimestamp\x20of\x20when\x20this\x20glyph\x20was\
    \x20last\x20modified\x20(RFC\x203339\x20UTC\x20format)\x12C\n\x0fglyph_j\
    son_data\x18\x03\x20\x01(\tR\rglyphJsonDataB\x1b\x82\xb5\x18\x17JSON\x20\
    encoded\x20glyph\x20data\"\xc9\x01\n\x1cCSTAR_WriteGlyphData_Request\x12\
    J\n\tbundle_id\x18\x01\x20\x01(\x04R\x08bundleIdB-\x82\xb5\x18)the\x20Bu\
    ndle\x20ID\x20of\x20the\x20glyphs\x20to\x20be\x20written\x12]\n\nglyph_d\
    ata\x18\x02\x20\x03(\x0b2\x10.CSTAR_GlyphDataR\tglyphDataB,\x82\xb5\x18(\
    one\x20or\x20more\x20items\x20of\x20glyph\x20data\x20to\x20write\"\x9e\
    \x01\n\rCSTAR_Request\x12D\n\x0fread_glyph_data\x18\x01\x20\x01(\x0b2\
    \x1c.CSTAR_ReadGlyphData_RequestR\rreadGlyphData\x12G\n\x10write_glyph_d\
    ata\x18\x02\x20\x01(\x0b2\x1d.CSTAR_WriteGlyphData_RequestR\x0ewriteGlyp\
    hData\"\x87\x02\n\x1cCSTAR_ReadGlyphData_Response\x12\x86\x01\n\tbundle_\
    id\x18\x01\x20\x01(\x04R\x08bundleIdBi\x82\xb5\x18ethe\x20Bundle\x20ID\
    \x20of\x20the\x20returned\x20glyphs;\x20the\x20client\x20should\x20send\
    \x20this\x20back\x20to\x20optimize\x20subsequent\x20queries\x12^\n\nglyp\
    h_data\x18\x02\x20\x03(\x0b2\x10.CSTAR_GlyphDataR\tglyphDataB-\x82\xb5\
    \x18)zero\x20or\x20more\x20items\x20of\x20returned\x20glyph\x20data\"\
    \x7f\n\x1dCSTAR_WriteGlyphData_Response\x12^\n\x06result\x18\x01\x20\x03\
    (\x0e2\x18.E_STAR_GlyphWriteResultR\x06resultB,\x82\xb5\x18(write\x20res\
    ult\x20for\x20each\x20item\x20of\x20glyph\x20data\"\xa1\x01\n\x0eCSTAR_R\
    esponse\x12E\n\x0fread_glyph_data\x18\x01\x20\x01(\x0b2\x1d.CSTAR_ReadGl\
    yphData_ResponseR\rreadGlyphData\x12H\n\x10write_glyph_data\x18\x02\x20\
    \x01(\x0b2\x1e.CSTAR_WriteGlyphData_ResponseR\x0ewriteGlyphData*\xc1\x01\
    \n\x17E_STAR_GlyphWriteResult\x12%\n!k_E_STAR_GlyphWriteResult_Success\
    \x10\0\x12,\n(k_E_STAR_GlyphWriteResult_InvalidMessage\x10\x01\x12)\n%k_\
    E_STAR_GlyphWriteResult_InvalidJSON\x10\x02\x12&\n\"k_E_STAR_GlyphWriteR\
    esult_SQLError\x10\x032\x85\x01\n\x04STAR\x12R\n\x0eProcessMessage\x12\
    \x0e.CSTAR_Request\x1a\x0f.CSTAR_Response\"\x1f\x82\xb5\x18\x1bprocesses\
    \x20a\x20generic\x20message\x1a)\x82\xb5\x18%service\x20for\x20reading/w\
    riting\x20STAR\x20dataB\x03\x80\x01\x01J\xe3\x11\n\x06\x12\x04\0\0>\x01\
    \n\t\n\x02\x03\0\x12\x03\0\06\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\
    \x08\x10\x12\x03\x02\0\"\n\n\n\x02\x05\0\x12\x04\x04\0\t\x01\n\n\n\x03\
    \x05\0\x01\x12\x03\x04\x05\x1c\n\x0b\n\x04\x05\0\x02\0\x12\x03\x05\x08.\
    \n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x05\x08)\n\x0c\n\x05\x05\0\x02\0\
    \x02\x12\x03\x05,-\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x06\x085\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x06\x080\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x0634\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x07\x082\n\x0c\n\x05\
    \x05\0\x02\x02\x01\x12\x03\x07\x08-\n\x0c\n\x05\x05\0\x02\x02\x02\x12\
    \x03\x0701\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x08\x08/\n\x0c\n\x05\x05\0\
    \x02\x03\x01\x12\x03\x08\x08*\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x08-\
    .\n\n\n\x02\x04\0\x12\x04\x0b\0\x0e\x01\n\n\n\x03\x04\0\x01\x12\x03\x0b\
    \x08\x1b\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x08g\n\x0c\n\x05\x04\0\x02\
    \0\x04\x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0c\x11\
    \x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\x18\x1b\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x0c\x1e\x1f\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x0c\
    \x20f\n\x0f\n\x08\x04\0\x02\0\x08\xd0\x86\x03\x12\x03\x0c!e\n\x0c\n\x04\
    \x04\0\x02\x01\x12\x04\r\x08\x8e\x01\n\x0c\n\x05\x04\0\x02\x01\x04\x12\
    \x03\r\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\r\x11\x17\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\r\x18\x1d\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\r\x20!\n\r\n\x05\x04\0\x02\x01\x08\x12\x04\r\"\x8d\x01\n\x10\n\
    \x08\x04\0\x02\x01\x08\xd0\x86\x03\x12\x04\r#\x8c\x01\n\n\n\x02\x04\x01\
    \x12\x04\x10\0\x13\x01\n\n\n\x03\x04\x01\x01\x12\x03\x10\x08\x1e\n\x0c\n\
    \x04\x04\x01\x02\0\x12\x04\x11\x08\x97\x01\n\x0c\n\x05\x04\x01\x02\0\x04\
    \x12\x03\x11\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x11\x11\x17\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x11\x18!\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x11$%\n\r\n\x05\x04\x01\x02\0\x08\x12\x04\x11&\x96\x01\n\
    \x10\n\x08\x04\x01\x02\0\x08\xd0\x86\x03\x12\x04\x11'\x95\x01\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03\x12\x08X\n\x0c\n\x05\x04\x01\x02\x01\x04\
    \x12\x03\x12\x08\x10\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x12\x11%\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x12&-\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\x1201\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\x03\x122W\n\x0f\n\
    \x08\x04\x01\x02\x01\x08\xd0\x86\x03\x12\x03\x123V\n\n\n\x02\x04\x02\x12\
    \x04\x15\0\x18\x01\n\n\n\x03\x04\x02\x01\x12\x03\x15\x08#\n\x0c\n\x04\
    \x04\x02\x02\0\x12\x04\x16\x08\x81\x01\n\x0c\n\x05\x04\x02\x02\0\x04\x12\
    \x03\x16\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x16\x11(\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x16)5\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x1689\n\r\n\x05\x04\x02\x02\0\x08\x12\x04\x16:\x80\x01\n\x0f\n\x08\
    \x04\x02\x02\0\x08\xd0\x86\x03\x12\x03\x16;\x7f\n\x0c\n\x04\x04\x02\x02\
    \x01\x12\x04\x17\x08\xb1\x01\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x17\
    \x08\x10\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x17\x11\x17\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x03\x17\x186\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03\x179:\n\r\n\x05\x04\x02\x02\x01\x08\x12\x04\x17;\xb0\x01\n\x10\
    \n\x08\x04\x02\x02\x01\x08\xd0\x86\x03\x12\x04\x17<\xaf\x01\n\n\n\x02\
    \x04\x03\x12\x04\x1a\0\x1e\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1a\x08\x17\
    \n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1b\x08_\n\x0c\n\x05\x04\x03\x02\0\
    \x04\x12\x03\x1b\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1b\x11\
    \x16\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1b\x17!\n\x0c\n\x05\x04\x03\
    \x02\0\x03\x12\x03\x1b$%\n\x0c\n\x05\x04\x03\x02\0\x08\x12\x03\x1b&^\n\
    \x0f\n\x08\x04\x03\x02\0\x08\xd0\x86\x03\x12\x03\x1b']\n\x0c\n\x04\x04\
    \x03\x02\x01\x12\x04\x1c\x08\x89\x01\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\
    \x03\x1c\x08\x10\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x1c\x11\x17\n\
    \x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1c\x18+\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03\x1c./\n\r\n\x05\x04\x03\x02\x01\x08\x12\x04\x1c0\x88\
    \x01\n\x10\n\x08\x04\x03\x02\x01\x08\xd0\x86\x03\x12\x04\x1c1\x87\x01\n\
    \x0b\n\x04\x04\x03\x02\x02\x12\x03\x1d\x08X\n\x0c\n\x05\x04\x03\x02\x02\
    \x04\x12\x03\x1d\x08\x10\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\x1d\x11\
    \x17\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x1d\x18'\n\x0c\n\x05\x04\
    \x03\x02\x02\x03\x12\x03\x1d*+\n\x0c\n\x05\x04\x03\x02\x02\x08\x12\x03\
    \x1d,W\n\x0f\n\x08\x04\x03\x02\x02\x08\xd0\x86\x03\x12\x03\x1d-V\n\n\n\
    \x02\x04\x04\x12\x04\x20\0#\x01\n\n\n\x03\x04\x04\x01\x12\x03\x20\x08$\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03!\x08d\n\x0c\n\x05\x04\x04\x02\0\x04\x12\
    \x03!\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03!\x11\x17\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03!\x18!\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03!$\
    %\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03!&c\n\x0f\n\x08\x04\x04\x02\0\x08\
    \xd0\x86\x03\x12\x03!'b\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\"\x08n\n\x0c\
    \n\x05\x04\x04\x02\x01\x04\x12\x03\"\x08\x10\n\x0c\n\x05\x04\x04\x02\x01\
    \x06\x12\x03\"\x11!\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\"\",\n\x0c\n\
    \x05\x04\x04\x02\x01\x03\x12\x03\"/0\n\x0c\n\x05\x04\x04\x02\x01\x08\x12\
    \x03\"1m\n\x0f\n\x08\x04\x04\x02\x01\x08\xd0\x86\x03\x12\x03\"2l\n\n\n\
    \x02\x04\x05\x12\x04%\0(\x01\n\n\n\x03\x04\x05\x01\x12\x03%\x08\x15\n\
    \x0b\n\x04\x04\x05\x02\0\x12\x03&\x08B\n\x0c\n\x05\x04\x05\x02\0\x04\x12\
    \x03&\x08\x10\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03&\x11-\n\x0c\n\x05\
    \x04\x05\x02\0\x01\x12\x03&.=\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03&@A\n\
    \x0b\n\x04\x04\x05\x02\x01\x12\x03'\x08D\n\x0c\n\x05\x04\x05\x02\x01\x04\
    \x12\x03'\x08\x10\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03'\x11.\n\x0c\n\
    \x05\x04\x05\x02\x01\x01\x12\x03'/?\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x03'BC\n\n\n\x02\x04\x06\x12\x04*\0-\x01\n\n\n\x03\x04\x06\x01\x12\x03*\
    \x08$\n\x0c\n\x04\x04\x06\x02\0\x12\x04+\x08\xa0\x01\n\x0c\n\x05\x04\x06\
    \x02\0\x04\x12\x03+\x08\x10\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03+\x11\
    \x17\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03+\x18!\n\x0c\n\x05\x04\x06\x02\
    \0\x03\x12\x03+$%\n\r\n\x05\x04\x06\x02\0\x08\x12\x04+&\x9f\x01\n\x10\n\
    \x08\x04\x06\x02\0\x08\xd0\x86\x03\x12\x04+'\x9e\x01\n\x0b\n\x04\x04\x06\
    \x02\x01\x12\x03,\x08o\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x03,\x08\x10\
    \n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x03,\x11!\n\x0c\n\x05\x04\x06\x02\
    \x01\x01\x12\x03,\",\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03,/0\n\x0c\n\
    \x05\x04\x06\x02\x01\x08\x12\x03,1n\n\x0f\n\x08\x04\x06\x02\x01\x08\xd0\
    \x86\x03\x12\x03,2m\n\n\n\x02\x04\x07\x12\x04/\01\x01\n\n\n\x03\x04\x07\
    \x01\x12\x03/\x08%\n\x0b\n\x04\x04\x07\x02\0\x12\x030\x08r\n\x0c\n\x05\
    \x04\x07\x02\0\x04\x12\x030\x08\x10\n\x0c\n\x05\x04\x07\x02\0\x06\x12\
    \x030\x11)\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x030*0\n\x0c\n\x05\x04\x07\
    \x02\0\x03\x12\x03034\n\x0c\n\x05\x04\x07\x02\0\x08\x12\x0305q\n\x0f\n\
    \x08\x04\x07\x02\0\x08\xd0\x86\x03\x12\x0306p\n\n\n\x02\x04\x08\x12\x043\
    \06\x01\n\n\n\x03\x04\x08\x01\x12\x033\x08\x16\n\x0b\n\x04\x04\x08\x02\0\
    \x12\x034\x08C\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x034\x08\x10\n\x0c\n\
    \x05\x04\x08\x02\0\x06\x12\x034\x11.\n\x0c\n\x05\x04\x08\x02\0\x01\x12\
    \x034/>\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x034AB\n\x0b\n\x04\x04\x08\x02\
    \x01\x12\x035\x08E\n\x0c\n\x05\x04\x08\x02\x01\x04\x12\x035\x08\x10\n\
    \x0c\n\x05\x04\x08\x02\x01\x06\x12\x035\x11/\n\x0c\n\x05\x04\x08\x02\x01\
    \x01\x12\x0350@\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x035CD\n\n\n\x02\x06\
    \0\x12\x048\0>\x01\n\n\n\x03\x06\0\x01\x12\x038\x08\x0c\n\n\n\x03\x06\0\
    \x03\x12\x039\x08O\n\r\n\x06\x06\0\x03\xd0\x86\x03\x12\x039\x08O\n\x0c\n\
    \x04\x06\0\x02\0\x12\x04;\x08=\t\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03;\
    \x0c\x1a\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03;\x1c*\n\x0c\n\x05\x06\0\x02\
    \0\x03\x12\x03;5D\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03<\x10L\n\x0f\n\x08\
    \x06\0\x02\0\x04\xd0\x86\x03\x12\x03<\x10L\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(CSTAR_KeyValueQuery::generated_message_descriptor_data());
            messages.push(CSTAR_GlyphQueryParams::generated_message_descriptor_data());
            messages.push(CSTAR_ReadGlyphData_Request::generated_message_descriptor_data());
            messages.push(CSTAR_GlyphData::generated_message_descriptor_data());
            messages.push(CSTAR_WriteGlyphData_Request::generated_message_descriptor_data());
            messages.push(CSTAR_Request::generated_message_descriptor_data());
            messages.push(CSTAR_ReadGlyphData_Response::generated_message_descriptor_data());
            messages.push(CSTAR_WriteGlyphData_Response::generated_message_descriptor_data());
            messages.push(CSTAR_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(E_STAR_GlyphWriteResult::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
