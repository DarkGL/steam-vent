// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_gameservers.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CGameServers_GetServerList_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameServers_GetServerList_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameServers_GetServerList_Request.filter)
    pub filter: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGameServers_GetServerList_Request.limit)
    pub limit: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameServers_GetServerList_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameServers_GetServerList_Request {
    fn default() -> &'a CGameServers_GetServerList_Request {
        <CGameServers_GetServerList_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameServers_GetServerList_Request {
    pub fn new() -> CGameServers_GetServerList_Request {
        ::std::default::Default::default()
    }

    // optional string filter = 1;

    pub fn filter(&self) -> &str {
        match self.filter.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_filter(&mut self) {
        self.filter = ::std::option::Option::None;
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        if self.filter.is_none() {
            self.filter = ::std::option::Option::Some(::std::string::String::new());
        }
        self.filter.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        self.filter.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 limit = 2;

    pub fn limit(&self) -> u32 {
        self.limit.unwrap_or(100u32)
    }

    pub fn clear_limit(&mut self) {
        self.limit = ::std::option::Option::None;
    }

    pub fn has_limit(&self) -> bool {
        self.limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: u32) {
        self.limit = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "filter",
            |m: &CGameServers_GetServerList_Request| { &m.filter },
            |m: &mut CGameServers_GetServerList_Request| { &mut m.filter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "limit",
            |m: &CGameServers_GetServerList_Request| { &m.limit },
            |m: &mut CGameServers_GetServerList_Request| { &mut m.limit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameServers_GetServerList_Request>(
            "CGameServers_GetServerList_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameServers_GetServerList_Request {
    const NAME: &'static str = "CGameServers_GetServerList_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.filter = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.limit = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.filter.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.limit {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.filter.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.limit {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameServers_GetServerList_Request {
        CGameServers_GetServerList_Request::new()
    }

    fn clear(&mut self) {
        self.filter = ::std::option::Option::None;
        self.limit = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameServers_GetServerList_Request {
        static instance: CGameServers_GetServerList_Request = CGameServers_GetServerList_Request {
            filter: ::std::option::Option::None,
            limit: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameServers_GetServerList_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameServers_GetServerList_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameServers_GetServerList_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameServers_GetServerList_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameServers_GetServerList_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameServers_GetServerList_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.servers)
    pub servers: ::std::vec::Vec<cgame_servers_get_server_list_response::Server>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameServers_GetServerList_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameServers_GetServerList_Response {
    fn default() -> &'a CGameServers_GetServerList_Response {
        <CGameServers_GetServerList_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameServers_GetServerList_Response {
    pub fn new() -> CGameServers_GetServerList_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "servers",
            |m: &CGameServers_GetServerList_Response| { &m.servers },
            |m: &mut CGameServers_GetServerList_Response| { &mut m.servers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameServers_GetServerList_Response>(
            "CGameServers_GetServerList_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameServers_GetServerList_Response {
    const NAME: &'static str = "CGameServers_GetServerList_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.servers.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.servers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.servers {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameServers_GetServerList_Response {
        CGameServers_GetServerList_Response::new()
    }

    fn clear(&mut self) {
        self.servers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameServers_GetServerList_Response {
        static instance: CGameServers_GetServerList_Response = CGameServers_GetServerList_Response {
            servers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameServers_GetServerList_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameServers_GetServerList_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameServers_GetServerList_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameServers_GetServerList_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CGameServers_GetServerList_Response`
pub mod cgame_servers_get_server_list_response {
    // @@protoc_insertion_point(message:CGameServers_GetServerList_Response.Server)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Server {
        // message fields
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.addr)
        pub addr: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.gameport)
        pub gameport: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.specport)
        pub specport: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.gamedir)
        pub gamedir: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.version)
        pub version: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.product)
        pub product: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.region)
        pub region: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.players)
        pub players: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.max_players)
        pub max_players: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.bots)
        pub bots: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.map)
        pub map: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.secure)
        pub secure: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.dedicated)
        pub dedicated: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.os)
        pub os: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.gametype)
        pub gametype: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CGameServers_GetServerList_Response.Server.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Server {
        fn default() -> &'a Server {
            <Server as ::protobuf::Message>::default_instance()
        }
    }

    impl Server {
        pub fn new() -> Server {
            ::std::default::Default::default()
        }

        // optional string addr = 1;

        pub fn addr(&self) -> &str {
            match self.addr.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_addr(&mut self) {
            self.addr = ::std::option::Option::None;
        }

        pub fn has_addr(&self) -> bool {
            self.addr.is_some()
        }

        // Param is passed by value, moved
        pub fn set_addr(&mut self, v: ::std::string::String) {
            self.addr = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_addr(&mut self) -> &mut ::std::string::String {
            if self.addr.is_none() {
                self.addr = ::std::option::Option::Some(::std::string::String::new());
            }
            self.addr.as_mut().unwrap()
        }

        // Take field
        pub fn take_addr(&mut self) -> ::std::string::String {
            self.addr.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 gameport = 2;

        pub fn gameport(&self) -> u32 {
            self.gameport.unwrap_or(0)
        }

        pub fn clear_gameport(&mut self) {
            self.gameport = ::std::option::Option::None;
        }

        pub fn has_gameport(&self) -> bool {
            self.gameport.is_some()
        }

        // Param is passed by value, moved
        pub fn set_gameport(&mut self, v: u32) {
            self.gameport = ::std::option::Option::Some(v);
        }

        // optional uint32 specport = 3;

        pub fn specport(&self) -> u32 {
            self.specport.unwrap_or(0)
        }

        pub fn clear_specport(&mut self) {
            self.specport = ::std::option::Option::None;
        }

        pub fn has_specport(&self) -> bool {
            self.specport.is_some()
        }

        // Param is passed by value, moved
        pub fn set_specport(&mut self, v: u32) {
            self.specport = ::std::option::Option::Some(v);
        }

        // optional fixed64 steamid = 4;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional string name = 5;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 appid = 6;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional string gamedir = 7;

        pub fn gamedir(&self) -> &str {
            match self.gamedir.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_gamedir(&mut self) {
            self.gamedir = ::std::option::Option::None;
        }

        pub fn has_gamedir(&self) -> bool {
            self.gamedir.is_some()
        }

        // Param is passed by value, moved
        pub fn set_gamedir(&mut self, v: ::std::string::String) {
            self.gamedir = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_gamedir(&mut self) -> &mut ::std::string::String {
            if self.gamedir.is_none() {
                self.gamedir = ::std::option::Option::Some(::std::string::String::new());
            }
            self.gamedir.as_mut().unwrap()
        }

        // Take field
        pub fn take_gamedir(&mut self) -> ::std::string::String {
            self.gamedir.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string version = 8;

        pub fn version(&self) -> &str {
            match self.version.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_version(&mut self) {
            self.version = ::std::option::Option::None;
        }

        pub fn has_version(&self) -> bool {
            self.version.is_some()
        }

        // Param is passed by value, moved
        pub fn set_version(&mut self, v: ::std::string::String) {
            self.version = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_version(&mut self) -> &mut ::std::string::String {
            if self.version.is_none() {
                self.version = ::std::option::Option::Some(::std::string::String::new());
            }
            self.version.as_mut().unwrap()
        }

        // Take field
        pub fn take_version(&mut self) -> ::std::string::String {
            self.version.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string product = 9;

        pub fn product(&self) -> &str {
            match self.product.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_product(&mut self) {
            self.product = ::std::option::Option::None;
        }

        pub fn has_product(&self) -> bool {
            self.product.is_some()
        }

        // Param is passed by value, moved
        pub fn set_product(&mut self, v: ::std::string::String) {
            self.product = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_product(&mut self) -> &mut ::std::string::String {
            if self.product.is_none() {
                self.product = ::std::option::Option::Some(::std::string::String::new());
            }
            self.product.as_mut().unwrap()
        }

        // Take field
        pub fn take_product(&mut self) -> ::std::string::String {
            self.product.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int32 region = 10;

        pub fn region(&self) -> i32 {
            self.region.unwrap_or(0)
        }

        pub fn clear_region(&mut self) {
            self.region = ::std::option::Option::None;
        }

        pub fn has_region(&self) -> bool {
            self.region.is_some()
        }

        // Param is passed by value, moved
        pub fn set_region(&mut self, v: i32) {
            self.region = ::std::option::Option::Some(v);
        }

        // optional int32 players = 11;

        pub fn players(&self) -> i32 {
            self.players.unwrap_or(0)
        }

        pub fn clear_players(&mut self) {
            self.players = ::std::option::Option::None;
        }

        pub fn has_players(&self) -> bool {
            self.players.is_some()
        }

        // Param is passed by value, moved
        pub fn set_players(&mut self, v: i32) {
            self.players = ::std::option::Option::Some(v);
        }

        // optional int32 max_players = 12;

        pub fn max_players(&self) -> i32 {
            self.max_players.unwrap_or(0)
        }

        pub fn clear_max_players(&mut self) {
            self.max_players = ::std::option::Option::None;
        }

        pub fn has_max_players(&self) -> bool {
            self.max_players.is_some()
        }

        // Param is passed by value, moved
        pub fn set_max_players(&mut self, v: i32) {
            self.max_players = ::std::option::Option::Some(v);
        }

        // optional int32 bots = 13;

        pub fn bots(&self) -> i32 {
            self.bots.unwrap_or(0)
        }

        pub fn clear_bots(&mut self) {
            self.bots = ::std::option::Option::None;
        }

        pub fn has_bots(&self) -> bool {
            self.bots.is_some()
        }

        // Param is passed by value, moved
        pub fn set_bots(&mut self, v: i32) {
            self.bots = ::std::option::Option::Some(v);
        }

        // optional string map = 14;

        pub fn map(&self) -> &str {
            match self.map.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_map(&mut self) {
            self.map = ::std::option::Option::None;
        }

        pub fn has_map(&self) -> bool {
            self.map.is_some()
        }

        // Param is passed by value, moved
        pub fn set_map(&mut self, v: ::std::string::String) {
            self.map = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_map(&mut self) -> &mut ::std::string::String {
            if self.map.is_none() {
                self.map = ::std::option::Option::Some(::std::string::String::new());
            }
            self.map.as_mut().unwrap()
        }

        // Take field
        pub fn take_map(&mut self) -> ::std::string::String {
            self.map.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool secure = 15;

        pub fn secure(&self) -> bool {
            self.secure.unwrap_or(false)
        }

        pub fn clear_secure(&mut self) {
            self.secure = ::std::option::Option::None;
        }

        pub fn has_secure(&self) -> bool {
            self.secure.is_some()
        }

        // Param is passed by value, moved
        pub fn set_secure(&mut self, v: bool) {
            self.secure = ::std::option::Option::Some(v);
        }

        // optional bool dedicated = 16;

        pub fn dedicated(&self) -> bool {
            self.dedicated.unwrap_or(false)
        }

        pub fn clear_dedicated(&mut self) {
            self.dedicated = ::std::option::Option::None;
        }

        pub fn has_dedicated(&self) -> bool {
            self.dedicated.is_some()
        }

        // Param is passed by value, moved
        pub fn set_dedicated(&mut self, v: bool) {
            self.dedicated = ::std::option::Option::Some(v);
        }

        // optional string os = 17;

        pub fn os(&self) -> &str {
            match self.os.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_os(&mut self) {
            self.os = ::std::option::Option::None;
        }

        pub fn has_os(&self) -> bool {
            self.os.is_some()
        }

        // Param is passed by value, moved
        pub fn set_os(&mut self, v: ::std::string::String) {
            self.os = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_os(&mut self) -> &mut ::std::string::String {
            if self.os.is_none() {
                self.os = ::std::option::Option::Some(::std::string::String::new());
            }
            self.os.as_mut().unwrap()
        }

        // Take field
        pub fn take_os(&mut self) -> ::std::string::String {
            self.os.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string gametype = 18;

        pub fn gametype(&self) -> &str {
            match self.gametype.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_gametype(&mut self) {
            self.gametype = ::std::option::Option::None;
        }

        pub fn has_gametype(&self) -> bool {
            self.gametype.is_some()
        }

        // Param is passed by value, moved
        pub fn set_gametype(&mut self, v: ::std::string::String) {
            self.gametype = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_gametype(&mut self) -> &mut ::std::string::String {
            if self.gametype.is_none() {
                self.gametype = ::std::option::Option::Some(::std::string::String::new());
            }
            self.gametype.as_mut().unwrap()
        }

        // Take field
        pub fn take_gametype(&mut self) -> ::std::string::String {
            self.gametype.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(18);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "addr",
                |m: &Server| { &m.addr },
                |m: &mut Server| { &mut m.addr },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "gameport",
                |m: &Server| { &m.gameport },
                |m: &mut Server| { &mut m.gameport },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "specport",
                |m: &Server| { &m.specport },
                |m: &mut Server| { &mut m.specport },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &Server| { &m.steamid },
                |m: &mut Server| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &Server| { &m.name },
                |m: &mut Server| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &Server| { &m.appid },
                |m: &mut Server| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "gamedir",
                |m: &Server| { &m.gamedir },
                |m: &mut Server| { &mut m.gamedir },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "version",
                |m: &Server| { &m.version },
                |m: &mut Server| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "product",
                |m: &Server| { &m.product },
                |m: &mut Server| { &mut m.product },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "region",
                |m: &Server| { &m.region },
                |m: &mut Server| { &mut m.region },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "players",
                |m: &Server| { &m.players },
                |m: &mut Server| { &mut m.players },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "max_players",
                |m: &Server| { &m.max_players },
                |m: &mut Server| { &mut m.max_players },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "bots",
                |m: &Server| { &m.bots },
                |m: &mut Server| { &mut m.bots },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "map",
                |m: &Server| { &m.map },
                |m: &mut Server| { &mut m.map },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "secure",
                |m: &Server| { &m.secure },
                |m: &mut Server| { &mut m.secure },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "dedicated",
                |m: &Server| { &m.dedicated },
                |m: &mut Server| { &mut m.dedicated },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "os",
                |m: &Server| { &m.os },
                |m: &mut Server| { &mut m.os },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "gametype",
                |m: &Server| { &m.gametype },
                |m: &mut Server| { &mut m.gametype },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Server>(
                "CGameServers_GetServerList_Response.Server",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Server {
        const NAME: &'static str = "Server";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.addr = ::std::option::Option::Some(is.read_string()?);
                    },
                    16 => {
                        self.gameport = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.specport = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    33 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    42 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    48 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    58 => {
                        self.gamedir = ::std::option::Option::Some(is.read_string()?);
                    },
                    66 => {
                        self.version = ::std::option::Option::Some(is.read_string()?);
                    },
                    74 => {
                        self.product = ::std::option::Option::Some(is.read_string()?);
                    },
                    80 => {
                        self.region = ::std::option::Option::Some(is.read_int32()?);
                    },
                    88 => {
                        self.players = ::std::option::Option::Some(is.read_int32()?);
                    },
                    96 => {
                        self.max_players = ::std::option::Option::Some(is.read_int32()?);
                    },
                    104 => {
                        self.bots = ::std::option::Option::Some(is.read_int32()?);
                    },
                    114 => {
                        self.map = ::std::option::Option::Some(is.read_string()?);
                    },
                    120 => {
                        self.secure = ::std::option::Option::Some(is.read_bool()?);
                    },
                    128 => {
                        self.dedicated = ::std::option::Option::Some(is.read_bool()?);
                    },
                    138 => {
                        self.os = ::std::option::Option::Some(is.read_string()?);
                    },
                    146 => {
                        self.gametype = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.addr.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.gameport {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.specport {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(5, &v);
            }
            if let Some(v) = self.appid {
                my_size += ::protobuf::rt::uint32_size(6, v);
            }
            if let Some(v) = self.gamedir.as_ref() {
                my_size += ::protobuf::rt::string_size(7, &v);
            }
            if let Some(v) = self.version.as_ref() {
                my_size += ::protobuf::rt::string_size(8, &v);
            }
            if let Some(v) = self.product.as_ref() {
                my_size += ::protobuf::rt::string_size(9, &v);
            }
            if let Some(v) = self.region {
                my_size += ::protobuf::rt::int32_size(10, v);
            }
            if let Some(v) = self.players {
                my_size += ::protobuf::rt::int32_size(11, v);
            }
            if let Some(v) = self.max_players {
                my_size += ::protobuf::rt::int32_size(12, v);
            }
            if let Some(v) = self.bots {
                my_size += ::protobuf::rt::int32_size(13, v);
            }
            if let Some(v) = self.map.as_ref() {
                my_size += ::protobuf::rt::string_size(14, &v);
            }
            if let Some(v) = self.secure {
                my_size += 1 + 1;
            }
            if let Some(v) = self.dedicated {
                my_size += 2 + 1;
            }
            if let Some(v) = self.os.as_ref() {
                my_size += ::protobuf::rt::string_size(17, &v);
            }
            if let Some(v) = self.gametype.as_ref() {
                my_size += ::protobuf::rt::string_size(18, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.addr.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.gameport {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.specport {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.steamid {
                os.write_fixed64(4, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.appid {
                os.write_uint32(6, v)?;
            }
            if let Some(v) = self.gamedir.as_ref() {
                os.write_string(7, v)?;
            }
            if let Some(v) = self.version.as_ref() {
                os.write_string(8, v)?;
            }
            if let Some(v) = self.product.as_ref() {
                os.write_string(9, v)?;
            }
            if let Some(v) = self.region {
                os.write_int32(10, v)?;
            }
            if let Some(v) = self.players {
                os.write_int32(11, v)?;
            }
            if let Some(v) = self.max_players {
                os.write_int32(12, v)?;
            }
            if let Some(v) = self.bots {
                os.write_int32(13, v)?;
            }
            if let Some(v) = self.map.as_ref() {
                os.write_string(14, v)?;
            }
            if let Some(v) = self.secure {
                os.write_bool(15, v)?;
            }
            if let Some(v) = self.dedicated {
                os.write_bool(16, v)?;
            }
            if let Some(v) = self.os.as_ref() {
                os.write_string(17, v)?;
            }
            if let Some(v) = self.gametype.as_ref() {
                os.write_string(18, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Server {
            Server::new()
        }

        fn clear(&mut self) {
            self.addr = ::std::option::Option::None;
            self.gameport = ::std::option::Option::None;
            self.specport = ::std::option::Option::None;
            self.steamid = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.appid = ::std::option::Option::None;
            self.gamedir = ::std::option::Option::None;
            self.version = ::std::option::Option::None;
            self.product = ::std::option::Option::None;
            self.region = ::std::option::Option::None;
            self.players = ::std::option::Option::None;
            self.max_players = ::std::option::Option::None;
            self.bots = ::std::option::Option::None;
            self.map = ::std::option::Option::None;
            self.secure = ::std::option::Option::None;
            self.dedicated = ::std::option::Option::None;
            self.os = ::std::option::Option::None;
            self.gametype = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Server {
            static instance: Server = Server {
                addr: ::std::option::Option::None,
                gameport: ::std::option::Option::None,
                specport: ::std::option::Option::None,
                steamid: ::std::option::Option::None,
                name: ::std::option::Option::None,
                appid: ::std::option::Option::None,
                gamedir: ::std::option::Option::None,
                version: ::std::option::Option::None,
                product: ::std::option::Option::None,
                region: ::std::option::Option::None,
                players: ::std::option::Option::None,
                max_players: ::std::option::Option::None,
                bots: ::std::option::Option::None,
                map: ::std::option::Option::None,
                secure: ::std::option::Option::None,
                dedicated: ::std::option::Option::None,
                os: ::std::option::Option::None,
                gametype: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Server {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CGameServers_GetServerList_Response.Server").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Server {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Server {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CGameServers_GetServerSteamIDsByIP_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameServers_GetServerSteamIDsByIP_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
    pub server_ips: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameServers_GetServerSteamIDsByIP_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameServers_GetServerSteamIDsByIP_Request {
    fn default() -> &'a CGameServers_GetServerSteamIDsByIP_Request {
        <CGameServers_GetServerSteamIDsByIP_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameServers_GetServerSteamIDsByIP_Request {
    pub fn new() -> CGameServers_GetServerSteamIDsByIP_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "server_ips",
            |m: &CGameServers_GetServerSteamIDsByIP_Request| { &m.server_ips },
            |m: &mut CGameServers_GetServerSteamIDsByIP_Request| { &mut m.server_ips },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameServers_GetServerSteamIDsByIP_Request>(
            "CGameServers_GetServerSteamIDsByIP_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameServers_GetServerSteamIDsByIP_Request {
    const NAME: &'static str = "CGameServers_GetServerSteamIDsByIP_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.server_ips.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.server_ips {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.server_ips {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameServers_GetServerSteamIDsByIP_Request {
        CGameServers_GetServerSteamIDsByIP_Request::new()
    }

    fn clear(&mut self) {
        self.server_ips.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameServers_GetServerSteamIDsByIP_Request {
        static instance: CGameServers_GetServerSteamIDsByIP_Request = CGameServers_GetServerSteamIDsByIP_Request {
            server_ips: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameServers_GetServerSteamIDsByIP_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameServers_GetServerSteamIDsByIP_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameServers_GetServerSteamIDsByIP_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameServers_GetServerSteamIDsByIP_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameServers_IPsWithSteamIDs_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameServers_IPsWithSteamIDs_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameServers_IPsWithSteamIDs_Response.servers)
    pub servers: ::std::vec::Vec<cgame_servers_ips_with_steam_ids_response::Server>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameServers_IPsWithSteamIDs_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameServers_IPsWithSteamIDs_Response {
    fn default() -> &'a CGameServers_IPsWithSteamIDs_Response {
        <CGameServers_IPsWithSteamIDs_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameServers_IPsWithSteamIDs_Response {
    pub fn new() -> CGameServers_IPsWithSteamIDs_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "servers",
            |m: &CGameServers_IPsWithSteamIDs_Response| { &m.servers },
            |m: &mut CGameServers_IPsWithSteamIDs_Response| { &mut m.servers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameServers_IPsWithSteamIDs_Response>(
            "CGameServers_IPsWithSteamIDs_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameServers_IPsWithSteamIDs_Response {
    const NAME: &'static str = "CGameServers_IPsWithSteamIDs_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.servers.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.servers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.servers {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameServers_IPsWithSteamIDs_Response {
        CGameServers_IPsWithSteamIDs_Response::new()
    }

    fn clear(&mut self) {
        self.servers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameServers_IPsWithSteamIDs_Response {
        static instance: CGameServers_IPsWithSteamIDs_Response = CGameServers_IPsWithSteamIDs_Response {
            servers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameServers_IPsWithSteamIDs_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameServers_IPsWithSteamIDs_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameServers_IPsWithSteamIDs_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameServers_IPsWithSteamIDs_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CGameServers_IPsWithSteamIDs_Response`
pub mod cgame_servers_ips_with_steam_ids_response {
    // @@protoc_insertion_point(message:CGameServers_IPsWithSteamIDs_Response.Server)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Server {
        // message fields
        // @@protoc_insertion_point(field:CGameServers_IPsWithSteamIDs_Response.Server.addr)
        pub addr: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_IPsWithSteamIDs_Response.Server.steamid)
        pub steamid: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CGameServers_IPsWithSteamIDs_Response.Server.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Server {
        fn default() -> &'a Server {
            <Server as ::protobuf::Message>::default_instance()
        }
    }

    impl Server {
        pub fn new() -> Server {
            ::std::default::Default::default()
        }

        // optional string addr = 1;

        pub fn addr(&self) -> &str {
            match self.addr.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_addr(&mut self) {
            self.addr = ::std::option::Option::None;
        }

        pub fn has_addr(&self) -> bool {
            self.addr.is_some()
        }

        // Param is passed by value, moved
        pub fn set_addr(&mut self, v: ::std::string::String) {
            self.addr = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_addr(&mut self) -> &mut ::std::string::String {
            if self.addr.is_none() {
                self.addr = ::std::option::Option::Some(::std::string::String::new());
            }
            self.addr.as_mut().unwrap()
        }

        // Take field
        pub fn take_addr(&mut self) -> ::std::string::String {
            self.addr.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional fixed64 steamid = 2;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "addr",
                |m: &Server| { &m.addr },
                |m: &mut Server| { &mut m.addr },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &Server| { &m.steamid },
                |m: &mut Server| { &mut m.steamid },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Server>(
                "CGameServers_IPsWithSteamIDs_Response.Server",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Server {
        const NAME: &'static str = "Server";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.addr = ::std::option::Option::Some(is.read_string()?);
                    },
                    17 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.addr.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.addr.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.steamid {
                os.write_fixed64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Server {
            Server::new()
        }

        fn clear(&mut self) {
            self.addr = ::std::option::Option::None;
            self.steamid = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Server {
            static instance: Server = Server {
                addr: ::std::option::Option::None,
                steamid: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Server {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CGameServers_IPsWithSteamIDs_Response.Server").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Server {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Server {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CGameServers_GetServerIPsBySteamID_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameServers_GetServerIPsBySteamID_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameServers_GetServerIPsBySteamID_Request.server_steamids)
    pub server_steamids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameServers_GetServerIPsBySteamID_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameServers_GetServerIPsBySteamID_Request {
    fn default() -> &'a CGameServers_GetServerIPsBySteamID_Request {
        <CGameServers_GetServerIPsBySteamID_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameServers_GetServerIPsBySteamID_Request {
    pub fn new() -> CGameServers_GetServerIPsBySteamID_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "server_steamids",
            |m: &CGameServers_GetServerIPsBySteamID_Request| { &m.server_steamids },
            |m: &mut CGameServers_GetServerIPsBySteamID_Request| { &mut m.server_steamids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameServers_GetServerIPsBySteamID_Request>(
            "CGameServers_GetServerIPsBySteamID_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameServers_GetServerIPsBySteamID_Request {
    const NAME: &'static str = "CGameServers_GetServerIPsBySteamID_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_fixed64_into(&mut self.server_steamids)?;
                },
                9 => {
                    self.server_steamids.push(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += 9 * self.server_steamids.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.server_steamids {
            os.write_fixed64(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameServers_GetServerIPsBySteamID_Request {
        CGameServers_GetServerIPsBySteamID_Request::new()
    }

    fn clear(&mut self) {
        self.server_steamids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameServers_GetServerIPsBySteamID_Request {
        static instance: CGameServers_GetServerIPsBySteamID_Request = CGameServers_GetServerIPsBySteamID_Request {
            server_steamids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameServers_GetServerIPsBySteamID_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameServers_GetServerIPsBySteamID_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameServers_GetServerIPsBySteamID_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameServers_GetServerIPsBySteamID_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+steammessages_gameservers.steamclient.proto\x1a,steammessages_unified\
    _base.steamclient.proto\"\xae\x01\n\"CGameServers_GetServerList_Request\
    \x120\n\x06filter\x18\x01\x20\x01(\tR\x06filterB\x18\x82\xb5\x18\x14Quer\
    y\x20filter\x20string.\x12V\n\x05limit\x18\x02\x20\x01(\r:\x03100R\x05li\
    mitB;\x82\xb5\x187The\x20maximum\x20number\x20of\x20servers\x20to\x20ret\
    urn\x20in\x20the\x20response\"\xfd\x04\n#CGameServers_GetServerList_Resp\
    onse\x12n\n\x07servers\x18\x01\x20\x03(\x0b2+.CGameServers_GetServerList\
    _Response.ServerR\x07serversB'\x82\xb5\x18#List\x20of\x20servers\x20matc\
    hing\x20the\x20filter\x1a\xe5\x03\n\x06Server\x126\n\x04addr\x18\x01\x20\
    \x01(\tR\x04addrB\"\x82\xb5\x18\x1eThe\x20server's\x20IP\x20and\x20query\
    \x20port\x12\x1a\n\x08gameport\x18\x02\x20\x01(\rR\x08gameport\x12\x1a\n\
    \x08specport\x18\x03\x20\x01(\rR\x08specport\x12\x18\n\x07steamid\x18\
    \x04\x20\x01(\x06R\x07steamid\x12\x12\n\x04name\x18\x05\x20\x01(\tR\x04n\
    ame\x12\x14\n\x05appid\x18\x06\x20\x01(\rR\x05appid\x12\x18\n\x07gamedir\
    \x18\x07\x20\x01(\tR\x07gamedir\x12\x18\n\x07version\x18\x08\x20\x01(\tR\
    \x07version\x12\x18\n\x07product\x18\t\x20\x01(\tR\x07product\x12\x16\n\
    \x06region\x18\n\x20\x01(\x05R\x06region\x12\x18\n\x07players\x18\x0b\
    \x20\x01(\x05R\x07players\x12\x1f\n\x0bmax_players\x18\x0c\x20\x01(\x05R\
    \nmaxPlayers\x12\x12\n\x04bots\x18\r\x20\x01(\x05R\x04bots\x12\x10\n\x03\
    map\x18\x0e\x20\x01(\tR\x03map\x12\x16\n\x06secure\x18\x0f\x20\x01(\x08R\
    \x06secure\x12\x1c\n\tdedicated\x18\x10\x20\x01(\x08R\tdedicated\x12\x0e\
    \n\x02os\x18\x11\x20\x01(\tR\x02os\x12\x1a\n\x08gametype\x18\x12\x20\x01\
    (\tR\x08gametype\"K\n*CGameServers_GetServerSteamIDsByIP_Request\x12\x1d\
    \n\nserver_ips\x18\x01\x20\x03(\tR\tserverIps\"\xa8\x01\n%CGameServers_I\
    PsWithSteamIDs_Response\x12G\n\x07servers\x18\x01\x20\x03(\x0b2-.CGameSe\
    rvers_IPsWithSteamIDs_Response.ServerR\x07servers\x1a6\n\x06Server\x12\
    \x12\n\x04addr\x18\x01\x20\x01(\tR\x04addr\x12\x18\n\x07steamid\x18\x02\
    \x20\x01(\x06R\x07steamid\"U\n*CGameServers_GetServerIPsBySteamID_Reques\
    t\x12'\n\x0fserver_steamids\x18\x01\x20\x03(\x06R\x0eserverSteamids2\xab\
    \x04\n\x0bGameServers\x12\x8c\x01\n\rGetServerList\x12#.CGameServers_Get\
    ServerList_Request\x1a$.CGameServers_GetServerList_Response\"0\x82\xb5\
    \x18,Gets\x20a\x20list\x20of\x20servers\x20given\x20a\x20filter\x20strin\
    g\x12\xa4\x01\n\x15GetServerSteamIDsByIP\x12+.CGameServers_GetServerStea\
    mIDsByIP_Request\x1a&.CGameServers_IPsWithSteamIDs_Response\"6\x82\xb5\
    \x182Gets\x20a\x20list\x20of\x20server\x20SteamIDs\x20given\x20a\x20list\
    \x20of\x20IPs\x12\xad\x01\n\x15GetServerIPsBySteamID\x12+.CGameServers_G\
    etServerIPsBySteamID_Request\x1a&.CGameServers_IPsWithSteamIDs_Response\
    \"?\x82\xb5\x18;Gets\x20a\x20list\x20of\x20server\x20IP\x20addresses\x20\
    given\x20a\x20list\x20of\x20SteamIDs\x1a6\x82\xb5\x182A\x20service\x20fo\
    r\x20searching\x20and\x20managing\x20game\x20servers.B\x03\x80\x01\x01J\
    \xea\x14\n\x06\x12\x04\0\0A\x01\n\t\n\x02\x03\0\x12\x03\0\06\n\x08\n\x01\
    \x08\x12\x03\x02\0\"\n\t\n\x02\x08\x10\x12\x03\x02\0\"\n\n\n\x02\x04\0\
    \x12\x04\x04\0\x07\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08*\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x05\x08L\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x05\
    \x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x11\x17\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\x05\x18\x1e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\
    !\"\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x05#K\n\x0f\n\x08\x04\0\x02\0\
    \x08\xd0\x86\x03\x12\x03\x05$J\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x08\
    }\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x06\x08\x10\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\x06\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x06\x18\x1d\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x20!\n\x0c\n\x05\
    \x04\0\x02\x01\x08\x12\x03\x06\"|\n\x0c\n\x05\x04\0\x02\x01\x07\x12\x03\
    \x06-0\n\x0f\n\x08\x04\0\x02\x01\x08\xd0\x86\x03\x12\x03\x062{\n\n\n\x02\
    \x04\x01\x12\x04\t\0\x20\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08+\n\x0c\
    \n\x04\x04\x01\x03\0\x12\x04\n\x08\x1d\t\n\x0c\n\x05\x04\x01\x03\0\x01\
    \x12\x03\n\x10\x16\n\r\n\x06\x04\x01\x03\0\x02\0\x12\x03\x0b\x10\\\n\x0e\
    \n\x07\x04\x01\x03\0\x02\0\x04\x12\x03\x0b\x10\x18\n\x0e\n\x07\x04\x01\
    \x03\0\x02\0\x05\x12\x03\x0b\x19\x1f\n\x0e\n\x07\x04\x01\x03\0\x02\0\x01\
    \x12\x03\x0b\x20$\n\x0e\n\x07\x04\x01\x03\0\x02\0\x03\x12\x03\x0b'(\n\
    \x0e\n\x07\x04\x01\x03\0\x02\0\x08\x12\x03\x0b)[\n\x11\n\n\x04\x01\x03\0\
    \x02\0\x08\xd0\x86\x03\x12\x03\x0b*Z\n\r\n\x06\x04\x01\x03\0\x02\x01\x12\
    \x03\x0c\x10-\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x04\x12\x03\x0c\x10\x18\
    \n\x0e\n\x07\x04\x01\x03\0\x02\x01\x05\x12\x03\x0c\x19\x1f\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x01\x01\x12\x03\x0c\x20(\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x01\x03\x12\x03\x0c+,\n\r\n\x06\x04\x01\x03\0\x02\x02\x12\x03\r\x10\
    -\n\x0e\n\x07\x04\x01\x03\0\x02\x02\x04\x12\x03\r\x10\x18\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x02\x05\x12\x03\r\x19\x1f\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x02\x01\x12\x03\r\x20(\n\x0e\n\x07\x04\x01\x03\0\x02\x02\x03\x12\
    \x03\r+,\n\r\n\x06\x04\x01\x03\0\x02\x03\x12\x03\x0e\x10-\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x03\x04\x12\x03\x0e\x10\x18\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x03\x05\x12\x03\x0e\x19\x20\n\x0e\n\x07\x04\x01\x03\0\x02\x03\x01\
    \x12\x03\x0e!(\n\x0e\n\x07\x04\x01\x03\0\x02\x03\x03\x12\x03\x0e+,\n\r\n\
    \x06\x04\x01\x03\0\x02\x04\x12\x03\x0f\x10)\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x04\x04\x12\x03\x0f\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\x04\x05\
    \x12\x03\x0f\x19\x1f\n\x0e\n\x07\x04\x01\x03\0\x02\x04\x01\x12\x03\x0f\
    \x20$\n\x0e\n\x07\x04\x01\x03\0\x02\x04\x03\x12\x03\x0f'(\n\r\n\x06\x04\
    \x01\x03\0\x02\x05\x12\x03\x10\x10*\n\x0e\n\x07\x04\x01\x03\0\x02\x05\
    \x04\x12\x03\x10\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\x05\x05\x12\x03\
    \x10\x19\x1f\n\x0e\n\x07\x04\x01\x03\0\x02\x05\x01\x12\x03\x10\x20%\n\
    \x0e\n\x07\x04\x01\x03\0\x02\x05\x03\x12\x03\x10()\n\r\n\x06\x04\x01\x03\
    \0\x02\x06\x12\x03\x11\x10,\n\x0e\n\x07\x04\x01\x03\0\x02\x06\x04\x12\
    \x03\x11\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\x06\x05\x12\x03\x11\x19\
    \x1f\n\x0e\n\x07\x04\x01\x03\0\x02\x06\x01\x12\x03\x11\x20'\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x06\x03\x12\x03\x11*+\n\r\n\x06\x04\x01\x03\0\x02\x07\
    \x12\x03\x12\x10,\n\x0e\n\x07\x04\x01\x03\0\x02\x07\x04\x12\x03\x12\x10\
    \x18\n\x0e\n\x07\x04\x01\x03\0\x02\x07\x05\x12\x03\x12\x19\x1f\n\x0e\n\
    \x07\x04\x01\x03\0\x02\x07\x01\x12\x03\x12\x20'\n\x0e\n\x07\x04\x01\x03\
    \0\x02\x07\x03\x12\x03\x12*+\n\r\n\x06\x04\x01\x03\0\x02\x08\x12\x03\x13\
    \x10,\n\x0e\n\x07\x04\x01\x03\0\x02\x08\x04\x12\x03\x13\x10\x18\n\x0e\n\
    \x07\x04\x01\x03\0\x02\x08\x05\x12\x03\x13\x19\x1f\n\x0e\n\x07\x04\x01\
    \x03\0\x02\x08\x01\x12\x03\x13\x20'\n\x0e\n\x07\x04\x01\x03\0\x02\x08\
    \x03\x12\x03\x13*+\n\r\n\x06\x04\x01\x03\0\x02\t\x12\x03\x14\x10+\n\x0e\
    \n\x07\x04\x01\x03\0\x02\t\x04\x12\x03\x14\x10\x18\n\x0e\n\x07\x04\x01\
    \x03\0\x02\t\x05\x12\x03\x14\x19\x1e\n\x0e\n\x07\x04\x01\x03\0\x02\t\x01\
    \x12\x03\x14\x1f%\n\x0e\n\x07\x04\x01\x03\0\x02\t\x03\x12\x03\x14(*\n\r\
    \n\x06\x04\x01\x03\0\x02\n\x12\x03\x15\x10,\n\x0e\n\x07\x04\x01\x03\0\
    \x02\n\x04\x12\x03\x15\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\n\x05\x12\
    \x03\x15\x19\x1e\n\x0e\n\x07\x04\x01\x03\0\x02\n\x01\x12\x03\x15\x1f&\n\
    \x0e\n\x07\x04\x01\x03\0\x02\n\x03\x12\x03\x15)+\n\r\n\x06\x04\x01\x03\0\
    \x02\x0b\x12\x03\x16\x100\n\x0e\n\x07\x04\x01\x03\0\x02\x0b\x04\x12\x03\
    \x16\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\x0b\x05\x12\x03\x16\x19\x1e\n\
    \x0e\n\x07\x04\x01\x03\0\x02\x0b\x01\x12\x03\x16\x1f*\n\x0e\n\x07\x04\
    \x01\x03\0\x02\x0b\x03\x12\x03\x16-/\n\r\n\x06\x04\x01\x03\0\x02\x0c\x12\
    \x03\x17\x10)\n\x0e\n\x07\x04\x01\x03\0\x02\x0c\x04\x12\x03\x17\x10\x18\
    \n\x0e\n\x07\x04\x01\x03\0\x02\x0c\x05\x12\x03\x17\x19\x1e\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x0c\x01\x12\x03\x17\x1f#\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x0c\x03\x12\x03\x17&(\n\r\n\x06\x04\x01\x03\0\x02\r\x12\x03\x18\x10\
    )\n\x0e\n\x07\x04\x01\x03\0\x02\r\x04\x12\x03\x18\x10\x18\n\x0e\n\x07\
    \x04\x01\x03\0\x02\r\x05\x12\x03\x18\x19\x1f\n\x0e\n\x07\x04\x01\x03\0\
    \x02\r\x01\x12\x03\x18\x20#\n\x0e\n\x07\x04\x01\x03\0\x02\r\x03\x12\x03\
    \x18&(\n\r\n\x06\x04\x01\x03\0\x02\x0e\x12\x03\x19\x10*\n\x0e\n\x07\x04\
    \x01\x03\0\x02\x0e\x04\x12\x03\x19\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\
    \x0e\x05\x12\x03\x19\x19\x1d\n\x0e\n\x07\x04\x01\x03\0\x02\x0e\x01\x12\
    \x03\x19\x1e$\n\x0e\n\x07\x04\x01\x03\0\x02\x0e\x03\x12\x03\x19')\n\r\n\
    \x06\x04\x01\x03\0\x02\x0f\x12\x03\x1a\x10-\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x0f\x04\x12\x03\x1a\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\x0f\x05\
    \x12\x03\x1a\x19\x1d\n\x0e\n\x07\x04\x01\x03\0\x02\x0f\x01\x12\x03\x1a\
    \x1e'\n\x0e\n\x07\x04\x01\x03\0\x02\x0f\x03\x12\x03\x1a*,\n\r\n\x06\x04\
    \x01\x03\0\x02\x10\x12\x03\x1b\x10(\n\x0e\n\x07\x04\x01\x03\0\x02\x10\
    \x04\x12\x03\x1b\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\x10\x05\x12\x03\
    \x1b\x19\x1f\n\x0e\n\x07\x04\x01\x03\0\x02\x10\x01\x12\x03\x1b\x20\"\n\
    \x0e\n\x07\x04\x01\x03\0\x02\x10\x03\x12\x03\x1b%'\n\r\n\x06\x04\x01\x03\
    \0\x02\x11\x12\x03\x1c\x10.\n\x0e\n\x07\x04\x01\x03\0\x02\x11\x04\x12\
    \x03\x1c\x10\x18\n\x0e\n\x07\x04\x01\x03\0\x02\x11\x05\x12\x03\x1c\x19\
    \x1f\n\x0e\n\x07\x04\x01\x03\0\x02\x11\x01\x12\x03\x1c\x20(\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x11\x03\x12\x03\x1c+-\n\x0c\n\x04\x04\x01\x02\0\x12\
    \x04\x1f\x08\x81\x01\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x1f\x08\x10\n\
    \x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x1f\x11<\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x1f=D\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1fGH\n\r\n\x05\
    \x04\x01\x02\0\x08\x12\x04\x1fI\x80\x01\n\x0f\n\x08\x04\x01\x02\0\x08\
    \xd0\x86\x03\x12\x03\x1fJ\x7f\n\n\n\x02\x04\x02\x12\x04\"\0$\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03\"\x082\n\x0b\n\x04\x04\x02\x02\0\x12\x03#\x08'\
    \n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03#\x08\x10\n\x0c\n\x05\x04\x02\x02\
    \0\x05\x12\x03#\x11\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03#\x18\"\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03#%&\n\n\n\x02\x04\x03\x12\x04&\0-\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03&\x08-\n\x0c\n\x04\x04\x03\x03\0\x12\
    \x04'\x08*\t\n\x0c\n\x05\x04\x03\x03\0\x01\x12\x03'\x10\x16\n\r\n\x06\
    \x04\x03\x03\0\x02\0\x12\x03(\x10)\n\x0e\n\x07\x04\x03\x03\0\x02\0\x04\
    \x12\x03(\x10\x18\n\x0e\n\x07\x04\x03\x03\0\x02\0\x05\x12\x03(\x19\x1f\n\
    \x0e\n\x07\x04\x03\x03\0\x02\0\x01\x12\x03(\x20$\n\x0e\n\x07\x04\x03\x03\
    \0\x02\0\x03\x12\x03('(\n\r\n\x06\x04\x03\x03\0\x02\x01\x12\x03)\x10-\n\
    \x0e\n\x07\x04\x03\x03\0\x02\x01\x04\x12\x03)\x10\x18\n\x0e\n\x07\x04\
    \x03\x03\0\x02\x01\x05\x12\x03)\x19\x20\n\x0e\n\x07\x04\x03\x03\0\x02\
    \x01\x01\x12\x03)!(\n\x0e\n\x07\x04\x03\x03\0\x02\x01\x03\x12\x03)+,\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03,\x08K\n\x0c\n\x05\x04\x03\x02\0\x04\x12\
    \x03,\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03,\x11>\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03,?F\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03,IJ\n\
    \n\n\x02\x04\x04\x12\x04/\01\x01\n\n\n\x03\x04\x04\x01\x12\x03/\x082\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x030\x08-\n\x0c\n\x05\x04\x04\x02\0\x04\x12\
    \x030\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x030\x11\x18\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x030\x19(\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x030+\
    ,\n\n\n\x02\x06\0\x12\x043\0A\x01\n\n\n\x03\x06\0\x01\x12\x033\x08\x13\n\
    \n\n\x03\x06\0\x03\x12\x034\x08\\\n\r\n\x06\x06\0\x03\xd0\x86\x03\x12\
    \x034\x08\\\n\x0c\n\x04\x06\0\x02\0\x12\x046\x088\t\n\x0c\n\x05\x06\0\
    \x02\0\x01\x12\x036\x0c\x19\n\x0c\n\x05\x06\0\x02\0\x02\x12\x036\x1b>\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x036Im\n\x0c\n\x05\x06\0\x02\0\x04\x12\
    \x037\x10]\n\x0f\n\x08\x06\0\x02\0\x04\xd0\x86\x03\x12\x037\x10]\n\x0c\n\
    \x04\x06\0\x02\x01\x12\x04:\x08<\t\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\
    :\x0c!\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03:#N\n\x0c\n\x05\x06\0\x02\
    \x01\x03\x12\x03:Y\x7f\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03;\x10c\n\x0f\
    \n\x08\x06\0\x02\x01\x04\xd0\x86\x03\x12\x03;\x10c\n\x0c\n\x04\x06\0\x02\
    \x02\x12\x04>\x08@\t\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03>\x0c!\n\x0c\n\
    \x05\x06\0\x02\x02\x02\x12\x03>#N\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03>\
    Y\x7f\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03?\x10l\n\x0f\n\x08\x06\0\x02\
    \x02\x04\xd0\x86\x03\x12\x03?\x10l\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(CGameServers_GetServerList_Request::generated_message_descriptor_data());
            messages.push(CGameServers_GetServerList_Response::generated_message_descriptor_data());
            messages.push(CGameServers_GetServerSteamIDsByIP_Request::generated_message_descriptor_data());
            messages.push(CGameServers_IPsWithSteamIDs_Response::generated_message_descriptor_data());
            messages.push(CGameServers_GetServerIPsBySteamID_Request::generated_message_descriptor_data());
            messages.push(cgame_servers_get_server_list_response::Server::generated_message_descriptor_data());
            messages.push(cgame_servers_ips_with_steam_ids_response::Server::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
