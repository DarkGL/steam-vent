// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_gamenotifications.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CGameNotifications_Variable)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_Variable {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_Variable.key)
    pub key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGameNotifications_Variable.value)
    pub value: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_Variable.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_Variable {
    fn default() -> &'a CGameNotifications_Variable {
        <CGameNotifications_Variable as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_Variable {
    pub fn new() -> CGameNotifications_Variable {
        ::std::default::Default::default()
    }

    // optional string key = 1;

    pub fn key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 2;

    pub fn value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::string::String::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key",
            |m: &CGameNotifications_Variable| { &m.key },
            |m: &mut CGameNotifications_Variable| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &CGameNotifications_Variable| { &m.value },
            |m: &mut CGameNotifications_Variable| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_Variable>(
            "CGameNotifications_Variable",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_Variable {
    const NAME: &'static str = "CGameNotifications_Variable";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.value = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_Variable {
        CGameNotifications_Variable::new()
    }

    fn clear(&mut self) {
        self.key = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_Variable {
        static instance: CGameNotifications_Variable = CGameNotifications_Variable {
            key: ::std::option::Option::None,
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_Variable {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_Variable").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_Variable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_Variable {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_LocalizedText)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_LocalizedText {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_LocalizedText.token)
    pub token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGameNotifications_LocalizedText.variables)
    pub variables: ::std::vec::Vec<CGameNotifications_Variable>,
    // @@protoc_insertion_point(field:CGameNotifications_LocalizedText.rendered_text)
    pub rendered_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_LocalizedText.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_LocalizedText {
    fn default() -> &'a CGameNotifications_LocalizedText {
        <CGameNotifications_LocalizedText as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_LocalizedText {
    pub fn new() -> CGameNotifications_LocalizedText {
        ::std::default::Default::default()
    }

    // optional string token = 1;

    pub fn token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_token(&mut self) {
        self.token = ::std::option::Option::None;
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string rendered_text = 3;

    pub fn rendered_text(&self) -> &str {
        match self.rendered_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_rendered_text(&mut self) {
        self.rendered_text = ::std::option::Option::None;
    }

    pub fn has_rendered_text(&self) -> bool {
        self.rendered_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rendered_text(&mut self, v: ::std::string::String) {
        self.rendered_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rendered_text(&mut self) -> &mut ::std::string::String {
        if self.rendered_text.is_none() {
            self.rendered_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.rendered_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_rendered_text(&mut self) -> ::std::string::String {
        self.rendered_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "token",
            |m: &CGameNotifications_LocalizedText| { &m.token },
            |m: &mut CGameNotifications_LocalizedText| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "variables",
            |m: &CGameNotifications_LocalizedText| { &m.variables },
            |m: &mut CGameNotifications_LocalizedText| { &mut m.variables },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rendered_text",
            |m: &CGameNotifications_LocalizedText| { &m.rendered_text },
            |m: &mut CGameNotifications_LocalizedText| { &mut m.rendered_text },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_LocalizedText>(
            "CGameNotifications_LocalizedText",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_LocalizedText {
    const NAME: &'static str = "CGameNotifications_LocalizedText";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.variables.push(is.read_message()?);
                },
                26 => {
                    self.rendered_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.variables {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.rendered_text.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.token.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.variables {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.rendered_text.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_LocalizedText {
        CGameNotifications_LocalizedText::new()
    }

    fn clear(&mut self) {
        self.token = ::std::option::Option::None;
        self.variables.clear();
        self.rendered_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_LocalizedText {
        static instance: CGameNotifications_LocalizedText = CGameNotifications_LocalizedText {
            token: ::std::option::Option::None,
            variables: ::std::vec::Vec::new(),
            rendered_text: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_LocalizedText {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_LocalizedText").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_LocalizedText {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_LocalizedText {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_UserStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UserStatus {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_UserStatus.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_UserStatus.state)
    pub state: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGameNotifications_UserStatus.title)
    pub title: ::protobuf::MessageField<CGameNotifications_LocalizedText>,
    // @@protoc_insertion_point(field:CGameNotifications_UserStatus.message)
    pub message: ::protobuf::MessageField<CGameNotifications_LocalizedText>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UserStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UserStatus {
    fn default() -> &'a CGameNotifications_UserStatus {
        <CGameNotifications_UserStatus as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UserStatus {
    pub fn new() -> CGameNotifications_UserStatus {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string state = 2;

    pub fn state(&self) -> &str {
        match self.state.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        if self.state.is_none() {
            self.state = ::std::option::Option::Some(::std::string::String::new());
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        self.state.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGameNotifications_UserStatus| { &m.steamid },
            |m: &mut CGameNotifications_UserStatus| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &CGameNotifications_UserStatus| { &m.state },
            |m: &mut CGameNotifications_UserStatus| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CGameNotifications_LocalizedText>(
            "title",
            |m: &CGameNotifications_UserStatus| { &m.title },
            |m: &mut CGameNotifications_UserStatus| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CGameNotifications_LocalizedText>(
            "message",
            |m: &CGameNotifications_UserStatus| { &m.message },
            |m: &mut CGameNotifications_UserStatus| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_UserStatus>(
            "CGameNotifications_UserStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_UserStatus {
    const NAME: &'static str = "CGameNotifications_UserStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.state = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.title)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.message)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.state.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.state.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.message.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UserStatus {
        CGameNotifications_UserStatus::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.title.clear();
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UserStatus {
        static instance: CGameNotifications_UserStatus = CGameNotifications_UserStatus {
            steamid: ::std::option::Option::None,
            state: ::std::option::Option::None,
            title: ::protobuf::MessageField::none(),
            message: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_UserStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_UserStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_UserStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_UserStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_CreateSession_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_CreateSession_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.context)
    pub context: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.title)
    pub title: ::protobuf::MessageField<CGameNotifications_LocalizedText>,
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.users)
    pub users: ::std::vec::Vec<CGameNotifications_UserStatus>,
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_CreateSession_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_CreateSession_Request {
    fn default() -> &'a CGameNotifications_CreateSession_Request {
        <CGameNotifications_CreateSession_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_CreateSession_Request {
    pub fn new() -> CGameNotifications_CreateSession_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 context = 2;

    pub fn context(&self) -> u64 {
        self.context.unwrap_or(0)
    }

    pub fn clear_context(&mut self) {
        self.context = ::std::option::Option::None;
    }

    pub fn has_context(&self) -> bool {
        self.context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: u64) {
        self.context = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 5;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_CreateSession_Request| { &m.appid },
            |m: &mut CGameNotifications_CreateSession_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "context",
            |m: &CGameNotifications_CreateSession_Request| { &m.context },
            |m: &mut CGameNotifications_CreateSession_Request| { &mut m.context },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CGameNotifications_LocalizedText>(
            "title",
            |m: &CGameNotifications_CreateSession_Request| { &m.title },
            |m: &mut CGameNotifications_CreateSession_Request| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "users",
            |m: &CGameNotifications_CreateSession_Request| { &m.users },
            |m: &mut CGameNotifications_CreateSession_Request| { &mut m.users },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGameNotifications_CreateSession_Request| { &m.steamid },
            |m: &mut CGameNotifications_CreateSession_Request| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_CreateSession_Request>(
            "CGameNotifications_CreateSession_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_CreateSession_Request {
    const NAME: &'static str = "CGameNotifications_CreateSession_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.context = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.title)?;
                },
                34 => {
                    self.users.push(is.read_message()?);
                },
                41 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.context {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.users {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.context {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.users {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.steamid {
            os.write_fixed64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_CreateSession_Request {
        CGameNotifications_CreateSession_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.context = ::std::option::Option::None;
        self.title.clear();
        self.users.clear();
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_CreateSession_Request {
        static instance: CGameNotifications_CreateSession_Request = CGameNotifications_CreateSession_Request {
            appid: ::std::option::Option::None,
            context: ::std::option::Option::None,
            title: ::protobuf::MessageField::none(),
            users: ::std::vec::Vec::new(),
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_CreateSession_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_CreateSession_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_CreateSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_CreateSession_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_CreateSession_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_CreateSession_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Response.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_CreateSession_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_CreateSession_Response {
    fn default() -> &'a CGameNotifications_CreateSession_Response {
        <CGameNotifications_CreateSession_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_CreateSession_Response {
    pub fn new() -> CGameNotifications_CreateSession_Response {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CGameNotifications_CreateSession_Response| { &m.sessionid },
            |m: &mut CGameNotifications_CreateSession_Response| { &mut m.sessionid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_CreateSession_Response>(
            "CGameNotifications_CreateSession_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_CreateSession_Response {
    const NAME: &'static str = "CGameNotifications_CreateSession_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_CreateSession_Response {
        CGameNotifications_CreateSession_Response::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_CreateSession_Response {
        static instance: CGameNotifications_CreateSession_Response = CGameNotifications_CreateSession_Response {
            sessionid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_CreateSession_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_CreateSession_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_CreateSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_CreateSession_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_DeleteSession_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_DeleteSession_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_DeleteSession_Request.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_DeleteSession_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_DeleteSession_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_DeleteSession_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_DeleteSession_Request {
    fn default() -> &'a CGameNotifications_DeleteSession_Request {
        <CGameNotifications_DeleteSession_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_DeleteSession_Request {
    pub fn new() -> CGameNotifications_DeleteSession_Request {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 3;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CGameNotifications_DeleteSession_Request| { &m.sessionid },
            |m: &mut CGameNotifications_DeleteSession_Request| { &mut m.sessionid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_DeleteSession_Request| { &m.appid },
            |m: &mut CGameNotifications_DeleteSession_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGameNotifications_DeleteSession_Request| { &m.steamid },
            |m: &mut CGameNotifications_DeleteSession_Request| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_DeleteSession_Request>(
            "CGameNotifications_DeleteSession_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_DeleteSession_Request {
    const NAME: &'static str = "CGameNotifications_DeleteSession_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                25 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_DeleteSession_Request {
        CGameNotifications_DeleteSession_Request::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_DeleteSession_Request {
        static instance: CGameNotifications_DeleteSession_Request = CGameNotifications_DeleteSession_Request {
            sessionid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_DeleteSession_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_DeleteSession_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_DeleteSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_DeleteSession_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_DeleteSession_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_DeleteSession_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_DeleteSession_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_DeleteSession_Response {
    fn default() -> &'a CGameNotifications_DeleteSession_Response {
        <CGameNotifications_DeleteSession_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_DeleteSession_Response {
    pub fn new() -> CGameNotifications_DeleteSession_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_DeleteSession_Response>(
            "CGameNotifications_DeleteSession_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_DeleteSession_Response {
    const NAME: &'static str = "CGameNotifications_DeleteSession_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_DeleteSession_Response {
        CGameNotifications_DeleteSession_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_DeleteSession_Response {
        static instance: CGameNotifications_DeleteSession_Response = CGameNotifications_DeleteSession_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_DeleteSession_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_DeleteSession_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_DeleteSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_DeleteSession_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_UpdateSession_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UpdateSession_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.title)
    pub title: ::protobuf::MessageField<CGameNotifications_LocalizedText>,
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.users)
    pub users: ::std::vec::Vec<CGameNotifications_UserStatus>,
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UpdateSession_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateSession_Request {
    fn default() -> &'a CGameNotifications_UpdateSession_Request {
        <CGameNotifications_UpdateSession_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateSession_Request {
    pub fn new() -> CGameNotifications_UpdateSession_Request {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 6;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CGameNotifications_UpdateSession_Request| { &m.sessionid },
            |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.sessionid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_UpdateSession_Request| { &m.appid },
            |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CGameNotifications_LocalizedText>(
            "title",
            |m: &CGameNotifications_UpdateSession_Request| { &m.title },
            |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "users",
            |m: &CGameNotifications_UpdateSession_Request| { &m.users },
            |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.users },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGameNotifications_UpdateSession_Request| { &m.steamid },
            |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_UpdateSession_Request>(
            "CGameNotifications_UpdateSession_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_UpdateSession_Request {
    const NAME: &'static str = "CGameNotifications_UpdateSession_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.title)?;
                },
                34 => {
                    self.users.push(is.read_message()?);
                },
                49 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.users {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.users {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.steamid {
            os.write_fixed64(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UpdateSession_Request {
        CGameNotifications_UpdateSession_Request::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.title.clear();
        self.users.clear();
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UpdateSession_Request {
        static instance: CGameNotifications_UpdateSession_Request = CGameNotifications_UpdateSession_Request {
            sessionid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            title: ::protobuf::MessageField::none(),
            users: ::std::vec::Vec::new(),
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_UpdateSession_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_UpdateSession_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_UpdateSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_UpdateSession_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_UpdateSession_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UpdateSession_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UpdateSession_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateSession_Response {
    fn default() -> &'a CGameNotifications_UpdateSession_Response {
        <CGameNotifications_UpdateSession_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateSession_Response {
    pub fn new() -> CGameNotifications_UpdateSession_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_UpdateSession_Response>(
            "CGameNotifications_UpdateSession_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_UpdateSession_Response {
    const NAME: &'static str = "CGameNotifications_UpdateSession_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UpdateSession_Response {
        CGameNotifications_UpdateSession_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UpdateSession_Response {
        static instance: CGameNotifications_UpdateSession_Response = CGameNotifications_UpdateSession_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_UpdateSession_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_UpdateSession_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_UpdateSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_UpdateSession_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_EnumerateSessions_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_EnumerateSessions_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Request.include_all_user_messages)
    pub include_all_user_messages: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Request.include_auth_user_message)
    pub include_auth_user_message: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_EnumerateSessions_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_EnumerateSessions_Request {
    fn default() -> &'a CGameNotifications_EnumerateSessions_Request {
        <CGameNotifications_EnumerateSessions_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_EnumerateSessions_Request {
    pub fn new() -> CGameNotifications_EnumerateSessions_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool include_all_user_messages = 3;

    pub fn include_all_user_messages(&self) -> bool {
        self.include_all_user_messages.unwrap_or(false)
    }

    pub fn clear_include_all_user_messages(&mut self) {
        self.include_all_user_messages = ::std::option::Option::None;
    }

    pub fn has_include_all_user_messages(&self) -> bool {
        self.include_all_user_messages.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_all_user_messages(&mut self, v: bool) {
        self.include_all_user_messages = ::std::option::Option::Some(v);
    }

    // optional bool include_auth_user_message = 4;

    pub fn include_auth_user_message(&self) -> bool {
        self.include_auth_user_message.unwrap_or(false)
    }

    pub fn clear_include_auth_user_message(&mut self) {
        self.include_auth_user_message = ::std::option::Option::None;
    }

    pub fn has_include_auth_user_message(&self) -> bool {
        self.include_auth_user_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_auth_user_message(&mut self, v: bool) {
        self.include_auth_user_message = ::std::option::Option::Some(v);
    }

    // optional string language = 5;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_EnumerateSessions_Request| { &m.appid },
            |m: &mut CGameNotifications_EnumerateSessions_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_all_user_messages",
            |m: &CGameNotifications_EnumerateSessions_Request| { &m.include_all_user_messages },
            |m: &mut CGameNotifications_EnumerateSessions_Request| { &mut m.include_all_user_messages },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_auth_user_message",
            |m: &CGameNotifications_EnumerateSessions_Request| { &m.include_auth_user_message },
            |m: &mut CGameNotifications_EnumerateSessions_Request| { &mut m.include_auth_user_message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CGameNotifications_EnumerateSessions_Request| { &m.language },
            |m: &mut CGameNotifications_EnumerateSessions_Request| { &mut m.language },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_EnumerateSessions_Request>(
            "CGameNotifications_EnumerateSessions_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_EnumerateSessions_Request {
    const NAME: &'static str = "CGameNotifications_EnumerateSessions_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.include_all_user_messages = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.include_auth_user_message = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.include_all_user_messages {
            my_size += 1 + 1;
        }
        if let Some(v) = self.include_auth_user_message {
            my_size += 1 + 1;
        }
        if let Some(v) = self.language.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.include_all_user_messages {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.include_auth_user_message {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_EnumerateSessions_Request {
        CGameNotifications_EnumerateSessions_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.include_all_user_messages = ::std::option::Option::None;
        self.include_auth_user_message = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_EnumerateSessions_Request {
        static instance: CGameNotifications_EnumerateSessions_Request = CGameNotifications_EnumerateSessions_Request {
            appid: ::std::option::Option::None,
            include_all_user_messages: ::std::option::Option::None,
            include_auth_user_message: ::std::option::Option::None,
            language: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_EnumerateSessions_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_EnumerateSessions_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_EnumerateSessions_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_EnumerateSessions_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_Session)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_Session {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_Session.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.appid)
    pub appid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.context)
    pub context: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.title)
    pub title: ::protobuf::MessageField<CGameNotifications_LocalizedText>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.time_created)
    pub time_created: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.time_updated)
    pub time_updated: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.user_status)
    pub user_status: ::std::vec::Vec<CGameNotifications_UserStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_Session.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_Session {
    fn default() -> &'a CGameNotifications_Session {
        <CGameNotifications_Session as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_Session {
    pub fn new() -> CGameNotifications_Session {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint64 appid = 2;

    pub fn appid(&self) -> u64 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u64) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 context = 3;

    pub fn context(&self) -> u64 {
        self.context.unwrap_or(0)
    }

    pub fn clear_context(&mut self) {
        self.context = ::std::option::Option::None;
    }

    pub fn has_context(&self) -> bool {
        self.context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: u64) {
        self.context = ::std::option::Option::Some(v);
    }

    // optional uint32 time_created = 5;

    pub fn time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }

    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    // optional uint32 time_updated = 6;

    pub fn time_updated(&self) -> u32 {
        self.time_updated.unwrap_or(0)
    }

    pub fn clear_time_updated(&mut self) {
        self.time_updated = ::std::option::Option::None;
    }

    pub fn has_time_updated(&self) -> bool {
        self.time_updated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_updated(&mut self, v: u32) {
        self.time_updated = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CGameNotifications_Session| { &m.sessionid },
            |m: &mut CGameNotifications_Session| { &mut m.sessionid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_Session| { &m.appid },
            |m: &mut CGameNotifications_Session| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "context",
            |m: &CGameNotifications_Session| { &m.context },
            |m: &mut CGameNotifications_Session| { &mut m.context },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CGameNotifications_LocalizedText>(
            "title",
            |m: &CGameNotifications_Session| { &m.title },
            |m: &mut CGameNotifications_Session| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_created",
            |m: &CGameNotifications_Session| { &m.time_created },
            |m: &mut CGameNotifications_Session| { &mut m.time_created },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_updated",
            |m: &CGameNotifications_Session| { &m.time_updated },
            |m: &mut CGameNotifications_Session| { &mut m.time_updated },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "user_status",
            |m: &CGameNotifications_Session| { &m.user_status },
            |m: &mut CGameNotifications_Session| { &mut m.user_status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_Session>(
            "CGameNotifications_Session",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_Session {
    const NAME: &'static str = "CGameNotifications_Session";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.context = ::std::option::Option::Some(is.read_uint64()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.title)?;
                },
                40 => {
                    self.time_created = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.time_updated = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.user_status.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.context {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.time_created {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.time_updated {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        for value in &self.user_status {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.context {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.time_created {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.time_updated {
            os.write_uint32(6, v)?;
        }
        for v in &self.user_status {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_Session {
        CGameNotifications_Session::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.context = ::std::option::Option::None;
        self.title.clear();
        self.time_created = ::std::option::Option::None;
        self.time_updated = ::std::option::Option::None;
        self.user_status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_Session {
        static instance: CGameNotifications_Session = CGameNotifications_Session {
            sessionid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            context: ::std::option::Option::None,
            title: ::protobuf::MessageField::none(),
            time_created: ::std::option::Option::None,
            time_updated: ::std::option::Option::None,
            user_status: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_Session {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_Session").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_Session {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_Session {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_EnumerateSessions_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_EnumerateSessions_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Response.sessions)
    pub sessions: ::std::vec::Vec<CGameNotifications_Session>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_EnumerateSessions_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_EnumerateSessions_Response {
    fn default() -> &'a CGameNotifications_EnumerateSessions_Response {
        <CGameNotifications_EnumerateSessions_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_EnumerateSessions_Response {
    pub fn new() -> CGameNotifications_EnumerateSessions_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sessions",
            |m: &CGameNotifications_EnumerateSessions_Response| { &m.sessions },
            |m: &mut CGameNotifications_EnumerateSessions_Response| { &mut m.sessions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_EnumerateSessions_Response>(
            "CGameNotifications_EnumerateSessions_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_EnumerateSessions_Response {
    const NAME: &'static str = "CGameNotifications_EnumerateSessions_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sessions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.sessions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.sessions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_EnumerateSessions_Response {
        CGameNotifications_EnumerateSessions_Response::new()
    }

    fn clear(&mut self) {
        self.sessions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_EnumerateSessions_Response {
        static instance: CGameNotifications_EnumerateSessions_Response = CGameNotifications_EnumerateSessions_Response {
            sessions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_EnumerateSessions_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_EnumerateSessions_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_EnumerateSessions_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_EnumerateSessions_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_GetSessionDetails_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_GetSessionDetails_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.sessions)
    pub sessions: ::std::vec::Vec<cgame_notifications_get_session_details_request::RequestedSession>,
    // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_GetSessionDetails_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_GetSessionDetails_Request {
    fn default() -> &'a CGameNotifications_GetSessionDetails_Request {
        <CGameNotifications_GetSessionDetails_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_GetSessionDetails_Request {
    pub fn new() -> CGameNotifications_GetSessionDetails_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string language = 3;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sessions",
            |m: &CGameNotifications_GetSessionDetails_Request| { &m.sessions },
            |m: &mut CGameNotifications_GetSessionDetails_Request| { &mut m.sessions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_GetSessionDetails_Request| { &m.appid },
            |m: &mut CGameNotifications_GetSessionDetails_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CGameNotifications_GetSessionDetails_Request| { &m.language },
            |m: &mut CGameNotifications_GetSessionDetails_Request| { &mut m.language },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_GetSessionDetails_Request>(
            "CGameNotifications_GetSessionDetails_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_GetSessionDetails_Request {
    const NAME: &'static str = "CGameNotifications_GetSessionDetails_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sessions.push(is.read_message()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.sessions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.language.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.sessions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_GetSessionDetails_Request {
        CGameNotifications_GetSessionDetails_Request::new()
    }

    fn clear(&mut self) {
        self.sessions.clear();
        self.appid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_GetSessionDetails_Request {
        static instance: CGameNotifications_GetSessionDetails_Request = CGameNotifications_GetSessionDetails_Request {
            sessions: ::std::vec::Vec::new(),
            appid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_GetSessionDetails_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_GetSessionDetails_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_GetSessionDetails_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_GetSessionDetails_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CGameNotifications_GetSessionDetails_Request`
pub mod cgame_notifications_get_session_details_request {
    // @@protoc_insertion_point(message:CGameNotifications_GetSessionDetails_Request.RequestedSession)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RequestedSession {
        // message fields
        // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.RequestedSession.sessionid)
        pub sessionid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.RequestedSession.include_auth_user_message)
        pub include_auth_user_message: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CGameNotifications_GetSessionDetails_Request.RequestedSession.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RequestedSession {
        fn default() -> &'a RequestedSession {
            <RequestedSession as ::protobuf::Message>::default_instance()
        }
    }

    impl RequestedSession {
        pub fn new() -> RequestedSession {
            ::std::default::Default::default()
        }

        // optional uint64 sessionid = 1;

        pub fn sessionid(&self) -> u64 {
            self.sessionid.unwrap_or(0)
        }

        pub fn clear_sessionid(&mut self) {
            self.sessionid = ::std::option::Option::None;
        }

        pub fn has_sessionid(&self) -> bool {
            self.sessionid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sessionid(&mut self, v: u64) {
            self.sessionid = ::std::option::Option::Some(v);
        }

        // optional bool include_auth_user_message = 3;

        pub fn include_auth_user_message(&self) -> bool {
            self.include_auth_user_message.unwrap_or(false)
        }

        pub fn clear_include_auth_user_message(&mut self) {
            self.include_auth_user_message = ::std::option::Option::None;
        }

        pub fn has_include_auth_user_message(&self) -> bool {
            self.include_auth_user_message.is_some()
        }

        // Param is passed by value, moved
        pub fn set_include_auth_user_message(&mut self, v: bool) {
            self.include_auth_user_message = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "sessionid",
                |m: &RequestedSession| { &m.sessionid },
                |m: &mut RequestedSession| { &mut m.sessionid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "include_auth_user_message",
                |m: &RequestedSession| { &m.include_auth_user_message },
                |m: &mut RequestedSession| { &mut m.include_auth_user_message },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RequestedSession>(
                "CGameNotifications_GetSessionDetails_Request.RequestedSession",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RequestedSession {
        const NAME: &'static str = "RequestedSession";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    24 => {
                        self.include_auth_user_message = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.sessionid {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.include_auth_user_message {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.sessionid {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.include_auth_user_message {
                os.write_bool(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RequestedSession {
            RequestedSession::new()
        }

        fn clear(&mut self) {
            self.sessionid = ::std::option::Option::None;
            self.include_auth_user_message = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RequestedSession {
            static instance: RequestedSession = RequestedSession {
                sessionid: ::std::option::Option::None,
                include_auth_user_message: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RequestedSession {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CGameNotifications_GetSessionDetails_Request.RequestedSession").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RequestedSession {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RequestedSession {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CGameNotifications_GetSessionDetails_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_GetSessionDetails_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Response.sessions)
    pub sessions: ::std::vec::Vec<CGameNotifications_Session>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_GetSessionDetails_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_GetSessionDetails_Response {
    fn default() -> &'a CGameNotifications_GetSessionDetails_Response {
        <CGameNotifications_GetSessionDetails_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_GetSessionDetails_Response {
    pub fn new() -> CGameNotifications_GetSessionDetails_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sessions",
            |m: &CGameNotifications_GetSessionDetails_Response| { &m.sessions },
            |m: &mut CGameNotifications_GetSessionDetails_Response| { &mut m.sessions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_GetSessionDetails_Response>(
            "CGameNotifications_GetSessionDetails_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_GetSessionDetails_Response {
    const NAME: &'static str = "CGameNotifications_GetSessionDetails_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sessions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.sessions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.sessions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_GetSessionDetails_Response {
        CGameNotifications_GetSessionDetails_Response::new()
    }

    fn clear(&mut self) {
        self.sessions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_GetSessionDetails_Response {
        static instance: CGameNotifications_GetSessionDetails_Response = CGameNotifications_GetSessionDetails_Response {
            sessions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_GetSessionDetails_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_GetSessionDetails_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_GetSessionDetails_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_GetSessionDetails_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GameNotificationSettings)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GameNotificationSettings {
    // message fields
    // @@protoc_insertion_point(field:GameNotificationSettings.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:GameNotificationSettings.allow_notifications)
    pub allow_notifications: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:GameNotificationSettings.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GameNotificationSettings {
    fn default() -> &'a GameNotificationSettings {
        <GameNotificationSettings as ::protobuf::Message>::default_instance()
    }
}

impl GameNotificationSettings {
    pub fn new() -> GameNotificationSettings {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool allow_notifications = 2;

    pub fn allow_notifications(&self) -> bool {
        self.allow_notifications.unwrap_or(false)
    }

    pub fn clear_allow_notifications(&mut self) {
        self.allow_notifications = ::std::option::Option::None;
    }

    pub fn has_allow_notifications(&self) -> bool {
        self.allow_notifications.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allow_notifications(&mut self, v: bool) {
        self.allow_notifications = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &GameNotificationSettings| { &m.appid },
            |m: &mut GameNotificationSettings| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "allow_notifications",
            |m: &GameNotificationSettings| { &m.allow_notifications },
            |m: &mut GameNotificationSettings| { &mut m.allow_notifications },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GameNotificationSettings>(
            "GameNotificationSettings",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GameNotificationSettings {
    const NAME: &'static str = "GameNotificationSettings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.allow_notifications = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.allow_notifications {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.allow_notifications {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GameNotificationSettings {
        GameNotificationSettings::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.allow_notifications = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GameNotificationSettings {
        static instance: GameNotificationSettings = GameNotificationSettings {
            appid: ::std::option::Option::None,
            allow_notifications: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GameNotificationSettings {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GameNotificationSettings").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GameNotificationSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameNotificationSettings {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_UpdateNotificationSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UpdateNotificationSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
    pub game_notification_settings: ::std::vec::Vec<GameNotificationSettings>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UpdateNotificationSettings_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateNotificationSettings_Request {
    fn default() -> &'a CGameNotifications_UpdateNotificationSettings_Request {
        <CGameNotifications_UpdateNotificationSettings_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateNotificationSettings_Request {
    pub fn new() -> CGameNotifications_UpdateNotificationSettings_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "game_notification_settings",
            |m: &CGameNotifications_UpdateNotificationSettings_Request| { &m.game_notification_settings },
            |m: &mut CGameNotifications_UpdateNotificationSettings_Request| { &mut m.game_notification_settings },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_UpdateNotificationSettings_Request>(
            "CGameNotifications_UpdateNotificationSettings_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_UpdateNotificationSettings_Request {
    const NAME: &'static str = "CGameNotifications_UpdateNotificationSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.game_notification_settings.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.game_notification_settings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.game_notification_settings {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UpdateNotificationSettings_Request {
        CGameNotifications_UpdateNotificationSettings_Request::new()
    }

    fn clear(&mut self) {
        self.game_notification_settings.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UpdateNotificationSettings_Request {
        static instance: CGameNotifications_UpdateNotificationSettings_Request = CGameNotifications_UpdateNotificationSettings_Request {
            game_notification_settings: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_UpdateNotificationSettings_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_UpdateNotificationSettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_UpdateNotificationSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_UpdateNotificationSettings_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_UpdateNotificationSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UpdateNotificationSettings_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UpdateNotificationSettings_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateNotificationSettings_Response {
    fn default() -> &'a CGameNotifications_UpdateNotificationSettings_Response {
        <CGameNotifications_UpdateNotificationSettings_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateNotificationSettings_Response {
    pub fn new() -> CGameNotifications_UpdateNotificationSettings_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_UpdateNotificationSettings_Response>(
            "CGameNotifications_UpdateNotificationSettings_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_UpdateNotificationSettings_Response {
    const NAME: &'static str = "CGameNotifications_UpdateNotificationSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UpdateNotificationSettings_Response {
        CGameNotifications_UpdateNotificationSettings_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UpdateNotificationSettings_Response {
        static instance: CGameNotifications_UpdateNotificationSettings_Response = CGameNotifications_UpdateNotificationSettings_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_UpdateNotificationSettings_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_UpdateNotificationSettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_UpdateNotificationSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_UpdateNotificationSettings_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_OnNotificationsRequested_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_OnNotificationsRequested_Notification {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_OnNotificationsRequested_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_OnNotificationsRequested_Notification.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_OnNotificationsRequested_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_OnNotificationsRequested_Notification {
    fn default() -> &'a CGameNotifications_OnNotificationsRequested_Notification {
        <CGameNotifications_OnNotificationsRequested_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_OnNotificationsRequested_Notification {
    pub fn new() -> CGameNotifications_OnNotificationsRequested_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGameNotifications_OnNotificationsRequested_Notification| { &m.steamid },
            |m: &mut CGameNotifications_OnNotificationsRequested_Notification| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_OnNotificationsRequested_Notification| { &m.appid },
            |m: &mut CGameNotifications_OnNotificationsRequested_Notification| { &mut m.appid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_OnNotificationsRequested_Notification>(
            "CGameNotifications_OnNotificationsRequested_Notification",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_OnNotificationsRequested_Notification {
    const NAME: &'static str = "CGameNotifications_OnNotificationsRequested_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_OnNotificationsRequested_Notification {
        CGameNotifications_OnNotificationsRequested_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_OnNotificationsRequested_Notification {
        static instance: CGameNotifications_OnNotificationsRequested_Notification = CGameNotifications_OnNotificationsRequested_Notification {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_OnNotificationsRequested_Notification {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_OnNotificationsRequested_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_OnNotificationsRequested_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_OnNotificationsRequested_Notification {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_OnUserStatusChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_OnUserStatusChanged_Notification {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.status)
    pub status: ::protobuf::MessageField<CGameNotifications_UserStatus>,
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.removed)
    pub removed: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_OnUserStatusChanged_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_OnUserStatusChanged_Notification {
    fn default() -> &'a CGameNotifications_OnUserStatusChanged_Notification {
        <CGameNotifications_OnUserStatusChanged_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_OnUserStatusChanged_Notification {
    pub fn new() -> CGameNotifications_OnUserStatusChanged_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 sessionid = 2;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 3;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool removed = 5;

    pub fn removed(&self) -> bool {
        self.removed.unwrap_or(false)
    }

    pub fn clear_removed(&mut self) {
        self.removed = ::std::option::Option::None;
    }

    pub fn has_removed(&self) -> bool {
        self.removed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_removed(&mut self, v: bool) {
        self.removed = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.steamid },
            |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.sessionid },
            |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.sessionid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.appid },
            |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CGameNotifications_UserStatus>(
            "status",
            |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.status },
            |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "removed",
            |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.removed },
            |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.removed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_OnUserStatusChanged_Notification>(
            "CGameNotifications_OnUserStatusChanged_Notification",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CGameNotifications_OnUserStatusChanged_Notification {
    const NAME: &'static str = "CGameNotifications_OnUserStatusChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                40 => {
                    self.removed = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.removed {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.sessionid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.removed {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_OnUserStatusChanged_Notification {
        CGameNotifications_OnUserStatusChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.status.clear();
        self.removed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_OnUserStatusChanged_Notification {
        static instance: CGameNotifications_OnUserStatusChanged_Notification = CGameNotifications_OnUserStatusChanged_Notification {
            steamid: ::std::option::Option::None,
            sessionid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            status: ::protobuf::MessageField::none(),
            removed: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CGameNotifications_OnUserStatusChanged_Notification {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_OnUserStatusChanged_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_OnUserStatusChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CGameNotifications_OnUserStatusChanged_Notification {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n1steammessages_gamenotifications.steamclient.proto\x1a,steammessages_u\
    nified_base.steamclient.proto\"\xec\x02\n\x1bCGameNotifications_Variable\
    \x12\xab\x01\n\x03key\x18\x01\x20\x01(\tR\x03keyB\x98\x01\x82\xb5\x18\
    \x93\x01The\x20name\x20of\x20the\x20variable\x20in\x20the\x20localized\
    \x20text\x20--\x20anywhere\x20that\x20%variablename%\x20is\x20found\x20w\
    ithin\x20the\x20text\x20it\x20will\x20be\x20substituded\x20with\x20the\
    \x20given\x20value\x12\x9e\x01\n\x05value\x18\x02\x20\x01(\tR\x05valueB\
    \x87\x01\x82\xb5\x18\x82\x01The\x20value\x20of\x20the\x20variable\x20to\
    \x20substitute\x20in\x20the\x20localized\x20text\x20in\x20place\x20of\
    \x20the\x20given\x20variable.\x20\x20Can\x20itself\x20be\x20a\x20localiz\
    ation\x20token.\"\xa5\x03\n\x20CGameNotifications_LocalizedText\x12O\n\
    \x05token\x18\x01\x20\x01(\tR\x05tokenB9\x82\xb5\x185A\x20localization\
    \x20token\x20that\x20maps\x20to\x20the\x20desired\x20string.\x12\x98\x01\
    \n\tvariables\x18\x02\x20\x03(\x0b2\x1c.CGameNotifications_VariableR\tva\
    riablesB\\\x82\xb5\x18XA\x20list\x20of\x20variables\x20values\x20to\x20s\
    ubstitute\x20in\x20any\x20variables\x20found\x20in\x20the\x20localized\
    \x20string.\x12\x94\x01\n\rrendered_text\x18\x03\x20\x01(\tR\x0crendered\
    TextBo\x82\xb5\x18kText\x20rendered\x20in\x20the\x20requested\x20languag\
    e,\x20complete\x20with\x20variable\x20substitutions,\x20if\x20a\x20langu\
    age\x20was\x20specified.\"\xb5\x04\n\x1dCGameNotifications_UserStatus\
    \x12:\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamidB\x20\x82\xb5\x18\x1c\
    The\x20specific\x20user's\x20steamid.\x12\xab\x01\n\x05state\x18\x02\x20\
    \x01(\tR\x05stateB\x94\x01\x82\xb5\x18\x8f\x01The\x20user's\x20state.\
    \x20\x20ready\x20--\x20the\x20user\x20is\x20ready\x20to\x20play.\x20\x20\
    waiting\x20--\x20The\x20game\x20is\x20waiting\x20on\x20an\x20action\x20f\
    rom\x20the\x20user.\x20completed,\x20the\x20game\x20is\x20over.\x12\x8b\
    \x01\n\x05title\x18\x03\x20\x01(\x0b2!.CGameNotifications_LocalizedTextR\
    \x05titleBR\x82\xb5\x18NTitle\x20of\x20the\x20session\x20to\x20display\
    \x20to\x20this\x20user\x20in\x20their\x20list\x20of\x20active\x20session\
    s.\x12\x9b\x01\n\x07message\x18\x04\x20\x01(\x0b2!.CGameNotifications_Lo\
    calizedTextR\x07messageB^\x82\xb5\x18ZSubtitle\x20of\x20the\x20session\
    \x20to\x20display\x20to\x20this\x20user\x20user\x20within\x20their\x20li\
    st\x20of\x20active\x20sessions.\"\xbb\x05\n(CGameNotifications_CreateSes\
    sion_Request\x12>\n\x05appid\x18\x01\x20\x01(\rR\x05appidB(\x82\xb5\x18$\
    The\x20appid\x20to\x20create\x20the\x20session\x20for.\x12\x88\x01\n\x07\
    context\x18\x02\x20\x01(\x04R\x07contextBn\x82\xb5\x18jGame-specified\
    \x20context\x20value\x20the\x20game\x20can\x20used\x20to\x20associate\
    \x20the\x20session\x20with\x20some\x20object\x20on\x20their\x20backend.\
    \x12\x8a\x01\n\x05title\x18\x03\x20\x01(\x0b2!.CGameNotifications_Locali\
    zedTextR\x05titleBQ\x82\xb5\x18MThe\x20title\x20of\x20the\x20session\x20\
    to\x20be\x20displayed\x20within\x20each\x20user's\x20list\x20of\x20sessi\
    ons.\x12h\n\x05users\x18\x04\x20\x03(\x0b2\x1e.CGameNotifications_UserSt\
    atusR\x05usersB2\x82\xb5\x18.The\x20initial\x20state\x20of\x20all\x20use\
    rs\x20in\x20the\x20session.\x12\xcc\x01\n\x07steamid\x18\x05\x20\x01(\
    \x06R\x07steamidB\xb1\x01\x82\xb5\x18\xac\x01(Optional)\x20steamid\x20to\
    \x20make\x20the\x20request\x20on\x20behalf\x20of\x20--\x20if\x20specifie\
    d,\x20the\x20user\x20must\x20be\x20in\x20the\x20session\x20and\x20all\
    \x20users\x20being\x20added\x20to\x20the\x20session\x20must\x20be\x20fri\
    ends\x20with\x20the\x20user.\"t\n)CGameNotifications_CreateSession_Respo\
    nse\x12G\n\tsessionid\x18\x01\x20\x01(\x04R\tsessionidB)\x82\xb5\x18%The\
    \x20sessionid\x20of\x20the\x20created\x20session.\"\xab\x02\n(CGameNotif\
    ications_DeleteSession_Request\x12:\n\tsessionid\x18\x01\x20\x01(\x04R\t\
    sessionidB\x1c\x82\xb5\x18\x18The\x20sessionid\x20to\x20delete.\x12=\n\
    \x05appid\x18\x02\x20\x01(\rR\x05appidB'\x82\xb5\x18#The\x20appid\x20of\
    \x20the\x20session\x20to\x20delete.\x12\x83\x01\n\x07steamid\x18\x03\x20\
    \x01(\x06R\x07steamidBi\x82\xb5\x18e(Optional)\x20steamid\x20to\x20make\
    \x20the\x20request\x20on\x20behalf\x20of\x20--\x20if\x20specified,\x20th\
    e\x20user\x20must\x20be\x20in\x20the\x20session.\"+\n)CGameNotifications\
    _DeleteSession_Response\"\xe6\x05\n(CGameNotifications_UpdateSession_Req\
    uest\x12:\n\tsessionid\x18\x01\x20\x01(\x04R\tsessionidB\x1c\x82\xb5\x18\
    \x18The\x20sessionid\x20to\x20update.\x12=\n\x05appid\x18\x02\x20\x01(\r\
    R\x05appidB'\x82\xb5\x18#The\x20appid\x20of\x20the\x20session\x20to\x20u\
    pdate.\x12\x97\x01\n\x05title\x18\x03\x20\x01(\x0b2!.CGameNotifications_\
    LocalizedTextR\x05titleB^\x82\xb5\x18Z(Optional)\x20The\x20new\x20title\
    \x20of\x20the\x20session.\x20\x20If\x20not\x20specified,\x20the\x20title\
    \x20will\x20not\x20be\x20changed.\x12\xd5\x01\n\x05users\x18\x04\x20\x03\
    (\x0b2\x1e.CGameNotifications_UserStatusR\x05usersB\x9e\x01\x82\xb5\x18\
    \x99\x01(Optional)\x20A\x20list\x20of\x20users\x20whose\x20state\x20will\
    \x20be\x20updated\x20to\x20reflect\x20the\x20given\x20state.\x20If\x20th\
    e\x20users\x20are\x20not\x20already\x20in\x20the\x20session,\x20they\x20\
    will\x20be\x20added\x20to\x20it.\x12\xcc\x01\n\x07steamid\x18\x06\x20\
    \x01(\x06R\x07steamidB\xb1\x01\x82\xb5\x18\xac\x01(Optional)\x20steamid\
    \x20to\x20make\x20the\x20request\x20on\x20behalf\x20of\x20--\x20if\x20sp\
    ecified,\x20the\x20user\x20must\x20be\x20in\x20the\x20session\x20and\x20\
    all\x20users\x20being\x20added\x20to\x20the\x20session\x20must\x20be\x20\
    friends\x20with\x20the\x20user.\"+\n)CGameNotifications_UpdateSession_Re\
    sponse\"\xe3\x04\n,CGameNotifications_EnumerateSessions_Request\x12\x85\
    \x01\n\x05appid\x18\x01\x20\x01(\rR\x05appidBo\x82\xb5\x18kThe\x20sessio\
    nid\x20to\x20request\x20details\x20for.\x20Optional.\x20If\x20not\x20spe\
    cified,\x20all\x20the\x20user's\x20sessions\x20will\x20be\x20returned.\
    \x12\xa6\x01\n\x19include_all_user_messages\x18\x03\x20\x01(\x08R\x16inc\
    ludeAllUserMessagesBk\x82\xb5\x18g(Optional)\x20Boolean\x20determining\
    \x20whether\x20the\x20message\x20for\x20all\x20users\x20should\x20be\x20\
    included.\x20Defaults\x20to\x20false.\x12\xb3\x01\n\x19include_auth_user\
    _message\x18\x04\x20\x01(\x08R\x16includeAuthUserMessageBx\x82\xb5\x18t(\
    Optional)\x20Boolean\x20determining\x20whether\x20the\x20message\x20for\
    \x20the\x20authenticated\x20user\x20should\x20be\x20included.\x20Default\
    s\x20to\x20false.\x12L\n\x08language\x18\x05\x20\x01(\tR\x08languageB0\
    \x82\xb5\x18,(Optional)\x20Language\x20to\x20localize\x20the\x20text\x20\
    in.\"\x8c\x05\n\x1aCGameNotifications_Session\x12A\n\tsessionid\x18\x01\
    \x20\x01(\x04R\tsessionidB#\x82\xb5\x18\x1fThe\x20sessionid\x20for\x20th\
    is\x20session.\x124\n\x05appid\x18\x02\x20\x01(\x04R\x05appidB\x1e\x82\
    \xb5\x18\x1aThe\x20appid\x20for\x20the\x20session.\x12\x88\x01\n\x07cont\
    ext\x18\x03\x20\x01(\x04R\x07contextBn\x82\xb5\x18jGame-specified\x20con\
    text\x20value\x20the\x20game\x20can\x20used\x20to\x20associate\x20the\
    \x20session\x20with\x20some\x20object\x20on\x20their\x20backend.\x12_\n\
    \x05title\x18\x04\x20\x01(\x0b2!.CGameNotifications_LocalizedTextR\x05ti\
    tleB&\x82\xb5\x18\"The\x20current\x20title\x20for\x20the\x20session.\x12\
    H\n\x0ctime_created\x18\x05\x20\x01(\rR\x0btimeCreatedB%\x82\xb5\x18!The\
    \x20time\x20the\x20session\x20was\x20created.\x12M\n\x0ctime_updated\x18\
    \x06\x20\x01(\rR\x0btimeUpdatedB*\x82\xb5\x18&The\x20last\x20time\x20the\
    \x20session\x20was\x20updated.\x12p\n\x0buser_status\x18\x07\x20\x03(\
    \x0b2\x1e.CGameNotifications_UserStatusR\nuserStatusB/\x82\xb5\x18+The\
    \x20status\x20of\x20all\x20the\x20users\x20in\x20the\x20session.\"\x8c\
    \x01\n-CGameNotifications_EnumerateSessions_Response\x12[\n\x08sessions\
    \x18\x01\x20\x03(\x0b2\x1b.CGameNotifications_SessionR\x08sessionsB\"\
    \x82\xb5\x18\x1eA\x20list\x20of\x20the\x20user's\x20sessions.\"\x94\x04\
    \n,CGameNotifications_GetSessionDetails_Request\x12Z\n\x08sessions\x18\
    \x01\x20\x03(\x0b2>.CGameNotifications_GetSessionDetails_Request.Request\
    edSessionR\x08sessions\x125\n\x05appid\x18\x02\x20\x01(\rR\x05appidB\x1f\
    \x82\xb5\x18\x1bThe\x20appid\x20for\x20the\x20sessions.\x12A\n\x08langua\
    ge\x18\x03\x20\x01(\tR\x08languageB%\x82\xb5\x18!Language\x20to\x20local\
    ize\x20the\x20text\x20in.\x1a\x8d\x02\n\x10RequestedSession\x12C\n\tsess\
    ionid\x18\x01\x20\x01(\x04R\tsessionidB%\x82\xb5\x18!The\x20sessionid\
    \x20to\x20get\x20details\x20for.\x12\xb3\x01\n\x19include_auth_user_mess\
    age\x18\x03\x20\x01(\x08R\x16includeAuthUserMessageBx\x82\xb5\x18t(Optio\
    nal)\x20Boolean\x20determining\x20whether\x20the\x20message\x20for\x20th\
    e\x20authenticated\x20user\x20should\x20be\x20included.\x20Defaults\x20t\
    o\x20false.\"\x89\x01\n-CGameNotifications_GetSessionDetails_Response\
    \x12X\n\x08sessions\x18\x01\x20\x03(\x0b2\x1b.CGameNotifications_Session\
    R\x08sessionsB\x1f\x82\xb5\x18\x1bThe\x20details\x20of\x20the\x20session\
    .\"\xc3\x01\n\x18GameNotificationSettings\x12>\n\x05appid\x18\x01\x20\
    \x01(\rR\x05appidB(\x82\xb5\x18$The\x20appid\x20to\x20create\x20the\x20s\
    ession\x20for.\x12g\n\x13allow_notifications\x18\x02\x20\x01(\x08R\x12al\
    lowNotificationsB6\x82\xb5\x182Whether\x20the\x20user\x20allows\x20notif\
    ication\x20for\x20this\x20app.\"\x90\x01\n5CGameNotifications_UpdateNoti\
    ficationSettings_Request\x12W\n\x1agame_notification_settings\x18\x01\
    \x20\x03(\x0b2\x19.GameNotificationSettingsR\x18gameNotificationSettings\
    \"8\n6CGameNotifications_UpdateNotificationSettings_Response\"\xd6\x01\n\
    8CGameNotifications_OnNotificationsRequested_Notification\x12W\n\x07stea\
    mid\x18\x01\x20\x01(\x06R\x07steamidB=\x82\xb5\x189steamid\x20of\x20the\
    \x20user\x20who\x20notifications\x20were\x20requested\x20for.\x12A\n\x05\
    appid\x18\x02\x20\x01(\rR\x05appidB+\x82\xb5\x18'The\x20appid\x20that\
    \x20requested\x20notifications.\"\xea\x03\n3CGameNotifications_OnUserSta\
    tusChanged_Notification\x12G\n\x07steamid\x18\x01\x20\x01(\x06R\x07steam\
    idB-\x82\xb5\x18)steamid\x20of\x20the\x20user\x20whose\x20status\x20chan\
    ged.\x12c\n\tsessionid\x18\x02\x20\x01(\x04R\tsessionidBE\x82\xb5\x18ATh\
    e\x20sessionid\x20of\x20the\x20session\x20where\x20the\x20user's\x20stat\
    us\x20was\x20changed.\x12S\n\x05appid\x18\x03\x20\x01(\rR\x05appidB=\x82\
    \xb5\x189The\x20appid\x20of\x20the\x20session\x20where\x20the\x20user's\
    \x20status\x20changed.\x12^\n\x06status\x18\x04\x20\x01(\x0b2\x1e.CGameN\
    otifications_UserStatusR\x06statusB&\x82\xb5\x18\"(Optional)\x20New\x20s\
    tatus\x20of\x20the\x20user.\x12P\n\x07removed\x18\x05\x20\x01(\x08R\x07r\
    emovedB6\x82\xb5\x182(Optional)\x20User\x20has\x20been\x20removed\x20fro\
    m\x20the\x20session.2\xa6\x08\n\x11GameNotifications\x12\x8d\x01\n\x11Us\
    erCreateSession\x12).CGameNotifications_CreateSession_Request\x1a*.CGame\
    Notifications_CreateSession_Response\"!\x82\xb5\x18\x1dCreates\x20an\x20\
    async\x20game\x20session\x12\x8d\x01\n\x11UserDeleteSession\x12).CGameNo\
    tifications_DeleteSession_Request\x1a*.CGameNotifications_DeleteSession_\
    Response\"!\x82\xb5\x18\x1dDeletes\x20an\x20async\x20game\x20session\x12\
    \x8d\x01\n\x11UserUpdateSession\x12).CGameNotifications_UpdateSession_Re\
    quest\x1a*.CGameNotifications_UpdateSession_Response\"!\x82\xb5\x18\x1dU\
    pdates\x20an\x20async\x20game\x20session\x12\x94\x01\n\x11EnumerateSessi\
    ons\x12-.CGameNotifications_EnumerateSessions_Request\x1a..CGameNotifica\
    tions_EnumerateSessions_Response\"\x20\x82\xb5\x18\x1cEnumerates\x20a\
    \x20user's\x20sessions\x12\x9e\x01\n\x11GetSessionDetails\x12-.CGameNoti\
    fications_GetSessionDetails_Request\x1a..CGameNotifications_GetSessionDe\
    tails_Response\"*\x82\xb5\x18&Get\x20the\x20details\x20for\x20a\x20speci\
    fic\x20session\x12\xd6\x01\n\x1aUpdateNotificationSettings\x126.CGameNot\
    ifications_UpdateNotificationSettings_Request\x1a7.CGameNotifications_Up\
    dateNotificationSettings_Response\"G\x82\xb5\x18CUpdates\x20whether\x20a\
    \x20user\x20allows\x20game\x20notifications\x20for\x20a\x20specific\x20a\
    pp\x1aP\x82\xb5\x18LA\x20service\x20for\x20functions\x20related\x20to\
    \x20the\x20asyncronous\x20game\x20notification\x20server.2\xdf\x02\n\x17\
    GameNotificationsClient\x12\x95\x01\n\x18OnNotificationsRequested\x129.C\
    GameNotifications_OnNotificationsRequested_Notification\x1a\x0b.NoRespon\
    se\"1\x82\xb5\x18-Requests\x20that\x20the\x20user\x20opt\x20into\x20noti\
    fications\x12\x8d\x01\n\x13OnUserStatusChanged\x124.CGameNotifications_O\
    nUserStatusChanged_Notification\x1a\x0b.NoResponse\"3\x82\xb5\x18/Notifi\
    cation\x20that\x20the\x20user's\x20status\x20has\x20changed\x1a\x1c\x82\
    \xb5\x18\x14Client\x20notifications\xc0\xb5\x18\x02B\x03\x80\x01\x01J\
    \xf92\n\x07\x12\x05\0\0\x9a\x01\x01\n\t\n\x02\x03\0\x12\x03\0\06\n\x08\n\
    \x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\x10\x12\x03\x02\0\"\n\n\n\x02\x04\
    \0\x12\x04\x04\0\x07\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08#\n\x0c\n\
    \x04\x04\0\x02\0\x12\x04\x05\x08\xc8\x01\n\x0c\n\x05\x04\0\x02\0\x04\x12\
    \x03\x05\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x11\x17\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x05\x18\x1b\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x05\x1e\x1f\n\r\n\x05\x04\0\x02\0\x08\x12\x04\x05\x20\xc7\x01\n\x10\
    \n\x08\x04\0\x02\0\x08\xd0\x86\x03\x12\x04\x05!\xc6\x01\n\x0c\n\x04\x04\
    \0\x02\x01\x12\x04\x06\x08\xb9\x01\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\
    \x06\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x11\x17\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x06\x18\x1d\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x06\x20!\n\r\n\x05\x04\0\x02\x01\x08\x12\x04\x06\"\xb8\x01\n\
    \x10\n\x08\x04\0\x02\x01\x08\xd0\x86\x03\x12\x04\x06#\xb7\x01\n\n\n\x02\
    \x04\x01\x12\x04\t\0\r\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08(\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\n\x08l\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\
    \n\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\n\x11\x17\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\n\x18\x1d\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\n\x20!\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03\n\"k\n\x0f\n\x08\x04\
    \x01\x02\0\x08\xd0\x86\x03\x12\x03\n#j\n\x0c\n\x04\x04\x01\x02\x01\x12\
    \x04\x0b\x08\xa9\x01\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x0b\x08\x10\
    \n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x0b\x11-\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x0b.7\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0b:;\
    \n\r\n\x05\x04\x01\x02\x01\x08\x12\x04\x0b<\xa8\x01\n\x10\n\x08\x04\x01\
    \x02\x01\x08\xd0\x86\x03\x12\x04\x0b=\xa7\x01\n\x0c\n\x04\x04\x01\x02\
    \x02\x12\x04\x0c\x08\xaa\x01\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\x0c\
    \x08\x10\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x0c\x11\x17\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03\x0c\x18%\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03\x0c()\n\r\n\x05\x04\x01\x02\x02\x08\x12\x04\x0c*\xa9\x01\n\x10\
    \n\x08\x04\x01\x02\x02\x08\xd0\x86\x03\x12\x04\x0c+\xa8\x01\n\n\n\x02\
    \x04\x02\x12\x04\x0f\0\x14\x01\n\n\n\x03\x04\x02\x01\x12\x03\x0f\x08%\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03\x10\x08V\n\x0c\n\x05\x04\x02\x02\0\x04\
    \x12\x03\x10\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x10\x11\x18\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x10\x19\x20\n\x0c\n\x05\x04\x02\x02\
    \0\x03\x12\x03\x10#$\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03\x10%U\n\x0f\n\
    \x08\x04\x02\x02\0\x08\xd0\x86\x03\x12\x03\x10&T\n\x0c\n\x04\x04\x02\x02\
    \x01\x12\x04\x11\x08\xc6\x01\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x11\
    \x08\x10\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x11\x11\x17\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x03\x11\x18\x1d\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03\x11\x20!\n\r\n\x05\x04\x02\x02\x01\x08\x12\x04\x11\"\xc5\x01\n\
    \x10\n\x08\x04\x02\x02\x01\x08\xd0\x86\x03\x12\x04\x11#\xc4\x01\n\x0c\n\
    \x04\x04\x02\x02\x02\x12\x04\x12\x08\xa0\x01\n\x0c\n\x05\x04\x02\x02\x02\
    \x04\x12\x03\x12\x08\x10\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x12\x11\
    2\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1238\n\x0c\n\x05\x04\x02\x02\
    \x02\x03\x12\x03\x12;<\n\r\n\x05\x04\x02\x02\x02\x08\x12\x04\x12=\x9f\
    \x01\n\x10\n\x08\x04\x02\x02\x02\x08\xd0\x86\x03\x12\x04\x12>\x9e\x01\n\
    \x0c\n\x04\x04\x02\x02\x03\x12\x04\x13\x08\xae\x01\n\x0c\n\x05\x04\x02\
    \x02\x03\x04\x12\x03\x13\x08\x10\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03\
    \x13\x112\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x133:\n\x0c\n\x05\x04\
    \x02\x02\x03\x03\x12\x03\x13=>\n\r\n\x05\x04\x02\x02\x03\x08\x12\x04\x13\
    ?\xad\x01\n\x10\n\x08\x04\x02\x02\x03\x08\xd0\x86\x03\x12\x04\x13@\xac\
    \x01\n\n\n\x02\x04\x03\x12\x04\x16\0\x1c\x01\n\n\n\x03\x04\x03\x01\x12\
    \x03\x16\x080\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x17\x08[\n\x0c\n\x05\x04\
    \x03\x02\0\x04\x12\x03\x17\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\
    \x17\x11\x17\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x17\x18\x1d\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03\x17\x20!\n\x0c\n\x05\x04\x03\x02\0\x08\
    \x12\x03\x17\"Z\n\x0f\n\x08\x04\x03\x02\0\x08\xd0\x86\x03\x12\x03\x17#Y\
    \n\x0c\n\x04\x04\x03\x02\x01\x12\x04\x18\x08\xa3\x01\n\x0c\n\x05\x04\x03\
    \x02\x01\x04\x12\x03\x18\x08\x10\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\
    \x18\x11\x17\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x18\x18\x1f\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03\x18\"#\n\r\n\x05\x04\x03\x02\x01\x08\
    \x12\x04\x18$\xa2\x01\n\x10\n\x08\x04\x03\x02\x01\x08\xd0\x86\x03\x12\
    \x04\x18%\xa1\x01\n\x0c\n\x04\x04\x03\x02\x02\x12\x04\x19\x08\x9f\x01\n\
    \x0c\n\x05\x04\x03\x02\x02\x04\x12\x03\x19\x08\x10\n\x0c\n\x05\x04\x03\
    \x02\x02\x06\x12\x03\x19\x112\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\
    \x1938\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x19;<\n\r\n\x05\x04\x03\
    \x02\x02\x08\x12\x04\x19=\x9e\x01\n\x10\n\x08\x04\x03\x02\x02\x08\xd0\
    \x86\x03\x12\x04\x19>\x9d\x01\n\x0b\n\x04\x04\x03\x02\x03\x12\x03\x1a\
    \x08}\n\x0c\n\x05\x04\x03\x02\x03\x04\x12\x03\x1a\x08\x10\n\x0c\n\x05\
    \x04\x03\x02\x03\x06\x12\x03\x1a\x11/\n\x0c\n\x05\x04\x03\x02\x03\x01\
    \x12\x03\x1a05\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03\x1a89\n\x0c\n\x05\
    \x04\x03\x02\x03\x08\x12\x03\x1a:|\n\x0f\n\x08\x04\x03\x02\x03\x08\xd0\
    \x86\x03\x12\x03\x1a;{\n\x0c\n\x04\x04\x03\x02\x04\x12\x04\x1b\x08\xe6\
    \x01\n\x0c\n\x05\x04\x03\x02\x04\x04\x12\x03\x1b\x08\x10\n\x0c\n\x05\x04\
    \x03\x02\x04\x05\x12\x03\x1b\x11\x18\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\
    \x03\x1b\x19\x20\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03\x1b#$\n\r\n\x05\
    \x04\x03\x02\x04\x08\x12\x04\x1b%\xe5\x01\n\x10\n\x08\x04\x03\x02\x04\
    \x08\xd0\x86\x03\x12\x04\x1b&\xe4\x01\n\n\n\x02\x04\x04\x12\x04\x1e\0\
    \x20\x01\n\n\n\x03\x04\x04\x01\x12\x03\x1e\x081\n\x0b\n\x04\x04\x04\x02\
    \0\x12\x03\x1f\x08`\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03\x1f\x08\x10\n\
    \x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x1f\x11\x17\n\x0c\n\x05\x04\x04\x02\
    \0\x01\x12\x03\x1f\x18!\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1f$%\n\
    \x0c\n\x05\x04\x04\x02\0\x08\x12\x03\x1f&_\n\x0f\n\x08\x04\x04\x02\0\x08\
    \xd0\x86\x03\x12\x03\x1f'^\n\n\n\x02\x04\x05\x12\x04\"\0&\x01\n\n\n\x03\
    \x04\x05\x01\x12\x03\"\x080\n\x0b\n\x04\x04\x05\x02\0\x12\x03#\x08S\n\
    \x0c\n\x05\x04\x05\x02\0\x04\x12\x03#\x08\x10\n\x0c\n\x05\x04\x05\x02\0\
    \x05\x12\x03#\x11\x17\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03#\x18!\n\x0c\
    \n\x05\x04\x05\x02\0\x03\x12\x03#$%\n\x0c\n\x05\x04\x05\x02\0\x08\x12\
    \x03#&R\n\x0f\n\x08\x04\x05\x02\0\x08\xd0\x86\x03\x12\x03#'Q\n\x0b\n\x04\
    \x04\x05\x02\x01\x12\x03$\x08Z\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03$\
    \x08\x10\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03$\x11\x17\n\x0c\n\x05\
    \x04\x05\x02\x01\x01\x12\x03$\x18\x1d\n\x0c\n\x05\x04\x05\x02\x01\x03\
    \x12\x03$\x20!\n\x0c\n\x05\x04\x05\x02\x01\x08\x12\x03$\"Y\n\x0f\n\x08\
    \x04\x05\x02\x01\x08\xd0\x86\x03\x12\x03$#X\n\x0c\n\x04\x04\x05\x02\x02\
    \x12\x04%\x08\x9f\x01\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\x03%\x08\x10\n\
    \x0c\n\x05\x04\x05\x02\x02\x05\x12\x03%\x11\x18\n\x0c\n\x05\x04\x05\x02\
    \x02\x01\x12\x03%\x19\x20\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03%#$\n\r\
    \n\x05\x04\x05\x02\x02\x08\x12\x04%%\x9e\x01\n\x10\n\x08\x04\x05\x02\x02\
    \x08\xd0\x86\x03\x12\x04%&\x9d\x01\n\n\n\x02\x04\x06\x12\x04(\0)\x01\n\n\
    \n\x03\x04\x06\x01\x12\x03(\x081\n\n\n\x02\x04\x07\x12\x04+\01\x01\n\n\n\
    \x03\x04\x07\x01\x12\x03+\x080\n\x0b\n\x04\x04\x07\x02\0\x12\x03,\x08S\n\
    \x0c\n\x05\x04\x07\x02\0\x04\x12\x03,\x08\x10\n\x0c\n\x05\x04\x07\x02\0\
    \x05\x12\x03,\x11\x17\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03,\x18!\n\x0c\
    \n\x05\x04\x07\x02\0\x03\x12\x03,$%\n\x0c\n\x05\x04\x07\x02\0\x08\x12\
    \x03,&R\n\x0f\n\x08\x04\x07\x02\0\x08\xd0\x86\x03\x12\x03,'Q\n\x0b\n\x04\
    \x04\x07\x02\x01\x12\x03-\x08Z\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03-\
    \x08\x10\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03-\x11\x17\n\x0c\n\x05\
    \x04\x07\x02\x01\x01\x12\x03-\x18\x1d\n\x0c\n\x05\x04\x07\x02\x01\x03\
    \x12\x03-\x20!\n\x0c\n\x05\x04\x07\x02\x01\x08\x12\x03-\"Y\n\x0f\n\x08\
    \x04\x07\x02\x01\x08\xd0\x86\x03\x12\x03-#X\n\x0c\n\x04\x04\x07\x02\x02\
    \x12\x04.\x08\xac\x01\n\x0c\n\x05\x04\x07\x02\x02\x04\x12\x03.\x08\x10\n\
    \x0c\n\x05\x04\x07\x02\x02\x06\x12\x03.\x112\n\x0c\n\x05\x04\x07\x02\x02\
    \x01\x12\x03.38\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03.;<\n\r\n\x05\x04\
    \x07\x02\x02\x08\x12\x04.=\xab\x01\n\x10\n\x08\x04\x07\x02\x02\x08\xd0\
    \x86\x03\x12\x04.>\xaa\x01\n\x0c\n\x04\x04\x07\x02\x03\x12\x04/\x08\xe8\
    \x01\n\x0c\n\x05\x04\x07\x02\x03\x04\x12\x03/\x08\x10\n\x0c\n\x05\x04\
    \x07\x02\x03\x06\x12\x03/\x11/\n\x0c\n\x05\x04\x07\x02\x03\x01\x12\x03/0\
    5\n\x0c\n\x05\x04\x07\x02\x03\x03\x12\x03/89\n\r\n\x05\x04\x07\x02\x03\
    \x08\x12\x04/:\xe7\x01\n\x10\n\x08\x04\x07\x02\x03\x08\xd0\x86\x03\x12\
    \x04/;\xe6\x01\n\x0c\n\x04\x04\x07\x02\x04\x12\x040\x08\xe6\x01\n\x0c\n\
    \x05\x04\x07\x02\x04\x04\x12\x030\x08\x10\n\x0c\n\x05\x04\x07\x02\x04\
    \x05\x12\x030\x11\x18\n\x0c\n\x05\x04\x07\x02\x04\x01\x12\x030\x19\x20\n\
    \x0c\n\x05\x04\x07\x02\x04\x03\x12\x030#$\n\r\n\x05\x04\x07\x02\x04\x08\
    \x12\x040%\xe5\x01\n\x10\n\x08\x04\x07\x02\x04\x08\xd0\x86\x03\x12\x040&\
    \xe4\x01\n\n\n\x02\x04\x08\x12\x043\04\x01\n\n\n\x03\x04\x08\x01\x12\x03\
    3\x081\n\n\n\x02\x04\t\x12\x046\0;\x01\n\n\n\x03\x04\t\x01\x12\x036\x084\
    \n\x0c\n\x04\x04\t\x02\0\x12\x047\x08\xa2\x01\n\x0c\n\x05\x04\t\x02\0\
    \x04\x12\x037\x08\x10\n\x0c\n\x05\x04\t\x02\0\x05\x12\x037\x11\x17\n\x0c\
    \n\x05\x04\t\x02\0\x01\x12\x037\x18\x1d\n\x0c\n\x05\x04\t\x02\0\x03\x12\
    \x037\x20!\n\r\n\x05\x04\t\x02\0\x08\x12\x047\"\xa1\x01\n\x10\n\x08\x04\
    \t\x02\0\x08\xd0\x86\x03\x12\x047#\xa0\x01\n\x0c\n\x04\x04\t\x02\x01\x12\
    \x048\x08\xb0\x01\n\x0c\n\x05\x04\t\x02\x01\x04\x12\x038\x08\x10\n\x0c\n\
    \x05\x04\t\x02\x01\x05\x12\x038\x11\x15\n\x0c\n\x05\x04\t\x02\x01\x01\
    \x12\x038\x16/\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03823\n\r\n\x05\x04\t\
    \x02\x01\x08\x12\x0484\xaf\x01\n\x10\n\x08\x04\t\x02\x01\x08\xd0\x86\x03\
    \x12\x0485\xae\x01\n\x0c\n\x04\x04\t\x02\x02\x12\x049\x08\xbd\x01\n\x0c\
    \n\x05\x04\t\x02\x02\x04\x12\x039\x08\x10\n\x0c\n\x05\x04\t\x02\x02\x05\
    \x12\x039\x11\x15\n\x0c\n\x05\x04\t\x02\x02\x01\x12\x039\x16/\n\x0c\n\
    \x05\x04\t\x02\x02\x03\x12\x03923\n\r\n\x05\x04\t\x02\x02\x08\x12\x0494\
    \xbc\x01\n\x10\n\x08\x04\t\x02\x02\x08\xd0\x86\x03\x12\x0495\xbb\x01\n\
    \x0b\n\x04\x04\t\x02\x03\x12\x03:\x08f\n\x0c\n\x05\x04\t\x02\x03\x04\x12\
    \x03:\x08\x10\n\x0c\n\x05\x04\t\x02\x03\x05\x12\x03:\x11\x17\n\x0c\n\x05\
    \x04\t\x02\x03\x01\x12\x03:\x18\x20\n\x0c\n\x05\x04\t\x02\x03\x03\x12\
    \x03:#$\n\x0c\n\x05\x04\t\x02\x03\x08\x12\x03:%e\n\x0f\n\x08\x04\t\x02\
    \x03\x08\xd0\x86\x03\x12\x03:&d\n\n\n\x02\x04\n\x12\x04=\0E\x01\n\n\n\
    \x03\x04\n\x01\x12\x03=\x08\"\n\x0b\n\x04\x04\n\x02\0\x12\x03>\x08Z\n\
    \x0c\n\x05\x04\n\x02\0\x04\x12\x03>\x08\x10\n\x0c\n\x05\x04\n\x02\0\x05\
    \x12\x03>\x11\x17\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03>\x18!\n\x0c\n\x05\
    \x04\n\x02\0\x03\x12\x03>$%\n\x0c\n\x05\x04\n\x02\0\x08\x12\x03>&Y\n\x0f\
    \n\x08\x04\n\x02\0\x08\xd0\x86\x03\x12\x03>'X\n\x0b\n\x04\x04\n\x02\x01\
    \x12\x03?\x08Q\n\x0c\n\x05\x04\n\x02\x01\x04\x12\x03?\x08\x10\n\x0c\n\
    \x05\x04\n\x02\x01\x05\x12\x03?\x11\x17\n\x0c\n\x05\x04\n\x02\x01\x01\
    \x12\x03?\x18\x1d\n\x0c\n\x05\x04\n\x02\x01\x03\x12\x03?\x20!\n\x0c\n\
    \x05\x04\n\x02\x01\x08\x12\x03?\"P\n\x0f\n\x08\x04\n\x02\x01\x08\xd0\x86\
    \x03\x12\x03?#O\n\x0c\n\x04\x04\n\x02\x02\x12\x04@\x08\xa3\x01\n\x0c\n\
    \x05\x04\n\x02\x02\x04\x12\x03@\x08\x10\n\x0c\n\x05\x04\n\x02\x02\x05\
    \x12\x03@\x11\x17\n\x0c\n\x05\x04\n\x02\x02\x01\x12\x03@\x18\x1f\n\x0c\n\
    \x05\x04\n\x02\x02\x03\x12\x03@\"#\n\r\n\x05\x04\n\x02\x02\x08\x12\x04@$\
    \xa2\x01\n\x10\n\x08\x04\n\x02\x02\x08\xd0\x86\x03\x12\x04@%\xa1\x01\n\
    \x0b\n\x04\x04\n\x02\x03\x12\x03A\x08t\n\x0c\n\x05\x04\n\x02\x03\x04\x12\
    \x03A\x08\x10\n\x0c\n\x05\x04\n\x02\x03\x06\x12\x03A\x112\n\x0c\n\x05\
    \x04\n\x02\x03\x01\x12\x03A38\n\x0c\n\x05\x04\n\x02\x03\x03\x12\x03A;<\n\
    \x0c\n\x05\x04\n\x02\x03\x08\x12\x03A=s\n\x0f\n\x08\x04\n\x02\x03\x08\
    \xd0\x86\x03\x12\x03A>r\n\x0b\n\x04\x04\n\x02\x04\x12\x03B\x08_\n\x0c\n\
    \x05\x04\n\x02\x04\x04\x12\x03B\x08\x10\n\x0c\n\x05\x04\n\x02\x04\x05\
    \x12\x03B\x11\x17\n\x0c\n\x05\x04\n\x02\x04\x01\x12\x03B\x18$\n\x0c\n\
    \x05\x04\n\x02\x04\x03\x12\x03B'(\n\x0c\n\x05\x04\n\x02\x04\x08\x12\x03B\
    )^\n\x0f\n\x08\x04\n\x02\x04\x08\xd0\x86\x03\x12\x03B*]\n\x0b\n\x04\x04\
    \n\x02\x05\x12\x03C\x08d\n\x0c\n\x05\x04\n\x02\x05\x04\x12\x03C\x08\x10\
    \n\x0c\n\x05\x04\n\x02\x05\x05\x12\x03C\x11\x17\n\x0c\n\x05\x04\n\x02\
    \x05\x01\x12\x03C\x18$\n\x0c\n\x05\x04\n\x02\x05\x03\x12\x03C'(\n\x0c\n\
    \x05\x04\n\x02\x05\x08\x12\x03C)c\n\x0f\n\x08\x04\n\x02\x05\x08\xd0\x86\
    \x03\x12\x03C*b\n\x0c\n\x04\x04\n\x02\x06\x12\x04D\x08\x80\x01\n\x0c\n\
    \x05\x04\n\x02\x06\x04\x12\x03D\x08\x10\n\x0c\n\x05\x04\n\x02\x06\x06\
    \x12\x03D\x11/\n\x0c\n\x05\x04\n\x02\x06\x01\x12\x03D0;\n\x0c\n\x05\x04\
    \n\x02\x06\x03\x12\x03D>?\n\x0c\n\x05\x04\n\x02\x06\x08\x12\x03D@\x7f\n\
    \x0f\n\x08\x04\n\x02\x06\x08\xd0\x86\x03\x12\x03DA~\n\n\n\x02\x04\x0b\
    \x12\x04G\0I\x01\n\n\n\x03\x04\x0b\x01\x12\x03G\x085\n\x0b\n\x04\x04\x0b\
    \x02\0\x12\x03H\x08m\n\x0c\n\x05\x04\x0b\x02\0\x04\x12\x03H\x08\x10\n\
    \x0c\n\x05\x04\x0b\x02\0\x06\x12\x03H\x11,\n\x0c\n\x05\x04\x0b\x02\0\x01\
    \x12\x03H-5\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03H89\n\x0c\n\x05\x04\x0b\
    \x02\0\x08\x12\x03H:l\n\x0f\n\x08\x04\x0b\x02\0\x08\xd0\x86\x03\x12\x03H\
    ;k\n\n\n\x02\x04\x0c\x12\x04K\0T\x01\n\n\n\x03\x04\x0c\x01\x12\x03K\x084\
    \n\x0c\n\x04\x04\x0c\x03\0\x12\x04L\x08O\t\n\x0c\n\x05\x04\x0c\x03\0\x01\
    \x12\x03L\x10\x20\n\r\n\x06\x04\x0c\x03\0\x02\0\x12\x03M\x10d\n\x0e\n\
    \x07\x04\x0c\x03\0\x02\0\x04\x12\x03M\x10\x18\n\x0e\n\x07\x04\x0c\x03\0\
    \x02\0\x05\x12\x03M\x19\x1f\n\x0e\n\x07\x04\x0c\x03\0\x02\0\x01\x12\x03M\
    \x20)\n\x0e\n\x07\x04\x0c\x03\0\x02\0\x03\x12\x03M,-\n\x0e\n\x07\x04\x0c\
    \x03\0\x02\0\x08\x12\x03M.c\n\x11\n\n\x04\x0c\x03\0\x02\0\x08\xd0\x86\
    \x03\x12\x03M/b\n\x0e\n\x06\x04\x0c\x03\0\x02\x01\x12\x04N\x10\xc5\x01\n\
    \x0e\n\x07\x04\x0c\x03\0\x02\x01\x04\x12\x03N\x10\x18\n\x0e\n\x07\x04\
    \x0c\x03\0\x02\x01\x05\x12\x03N\x19\x1d\n\x0e\n\x07\x04\x0c\x03\0\x02\
    \x01\x01\x12\x03N\x1e7\n\x0e\n\x07\x04\x0c\x03\0\x02\x01\x03\x12\x03N:;\
    \n\x0f\n\x07\x04\x0c\x03\0\x02\x01\x08\x12\x04N<\xc4\x01\n\x12\n\n\x04\
    \x0c\x03\0\x02\x01\x08\xd0\x86\x03\x12\x04N=\xc3\x01\n\x0b\n\x04\x04\x0c\
    \x02\0\x12\x03Q\x08]\n\x0c\n\x05\x04\x0c\x02\0\x04\x12\x03Q\x08\x10\n\
    \x0c\n\x05\x04\x0c\x02\0\x06\x12\x03Q\x11O\n\x0c\n\x05\x04\x0c\x02\0\x01\
    \x12\x03QPX\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03Q[\\\n\x0b\n\x04\x04\
    \x0c\x02\x01\x12\x03R\x08R\n\x0c\n\x05\x04\x0c\x02\x01\x04\x12\x03R\x08\
    \x10\n\x0c\n\x05\x04\x0c\x02\x01\x05\x12\x03R\x11\x17\n\x0c\n\x05\x04\
    \x0c\x02\x01\x01\x12\x03R\x18\x1d\n\x0c\n\x05\x04\x0c\x02\x01\x03\x12\
    \x03R\x20!\n\x0c\n\x05\x04\x0c\x02\x01\x08\x12\x03R\"Q\n\x0f\n\x08\x04\
    \x0c\x02\x01\x08\xd0\x86\x03\x12\x03R#P\n\x0b\n\x04\x04\x0c\x02\x02\x12\
    \x03S\x08[\n\x0c\n\x05\x04\x0c\x02\x02\x04\x12\x03S\x08\x10\n\x0c\n\x05\
    \x04\x0c\x02\x02\x05\x12\x03S\x11\x17\n\x0c\n\x05\x04\x0c\x02\x02\x01\
    \x12\x03S\x18\x20\n\x0c\n\x05\x04\x0c\x02\x02\x03\x12\x03S#$\n\x0c\n\x05\
    \x04\x0c\x02\x02\x08\x12\x03S%Z\n\x0f\n\x08\x04\x0c\x02\x02\x08\xd0\x86\
    \x03\x12\x03S&Y\n\n\n\x02\x04\r\x12\x04V\0X\x01\n\n\n\x03\x04\r\x01\x12\
    \x03V\x085\n\x0b\n\x04\x04\r\x02\0\x12\x03W\x08j\n\x0c\n\x05\x04\r\x02\0\
    \x04\x12\x03W\x08\x10\n\x0c\n\x05\x04\r\x02\0\x06\x12\x03W\x11,\n\x0c\n\
    \x05\x04\r\x02\0\x01\x12\x03W-5\n\x0c\n\x05\x04\r\x02\0\x03\x12\x03W89\n\
    \x0c\n\x05\x04\r\x02\0\x08\x12\x03W:i\n\x0f\n\x08\x04\r\x02\0\x08\xd0\
    \x86\x03\x12\x03W;h\n\n\n\x02\x04\x0e\x12\x04Z\0]\x01\n\n\n\x03\x04\x0e\
    \x01\x12\x03Z\x08\x20\n\x0b\n\x04\x04\x0e\x02\0\x12\x03[\x08[\n\x0c\n\
    \x05\x04\x0e\x02\0\x04\x12\x03[\x08\x10\n\x0c\n\x05\x04\x0e\x02\0\x05\
    \x12\x03[\x11\x17\n\x0c\n\x05\x04\x0e\x02\0\x01\x12\x03[\x18\x1d\n\x0c\n\
    \x05\x04\x0e\x02\0\x03\x12\x03[\x20!\n\x0c\n\x05\x04\x0e\x02\0\x08\x12\
    \x03[\"Z\n\x0f\n\x08\x04\x0e\x02\0\x08\xd0\x86\x03\x12\x03[#Y\n\x0b\n\
    \x04\x04\x0e\x02\x01\x12\x03\\\x08u\n\x0c\n\x05\x04\x0e\x02\x01\x04\x12\
    \x03\\\x08\x10\n\x0c\n\x05\x04\x0e\x02\x01\x05\x12\x03\\\x11\x15\n\x0c\n\
    \x05\x04\x0e\x02\x01\x01\x12\x03\\\x16)\n\x0c\n\x05\x04\x0e\x02\x01\x03\
    \x12\x03\\,-\n\x0c\n\x05\x04\x0e\x02\x01\x08\x12\x03\\.t\n\x0f\n\x08\x04\
    \x0e\x02\x01\x08\xd0\x86\x03\x12\x03\\/s\n\n\n\x02\x04\x0f\x12\x04_\0a\
    \x01\n\n\n\x03\x04\x0f\x01\x12\x03_\x08=\n\x0b\n\x04\x04\x0f\x02\0\x12\
    \x03`\x08J\n\x0c\n\x05\x04\x0f\x02\0\x04\x12\x03`\x08\x10\n\x0c\n\x05\
    \x04\x0f\x02\0\x06\x12\x03`\x11*\n\x0c\n\x05\x04\x0f\x02\0\x01\x12\x03`+\
    E\n\x0c\n\x05\x04\x0f\x02\0\x03\x12\x03`HI\n\n\n\x02\x04\x10\x12\x04c\0d\
    \x01\n\n\n\x03\x04\x10\x01\x12\x03c\x08>\n\n\n\x02\x04\x11\x12\x04f\0i\
    \x01\n\n\n\x03\x04\x11\x01\x12\x03f\x08@\n\x0b\n\x04\x04\x11\x02\0\x12\
    \x03g\x08s\n\x0c\n\x05\x04\x11\x02\0\x04\x12\x03g\x08\x10\n\x0c\n\x05\
    \x04\x11\x02\0\x05\x12\x03g\x11\x18\n\x0c\n\x05\x04\x11\x02\0\x01\x12\
    \x03g\x19\x20\n\x0c\n\x05\x04\x11\x02\0\x03\x12\x03g#$\n\x0c\n\x05\x04\
    \x11\x02\0\x08\x12\x03g%r\n\x0f\n\x08\x04\x11\x02\0\x08\xd0\x86\x03\x12\
    \x03g&q\n\x0b\n\x04\x04\x11\x02\x01\x12\x03h\x08^\n\x0c\n\x05\x04\x11\
    \x02\x01\x04\x12\x03h\x08\x10\n\x0c\n\x05\x04\x11\x02\x01\x05\x12\x03h\
    \x11\x17\n\x0c\n\x05\x04\x11\x02\x01\x01\x12\x03h\x18\x1d\n\x0c\n\x05\
    \x04\x11\x02\x01\x03\x12\x03h\x20!\n\x0c\n\x05\x04\x11\x02\x01\x08\x12\
    \x03h\"]\n\x0f\n\x08\x04\x11\x02\x01\x08\xd0\x86\x03\x12\x03h#\\\n\n\n\
    \x02\x04\x12\x12\x04k\0q\x01\n\n\n\x03\x04\x12\x01\x12\x03k\x08;\n\x0b\n\
    \x04\x04\x12\x02\0\x12\x03l\x08c\n\x0c\n\x05\x04\x12\x02\0\x04\x12\x03l\
    \x08\x10\n\x0c\n\x05\x04\x12\x02\0\x05\x12\x03l\x11\x18\n\x0c\n\x05\x04\
    \x12\x02\0\x01\x12\x03l\x19\x20\n\x0c\n\x05\x04\x12\x02\0\x03\x12\x03l#$\
    \n\x0c\n\x05\x04\x12\x02\0\x08\x12\x03l%b\n\x0f\n\x08\x04\x12\x02\0\x08\
    \xd0\x86\x03\x12\x03l&a\n\x0b\n\x04\x04\x12\x02\x01\x12\x03m\x08|\n\x0c\
    \n\x05\x04\x12\x02\x01\x04\x12\x03m\x08\x10\n\x0c\n\x05\x04\x12\x02\x01\
    \x05\x12\x03m\x11\x17\n\x0c\n\x05\x04\x12\x02\x01\x01\x12\x03m\x18!\n\
    \x0c\n\x05\x04\x12\x02\x01\x03\x12\x03m$%\n\x0c\n\x05\x04\x12\x02\x01\
    \x08\x12\x03m&{\n\x0f\n\x08\x04\x12\x02\x01\x08\xd0\x86\x03\x12\x03m'z\n\
    \x0b\n\x04\x04\x12\x02\x02\x12\x03n\x08p\n\x0c\n\x05\x04\x12\x02\x02\x04\
    \x12\x03n\x08\x10\n\x0c\n\x05\x04\x12\x02\x02\x05\x12\x03n\x11\x17\n\x0c\
    \n\x05\x04\x12\x02\x02\x01\x12\x03n\x18\x1d\n\x0c\n\x05\x04\x12\x02\x02\
    \x03\x12\x03n\x20!\n\x0c\n\x05\x04\x12\x02\x02\x08\x12\x03n\"o\n\x0f\n\
    \x08\x04\x12\x02\x02\x08\xd0\x86\x03\x12\x03n#n\n\x0b\n\x04\x04\x12\x02\
    \x03\x12\x03o\x08r\n\x0c\n\x05\x04\x12\x02\x03\x04\x12\x03o\x08\x10\n\
    \x0c\n\x05\x04\x12\x02\x03\x06\x12\x03o\x11/\n\x0c\n\x05\x04\x12\x02\x03\
    \x01\x12\x03o06\n\x0c\n\x05\x04\x12\x02\x03\x03\x12\x03o9:\n\x0c\n\x05\
    \x04\x12\x02\x03\x08\x12\x03o;q\n\x0f\n\x08\x04\x12\x02\x03\x08\xd0\x86\
    \x03\x12\x03o<p\n\x0b\n\x04\x04\x12\x02\x04\x12\x03p\x08i\n\x0c\n\x05\
    \x04\x12\x02\x04\x04\x12\x03p\x08\x10\n\x0c\n\x05\x04\x12\x02\x04\x05\
    \x12\x03p\x11\x15\n\x0c\n\x05\x04\x12\x02\x04\x01\x12\x03p\x16\x1d\n\x0c\
    \n\x05\x04\x12\x02\x04\x03\x12\x03p\x20!\n\x0c\n\x05\x04\x12\x02\x04\x08\
    \x12\x03p\"h\n\x0f\n\x08\x04\x12\x02\x04\x08\xd0\x86\x03\x12\x03p#g\n\
    \x0b\n\x02\x06\0\x12\x05s\0\x8d\x01\x01\n\n\n\x03\x06\0\x01\x12\x03s\x08\
    \x19\n\n\n\x03\x06\0\x03\x12\x03t\x08v\n\r\n\x06\x06\0\x03\xd0\x86\x03\
    \x12\x03t\x08v\n\x0c\n\x04\x06\0\x02\0\x12\x04v\x08x\t\n\x0c\n\x05\x06\0\
    \x02\0\x01\x12\x03v\x0c\x1d\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03v\x1fH\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x03vS}\n\x0c\n\x05\x06\0\x02\0\x04\x12\
    \x03w\x10N\n\x0f\n\x08\x06\0\x02\0\x04\xd0\x86\x03\x12\x03w\x10N\n\x0c\n\
    \x04\x06\0\x02\x01\x12\x04z\x08|\t\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\
    z\x0c\x1d\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03z\x1fH\n\x0c\n\x05\x06\0\
    \x02\x01\x03\x12\x03zS}\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03{\x10N\n\
    \x0f\n\x08\x06\0\x02\x01\x04\xd0\x86\x03\x12\x03{\x10N\n\r\n\x04\x06\0\
    \x02\x02\x12\x05~\x08\x80\x01\t\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03~\
    \x0c\x1d\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03~\x1fH\n\x0c\n\x05\x06\0\
    \x02\x02\x03\x12\x03~S}\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03\x7f\x10N\n\
    \x0f\n\x08\x06\0\x02\x02\x04\xd0\x86\x03\x12\x03\x7f\x10N\n\x0e\n\x04\
    \x06\0\x02\x03\x12\x06\x82\x01\x08\x84\x01\t\n\r\n\x05\x06\0\x02\x03\x01\
    \x12\x04\x82\x01\x0c\x1d\n\r\n\x05\x06\0\x02\x03\x02\x12\x04\x82\x01\x1f\
    L\n\x0e\n\x05\x06\0\x02\x03\x03\x12\x05\x82\x01W\x85\x01\n\r\n\x05\x06\0\
    \x02\x03\x04\x12\x04\x83\x01\x10M\n\x10\n\x08\x06\0\x02\x03\x04\xd0\x86\
    \x03\x12\x04\x83\x01\x10M\n\x0e\n\x04\x06\0\x02\x04\x12\x06\x86\x01\x08\
    \x88\x01\t\n\r\n\x05\x06\0\x02\x04\x01\x12\x04\x86\x01\x0c\x1d\n\r\n\x05\
    \x06\0\x02\x04\x02\x12\x04\x86\x01\x1fL\n\x0e\n\x05\x06\0\x02\x04\x03\
    \x12\x05\x86\x01W\x85\x01\n\r\n\x05\x06\0\x02\x04\x04\x12\x04\x87\x01\
    \x10W\n\x10\n\x08\x06\0\x02\x04\x04\xd0\x86\x03\x12\x04\x87\x01\x10W\n\
    \x0e\n\x04\x06\0\x02\x05\x12\x06\x8a\x01\x08\x8c\x01\t\n\r\n\x05\x06\0\
    \x02\x05\x01\x12\x04\x8a\x01\x0c&\n\r\n\x05\x06\0\x02\x05\x02\x12\x04\
    \x8a\x01(^\n\x0e\n\x05\x06\0\x02\x05\x03\x12\x05\x8a\x01i\xa0\x01\n\r\n\
    \x05\x06\0\x02\x05\x04\x12\x04\x8b\x01\x10t\n\x10\n\x08\x06\0\x02\x05\
    \x04\xd0\x86\x03\x12\x04\x8b\x01\x10t\n\x0c\n\x02\x06\x01\x12\x06\x8f\
    \x01\0\x9a\x01\x01\n\x0b\n\x03\x06\x01\x01\x12\x04\x8f\x01\x08\x1f\n\x0b\
    \n\x03\x06\x01\x03\x12\x04\x90\x01\x08>\n\x0e\n\x06\x06\x01\x03\xd0\x86\
    \x03\x12\x04\x90\x01\x08>\n\x0b\n\x03\x06\x01\x03\x12\x04\x91\x01\x08K\n\
    \x0e\n\x06\x06\x01\x03\xd8\x86\x03\x12\x04\x91\x01\x08K\n\x0e\n\x04\x06\
    \x01\x02\0\x12\x06\x93\x01\x08\x95\x01\t\n\r\n\x05\x06\x01\x02\0\x01\x12\
    \x04\x93\x01\x0c$\n\r\n\x05\x06\x01\x02\0\x02\x12\x04\x93\x01&_\n\r\n\
    \x05\x06\x01\x02\0\x03\x12\x04\x93\x01ju\n\r\n\x05\x06\x01\x02\0\x04\x12\
    \x04\x94\x01\x10^\n\x10\n\x08\x06\x01\x02\0\x04\xd0\x86\x03\x12\x04\x94\
    \x01\x10^\n\x0e\n\x04\x06\x01\x02\x01\x12\x06\x97\x01\x08\x99\x01\t\n\r\
    \n\x05\x06\x01\x02\x01\x01\x12\x04\x97\x01\x0c\x1f\n\r\n\x05\x06\x01\x02\
    \x01\x02\x12\x04\x97\x01!U\n\r\n\x05\x06\x01\x02\x01\x03\x12\x04\x97\x01\
    `k\n\r\n\x05\x06\x01\x02\x01\x04\x12\x04\x98\x01\x10`\n\x10\n\x08\x06\
    \x01\x02\x01\x04\xd0\x86\x03\x12\x04\x98\x01\x10`\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(20);
            messages.push(CGameNotifications_Variable::generated_message_descriptor_data());
            messages.push(CGameNotifications_LocalizedText::generated_message_descriptor_data());
            messages.push(CGameNotifications_UserStatus::generated_message_descriptor_data());
            messages.push(CGameNotifications_CreateSession_Request::generated_message_descriptor_data());
            messages.push(CGameNotifications_CreateSession_Response::generated_message_descriptor_data());
            messages.push(CGameNotifications_DeleteSession_Request::generated_message_descriptor_data());
            messages.push(CGameNotifications_DeleteSession_Response::generated_message_descriptor_data());
            messages.push(CGameNotifications_UpdateSession_Request::generated_message_descriptor_data());
            messages.push(CGameNotifications_UpdateSession_Response::generated_message_descriptor_data());
            messages.push(CGameNotifications_EnumerateSessions_Request::generated_message_descriptor_data());
            messages.push(CGameNotifications_Session::generated_message_descriptor_data());
            messages.push(CGameNotifications_EnumerateSessions_Response::generated_message_descriptor_data());
            messages.push(CGameNotifications_GetSessionDetails_Request::generated_message_descriptor_data());
            messages.push(CGameNotifications_GetSessionDetails_Response::generated_message_descriptor_data());
            messages.push(GameNotificationSettings::generated_message_descriptor_data());
            messages.push(CGameNotifications_UpdateNotificationSettings_Request::generated_message_descriptor_data());
            messages.push(CGameNotifications_UpdateNotificationSettings_Response::generated_message_descriptor_data());
            messages.push(CGameNotifications_OnNotificationsRequested_Notification::generated_message_descriptor_data());
            messages.push(CGameNotifications_OnUserStatusChanged_Notification::generated_message_descriptor_data());
            messages.push(cgame_notifications_get_session_details_request::RequestedSession::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
