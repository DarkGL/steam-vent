// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_shader.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CShader_RegisterShader_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_RegisterShader_Request {
    // message fields
    // @@protoc_insertion_point(field:CShader_RegisterShader_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CShader_RegisterShader_Request.gpu_desc)
    pub gpu_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_RegisterShader_Request.driver_desc)
    pub driver_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_RegisterShader_Request.shaders)
    pub shaders: ::std::vec::Vec<cshader_register_shader_request::Shader>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_RegisterShader_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_RegisterShader_Request {
    fn default() -> &'a CShader_RegisterShader_Request {
        <CShader_RegisterShader_Request as ::protobuf::Message>::default_instance()
    }
}

impl CShader_RegisterShader_Request {
    pub fn new() -> CShader_RegisterShader_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string gpu_desc = 2;

    pub fn gpu_desc(&self) -> &str {
        match self.gpu_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gpu_desc(&mut self) {
        self.gpu_desc = ::std::option::Option::None;
    }

    pub fn has_gpu_desc(&self) -> bool {
        self.gpu_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gpu_desc(&mut self, v: ::std::string::String) {
        self.gpu_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gpu_desc(&mut self) -> &mut ::std::string::String {
        if self.gpu_desc.is_none() {
            self.gpu_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gpu_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_gpu_desc(&mut self) -> ::std::string::String {
        self.gpu_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string driver_desc = 3;

    pub fn driver_desc(&self) -> &str {
        match self.driver_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_driver_desc(&mut self) {
        self.driver_desc = ::std::option::Option::None;
    }

    pub fn has_driver_desc(&self) -> bool {
        self.driver_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_driver_desc(&mut self, v: ::std::string::String) {
        self.driver_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driver_desc(&mut self) -> &mut ::std::string::String {
        if self.driver_desc.is_none() {
            self.driver_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.driver_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_driver_desc(&mut self) -> ::std::string::String {
        self.driver_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CShader_RegisterShader_Request| { &m.appid },
            |m: &mut CShader_RegisterShader_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gpu_desc",
            |m: &CShader_RegisterShader_Request| { &m.gpu_desc },
            |m: &mut CShader_RegisterShader_Request| { &mut m.gpu_desc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "driver_desc",
            |m: &CShader_RegisterShader_Request| { &m.driver_desc },
            |m: &mut CShader_RegisterShader_Request| { &mut m.driver_desc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "shaders",
            |m: &CShader_RegisterShader_Request| { &m.shaders },
            |m: &mut CShader_RegisterShader_Request| { &mut m.shaders },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CShader_RegisterShader_Request>(
            "CShader_RegisterShader_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CShader_RegisterShader_Request {
    const NAME: &'static str = "CShader_RegisterShader_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.gpu_desc = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.driver_desc = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.shaders.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.driver_desc.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        for value in &self.shaders {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.driver_desc.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.shaders {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_RegisterShader_Request {
        CShader_RegisterShader_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.gpu_desc = ::std::option::Option::None;
        self.driver_desc = ::std::option::Option::None;
        self.shaders.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_RegisterShader_Request {
        static instance: CShader_RegisterShader_Request = CShader_RegisterShader_Request {
            appid: ::std::option::Option::None,
            gpu_desc: ::std::option::Option::None,
            driver_desc: ::std::option::Option::None,
            shaders: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CShader_RegisterShader_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_RegisterShader_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_RegisterShader_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CShader_RegisterShader_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CShader_RegisterShader_Request`
pub mod cshader_register_shader_request {
    // @@protoc_insertion_point(message:CShader_RegisterShader_Request.Shader)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Shader {
        // message fields
        // @@protoc_insertion_point(field:CShader_RegisterShader_Request.Shader.cache_key_sha)
        pub cache_key_sha: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:CShader_RegisterShader_Request.Shader.shader_code_sha)
        pub shader_code_sha: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:CShader_RegisterShader_Request.Shader.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Shader {
        fn default() -> &'a Shader {
            <Shader as ::protobuf::Message>::default_instance()
        }
    }

    impl Shader {
        pub fn new() -> Shader {
            ::std::default::Default::default()
        }

        // optional bytes cache_key_sha = 1;

        pub fn cache_key_sha(&self) -> &[u8] {
            match self.cache_key_sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_cache_key_sha(&mut self) {
            self.cache_key_sha = ::std::option::Option::None;
        }

        pub fn has_cache_key_sha(&self) -> bool {
            self.cache_key_sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cache_key_sha(&mut self, v: ::std::vec::Vec<u8>) {
            self.cache_key_sha = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_cache_key_sha(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.cache_key_sha.is_none() {
                self.cache_key_sha = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.cache_key_sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_cache_key_sha(&mut self) -> ::std::vec::Vec<u8> {
            self.cache_key_sha.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional bytes shader_code_sha = 2;

        pub fn shader_code_sha(&self) -> &[u8] {
            match self.shader_code_sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_shader_code_sha(&mut self) {
            self.shader_code_sha = ::std::option::Option::None;
        }

        pub fn has_shader_code_sha(&self) -> bool {
            self.shader_code_sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_shader_code_sha(&mut self, v: ::std::vec::Vec<u8>) {
            self.shader_code_sha = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_shader_code_sha(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.shader_code_sha.is_none() {
                self.shader_code_sha = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.shader_code_sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_shader_code_sha(&mut self) -> ::std::vec::Vec<u8> {
            self.shader_code_sha.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "cache_key_sha",
                |m: &Shader| { &m.cache_key_sha },
                |m: &mut Shader| { &mut m.cache_key_sha },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "shader_code_sha",
                |m: &Shader| { &m.shader_code_sha },
                |m: &mut Shader| { &mut m.shader_code_sha },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Shader>(
                "CShader_RegisterShader_Request.Shader",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Shader {
        const NAME: &'static str = "Shader";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.cache_key_sha = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    18 => {
                        self.shader_code_sha = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.cache_key_sha.as_ref() {
                my_size += ::protobuf::rt::bytes_size(1, &v);
            }
            if let Some(v) = self.shader_code_sha.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.cache_key_sha.as_ref() {
                os.write_bytes(1, v)?;
            }
            if let Some(v) = self.shader_code_sha.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Shader {
            Shader::new()
        }

        fn clear(&mut self) {
            self.cache_key_sha = ::std::option::Option::None;
            self.shader_code_sha = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Shader {
            static instance: Shader = Shader {
                cache_key_sha: ::std::option::Option::None,
                shader_code_sha: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Shader {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CShader_RegisterShader_Request.Shader").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Shader {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Shader {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CShader_RegisterShader_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_RegisterShader_Response {
    // message fields
    // @@protoc_insertion_point(field:CShader_RegisterShader_Response.requested_codeids)
    pub requested_codeids: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_RegisterShader_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_RegisterShader_Response {
    fn default() -> &'a CShader_RegisterShader_Response {
        <CShader_RegisterShader_Response as ::protobuf::Message>::default_instance()
    }
}

impl CShader_RegisterShader_Response {
    pub fn new() -> CShader_RegisterShader_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "requested_codeids",
            |m: &CShader_RegisterShader_Response| { &m.requested_codeids },
            |m: &mut CShader_RegisterShader_Response| { &mut m.requested_codeids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CShader_RegisterShader_Response>(
            "CShader_RegisterShader_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CShader_RegisterShader_Response {
    const NAME: &'static str = "CShader_RegisterShader_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.requested_codeids)?;
                },
                8 => {
                    self.requested_codeids.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.requested_codeids {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.requested_codeids {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_RegisterShader_Response {
        CShader_RegisterShader_Response::new()
    }

    fn clear(&mut self) {
        self.requested_codeids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_RegisterShader_Response {
        static instance: CShader_RegisterShader_Response = CShader_RegisterShader_Response {
            requested_codeids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CShader_RegisterShader_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_RegisterShader_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_RegisterShader_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CShader_RegisterShader_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_SendShader_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_SendShader_Request {
    // message fields
    // @@protoc_insertion_point(field:CShader_SendShader_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CShader_SendShader_Request.shaders)
    pub shaders: ::std::vec::Vec<cshader_send_shader_request::ShaderCode>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_SendShader_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_SendShader_Request {
    fn default() -> &'a CShader_SendShader_Request {
        <CShader_SendShader_Request as ::protobuf::Message>::default_instance()
    }
}

impl CShader_SendShader_Request {
    pub fn new() -> CShader_SendShader_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CShader_SendShader_Request| { &m.appid },
            |m: &mut CShader_SendShader_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "shaders",
            |m: &CShader_SendShader_Request| { &m.shaders },
            |m: &mut CShader_SendShader_Request| { &mut m.shaders },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CShader_SendShader_Request>(
            "CShader_SendShader_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CShader_SendShader_Request {
    const NAME: &'static str = "CShader_SendShader_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.shaders.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.shaders {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        for v in &self.shaders {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_SendShader_Request {
        CShader_SendShader_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.shaders.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_SendShader_Request {
        static instance: CShader_SendShader_Request = CShader_SendShader_Request {
            appid: ::std::option::Option::None,
            shaders: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CShader_SendShader_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_SendShader_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_SendShader_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CShader_SendShader_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CShader_SendShader_Request`
pub mod cshader_send_shader_request {
    // @@protoc_insertion_point(message:CShader_SendShader_Request.ShaderCode)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ShaderCode {
        // message fields
        // @@protoc_insertion_point(field:CShader_SendShader_Request.ShaderCode.shader_code_sha)
        pub shader_code_sha: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:CShader_SendShader_Request.ShaderCode.shader_code)
        pub shader_code: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:CShader_SendShader_Request.ShaderCode.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ShaderCode {
        fn default() -> &'a ShaderCode {
            <ShaderCode as ::protobuf::Message>::default_instance()
        }
    }

    impl ShaderCode {
        pub fn new() -> ShaderCode {
            ::std::default::Default::default()
        }

        // optional bytes shader_code_sha = 1;

        pub fn shader_code_sha(&self) -> &[u8] {
            match self.shader_code_sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_shader_code_sha(&mut self) {
            self.shader_code_sha = ::std::option::Option::None;
        }

        pub fn has_shader_code_sha(&self) -> bool {
            self.shader_code_sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_shader_code_sha(&mut self, v: ::std::vec::Vec<u8>) {
            self.shader_code_sha = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_shader_code_sha(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.shader_code_sha.is_none() {
                self.shader_code_sha = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.shader_code_sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_shader_code_sha(&mut self) -> ::std::vec::Vec<u8> {
            self.shader_code_sha.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional bytes shader_code = 2;

        pub fn shader_code(&self) -> &[u8] {
            match self.shader_code.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_shader_code(&mut self) {
            self.shader_code = ::std::option::Option::None;
        }

        pub fn has_shader_code(&self) -> bool {
            self.shader_code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_shader_code(&mut self, v: ::std::vec::Vec<u8>) {
            self.shader_code = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_shader_code(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.shader_code.is_none() {
                self.shader_code = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.shader_code.as_mut().unwrap()
        }

        // Take field
        pub fn take_shader_code(&mut self) -> ::std::vec::Vec<u8> {
            self.shader_code.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "shader_code_sha",
                |m: &ShaderCode| { &m.shader_code_sha },
                |m: &mut ShaderCode| { &mut m.shader_code_sha },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "shader_code",
                |m: &ShaderCode| { &m.shader_code },
                |m: &mut ShaderCode| { &mut m.shader_code },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ShaderCode>(
                "CShader_SendShader_Request.ShaderCode",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ShaderCode {
        const NAME: &'static str = "ShaderCode";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.shader_code_sha = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    18 => {
                        self.shader_code = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.shader_code_sha.as_ref() {
                my_size += ::protobuf::rt::bytes_size(1, &v);
            }
            if let Some(v) = self.shader_code.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.shader_code_sha.as_ref() {
                os.write_bytes(1, v)?;
            }
            if let Some(v) = self.shader_code.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ShaderCode {
            ShaderCode::new()
        }

        fn clear(&mut self) {
            self.shader_code_sha = ::std::option::Option::None;
            self.shader_code = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ShaderCode {
            static instance: ShaderCode = ShaderCode {
                shader_code_sha: ::std::option::Option::None,
                shader_code: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ShaderCode {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CShader_SendShader_Request.ShaderCode").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ShaderCode {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ShaderCode {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CShader_SendShader_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_SendShader_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CShader_SendShader_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_SendShader_Response {
    fn default() -> &'a CShader_SendShader_Response {
        <CShader_SendShader_Response as ::protobuf::Message>::default_instance()
    }
}

impl CShader_SendShader_Response {
    pub fn new() -> CShader_SendShader_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CShader_SendShader_Response>(
            "CShader_SendShader_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CShader_SendShader_Response {
    const NAME: &'static str = "CShader_SendShader_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_SendShader_Response {
        CShader_SendShader_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_SendShader_Response {
        static instance: CShader_SendShader_Response = CShader_SendShader_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CShader_SendShader_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_SendShader_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_SendShader_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CShader_SendShader_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_GetBucketManifest_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_GetBucketManifest_Request {
    // message fields
    // @@protoc_insertion_point(field:CShader_GetBucketManifest_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CShader_GetBucketManifest_Request.gpu_desc)
    pub gpu_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_GetBucketManifest_Request.driver_desc)
    pub driver_desc: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_GetBucketManifest_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_GetBucketManifest_Request {
    fn default() -> &'a CShader_GetBucketManifest_Request {
        <CShader_GetBucketManifest_Request as ::protobuf::Message>::default_instance()
    }
}

impl CShader_GetBucketManifest_Request {
    pub fn new() -> CShader_GetBucketManifest_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string gpu_desc = 2;

    pub fn gpu_desc(&self) -> &str {
        match self.gpu_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gpu_desc(&mut self) {
        self.gpu_desc = ::std::option::Option::None;
    }

    pub fn has_gpu_desc(&self) -> bool {
        self.gpu_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gpu_desc(&mut self, v: ::std::string::String) {
        self.gpu_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gpu_desc(&mut self) -> &mut ::std::string::String {
        if self.gpu_desc.is_none() {
            self.gpu_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gpu_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_gpu_desc(&mut self) -> ::std::string::String {
        self.gpu_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string driver_desc = 3;

    pub fn driver_desc(&self) -> &str {
        match self.driver_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_driver_desc(&mut self) {
        self.driver_desc = ::std::option::Option::None;
    }

    pub fn has_driver_desc(&self) -> bool {
        self.driver_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_driver_desc(&mut self, v: ::std::string::String) {
        self.driver_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driver_desc(&mut self) -> &mut ::std::string::String {
        if self.driver_desc.is_none() {
            self.driver_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.driver_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_driver_desc(&mut self) -> ::std::string::String {
        self.driver_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CShader_GetBucketManifest_Request| { &m.appid },
            |m: &mut CShader_GetBucketManifest_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gpu_desc",
            |m: &CShader_GetBucketManifest_Request| { &m.gpu_desc },
            |m: &mut CShader_GetBucketManifest_Request| { &mut m.gpu_desc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "driver_desc",
            |m: &CShader_GetBucketManifest_Request| { &m.driver_desc },
            |m: &mut CShader_GetBucketManifest_Request| { &mut m.driver_desc },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CShader_GetBucketManifest_Request>(
            "CShader_GetBucketManifest_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CShader_GetBucketManifest_Request {
    const NAME: &'static str = "CShader_GetBucketManifest_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.gpu_desc = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.driver_desc = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.driver_desc.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.driver_desc.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_GetBucketManifest_Request {
        CShader_GetBucketManifest_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.gpu_desc = ::std::option::Option::None;
        self.driver_desc = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_GetBucketManifest_Request {
        static instance: CShader_GetBucketManifest_Request = CShader_GetBucketManifest_Request {
            appid: ::std::option::Option::None,
            gpu_desc: ::std::option::Option::None,
            driver_desc: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CShader_GetBucketManifest_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_GetBucketManifest_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_GetBucketManifest_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CShader_GetBucketManifest_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_GetBucketManifest_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_GetBucketManifest_Response {
    // message fields
    // @@protoc_insertion_point(field:CShader_GetBucketManifest_Response.manifestid)
    pub manifestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CShader_GetBucketManifest_Response.depotsize)
    pub depotsize: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CShader_GetBucketManifest_Response.bucketid)
    pub bucketid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_GetBucketManifest_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_GetBucketManifest_Response {
    fn default() -> &'a CShader_GetBucketManifest_Response {
        <CShader_GetBucketManifest_Response as ::protobuf::Message>::default_instance()
    }
}

impl CShader_GetBucketManifest_Response {
    pub fn new() -> CShader_GetBucketManifest_Response {
        ::std::default::Default::default()
    }

    // optional uint64 manifestid = 1;

    pub fn manifestid(&self) -> u64 {
        self.manifestid.unwrap_or(0)
    }

    pub fn clear_manifestid(&mut self) {
        self.manifestid = ::std::option::Option::None;
    }

    pub fn has_manifestid(&self) -> bool {
        self.manifestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifestid(&mut self, v: u64) {
        self.manifestid = ::std::option::Option::Some(v);
    }

    // optional uint64 depotsize = 2;

    pub fn depotsize(&self) -> u64 {
        self.depotsize.unwrap_or(0)
    }

    pub fn clear_depotsize(&mut self) {
        self.depotsize = ::std::option::Option::None;
    }

    pub fn has_depotsize(&self) -> bool {
        self.depotsize.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depotsize(&mut self, v: u64) {
        self.depotsize = ::std::option::Option::Some(v);
    }

    // optional uint64 bucketid = 3;

    pub fn bucketid(&self) -> u64 {
        self.bucketid.unwrap_or(0)
    }

    pub fn clear_bucketid(&mut self) {
        self.bucketid = ::std::option::Option::None;
    }

    pub fn has_bucketid(&self) -> bool {
        self.bucketid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bucketid(&mut self, v: u64) {
        self.bucketid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "manifestid",
            |m: &CShader_GetBucketManifest_Response| { &m.manifestid },
            |m: &mut CShader_GetBucketManifest_Response| { &mut m.manifestid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "depotsize",
            |m: &CShader_GetBucketManifest_Response| { &m.depotsize },
            |m: &mut CShader_GetBucketManifest_Response| { &mut m.depotsize },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bucketid",
            |m: &CShader_GetBucketManifest_Response| { &m.bucketid },
            |m: &mut CShader_GetBucketManifest_Response| { &mut m.bucketid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CShader_GetBucketManifest_Response>(
            "CShader_GetBucketManifest_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CShader_GetBucketManifest_Response {
    const NAME: &'static str = "CShader_GetBucketManifest_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.manifestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.depotsize = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.bucketid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.manifestid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.depotsize {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.bucketid {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.manifestid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.depotsize {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.bucketid {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_GetBucketManifest_Response {
        CShader_GetBucketManifest_Response::new()
    }

    fn clear(&mut self) {
        self.manifestid = ::std::option::Option::None;
        self.depotsize = ::std::option::Option::None;
        self.bucketid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_GetBucketManifest_Response {
        static instance: CShader_GetBucketManifest_Response = CShader_GetBucketManifest_Response {
            manifestid: ::std::option::Option::None,
            depotsize: ::std::option::Option::None,
            bucketid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CShader_GetBucketManifest_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_GetBucketManifest_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_GetBucketManifest_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CShader_GetBucketManifest_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_GetStaleBucket_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_GetStaleBucket_Request {
    // message fields
    // @@protoc_insertion_point(field:CShader_GetStaleBucket_Request.gpu_desc)
    pub gpu_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_GetStaleBucket_Request.driver_desc)
    pub driver_desc: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_GetStaleBucket_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_GetStaleBucket_Request {
    fn default() -> &'a CShader_GetStaleBucket_Request {
        <CShader_GetStaleBucket_Request as ::protobuf::Message>::default_instance()
    }
}

impl CShader_GetStaleBucket_Request {
    pub fn new() -> CShader_GetStaleBucket_Request {
        ::std::default::Default::default()
    }

    // optional string gpu_desc = 1;

    pub fn gpu_desc(&self) -> &str {
        match self.gpu_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gpu_desc(&mut self) {
        self.gpu_desc = ::std::option::Option::None;
    }

    pub fn has_gpu_desc(&self) -> bool {
        self.gpu_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gpu_desc(&mut self, v: ::std::string::String) {
        self.gpu_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gpu_desc(&mut self) -> &mut ::std::string::String {
        if self.gpu_desc.is_none() {
            self.gpu_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gpu_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_gpu_desc(&mut self) -> ::std::string::String {
        self.gpu_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string driver_desc = 2;

    pub fn driver_desc(&self) -> &str {
        match self.driver_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_driver_desc(&mut self) {
        self.driver_desc = ::std::option::Option::None;
    }

    pub fn has_driver_desc(&self) -> bool {
        self.driver_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_driver_desc(&mut self, v: ::std::string::String) {
        self.driver_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driver_desc(&mut self) -> &mut ::std::string::String {
        if self.driver_desc.is_none() {
            self.driver_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.driver_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_driver_desc(&mut self) -> ::std::string::String {
        self.driver_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gpu_desc",
            |m: &CShader_GetStaleBucket_Request| { &m.gpu_desc },
            |m: &mut CShader_GetStaleBucket_Request| { &mut m.gpu_desc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "driver_desc",
            |m: &CShader_GetStaleBucket_Request| { &m.driver_desc },
            |m: &mut CShader_GetStaleBucket_Request| { &mut m.driver_desc },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CShader_GetStaleBucket_Request>(
            "CShader_GetStaleBucket_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CShader_GetStaleBucket_Request {
    const NAME: &'static str = "CShader_GetStaleBucket_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.gpu_desc = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.driver_desc = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gpu_desc.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.driver_desc.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.gpu_desc.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.driver_desc.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_GetStaleBucket_Request {
        CShader_GetStaleBucket_Request::new()
    }

    fn clear(&mut self) {
        self.gpu_desc = ::std::option::Option::None;
        self.driver_desc = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_GetStaleBucket_Request {
        static instance: CShader_GetStaleBucket_Request = CShader_GetStaleBucket_Request {
            gpu_desc: ::std::option::Option::None,
            driver_desc: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CShader_GetStaleBucket_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_GetStaleBucket_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_GetStaleBucket_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CShader_GetStaleBucket_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_GetStaleBucket_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_GetStaleBucket_Response {
    // message fields
    // @@protoc_insertion_point(field:CShader_GetStaleBucket_Response.bucketid)
    pub bucketid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CShader_GetStaleBucket_Response.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CShader_GetStaleBucket_Response.manifestid)
    pub manifestid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_GetStaleBucket_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_GetStaleBucket_Response {
    fn default() -> &'a CShader_GetStaleBucket_Response {
        <CShader_GetStaleBucket_Response as ::protobuf::Message>::default_instance()
    }
}

impl CShader_GetStaleBucket_Response {
    pub fn new() -> CShader_GetStaleBucket_Response {
        ::std::default::Default::default()
    }

    // optional uint64 bucketid = 1;

    pub fn bucketid(&self) -> u64 {
        self.bucketid.unwrap_or(0)
    }

    pub fn clear_bucketid(&mut self) {
        self.bucketid = ::std::option::Option::None;
    }

    pub fn has_bucketid(&self) -> bool {
        self.bucketid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bucketid(&mut self, v: u64) {
        self.bucketid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 manifestid = 3;

    pub fn manifestid(&self) -> u64 {
        self.manifestid.unwrap_or(0)
    }

    pub fn clear_manifestid(&mut self) {
        self.manifestid = ::std::option::Option::None;
    }

    pub fn has_manifestid(&self) -> bool {
        self.manifestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifestid(&mut self, v: u64) {
        self.manifestid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bucketid",
            |m: &CShader_GetStaleBucket_Response| { &m.bucketid },
            |m: &mut CShader_GetStaleBucket_Response| { &mut m.bucketid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CShader_GetStaleBucket_Response| { &m.appid },
            |m: &mut CShader_GetStaleBucket_Response| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "manifestid",
            |m: &CShader_GetStaleBucket_Response| { &m.manifestid },
            |m: &mut CShader_GetStaleBucket_Response| { &mut m.manifestid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CShader_GetStaleBucket_Response>(
            "CShader_GetStaleBucket_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CShader_GetStaleBucket_Response {
    const NAME: &'static str = "CShader_GetStaleBucket_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.bucketid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.manifestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bucketid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.manifestid {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.bucketid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.manifestid {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_GetStaleBucket_Response {
        CShader_GetStaleBucket_Response::new()
    }

    fn clear(&mut self) {
        self.bucketid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.manifestid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_GetStaleBucket_Response {
        static instance: CShader_GetStaleBucket_Response = CShader_GetStaleBucket_Response {
            bucketid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            manifestid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CShader_GetStaleBucket_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_GetStaleBucket_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_GetStaleBucket_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CShader_GetStaleBucket_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_ReportExternalBuild_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_ReportExternalBuild_Request {
    // message fields
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.gpu_desc)
    pub gpu_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.driver_desc)
    pub driver_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.manifestid)
    pub manifestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.source_gpu_desc)
    pub source_gpu_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.source_driver_desc)
    pub source_driver_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.depotsize)
    pub depotsize: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_ReportExternalBuild_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_ReportExternalBuild_Request {
    fn default() -> &'a CShader_ReportExternalBuild_Request {
        <CShader_ReportExternalBuild_Request as ::protobuf::Message>::default_instance()
    }
}

impl CShader_ReportExternalBuild_Request {
    pub fn new() -> CShader_ReportExternalBuild_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string gpu_desc = 2;

    pub fn gpu_desc(&self) -> &str {
        match self.gpu_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gpu_desc(&mut self) {
        self.gpu_desc = ::std::option::Option::None;
    }

    pub fn has_gpu_desc(&self) -> bool {
        self.gpu_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gpu_desc(&mut self, v: ::std::string::String) {
        self.gpu_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gpu_desc(&mut self) -> &mut ::std::string::String {
        if self.gpu_desc.is_none() {
            self.gpu_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gpu_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_gpu_desc(&mut self) -> ::std::string::String {
        self.gpu_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string driver_desc = 3;

    pub fn driver_desc(&self) -> &str {
        match self.driver_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_driver_desc(&mut self) {
        self.driver_desc = ::std::option::Option::None;
    }

    pub fn has_driver_desc(&self) -> bool {
        self.driver_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_driver_desc(&mut self, v: ::std::string::String) {
        self.driver_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driver_desc(&mut self) -> &mut ::std::string::String {
        if self.driver_desc.is_none() {
            self.driver_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.driver_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_driver_desc(&mut self) -> ::std::string::String {
        self.driver_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 manifestid = 4;

    pub fn manifestid(&self) -> u64 {
        self.manifestid.unwrap_or(0)
    }

    pub fn clear_manifestid(&mut self) {
        self.manifestid = ::std::option::Option::None;
    }

    pub fn has_manifestid(&self) -> bool {
        self.manifestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifestid(&mut self, v: u64) {
        self.manifestid = ::std::option::Option::Some(v);
    }

    // optional string source_gpu_desc = 5;

    pub fn source_gpu_desc(&self) -> &str {
        match self.source_gpu_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_gpu_desc(&mut self) {
        self.source_gpu_desc = ::std::option::Option::None;
    }

    pub fn has_source_gpu_desc(&self) -> bool {
        self.source_gpu_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_gpu_desc(&mut self, v: ::std::string::String) {
        self.source_gpu_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_gpu_desc(&mut self) -> &mut ::std::string::String {
        if self.source_gpu_desc.is_none() {
            self.source_gpu_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_gpu_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_gpu_desc(&mut self) -> ::std::string::String {
        self.source_gpu_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string source_driver_desc = 6;

    pub fn source_driver_desc(&self) -> &str {
        match self.source_driver_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_driver_desc(&mut self) {
        self.source_driver_desc = ::std::option::Option::None;
    }

    pub fn has_source_driver_desc(&self) -> bool {
        self.source_driver_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_driver_desc(&mut self, v: ::std::string::String) {
        self.source_driver_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_driver_desc(&mut self) -> &mut ::std::string::String {
        if self.source_driver_desc.is_none() {
            self.source_driver_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_driver_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_driver_desc(&mut self) -> ::std::string::String {
        self.source_driver_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 depotsize = 7;

    pub fn depotsize(&self) -> u64 {
        self.depotsize.unwrap_or(0)
    }

    pub fn clear_depotsize(&mut self) {
        self.depotsize = ::std::option::Option::None;
    }

    pub fn has_depotsize(&self) -> bool {
        self.depotsize.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depotsize(&mut self, v: u64) {
        self.depotsize = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CShader_ReportExternalBuild_Request| { &m.appid },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gpu_desc",
            |m: &CShader_ReportExternalBuild_Request| { &m.gpu_desc },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.gpu_desc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "driver_desc",
            |m: &CShader_ReportExternalBuild_Request| { &m.driver_desc },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.driver_desc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "manifestid",
            |m: &CShader_ReportExternalBuild_Request| { &m.manifestid },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.manifestid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_gpu_desc",
            |m: &CShader_ReportExternalBuild_Request| { &m.source_gpu_desc },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.source_gpu_desc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_driver_desc",
            |m: &CShader_ReportExternalBuild_Request| { &m.source_driver_desc },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.source_driver_desc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "depotsize",
            |m: &CShader_ReportExternalBuild_Request| { &m.depotsize },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.depotsize },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CShader_ReportExternalBuild_Request>(
            "CShader_ReportExternalBuild_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CShader_ReportExternalBuild_Request {
    const NAME: &'static str = "CShader_ReportExternalBuild_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.gpu_desc = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.driver_desc = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.manifestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                42 => {
                    self.source_gpu_desc = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.source_driver_desc = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.depotsize = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.driver_desc.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.manifestid {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.source_gpu_desc.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.source_driver_desc.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.depotsize {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.driver_desc.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.manifestid {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.source_gpu_desc.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.source_driver_desc.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.depotsize {
            os.write_uint64(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_ReportExternalBuild_Request {
        CShader_ReportExternalBuild_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.gpu_desc = ::std::option::Option::None;
        self.driver_desc = ::std::option::Option::None;
        self.manifestid = ::std::option::Option::None;
        self.source_gpu_desc = ::std::option::Option::None;
        self.source_driver_desc = ::std::option::Option::None;
        self.depotsize = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_ReportExternalBuild_Request {
        static instance: CShader_ReportExternalBuild_Request = CShader_ReportExternalBuild_Request {
            appid: ::std::option::Option::None,
            gpu_desc: ::std::option::Option::None,
            driver_desc: ::std::option::Option::None,
            manifestid: ::std::option::Option::None,
            source_gpu_desc: ::std::option::Option::None,
            source_driver_desc: ::std::option::Option::None,
            depotsize: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CShader_ReportExternalBuild_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_ReportExternalBuild_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_ReportExternalBuild_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CShader_ReportExternalBuild_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_ReportExternalBuild_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_ReportExternalBuild_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CShader_ReportExternalBuild_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_ReportExternalBuild_Response {
    fn default() -> &'a CShader_ReportExternalBuild_Response {
        <CShader_ReportExternalBuild_Response as ::protobuf::Message>::default_instance()
    }
}

impl CShader_ReportExternalBuild_Response {
    pub fn new() -> CShader_ReportExternalBuild_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CShader_ReportExternalBuild_Response>(
            "CShader_ReportExternalBuild_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CShader_ReportExternalBuild_Response {
    const NAME: &'static str = "CShader_ReportExternalBuild_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_ReportExternalBuild_Response {
        CShader_ReportExternalBuild_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_ReportExternalBuild_Response {
        static instance: CShader_ReportExternalBuild_Response = CShader_ReportExternalBuild_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CShader_ReportExternalBuild_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_ReportExternalBuild_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_ReportExternalBuild_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CShader_ReportExternalBuild_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&steammessages_shader.steamclient.proto\x1a,steammessages_unified_base\
    .steamclient.proto\"\x8a\x02\n\x1eCShader_RegisterShader_Request\x12\x14\
    \n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x19\n\x08gpu_desc\x18\x02\
    \x20\x01(\tR\x07gpuDesc\x12\x1f\n\x0bdriver_desc\x18\x03\x20\x01(\tR\ndr\
    iverDesc\x12@\n\x07shaders\x18\x04\x20\x03(\x0b2&.CShader_RegisterShader\
    _Request.ShaderR\x07shaders\x1aT\n\x06Shader\x12\"\n\rcache_key_sha\x18\
    \x01\x20\x01(\x0cR\x0bcacheKeySha\x12&\n\x0fshader_code_sha\x18\x02\x20\
    \x01(\x0cR\rshaderCodeSha\"N\n\x1fCShader_RegisterShader_Response\x12+\n\
    \x11requested_codeids\x18\x01\x20\x03(\rR\x10requestedCodeids\"\xcb\x01\
    \n\x1aCShader_SendShader_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\
    \x05appid\x12@\n\x07shaders\x18\x02\x20\x03(\x0b2&.CShader_SendShader_Re\
    quest.ShaderCodeR\x07shaders\x1aU\n\nShaderCode\x12&\n\x0fshader_code_sh\
    a\x18\x01\x20\x01(\x0cR\rshaderCodeSha\x12\x1f\n\x0bshader_code\x18\x02\
    \x20\x01(\x0cR\nshaderCode\"\x1d\n\x1bCShader_SendShader_Response\"u\n!C\
    Shader_GetBucketManifest_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\
    \x05appid\x12\x19\n\x08gpu_desc\x18\x02\x20\x01(\tR\x07gpuDesc\x12\x1f\n\
    \x0bdriver_desc\x18\x03\x20\x01(\tR\ndriverDesc\"~\n\"CShader_GetBucketM\
    anifest_Response\x12\x1e\n\nmanifestid\x18\x01\x20\x01(\x04R\nmanifestid\
    \x12\x1c\n\tdepotsize\x18\x02\x20\x01(\x04R\tdepotsize\x12\x1a\n\x08buck\
    etid\x18\x03\x20\x01(\x04R\x08bucketid\"\\\n\x1eCShader_GetStaleBucket_R\
    equest\x12\x19\n\x08gpu_desc\x18\x01\x20\x01(\tR\x07gpuDesc\x12\x1f\n\
    \x0bdriver_desc\x18\x02\x20\x01(\tR\ndriverDesc\"s\n\x1fCShader_GetStale\
    Bucket_Response\x12\x1a\n\x08bucketid\x18\x01\x20\x01(\x04R\x08bucketid\
    \x12\x14\n\x05appid\x18\x02\x20\x01(\rR\x05appid\x12\x1e\n\nmanifestid\
    \x18\x03\x20\x01(\x04R\nmanifestid\"\x8b\x02\n#CShader_ReportExternalBui\
    ld_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x19\n\x08\
    gpu_desc\x18\x02\x20\x01(\tR\x07gpuDesc\x12\x1f\n\x0bdriver_desc\x18\x03\
    \x20\x01(\tR\ndriverDesc\x12\x1e\n\nmanifestid\x18\x04\x20\x01(\x04R\nma\
    nifestid\x12&\n\x0fsource_gpu_desc\x18\x05\x20\x01(\tR\rsourceGpuDesc\
    \x12,\n\x12source_driver_desc\x18\x06\x20\x01(\tR\x10sourceDriverDesc\
    \x12\x1c\n\tdepotsize\x18\x07\x20\x01(\x04R\tdepotsize\"&\n$CShader_Repo\
    rtExternalBuild_Response2\xbb\x06\n\x06Shader\x12\xbe\x01\n\x0eRegisterS\
    hader\x12\x1f.CShader_RegisterShader_Request\x1a\x20.CShader_RegisterSha\
    der_Response\"i\x82\xb5\x18eClient\x20just\x20finished\x20playing\x20a\
    \x20game,\x20detected\x20new\x20shader\x20cache\x20entries\x20and\x20is\
    \x20notifying\x20us\x20about\x20them\x12\x8f\x01\n\nSendShader\x12\x1b.C\
    Shader_SendShader_Request\x1a\x1c.CShader_SendShader_Response\"F\x82\xb5\
    \x18BClient\x20is\x20sending\x20us\x20actual\x20compiled\x20shader\x20co\
    de\x20that\x20we\x20requested\x12\xad\x01\n\x11GetBucketManifest\x12\".C\
    Shader_GetBucketManifest_Request\x1a#.CShader_GetBucketManifest_Response\
    \"O\x82\xb5\x18KClient\x20wants\x20to\x20know\x20the\x20manifest\x20ID\
    \x20to\x20fetch\x20(if\x20any)\x20for\x20a\x20bucket's\x20depot\x12\x8e\
    \x01\n\x0eGetStaleBucket\x12\x1f.CShader_GetStaleBucket_Request\x1a\x20.\
    CShader_GetStaleBucket_Response\"9\x82\xb5\x185Job\x20to\x20get\x20a\x20\
    stale\x20bucket\x20given\x20a\x20gpu\x20and\x20driver\x20desc\x12\x88\
    \x01\n\x13ReportExternalBuild\x12$.CShader_ReportExternalBuild_Request\
    \x1a%.CShader_ReportExternalBuild_Response\"$\x82\xb5\x18\x20Report\x20a\
    n\x20exernally\x20built\x20bucket\x1a\x12\x82\xb5\x18\x0eShader\x20metho\
    dsB\x03\x80\x01\x01J\xb1\x16\n\x06\x12\x04\0\0[\x01\n\t\n\x02\x03\0\x12\
    \x03\0\06\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\x10\x12\x03\x02\
    \0\"\n\n\n\x02\x04\0\x12\x04\x04\0\x0e\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x04\x08&\n\x0c\n\x04\x04\0\x03\0\x12\x04\x05\x08\x08\t\n\x0c\n\x05\x04\
    \0\x03\0\x01\x12\x03\x05\x10\x16\n\r\n\x06\x04\0\x03\0\x02\0\x12\x03\x06\
    \x101\n\x0e\n\x07\x04\0\x03\0\x02\0\x04\x12\x03\x06\x10\x18\n\x0e\n\x07\
    \x04\0\x03\0\x02\0\x05\x12\x03\x06\x19\x1e\n\x0e\n\x07\x04\0\x03\0\x02\0\
    \x01\x12\x03\x06\x1f,\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x06/0\n\
    \r\n\x06\x04\0\x03\0\x02\x01\x12\x03\x07\x103\n\x0e\n\x07\x04\0\x03\0\
    \x02\x01\x04\x12\x03\x07\x10\x18\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\
    \x03\x07\x19\x1e\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\x07\x1f.\n\
    \x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03\x0712\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\n\x08\"\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\n\x08\x10\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\n\x11\x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\n\x18\x1d\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x20!\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x0b\x08%\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\
    \x0b\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0b\x11\x17\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x0b\x18\x20\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x0b#$\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0c\x08(\n\x0c\n\x05\
    \x04\0\x02\x02\x04\x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\x0c\x11\x17\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0c\x18#\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\x0c&'\n\x0b\n\x04\x04\0\x02\x03\x12\x03\r\
    \x08D\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\r\x08\x10\n\x0c\n\x05\x04\0\
    \x02\x03\x06\x12\x03\r\x117\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\r8?\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\rBC\n\n\n\x02\x04\x01\x12\x04\x10\0\
    \x12\x01\n\n\n\x03\x04\x01\x01\x12\x03\x10\x08'\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x03\x11\x08.\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x11\x08\x10\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x11\x11\x17\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x11\x18)\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x11,-\n\n\
    \n\x02\x04\x02\x12\x04\x14\0\x1c\x01\n\n\n\x03\x04\x02\x01\x12\x03\x14\
    \x08\"\n\x0c\n\x04\x04\x02\x03\0\x12\x04\x15\x08\x18\t\n\x0c\n\x05\x04\
    \x02\x03\0\x01\x12\x03\x15\x10\x1a\n\r\n\x06\x04\x02\x03\0\x02\0\x12\x03\
    \x16\x103\n\x0e\n\x07\x04\x02\x03\0\x02\0\x04\x12\x03\x16\x10\x18\n\x0e\
    \n\x07\x04\x02\x03\0\x02\0\x05\x12\x03\x16\x19\x1e\n\x0e\n\x07\x04\x02\
    \x03\0\x02\0\x01\x12\x03\x16\x1f.\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\
    \x12\x03\x1612\n\r\n\x06\x04\x02\x03\0\x02\x01\x12\x03\x17\x10/\n\x0e\n\
    \x07\x04\x02\x03\0\x02\x01\x04\x12\x03\x17\x10\x18\n\x0e\n\x07\x04\x02\
    \x03\0\x02\x01\x05\x12\x03\x17\x19\x1e\n\x0e\n\x07\x04\x02\x03\0\x02\x01\
    \x01\x12\x03\x17\x1f*\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x03\x12\x03\x17-\
    .\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1a\x08\"\n\x0c\n\x05\x04\x02\x02\0\
    \x04\x12\x03\x1a\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1a\x11\
    \x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1a\x18\x1d\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x1a\x20!\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x1b\
    \x08D\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x1b\x08\x10\n\x0c\n\x05\
    \x04\x02\x02\x01\x06\x12\x03\x1b\x117\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03\x1b8?\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1bBC\n\n\n\x02\
    \x04\x03\x12\x04\x1e\0\x1f\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1e\x08#\n\
    \n\n\x02\x04\x04\x12\x04!\0%\x01\n\n\n\x03\x04\x04\x01\x12\x03!\x08)\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03\"\x08\"\n\x0c\n\x05\x04\x04\x02\0\x04\
    \x12\x03\"\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\"\x11\x17\n\x0c\
    \n\x05\x04\x04\x02\0\x01\x12\x03\"\x18\x1d\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03\"\x20!\n\x0b\n\x04\x04\x04\x02\x01\x12\x03#\x08%\n\x0c\n\x05\
    \x04\x04\x02\x01\x04\x12\x03#\x08\x10\n\x0c\n\x05\x04\x04\x02\x01\x05\
    \x12\x03#\x11\x17\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03#\x18\x20\n\x0c\
    \n\x05\x04\x04\x02\x01\x03\x12\x03##$\n\x0b\n\x04\x04\x04\x02\x02\x12\
    \x03$\x08(\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x03$\x08\x10\n\x0c\n\x05\
    \x04\x04\x02\x02\x05\x12\x03$\x11\x17\n\x0c\n\x05\x04\x04\x02\x02\x01\
    \x12\x03$\x18#\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03$&'\n\n\n\x02\x04\
    \x05\x12\x04'\0+\x01\n\n\n\x03\x04\x05\x01\x12\x03'\x08*\n\x0b\n\x04\x04\
    \x05\x02\0\x12\x03(\x08'\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03(\x08\x10\
    \n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03(\x11\x17\n\x0c\n\x05\x04\x05\x02\
    \0\x01\x12\x03(\x18\"\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03(%&\n\x0b\n\
    \x04\x04\x05\x02\x01\x12\x03)\x08&\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\
    \x03)\x08\x10\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03)\x11\x17\n\x0c\n\
    \x05\x04\x05\x02\x01\x01\x12\x03)\x18!\n\x0c\n\x05\x04\x05\x02\x01\x03\
    \x12\x03)$%\n\x0b\n\x04\x04\x05\x02\x02\x12\x03*\x08%\n\x0c\n\x05\x04\
    \x05\x02\x02\x04\x12\x03*\x08\x10\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\
    \x03*\x11\x17\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03*\x18\x20\n\x0c\n\
    \x05\x04\x05\x02\x02\x03\x12\x03*#$\n\n\n\x02\x04\x06\x12\x04-\00\x01\n\
    \n\n\x03\x04\x06\x01\x12\x03-\x08&\n\x0b\n\x04\x04\x06\x02\0\x12\x03.\
    \x08%\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03.\x08\x10\n\x0c\n\x05\x04\x06\
    \x02\0\x05\x12\x03.\x11\x17\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03.\x18\
    \x20\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03.#$\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x03/\x08(\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x03/\x08\x10\n\
    \x0c\n\x05\x04\x06\x02\x01\x05\x12\x03/\x11\x17\n\x0c\n\x05\x04\x06\x02\
    \x01\x01\x12\x03/\x18#\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03/&'\n\n\n\
    \x02\x04\x07\x12\x042\06\x01\n\n\n\x03\x04\x07\x01\x12\x032\x08'\n\x0b\n\
    \x04\x04\x07\x02\0\x12\x033\x08%\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x033\
    \x08\x10\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x033\x11\x17\n\x0c\n\x05\x04\
    \x07\x02\0\x01\x12\x033\x18\x20\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x033#$\
    \n\x0b\n\x04\x04\x07\x02\x01\x12\x034\x08\"\n\x0c\n\x05\x04\x07\x02\x01\
    \x04\x12\x034\x08\x10\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x034\x11\x17\n\
    \x0c\n\x05\x04\x07\x02\x01\x01\x12\x034\x18\x1d\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x034\x20!\n\x0b\n\x04\x04\x07\x02\x02\x12\x035\x08'\n\x0c\n\
    \x05\x04\x07\x02\x02\x04\x12\x035\x08\x10\n\x0c\n\x05\x04\x07\x02\x02\
    \x05\x12\x035\x11\x17\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x035\x18\"\n\
    \x0c\n\x05\x04\x07\x02\x02\x03\x12\x035%&\n\n\n\x02\x04\x08\x12\x048\0@\
    \x01\n\n\n\x03\x04\x08\x01\x12\x038\x08+\n\x0b\n\x04\x04\x08\x02\0\x12\
    \x039\x08\"\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x039\x08\x10\n\x0c\n\x05\
    \x04\x08\x02\0\x05\x12\x039\x11\x17\n\x0c\n\x05\x04\x08\x02\0\x01\x12\
    \x039\x18\x1d\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x039\x20!\n\x0b\n\x04\
    \x04\x08\x02\x01\x12\x03:\x08%\n\x0c\n\x05\x04\x08\x02\x01\x04\x12\x03:\
    \x08\x10\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03:\x11\x17\n\x0c\n\x05\
    \x04\x08\x02\x01\x01\x12\x03:\x18\x20\n\x0c\n\x05\x04\x08\x02\x01\x03\
    \x12\x03:#$\n\x0b\n\x04\x04\x08\x02\x02\x12\x03;\x08(\n\x0c\n\x05\x04\
    \x08\x02\x02\x04\x12\x03;\x08\x10\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\
    \x03;\x11\x17\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03;\x18#\n\x0c\n\x05\
    \x04\x08\x02\x02\x03\x12\x03;&'\n\x0b\n\x04\x04\x08\x02\x03\x12\x03<\x08\
    '\n\x0c\n\x05\x04\x08\x02\x03\x04\x12\x03<\x08\x10\n\x0c\n\x05\x04\x08\
    \x02\x03\x05\x12\x03<\x11\x17\n\x0c\n\x05\x04\x08\x02\x03\x01\x12\x03<\
    \x18\"\n\x0c\n\x05\x04\x08\x02\x03\x03\x12\x03<%&\n\x0b\n\x04\x04\x08\
    \x02\x04\x12\x03=\x08,\n\x0c\n\x05\x04\x08\x02\x04\x04\x12\x03=\x08\x10\
    \n\x0c\n\x05\x04\x08\x02\x04\x05\x12\x03=\x11\x17\n\x0c\n\x05\x04\x08\
    \x02\x04\x01\x12\x03=\x18'\n\x0c\n\x05\x04\x08\x02\x04\x03\x12\x03=*+\n\
    \x0b\n\x04\x04\x08\x02\x05\x12\x03>\x08/\n\x0c\n\x05\x04\x08\x02\x05\x04\
    \x12\x03>\x08\x10\n\x0c\n\x05\x04\x08\x02\x05\x05\x12\x03>\x11\x17\n\x0c\
    \n\x05\x04\x08\x02\x05\x01\x12\x03>\x18*\n\x0c\n\x05\x04\x08\x02\x05\x03\
    \x12\x03>-.\n\x0b\n\x04\x04\x08\x02\x06\x12\x03?\x08&\n\x0c\n\x05\x04\
    \x08\x02\x06\x04\x12\x03?\x08\x10\n\x0c\n\x05\x04\x08\x02\x06\x05\x12\
    \x03?\x11\x17\n\x0c\n\x05\x04\x08\x02\x06\x01\x12\x03?\x18!\n\x0c\n\x05\
    \x04\x08\x02\x06\x03\x12\x03?$%\n\n\n\x02\x04\t\x12\x04B\0C\x01\n\n\n\
    \x03\x04\t\x01\x12\x03B\x08,\n\n\n\x02\x06\0\x12\x04E\0[\x01\n\n\n\x03\
    \x06\0\x01\x12\x03E\x08\x0e\n\n\n\x03\x06\0\x03\x12\x03F\x088\n\r\n\x06\
    \x06\0\x03\xd0\x86\x03\x12\x03F\x088\n\x0c\n\x04\x06\0\x02\0\x12\x04H\
    \x08J\t\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03H\x0c\x1a\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03H\x1c;\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03HFf\n\r\n\
    \x05\x06\0\x02\0\x04\x12\x04I\x10\x96\x01\n\x10\n\x08\x06\0\x02\0\x04\
    \xd0\x86\x03\x12\x04I\x10\x96\x01\n\x0c\n\x04\x06\0\x02\x01\x12\x04L\x08\
    N\t\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03L\x0c\x16\n\x0c\n\x05\x06\0\x02\
    \x01\x02\x12\x03L\x183\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03L>Z\n\x0c\n\
    \x05\x06\0\x02\x01\x04\x12\x03M\x10s\n\x0f\n\x08\x06\0\x02\x01\x04\xd0\
    \x86\x03\x12\x03M\x10s\n\x0c\n\x04\x06\0\x02\x02\x12\x04P\x08R\t\n\x0c\n\
    \x05\x06\0\x02\x02\x01\x12\x03P\x0c\x1d\n\x0c\n\x05\x06\0\x02\x02\x02\
    \x12\x03P\x1fA\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03PLo\n\x0c\n\x05\x06\
    \0\x02\x02\x04\x12\x03Q\x10|\n\x0f\n\x08\x06\0\x02\x02\x04\xd0\x86\x03\
    \x12\x03Q\x10|\n\x0c\n\x04\x06\0\x02\x03\x12\x04T\x08V\t\n\x0c\n\x05\x06\
    \0\x02\x03\x01\x12\x03T\x0c\x1a\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03T\
    \x1c;\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03TFf\n\x0c\n\x05\x06\0\x02\x03\
    \x04\x12\x03U\x10f\n\x0f\n\x08\x06\0\x02\x03\x04\xd0\x86\x03\x12\x03U\
    \x10f\n\x0c\n\x04\x06\0\x02\x04\x12\x04X\x08Z\t\n\x0c\n\x05\x06\0\x02\
    \x04\x01\x12\x03X\x0c\x1f\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03X!E\n\x0c\
    \n\x05\x06\0\x02\x04\x03\x12\x03XPu\n\x0c\n\x05\x06\0\x02\x04\x04\x12\
    \x03Y\x10Q\n\x0f\n\x08\x06\0\x02\x04\x04\xd0\x86\x03\x12\x03Y\x10Q\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(12);
            messages.push(CShader_RegisterShader_Request::generated_message_descriptor_data());
            messages.push(CShader_RegisterShader_Response::generated_message_descriptor_data());
            messages.push(CShader_SendShader_Request::generated_message_descriptor_data());
            messages.push(CShader_SendShader_Response::generated_message_descriptor_data());
            messages.push(CShader_GetBucketManifest_Request::generated_message_descriptor_data());
            messages.push(CShader_GetBucketManifest_Response::generated_message_descriptor_data());
            messages.push(CShader_GetStaleBucket_Request::generated_message_descriptor_data());
            messages.push(CShader_GetStaleBucket_Response::generated_message_descriptor_data());
            messages.push(CShader_ReportExternalBuild_Request::generated_message_descriptor_data());
            messages.push(CShader_ReportExternalBuild_Response::generated_message_descriptor_data());
            messages.push(cshader_register_shader_request::Shader::generated_message_descriptor_data());
            messages.push(cshader_send_shader_request::ShaderCode::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
