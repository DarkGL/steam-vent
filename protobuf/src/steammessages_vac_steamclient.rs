// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_vac.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CFileVerification_SignatureCheck_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CFileVerification_SignatureCheck_Request {
    // message fields
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.file_size)
    pub file_size: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.file_timestamp)
    pub file_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.file_timestamp2)
    pub file_timestamp2: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.signature_result)
    pub signature_result: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.filename)
    pub filename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.client_package_version)
    pub client_package_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.sha1hash)
    pub sha1hash: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CFileVerification_SignatureCheck_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CFileVerification_SignatureCheck_Request {
    fn default() -> &'a CFileVerification_SignatureCheck_Request {
        <CFileVerification_SignatureCheck_Request as ::protobuf::Message>::default_instance()
    }
}

impl CFileVerification_SignatureCheck_Request {
    pub fn new() -> CFileVerification_SignatureCheck_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 file_size = 3;

    pub fn file_size(&self) -> u64 {
        self.file_size.unwrap_or(0)
    }

    pub fn clear_file_size(&mut self) {
        self.file_size = ::std::option::Option::None;
    }

    pub fn has_file_size(&self) -> bool {
        self.file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u64) {
        self.file_size = ::std::option::Option::Some(v);
    }

    // optional uint32 file_timestamp = 4;

    pub fn file_timestamp(&self) -> u32 {
        self.file_timestamp.unwrap_or(0)
    }

    pub fn clear_file_timestamp(&mut self) {
        self.file_timestamp = ::std::option::Option::None;
    }

    pub fn has_file_timestamp(&self) -> bool {
        self.file_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_timestamp(&mut self, v: u32) {
        self.file_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 file_timestamp2 = 5;

    pub fn file_timestamp2(&self) -> u32 {
        self.file_timestamp2.unwrap_or(0)
    }

    pub fn clear_file_timestamp2(&mut self) {
        self.file_timestamp2 = ::std::option::Option::None;
    }

    pub fn has_file_timestamp2(&self) -> bool {
        self.file_timestamp2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_timestamp2(&mut self, v: u32) {
        self.file_timestamp2 = ::std::option::Option::Some(v);
    }

    // optional uint32 signature_result = 6;

    pub fn signature_result(&self) -> u32 {
        self.signature_result.unwrap_or(0)
    }

    pub fn clear_signature_result(&mut self) {
        self.signature_result = ::std::option::Option::None;
    }

    pub fn has_signature_result(&self) -> bool {
        self.signature_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_result(&mut self, v: u32) {
        self.signature_result = ::std::option::Option::Some(v);
    }

    // optional string filename = 7;

    pub fn filename(&self) -> &str {
        match self.filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_filename(&mut self) {
        self.filename = ::std::option::Option::None;
    }

    pub fn has_filename(&self) -> bool {
        self.filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        if self.filename.is_none() {
            self.filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        self.filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 client_package_version = 8;

    pub fn client_package_version(&self) -> u32 {
        self.client_package_version.unwrap_or(0)
    }

    pub fn clear_client_package_version(&mut self) {
        self.client_package_version = ::std::option::Option::None;
    }

    pub fn has_client_package_version(&self) -> bool {
        self.client_package_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_package_version(&mut self, v: u32) {
        self.client_package_version = ::std::option::Option::Some(v);
    }

    // optional bytes sha1hash = 9;

    pub fn sha1hash(&self) -> &[u8] {
        match self.sha1hash.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_sha1hash(&mut self) {
        self.sha1hash = ::std::option::Option::None;
    }

    pub fn has_sha1hash(&self) -> bool {
        self.sha1hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sha1hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.sha1hash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha1hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.sha1hash.is_none() {
            self.sha1hash = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.sha1hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_sha1hash(&mut self) -> ::std::vec::Vec<u8> {
        self.sha1hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CFileVerification_SignatureCheck_Request| { &m.steamid },
            |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CFileVerification_SignatureCheck_Request| { &m.appid },
            |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_size",
            |m: &CFileVerification_SignatureCheck_Request| { &m.file_size },
            |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.file_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_timestamp",
            |m: &CFileVerification_SignatureCheck_Request| { &m.file_timestamp },
            |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.file_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_timestamp2",
            |m: &CFileVerification_SignatureCheck_Request| { &m.file_timestamp2 },
            |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.file_timestamp2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature_result",
            |m: &CFileVerification_SignatureCheck_Request| { &m.signature_result },
            |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.signature_result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "filename",
            |m: &CFileVerification_SignatureCheck_Request| { &m.filename },
            |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.filename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_package_version",
            |m: &CFileVerification_SignatureCheck_Request| { &m.client_package_version },
            |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.client_package_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sha1hash",
            |m: &CFileVerification_SignatureCheck_Request| { &m.sha1hash },
            |m: &mut CFileVerification_SignatureCheck_Request| { &mut m.sha1hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CFileVerification_SignatureCheck_Request>(
            "CFileVerification_SignatureCheck_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CFileVerification_SignatureCheck_Request {
    const NAME: &'static str = "CFileVerification_SignatureCheck_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.file_size = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.file_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.file_timestamp2 = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.signature_result = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.filename = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.client_package_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                74 => {
                    self.sha1hash = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.file_size {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.file_timestamp {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.file_timestamp2 {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.signature_result {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.filename.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.client_package_version {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.sha1hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(9, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.file_size {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.file_timestamp {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.file_timestamp2 {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.signature_result {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.filename.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.client_package_version {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.sha1hash.as_ref() {
            os.write_bytes(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CFileVerification_SignatureCheck_Request {
        CFileVerification_SignatureCheck_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.file_size = ::std::option::Option::None;
        self.file_timestamp = ::std::option::Option::None;
        self.file_timestamp2 = ::std::option::Option::None;
        self.signature_result = ::std::option::Option::None;
        self.filename = ::std::option::Option::None;
        self.client_package_version = ::std::option::Option::None;
        self.sha1hash = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CFileVerification_SignatureCheck_Request {
        static instance: CFileVerification_SignatureCheck_Request = CFileVerification_SignatureCheck_Request {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            file_size: ::std::option::Option::None,
            file_timestamp: ::std::option::Option::None,
            file_timestamp2: ::std::option::Option::None,
            signature_result: ::std::option::Option::None,
            filename: ::std::option::Option::None,
            client_package_version: ::std::option::Option::None,
            sha1hash: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CFileVerification_SignatureCheck_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CFileVerification_SignatureCheck_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CFileVerification_SignatureCheck_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CFileVerification_SignatureCheck_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CFileVerification_SignatureCheck_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CFileVerification_SignatureCheck_Response {
    // message fields
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Response.deny_operation)
    pub deny_operation: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CFileVerification_SignatureCheck_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CFileVerification_SignatureCheck_Response {
    fn default() -> &'a CFileVerification_SignatureCheck_Response {
        <CFileVerification_SignatureCheck_Response as ::protobuf::Message>::default_instance()
    }
}

impl CFileVerification_SignatureCheck_Response {
    pub fn new() -> CFileVerification_SignatureCheck_Response {
        ::std::default::Default::default()
    }

    // optional bool deny_operation = 1;

    pub fn deny_operation(&self) -> bool {
        self.deny_operation.unwrap_or(false)
    }

    pub fn clear_deny_operation(&mut self) {
        self.deny_operation = ::std::option::Option::None;
    }

    pub fn has_deny_operation(&self) -> bool {
        self.deny_operation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deny_operation(&mut self, v: bool) {
        self.deny_operation = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "deny_operation",
            |m: &CFileVerification_SignatureCheck_Response| { &m.deny_operation },
            |m: &mut CFileVerification_SignatureCheck_Response| { &mut m.deny_operation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CFileVerification_SignatureCheck_Response>(
            "CFileVerification_SignatureCheck_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CFileVerification_SignatureCheck_Response {
    const NAME: &'static str = "CFileVerification_SignatureCheck_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.deny_operation = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.deny_operation {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.deny_operation {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CFileVerification_SignatureCheck_Response {
        CFileVerification_SignatureCheck_Response::new()
    }

    fn clear(&mut self) {
        self.deny_operation = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CFileVerification_SignatureCheck_Response {
        static instance: CFileVerification_SignatureCheck_Response = CFileVerification_SignatureCheck_Response {
            deny_operation: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CFileVerification_SignatureCheck_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CFileVerification_SignatureCheck_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CFileVerification_SignatureCheck_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CFileVerification_SignatureCheck_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CFileVerification_SteamServiceCheck_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CFileVerification_SteamServiceCheck_Request {
    // message fields
    // @@protoc_insertion_point(field:CFileVerification_SteamServiceCheck_Request.service_status)
    pub service_status: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SteamServiceCheck_Request.client_package_version)
    pub client_package_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SteamServiceCheck_Request.launcher_type)
    pub launcher_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SteamServiceCheck_Request.os_type)
    pub os_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SteamServiceCheck_Request.service_repair)
    pub service_repair: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CFileVerification_SteamServiceCheck_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CFileVerification_SteamServiceCheck_Request {
    fn default() -> &'a CFileVerification_SteamServiceCheck_Request {
        <CFileVerification_SteamServiceCheck_Request as ::protobuf::Message>::default_instance()
    }
}

impl CFileVerification_SteamServiceCheck_Request {
    pub fn new() -> CFileVerification_SteamServiceCheck_Request {
        ::std::default::Default::default()
    }

    // optional uint32 service_status = 2;

    pub fn service_status(&self) -> u32 {
        self.service_status.unwrap_or(0)
    }

    pub fn clear_service_status(&mut self) {
        self.service_status = ::std::option::Option::None;
    }

    pub fn has_service_status(&self) -> bool {
        self.service_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_status(&mut self, v: u32) {
        self.service_status = ::std::option::Option::Some(v);
    }

    // optional uint32 client_package_version = 3;

    pub fn client_package_version(&self) -> u32 {
        self.client_package_version.unwrap_or(0)
    }

    pub fn clear_client_package_version(&mut self) {
        self.client_package_version = ::std::option::Option::None;
    }

    pub fn has_client_package_version(&self) -> bool {
        self.client_package_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_package_version(&mut self, v: u32) {
        self.client_package_version = ::std::option::Option::Some(v);
    }

    // optional uint32 launcher_type = 4;

    pub fn launcher_type(&self) -> u32 {
        self.launcher_type.unwrap_or(0)
    }

    pub fn clear_launcher_type(&mut self) {
        self.launcher_type = ::std::option::Option::None;
    }

    pub fn has_launcher_type(&self) -> bool {
        self.launcher_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_launcher_type(&mut self, v: u32) {
        self.launcher_type = ::std::option::Option::Some(v);
    }

    // optional uint32 os_type = 5;

    pub fn os_type(&self) -> u32 {
        self.os_type.unwrap_or(0)
    }

    pub fn clear_os_type(&mut self) {
        self.os_type = ::std::option::Option::None;
    }

    pub fn has_os_type(&self) -> bool {
        self.os_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_type(&mut self, v: u32) {
        self.os_type = ::std::option::Option::Some(v);
    }

    // optional uint32 service_repair = 6;

    pub fn service_repair(&self) -> u32 {
        self.service_repair.unwrap_or(0)
    }

    pub fn clear_service_repair(&mut self) {
        self.service_repair = ::std::option::Option::None;
    }

    pub fn has_service_repair(&self) -> bool {
        self.service_repair.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_repair(&mut self, v: u32) {
        self.service_repair = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "service_status",
            |m: &CFileVerification_SteamServiceCheck_Request| { &m.service_status },
            |m: &mut CFileVerification_SteamServiceCheck_Request| { &mut m.service_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_package_version",
            |m: &CFileVerification_SteamServiceCheck_Request| { &m.client_package_version },
            |m: &mut CFileVerification_SteamServiceCheck_Request| { &mut m.client_package_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "launcher_type",
            |m: &CFileVerification_SteamServiceCheck_Request| { &m.launcher_type },
            |m: &mut CFileVerification_SteamServiceCheck_Request| { &mut m.launcher_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "os_type",
            |m: &CFileVerification_SteamServiceCheck_Request| { &m.os_type },
            |m: &mut CFileVerification_SteamServiceCheck_Request| { &mut m.os_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "service_repair",
            |m: &CFileVerification_SteamServiceCheck_Request| { &m.service_repair },
            |m: &mut CFileVerification_SteamServiceCheck_Request| { &mut m.service_repair },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CFileVerification_SteamServiceCheck_Request>(
            "CFileVerification_SteamServiceCheck_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CFileVerification_SteamServiceCheck_Request {
    const NAME: &'static str = "CFileVerification_SteamServiceCheck_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.service_status = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.client_package_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.launcher_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.os_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.service_repair = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.service_status {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.client_package_version {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.launcher_type {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.os_type {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.service_repair {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.service_status {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.client_package_version {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.launcher_type {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.os_type {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.service_repair {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CFileVerification_SteamServiceCheck_Request {
        CFileVerification_SteamServiceCheck_Request::new()
    }

    fn clear(&mut self) {
        self.service_status = ::std::option::Option::None;
        self.client_package_version = ::std::option::Option::None;
        self.launcher_type = ::std::option::Option::None;
        self.os_type = ::std::option::Option::None;
        self.service_repair = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CFileVerification_SteamServiceCheck_Request {
        static instance: CFileVerification_SteamServiceCheck_Request = CFileVerification_SteamServiceCheck_Request {
            service_status: ::std::option::Option::None,
            client_package_version: ::std::option::Option::None,
            launcher_type: ::std::option::Option::None,
            os_type: ::std::option::Option::None,
            service_repair: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CFileVerification_SteamServiceCheck_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CFileVerification_SteamServiceCheck_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CFileVerification_SteamServiceCheck_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CFileVerification_SteamServiceCheck_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CFileVerification_SteamServiceCheck_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CFileVerification_SteamServiceCheck_Response {
    // message fields
    // @@protoc_insertion_point(field:CFileVerification_SteamServiceCheck_Response.attempt_repair)
    pub attempt_repair: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CFileVerification_SteamServiceCheck_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CFileVerification_SteamServiceCheck_Response {
    fn default() -> &'a CFileVerification_SteamServiceCheck_Response {
        <CFileVerification_SteamServiceCheck_Response as ::protobuf::Message>::default_instance()
    }
}

impl CFileVerification_SteamServiceCheck_Response {
    pub fn new() -> CFileVerification_SteamServiceCheck_Response {
        ::std::default::Default::default()
    }

    // optional bool attempt_repair = 1;

    pub fn attempt_repair(&self) -> bool {
        self.attempt_repair.unwrap_or(false)
    }

    pub fn clear_attempt_repair(&mut self) {
        self.attempt_repair = ::std::option::Option::None;
    }

    pub fn has_attempt_repair(&self) -> bool {
        self.attempt_repair.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attempt_repair(&mut self, v: bool) {
        self.attempt_repair = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "attempt_repair",
            |m: &CFileVerification_SteamServiceCheck_Response| { &m.attempt_repair },
            |m: &mut CFileVerification_SteamServiceCheck_Response| { &mut m.attempt_repair },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CFileVerification_SteamServiceCheck_Response>(
            "CFileVerification_SteamServiceCheck_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CFileVerification_SteamServiceCheck_Response {
    const NAME: &'static str = "CFileVerification_SteamServiceCheck_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.attempt_repair = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.attempt_repair {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.attempt_repair {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CFileVerification_SteamServiceCheck_Response {
        CFileVerification_SteamServiceCheck_Response::new()
    }

    fn clear(&mut self) {
        self.attempt_repair = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CFileVerification_SteamServiceCheck_Response {
        static instance: CFileVerification_SteamServiceCheck_Response = CFileVerification_SteamServiceCheck_Response {
            attempt_repair: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CFileVerification_SteamServiceCheck_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CFileVerification_SteamServiceCheck_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CFileVerification_SteamServiceCheck_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CFileVerification_SteamServiceCheck_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#steammessages_vac.steamclient.proto\x1a,steammessages_unified_base.st\
    eamclient.proto\"\xe0\x02\n(CFileVerification_SignatureCheck_Request\x12\
    \x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x14\n\x05appid\
    \x18\x02\x20\x01(\rR\x05appid\x12\x1b\n\tfile_size\x18\x03\x20\x01(\x04R\
    \x08fileSize\x12%\n\x0efile_timestamp\x18\x04\x20\x01(\rR\rfileTimestamp\
    \x12'\n\x0ffile_timestamp2\x18\x05\x20\x01(\rR\x0efileTimestamp2\x12)\n\
    \x10signature_result\x18\x06\x20\x01(\rR\x0fsignatureResult\x12\x1a\n\
    \x08filename\x18\x07\x20\x01(\tR\x08filename\x124\n\x16client_package_ve\
    rsion\x18\x08\x20\x01(\rR\x14clientPackageVersion\x12\x1a\n\x08sha1hash\
    \x18\t\x20\x01(\x0cR\x08sha1hash\"R\n)CFileVerification_SignatureCheck_R\
    esponse\x12%\n\x0edeny_operation\x18\x01\x20\x01(\x08R\rdenyOperation\"\
    \xef\x01\n+CFileVerification_SteamServiceCheck_Request\x12%\n\x0eservice\
    _status\x18\x02\x20\x01(\rR\rserviceStatus\x124\n\x16client_package_vers\
    ion\x18\x03\x20\x01(\rR\x14clientPackageVersion\x12#\n\rlauncher_type\
    \x18\x04\x20\x01(\rR\x0clauncherType\x12\x17\n\x07os_type\x18\x05\x20\
    \x01(\rR\x06osType\x12%\n\x0eservice_repair\x18\x06\x20\x01(\rR\rservice\
    Repair\"U\n,CFileVerification_SteamServiceCheck_Response\x12%\n\x0eattem\
    pt_repair\x18\x01\x20\x01(\x08R\rattemptRepair2\xde\x02\n\x10FileVerific\
    ation\x12\x8f\x01\n\x0eSignatureCheck\x12).CFileVerification_SignatureCh\
    eck_Request\x1a*.CFileVerification_SignatureCheck_Response\"&\x82\xb5\
    \x18\"File\x20signature\x20check\x20was\x20performed\x12\x97\x01\n\x11St\
    eamServiceCheck\x12,.CFileVerification_SteamServiceCheck_Request\x1a-.CF\
    ileVerification_SteamServiceCheck_Response\"%\x82\xb5\x18!Steam\x20Servi\
    ce\x20check\x20was\x20performed\x1a\x1e\x82\xb5\x18\x1aFile\x20verificat\
    ion\x20servicesB\x03\x80\x01\x01J\xba\x0b\n\x06\x12\x04\0\0*\x01\n\t\n\
    \x02\x03\0\x12\x03\0\06\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\
    \x10\x12\x03\x02\0\"\n\n\n\x02\x04\0\x12\x04\x04\0\x0e\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x04\x080\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x08%\n\x0c\n\
    \x05\x04\0\x02\0\x04\x12\x03\x05\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03\x05\x11\x18\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x19\x20\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x05#$\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\
    \x08\"\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x06\x08\x10\n\x0c\n\x05\x04\
    \0\x02\x01\x05\x12\x03\x06\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x06\x18\x1d\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x20!\n\x0b\n\x04\
    \x04\0\x02\x02\x12\x03\x07\x08&\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\
    \x07\x08\x10\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x07\x11\x17\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x07\x18!\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x07$%\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x08\x08+\n\x0c\n\x05\
    \x04\0\x02\x03\x04\x12\x03\x08\x08\x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x03\x08\x11\x17\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x08\x18&\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03\x08)*\n\x0b\n\x04\x04\0\x02\x04\x12\x03\t\
    \x08,\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\t\x08\x10\n\x0c\n\x05\x04\0\
    \x02\x04\x05\x12\x03\t\x11\x17\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\t\
    \x18'\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\t*+\n\x0b\n\x04\x04\0\x02\
    \x05\x12\x03\n\x08-\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\n\x08\x10\n\
    \x0c\n\x05\x04\0\x02\x05\x05\x12\x03\n\x11\x17\n\x0c\n\x05\x04\0\x02\x05\
    \x01\x12\x03\n\x18(\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\n+,\n\x0b\n\
    \x04\x04\0\x02\x06\x12\x03\x0b\x08%\n\x0c\n\x05\x04\0\x02\x06\x04\x12\
    \x03\x0b\x08\x10\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x0b\x11\x17\n\x0c\
    \n\x05\x04\0\x02\x06\x01\x12\x03\x0b\x18\x20\n\x0c\n\x05\x04\0\x02\x06\
    \x03\x12\x03\x0b#$\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x0c\x083\n\x0c\n\
    \x05\x04\0\x02\x07\x04\x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\0\x02\x07\x05\
    \x12\x03\x0c\x11\x17\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x0c\x18.\n\
    \x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x0c12\n\x0b\n\x04\x04\0\x02\x08\x12\
    \x03\r\x08$\n\x0c\n\x05\x04\0\x02\x08\x04\x12\x03\r\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x08\x05\x12\x03\r\x11\x16\n\x0c\n\x05\x04\0\x02\x08\x01\x12\
    \x03\r\x17\x1f\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\r\"#\n\n\n\x02\x04\
    \x01\x12\x04\x10\0\x12\x01\n\n\n\x03\x04\x01\x01\x12\x03\x10\x081\n\x0b\
    \n\x04\x04\x01\x02\0\x12\x03\x11\x08)\n\x0c\n\x05\x04\x01\x02\0\x04\x12\
    \x03\x11\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x11\x11\x15\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03\x11\x16$\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x11'(\n\n\n\x02\x04\x02\x12\x04\x14\0\x1a\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03\x14\x083\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x15\x08+\n\x0c\n\
    \x05\x04\x02\x02\0\x04\x12\x03\x15\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\
    \x12\x03\x15\x11\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x15\x18&\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x15)*\n\x0b\n\x04\x04\x02\x02\x01\
    \x12\x03\x16\x083\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x16\x08\x10\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x16\x11\x17\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x03\x16\x18.\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\
    \x1612\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x17\x08*\n\x0c\n\x05\x04\x02\
    \x02\x02\x04\x12\x03\x17\x08\x10\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\
    \x17\x11\x17\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x17\x18%\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x03\x17()\n\x0b\n\x04\x04\x02\x02\x03\x12\
    \x03\x18\x08$\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\x03\x18\x08\x10\n\x0c\
    \n\x05\x04\x02\x02\x03\x05\x12\x03\x18\x11\x17\n\x0c\n\x05\x04\x02\x02\
    \x03\x01\x12\x03\x18\x18\x1f\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x18\
    \"#\n\x0b\n\x04\x04\x02\x02\x04\x12\x03\x19\x08+\n\x0c\n\x05\x04\x02\x02\
    \x04\x04\x12\x03\x19\x08\x10\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\x19\
    \x11\x17\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\x19\x18&\n\x0c\n\x05\
    \x04\x02\x02\x04\x03\x12\x03\x19)*\n\n\n\x02\x04\x03\x12\x04\x1c\0\x1e\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03\x1c\x084\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03\x1d\x08)\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x1d\x08\x10\n\
    \x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1d\x11\x15\n\x0c\n\x05\x04\x03\x02\
    \0\x01\x12\x03\x1d\x16$\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1d'(\n\n\
    \n\x02\x06\0\x12\x04\x20\0*\x01\n\n\n\x03\x06\0\x01\x12\x03\x20\x08\x18\
    \n\n\n\x03\x06\0\x03\x12\x03!\x08D\n\r\n\x06\x06\0\x03\xd0\x86\x03\x12\
    \x03!\x08D\n\x0c\n\x04\x06\0\x02\0\x12\x04#\x08%\t\n\x0c\n\x05\x06\0\x02\
    \0\x01\x12\x03#\x0c\x1a\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03#\x1cE\n\x0c\
    \n\x05\x06\0\x02\0\x03\x12\x03#Pz\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03$\
    \x10S\n\x0f\n\x08\x06\0\x02\0\x04\xd0\x86\x03\x12\x03$\x10S\n\x0c\n\x04\
    \x06\0\x02\x01\x12\x04'\x08)\t\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03'\
    \x0c\x1d\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03'\x1fK\n\r\n\x05\x06\0\x02\
    \x01\x03\x12\x04'V\x83\x01\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03(\x10R\n\
    \x0f\n\x08\x06\0\x02\x01\x04\xd0\x86\x03\x12\x03(\x10R\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(CFileVerification_SignatureCheck_Request::generated_message_descriptor_data());
            messages.push(CFileVerification_SignatureCheck_Response::generated_message_descriptor_data());
            messages.push(CFileVerification_SteamServiceCheck_Request::generated_message_descriptor_data());
            messages.push(CFileVerification_SteamServiceCheck_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
