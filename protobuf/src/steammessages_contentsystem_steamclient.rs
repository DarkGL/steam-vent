// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_contentsystem.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CContentServerDirectory_GetServersForSteamPipe_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetServersForSteamPipe_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Request.cell_id)
    pub cell_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Request.max_servers)
    pub max_servers: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Request.ip_override)
    pub ip_override: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Request.launcher_type)
    pub launcher_type: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Request.ipv6_public)
    pub ipv6_public: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetServersForSteamPipe_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetServersForSteamPipe_Request {
    fn default() -> &'a CContentServerDirectory_GetServersForSteamPipe_Request {
        <CContentServerDirectory_GetServersForSteamPipe_Request as ::protobuf::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetServersForSteamPipe_Request {
    pub fn new() -> CContentServerDirectory_GetServersForSteamPipe_Request {
        ::std::default::Default::default()
    }

    // optional uint32 cell_id = 1;

    pub fn cell_id(&self) -> u32 {
        self.cell_id.unwrap_or(0)
    }

    pub fn clear_cell_id(&mut self) {
        self.cell_id = ::std::option::Option::None;
    }

    pub fn has_cell_id(&self) -> bool {
        self.cell_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cell_id(&mut self, v: u32) {
        self.cell_id = ::std::option::Option::Some(v);
    }

    // optional uint32 max_servers = 2;

    pub fn max_servers(&self) -> u32 {
        self.max_servers.unwrap_or(20u32)
    }

    pub fn clear_max_servers(&mut self) {
        self.max_servers = ::std::option::Option::None;
    }

    pub fn has_max_servers(&self) -> bool {
        self.max_servers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_servers(&mut self, v: u32) {
        self.max_servers = ::std::option::Option::Some(v);
    }

    // optional string ip_override = 3;

    pub fn ip_override(&self) -> &str {
        match self.ip_override.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ip_override(&mut self) {
        self.ip_override = ::std::option::Option::None;
    }

    pub fn has_ip_override(&self) -> bool {
        self.ip_override.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip_override(&mut self, v: ::std::string::String) {
        self.ip_override = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip_override(&mut self) -> &mut ::std::string::String {
        if self.ip_override.is_none() {
            self.ip_override = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ip_override.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip_override(&mut self) -> ::std::string::String {
        self.ip_override.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 launcher_type = 4;

    pub fn launcher_type(&self) -> i32 {
        self.launcher_type.unwrap_or(0i32)
    }

    pub fn clear_launcher_type(&mut self) {
        self.launcher_type = ::std::option::Option::None;
    }

    pub fn has_launcher_type(&self) -> bool {
        self.launcher_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_launcher_type(&mut self, v: i32) {
        self.launcher_type = ::std::option::Option::Some(v);
    }

    // optional string ipv6_public = 5;

    pub fn ipv6_public(&self) -> &str {
        match self.ipv6_public.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ipv6_public(&mut self) {
        self.ipv6_public = ::std::option::Option::None;
    }

    pub fn has_ipv6_public(&self) -> bool {
        self.ipv6_public.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ipv6_public(&mut self, v: ::std::string::String) {
        self.ipv6_public = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ipv6_public(&mut self) -> &mut ::std::string::String {
        if self.ipv6_public.is_none() {
            self.ipv6_public = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ipv6_public.as_mut().unwrap()
    }

    // Take field
    pub fn take_ipv6_public(&mut self) -> ::std::string::String {
        self.ipv6_public.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cell_id",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Request| { &m.cell_id },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Request| { &mut m.cell_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_servers",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Request| { &m.max_servers },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Request| { &mut m.max_servers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ip_override",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Request| { &m.ip_override },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Request| { &mut m.ip_override },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "launcher_type",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Request| { &m.launcher_type },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Request| { &mut m.launcher_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ipv6_public",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Request| { &m.ipv6_public },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Request| { &mut m.ipv6_public },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetServersForSteamPipe_Request>(
            "CContentServerDirectory_GetServersForSteamPipe_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CContentServerDirectory_GetServersForSteamPipe_Request {
    const NAME: &'static str = "CContentServerDirectory_GetServersForSteamPipe_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.cell_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.max_servers = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.ip_override = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.launcher_type = ::std::option::Option::Some(is.read_int32()?);
                },
                42 => {
                    self.ipv6_public = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cell_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.max_servers {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.ip_override.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.launcher_type {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.ipv6_public.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.cell_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.max_servers {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.ip_override.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.launcher_type {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.ipv6_public.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetServersForSteamPipe_Request {
        CContentServerDirectory_GetServersForSteamPipe_Request::new()
    }

    fn clear(&mut self) {
        self.cell_id = ::std::option::Option::None;
        self.max_servers = ::std::option::Option::None;
        self.ip_override = ::std::option::Option::None;
        self.launcher_type = ::std::option::Option::None;
        self.ipv6_public = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetServersForSteamPipe_Request {
        static instance: CContentServerDirectory_GetServersForSteamPipe_Request = CContentServerDirectory_GetServersForSteamPipe_Request {
            cell_id: ::std::option::Option::None,
            max_servers: ::std::option::Option::None,
            ip_override: ::std::option::Option::None,
            launcher_type: ::std::option::Option::None,
            ipv6_public: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CContentServerDirectory_GetServersForSteamPipe_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetServersForSteamPipe_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetServersForSteamPipe_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CContentServerDirectory_GetServersForSteamPipe_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_ServerInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_ServerInfo {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.source_id)
    pub source_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.cell_id)
    pub cell_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.load)
    pub load: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.weighted_load)
    pub weighted_load: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.num_entries_in_client_list)
    pub num_entries_in_client_list: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.steam_china_only)
    pub steam_china_only: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.host)
    pub host: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.vhost)
    pub vhost: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.use_as_proxy)
    pub use_as_proxy: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.proxy_request_path_template)
    pub proxy_request_path_template: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.https_support)
    pub https_support: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.allowed_app_ids)
    pub allowed_app_ids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.preferred_server)
    pub preferred_server: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_ServerInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_ServerInfo {
    fn default() -> &'a CContentServerDirectory_ServerInfo {
        <CContentServerDirectory_ServerInfo as ::protobuf::Message>::default_instance()
    }
}

impl CContentServerDirectory_ServerInfo {
    pub fn new() -> CContentServerDirectory_ServerInfo {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 source_id = 2;

    pub fn source_id(&self) -> i32 {
        self.source_id.unwrap_or(0)
    }

    pub fn clear_source_id(&mut self) {
        self.source_id = ::std::option::Option::None;
    }

    pub fn has_source_id(&self) -> bool {
        self.source_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_id(&mut self, v: i32) {
        self.source_id = ::std::option::Option::Some(v);
    }

    // optional int32 cell_id = 3;

    pub fn cell_id(&self) -> i32 {
        self.cell_id.unwrap_or(0)
    }

    pub fn clear_cell_id(&mut self) {
        self.cell_id = ::std::option::Option::None;
    }

    pub fn has_cell_id(&self) -> bool {
        self.cell_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cell_id(&mut self, v: i32) {
        self.cell_id = ::std::option::Option::Some(v);
    }

    // optional int32 load = 4;

    pub fn load(&self) -> i32 {
        self.load.unwrap_or(0)
    }

    pub fn clear_load(&mut self) {
        self.load = ::std::option::Option::None;
    }

    pub fn has_load(&self) -> bool {
        self.load.is_some()
    }

    // Param is passed by value, moved
    pub fn set_load(&mut self, v: i32) {
        self.load = ::std::option::Option::Some(v);
    }

    // optional float weighted_load = 5;

    pub fn weighted_load(&self) -> f32 {
        self.weighted_load.unwrap_or(0.)
    }

    pub fn clear_weighted_load(&mut self) {
        self.weighted_load = ::std::option::Option::None;
    }

    pub fn has_weighted_load(&self) -> bool {
        self.weighted_load.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weighted_load(&mut self, v: f32) {
        self.weighted_load = ::std::option::Option::Some(v);
    }

    // optional int32 num_entries_in_client_list = 6;

    pub fn num_entries_in_client_list(&self) -> i32 {
        self.num_entries_in_client_list.unwrap_or(0)
    }

    pub fn clear_num_entries_in_client_list(&mut self) {
        self.num_entries_in_client_list = ::std::option::Option::None;
    }

    pub fn has_num_entries_in_client_list(&self) -> bool {
        self.num_entries_in_client_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_entries_in_client_list(&mut self, v: i32) {
        self.num_entries_in_client_list = ::std::option::Option::Some(v);
    }

    // optional bool steam_china_only = 7;

    pub fn steam_china_only(&self) -> bool {
        self.steam_china_only.unwrap_or(false)
    }

    pub fn clear_steam_china_only(&mut self) {
        self.steam_china_only = ::std::option::Option::None;
    }

    pub fn has_steam_china_only(&self) -> bool {
        self.steam_china_only.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_china_only(&mut self, v: bool) {
        self.steam_china_only = ::std::option::Option::Some(v);
    }

    // optional string host = 8;

    pub fn host(&self) -> &str {
        match self.host.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_host(&mut self) {
        self.host = ::std::option::Option::None;
    }

    pub fn has_host(&self) -> bool {
        self.host.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        if self.host.is_none() {
            self.host = ::std::option::Option::Some(::std::string::String::new());
        }
        self.host.as_mut().unwrap()
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        self.host.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string vhost = 9;

    pub fn vhost(&self) -> &str {
        match self.vhost.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_vhost(&mut self) {
        self.vhost = ::std::option::Option::None;
    }

    pub fn has_vhost(&self) -> bool {
        self.vhost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vhost(&mut self, v: ::std::string::String) {
        self.vhost = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vhost(&mut self) -> &mut ::std::string::String {
        if self.vhost.is_none() {
            self.vhost = ::std::option::Option::Some(::std::string::String::new());
        }
        self.vhost.as_mut().unwrap()
    }

    // Take field
    pub fn take_vhost(&mut self) -> ::std::string::String {
        self.vhost.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool use_as_proxy = 10;

    pub fn use_as_proxy(&self) -> bool {
        self.use_as_proxy.unwrap_or(false)
    }

    pub fn clear_use_as_proxy(&mut self) {
        self.use_as_proxy = ::std::option::Option::None;
    }

    pub fn has_use_as_proxy(&self) -> bool {
        self.use_as_proxy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_as_proxy(&mut self, v: bool) {
        self.use_as_proxy = ::std::option::Option::Some(v);
    }

    // optional string proxy_request_path_template = 11;

    pub fn proxy_request_path_template(&self) -> &str {
        match self.proxy_request_path_template.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_proxy_request_path_template(&mut self) {
        self.proxy_request_path_template = ::std::option::Option::None;
    }

    pub fn has_proxy_request_path_template(&self) -> bool {
        self.proxy_request_path_template.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proxy_request_path_template(&mut self, v: ::std::string::String) {
        self.proxy_request_path_template = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proxy_request_path_template(&mut self) -> &mut ::std::string::String {
        if self.proxy_request_path_template.is_none() {
            self.proxy_request_path_template = ::std::option::Option::Some(::std::string::String::new());
        }
        self.proxy_request_path_template.as_mut().unwrap()
    }

    // Take field
    pub fn take_proxy_request_path_template(&mut self) -> ::std::string::String {
        self.proxy_request_path_template.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string https_support = 12;

    pub fn https_support(&self) -> &str {
        match self.https_support.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_https_support(&mut self) {
        self.https_support = ::std::option::Option::None;
    }

    pub fn has_https_support(&self) -> bool {
        self.https_support.is_some()
    }

    // Param is passed by value, moved
    pub fn set_https_support(&mut self, v: ::std::string::String) {
        self.https_support = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_https_support(&mut self) -> &mut ::std::string::String {
        if self.https_support.is_none() {
            self.https_support = ::std::option::Option::Some(::std::string::String::new());
        }
        self.https_support.as_mut().unwrap()
    }

    // Take field
    pub fn take_https_support(&mut self) -> ::std::string::String {
        self.https_support.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool preferred_server = 14;

    pub fn preferred_server(&self) -> bool {
        self.preferred_server.unwrap_or(false)
    }

    pub fn clear_preferred_server(&mut self) {
        self.preferred_server = ::std::option::Option::None;
    }

    pub fn has_preferred_server(&self) -> bool {
        self.preferred_server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_preferred_server(&mut self, v: bool) {
        self.preferred_server = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CContentServerDirectory_ServerInfo| { &m.type_ },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_id",
            |m: &CContentServerDirectory_ServerInfo| { &m.source_id },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.source_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cell_id",
            |m: &CContentServerDirectory_ServerInfo| { &m.cell_id },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.cell_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "load",
            |m: &CContentServerDirectory_ServerInfo| { &m.load },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.load },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "weighted_load",
            |m: &CContentServerDirectory_ServerInfo| { &m.weighted_load },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.weighted_load },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_entries_in_client_list",
            |m: &CContentServerDirectory_ServerInfo| { &m.num_entries_in_client_list },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.num_entries_in_client_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_china_only",
            |m: &CContentServerDirectory_ServerInfo| { &m.steam_china_only },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.steam_china_only },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "host",
            |m: &CContentServerDirectory_ServerInfo| { &m.host },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.host },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "vhost",
            |m: &CContentServerDirectory_ServerInfo| { &m.vhost },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.vhost },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "use_as_proxy",
            |m: &CContentServerDirectory_ServerInfo| { &m.use_as_proxy },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.use_as_proxy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "proxy_request_path_template",
            |m: &CContentServerDirectory_ServerInfo| { &m.proxy_request_path_template },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.proxy_request_path_template },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "https_support",
            |m: &CContentServerDirectory_ServerInfo| { &m.https_support },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.https_support },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "allowed_app_ids",
            |m: &CContentServerDirectory_ServerInfo| { &m.allowed_app_ids },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.allowed_app_ids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "preferred_server",
            |m: &CContentServerDirectory_ServerInfo| { &m.preferred_server },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.preferred_server },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_ServerInfo>(
            "CContentServerDirectory_ServerInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CContentServerDirectory_ServerInfo {
    const NAME: &'static str = "CContentServerDirectory_ServerInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.source_id = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.cell_id = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.load = ::std::option::Option::Some(is.read_int32()?);
                },
                45 => {
                    self.weighted_load = ::std::option::Option::Some(is.read_float()?);
                },
                48 => {
                    self.num_entries_in_client_list = ::std::option::Option::Some(is.read_int32()?);
                },
                56 => {
                    self.steam_china_only = ::std::option::Option::Some(is.read_bool()?);
                },
                66 => {
                    self.host = ::std::option::Option::Some(is.read_string()?);
                },
                74 => {
                    self.vhost = ::std::option::Option::Some(is.read_string()?);
                },
                80 => {
                    self.use_as_proxy = ::std::option::Option::Some(is.read_bool()?);
                },
                90 => {
                    self.proxy_request_path_template = ::std::option::Option::Some(is.read_string()?);
                },
                98 => {
                    self.https_support = ::std::option::Option::Some(is.read_string()?);
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.allowed_app_ids)?;
                },
                104 => {
                    self.allowed_app_ids.push(is.read_uint32()?);
                },
                112 => {
                    self.preferred_server = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.source_id {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.cell_id {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.load {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.weighted_load {
            my_size += 1 + 4;
        }
        if let Some(v) = self.num_entries_in_client_list {
            my_size += ::protobuf::rt::int32_size(6, v);
        }
        if let Some(v) = self.steam_china_only {
            my_size += 1 + 1;
        }
        if let Some(v) = self.host.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.vhost.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.use_as_proxy {
            my_size += 1 + 1;
        }
        if let Some(v) = self.proxy_request_path_template.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.https_support.as_ref() {
            my_size += ::protobuf::rt::string_size(12, &v);
        }
        for value in &self.allowed_app_ids {
            my_size += ::protobuf::rt::uint32_size(13, *value);
        };
        if let Some(v) = self.preferred_server {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.source_id {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.cell_id {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.load {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.weighted_load {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.num_entries_in_client_list {
            os.write_int32(6, v)?;
        }
        if let Some(v) = self.steam_china_only {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.host.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.vhost.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.use_as_proxy {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.proxy_request_path_template.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.https_support.as_ref() {
            os.write_string(12, v)?;
        }
        for v in &self.allowed_app_ids {
            os.write_uint32(13, *v)?;
        };
        if let Some(v) = self.preferred_server {
            os.write_bool(14, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_ServerInfo {
        CContentServerDirectory_ServerInfo::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.source_id = ::std::option::Option::None;
        self.cell_id = ::std::option::Option::None;
        self.load = ::std::option::Option::None;
        self.weighted_load = ::std::option::Option::None;
        self.num_entries_in_client_list = ::std::option::Option::None;
        self.steam_china_only = ::std::option::Option::None;
        self.host = ::std::option::Option::None;
        self.vhost = ::std::option::Option::None;
        self.use_as_proxy = ::std::option::Option::None;
        self.proxy_request_path_template = ::std::option::Option::None;
        self.https_support = ::std::option::Option::None;
        self.allowed_app_ids.clear();
        self.preferred_server = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_ServerInfo {
        static instance: CContentServerDirectory_ServerInfo = CContentServerDirectory_ServerInfo {
            type_: ::std::option::Option::None,
            source_id: ::std::option::Option::None,
            cell_id: ::std::option::Option::None,
            load: ::std::option::Option::None,
            weighted_load: ::std::option::Option::None,
            num_entries_in_client_list: ::std::option::Option::None,
            steam_china_only: ::std::option::Option::None,
            host: ::std::option::Option::None,
            vhost: ::std::option::Option::None,
            use_as_proxy: ::std::option::Option::None,
            proxy_request_path_template: ::std::option::Option::None,
            https_support: ::std::option::Option::None,
            allowed_app_ids: ::std::vec::Vec::new(),
            preferred_server: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CContentServerDirectory_ServerInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_ServerInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_ServerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CContentServerDirectory_ServerInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetServersForSteamPipe_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetServersForSteamPipe_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Response.servers)
    pub servers: ::std::vec::Vec<CContentServerDirectory_ServerInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetServersForSteamPipe_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetServersForSteamPipe_Response {
    fn default() -> &'a CContentServerDirectory_GetServersForSteamPipe_Response {
        <CContentServerDirectory_GetServersForSteamPipe_Response as ::protobuf::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetServersForSteamPipe_Response {
    pub fn new() -> CContentServerDirectory_GetServersForSteamPipe_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "servers",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Response| { &m.servers },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Response| { &mut m.servers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetServersForSteamPipe_Response>(
            "CContentServerDirectory_GetServersForSteamPipe_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CContentServerDirectory_GetServersForSteamPipe_Response {
    const NAME: &'static str = "CContentServerDirectory_GetServersForSteamPipe_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.servers.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.servers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.servers {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetServersForSteamPipe_Response {
        CContentServerDirectory_GetServersForSteamPipe_Response::new()
    }

    fn clear(&mut self) {
        self.servers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetServersForSteamPipe_Response {
        static instance: CContentServerDirectory_GetServersForSteamPipe_Response = CContentServerDirectory_GetServersForSteamPipe_Response {
            servers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CContentServerDirectory_GetServersForSteamPipe_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetServersForSteamPipe_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetServersForSteamPipe_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CContentServerDirectory_GetServersForSteamPipe_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetDepotPatchInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetDepotPatchInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetDepotPatchInfo_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetDepotPatchInfo_Request.depotid)
    pub depotid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetDepotPatchInfo_Request.source_manifestid)
    pub source_manifestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetDepotPatchInfo_Request.target_manifestid)
    pub target_manifestid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetDepotPatchInfo_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetDepotPatchInfo_Request {
    fn default() -> &'a CContentServerDirectory_GetDepotPatchInfo_Request {
        <CContentServerDirectory_GetDepotPatchInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetDepotPatchInfo_Request {
    pub fn new() -> CContentServerDirectory_GetDepotPatchInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 depotid = 2;

    pub fn depotid(&self) -> u32 {
        self.depotid.unwrap_or(0)
    }

    pub fn clear_depotid(&mut self) {
        self.depotid = ::std::option::Option::None;
    }

    pub fn has_depotid(&self) -> bool {
        self.depotid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depotid(&mut self, v: u32) {
        self.depotid = ::std::option::Option::Some(v);
    }

    // optional uint64 source_manifestid = 3;

    pub fn source_manifestid(&self) -> u64 {
        self.source_manifestid.unwrap_or(0)
    }

    pub fn clear_source_manifestid(&mut self) {
        self.source_manifestid = ::std::option::Option::None;
    }

    pub fn has_source_manifestid(&self) -> bool {
        self.source_manifestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_manifestid(&mut self, v: u64) {
        self.source_manifestid = ::std::option::Option::Some(v);
    }

    // optional uint64 target_manifestid = 4;

    pub fn target_manifestid(&self) -> u64 {
        self.target_manifestid.unwrap_or(0)
    }

    pub fn clear_target_manifestid(&mut self) {
        self.target_manifestid = ::std::option::Option::None;
    }

    pub fn has_target_manifestid(&self) -> bool {
        self.target_manifestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target_manifestid(&mut self, v: u64) {
        self.target_manifestid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CContentServerDirectory_GetDepotPatchInfo_Request| { &m.appid },
            |m: &mut CContentServerDirectory_GetDepotPatchInfo_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "depotid",
            |m: &CContentServerDirectory_GetDepotPatchInfo_Request| { &m.depotid },
            |m: &mut CContentServerDirectory_GetDepotPatchInfo_Request| { &mut m.depotid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_manifestid",
            |m: &CContentServerDirectory_GetDepotPatchInfo_Request| { &m.source_manifestid },
            |m: &mut CContentServerDirectory_GetDepotPatchInfo_Request| { &mut m.source_manifestid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "target_manifestid",
            |m: &CContentServerDirectory_GetDepotPatchInfo_Request| { &m.target_manifestid },
            |m: &mut CContentServerDirectory_GetDepotPatchInfo_Request| { &mut m.target_manifestid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetDepotPatchInfo_Request>(
            "CContentServerDirectory_GetDepotPatchInfo_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CContentServerDirectory_GetDepotPatchInfo_Request {
    const NAME: &'static str = "CContentServerDirectory_GetDepotPatchInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.depotid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.source_manifestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.target_manifestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.depotid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.source_manifestid {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.target_manifestid {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.depotid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.source_manifestid {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.target_manifestid {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetDepotPatchInfo_Request {
        CContentServerDirectory_GetDepotPatchInfo_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.depotid = ::std::option::Option::None;
        self.source_manifestid = ::std::option::Option::None;
        self.target_manifestid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetDepotPatchInfo_Request {
        static instance: CContentServerDirectory_GetDepotPatchInfo_Request = CContentServerDirectory_GetDepotPatchInfo_Request {
            appid: ::std::option::Option::None,
            depotid: ::std::option::Option::None,
            source_manifestid: ::std::option::Option::None,
            target_manifestid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CContentServerDirectory_GetDepotPatchInfo_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetDepotPatchInfo_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetDepotPatchInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CContentServerDirectory_GetDepotPatchInfo_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetDepotPatchInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetDepotPatchInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetDepotPatchInfo_Response.is_available)
    pub is_available: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetDepotPatchInfo_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetDepotPatchInfo_Response {
    fn default() -> &'a CContentServerDirectory_GetDepotPatchInfo_Response {
        <CContentServerDirectory_GetDepotPatchInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetDepotPatchInfo_Response {
    pub fn new() -> CContentServerDirectory_GetDepotPatchInfo_Response {
        ::std::default::Default::default()
    }

    // optional bool is_available = 1;

    pub fn is_available(&self) -> bool {
        self.is_available.unwrap_or(false)
    }

    pub fn clear_is_available(&mut self) {
        self.is_available = ::std::option::Option::None;
    }

    pub fn has_is_available(&self) -> bool {
        self.is_available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_available(&mut self, v: bool) {
        self.is_available = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_available",
            |m: &CContentServerDirectory_GetDepotPatchInfo_Response| { &m.is_available },
            |m: &mut CContentServerDirectory_GetDepotPatchInfo_Response| { &mut m.is_available },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetDepotPatchInfo_Response>(
            "CContentServerDirectory_GetDepotPatchInfo_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CContentServerDirectory_GetDepotPatchInfo_Response {
    const NAME: &'static str = "CContentServerDirectory_GetDepotPatchInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_available = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.is_available {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.is_available {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetDepotPatchInfo_Response {
        CContentServerDirectory_GetDepotPatchInfo_Response::new()
    }

    fn clear(&mut self) {
        self.is_available = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetDepotPatchInfo_Response {
        static instance: CContentServerDirectory_GetDepotPatchInfo_Response = CContentServerDirectory_GetDepotPatchInfo_Response {
            is_available: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CContentServerDirectory_GetDepotPatchInfo_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetDepotPatchInfo_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetDepotPatchInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CContentServerDirectory_GetDepotPatchInfo_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetClientUpdateHosts_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetClientUpdateHosts_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetClientUpdateHosts_Request.cached_signature)
    pub cached_signature: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetClientUpdateHosts_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetClientUpdateHosts_Request {
    fn default() -> &'a CContentServerDirectory_GetClientUpdateHosts_Request {
        <CContentServerDirectory_GetClientUpdateHosts_Request as ::protobuf::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetClientUpdateHosts_Request {
    pub fn new() -> CContentServerDirectory_GetClientUpdateHosts_Request {
        ::std::default::Default::default()
    }

    // optional string cached_signature = 1;

    pub fn cached_signature(&self) -> &str {
        match self.cached_signature.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_cached_signature(&mut self) {
        self.cached_signature = ::std::option::Option::None;
    }

    pub fn has_cached_signature(&self) -> bool {
        self.cached_signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cached_signature(&mut self, v: ::std::string::String) {
        self.cached_signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cached_signature(&mut self) -> &mut ::std::string::String {
        if self.cached_signature.is_none() {
            self.cached_signature = ::std::option::Option::Some(::std::string::String::new());
        }
        self.cached_signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_cached_signature(&mut self) -> ::std::string::String {
        self.cached_signature.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cached_signature",
            |m: &CContentServerDirectory_GetClientUpdateHosts_Request| { &m.cached_signature },
            |m: &mut CContentServerDirectory_GetClientUpdateHosts_Request| { &mut m.cached_signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetClientUpdateHosts_Request>(
            "CContentServerDirectory_GetClientUpdateHosts_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CContentServerDirectory_GetClientUpdateHosts_Request {
    const NAME: &'static str = "CContentServerDirectory_GetClientUpdateHosts_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.cached_signature = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cached_signature.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.cached_signature.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetClientUpdateHosts_Request {
        CContentServerDirectory_GetClientUpdateHosts_Request::new()
    }

    fn clear(&mut self) {
        self.cached_signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetClientUpdateHosts_Request {
        static instance: CContentServerDirectory_GetClientUpdateHosts_Request = CContentServerDirectory_GetClientUpdateHosts_Request {
            cached_signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CContentServerDirectory_GetClientUpdateHosts_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetClientUpdateHosts_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetClientUpdateHosts_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CContentServerDirectory_GetClientUpdateHosts_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetClientUpdateHosts_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetClientUpdateHosts_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetClientUpdateHosts_Response.hosts_kv)
    pub hosts_kv: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetClientUpdateHosts_Response.valid_until_time)
    pub valid_until_time: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetClientUpdateHosts_Response.ip_country)
    pub ip_country: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetClientUpdateHosts_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetClientUpdateHosts_Response {
    fn default() -> &'a CContentServerDirectory_GetClientUpdateHosts_Response {
        <CContentServerDirectory_GetClientUpdateHosts_Response as ::protobuf::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetClientUpdateHosts_Response {
    pub fn new() -> CContentServerDirectory_GetClientUpdateHosts_Response {
        ::std::default::Default::default()
    }

    // optional string hosts_kv = 1;

    pub fn hosts_kv(&self) -> &str {
        match self.hosts_kv.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_hosts_kv(&mut self) {
        self.hosts_kv = ::std::option::Option::None;
    }

    pub fn has_hosts_kv(&self) -> bool {
        self.hosts_kv.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hosts_kv(&mut self, v: ::std::string::String) {
        self.hosts_kv = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hosts_kv(&mut self) -> &mut ::std::string::String {
        if self.hosts_kv.is_none() {
            self.hosts_kv = ::std::option::Option::Some(::std::string::String::new());
        }
        self.hosts_kv.as_mut().unwrap()
    }

    // Take field
    pub fn take_hosts_kv(&mut self) -> ::std::string::String {
        self.hosts_kv.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 valid_until_time = 2;

    pub fn valid_until_time(&self) -> u64 {
        self.valid_until_time.unwrap_or(0)
    }

    pub fn clear_valid_until_time(&mut self) {
        self.valid_until_time = ::std::option::Option::None;
    }

    pub fn has_valid_until_time(&self) -> bool {
        self.valid_until_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_valid_until_time(&mut self, v: u64) {
        self.valid_until_time = ::std::option::Option::Some(v);
    }

    // optional string ip_country = 3;

    pub fn ip_country(&self) -> &str {
        match self.ip_country.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ip_country(&mut self) {
        self.ip_country = ::std::option::Option::None;
    }

    pub fn has_ip_country(&self) -> bool {
        self.ip_country.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip_country(&mut self, v: ::std::string::String) {
        self.ip_country = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip_country(&mut self) -> &mut ::std::string::String {
        if self.ip_country.is_none() {
            self.ip_country = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ip_country.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip_country(&mut self) -> ::std::string::String {
        self.ip_country.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hosts_kv",
            |m: &CContentServerDirectory_GetClientUpdateHosts_Response| { &m.hosts_kv },
            |m: &mut CContentServerDirectory_GetClientUpdateHosts_Response| { &mut m.hosts_kv },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "valid_until_time",
            |m: &CContentServerDirectory_GetClientUpdateHosts_Response| { &m.valid_until_time },
            |m: &mut CContentServerDirectory_GetClientUpdateHosts_Response| { &mut m.valid_until_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ip_country",
            |m: &CContentServerDirectory_GetClientUpdateHosts_Response| { &m.ip_country },
            |m: &mut CContentServerDirectory_GetClientUpdateHosts_Response| { &mut m.ip_country },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetClientUpdateHosts_Response>(
            "CContentServerDirectory_GetClientUpdateHosts_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CContentServerDirectory_GetClientUpdateHosts_Response {
    const NAME: &'static str = "CContentServerDirectory_GetClientUpdateHosts_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hosts_kv = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.valid_until_time = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.ip_country = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hosts_kv.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.valid_until_time {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.ip_country.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.hosts_kv.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.valid_until_time {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.ip_country.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetClientUpdateHosts_Response {
        CContentServerDirectory_GetClientUpdateHosts_Response::new()
    }

    fn clear(&mut self) {
        self.hosts_kv = ::std::option::Option::None;
        self.valid_until_time = ::std::option::Option::None;
        self.ip_country = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetClientUpdateHosts_Response {
        static instance: CContentServerDirectory_GetClientUpdateHosts_Response = CContentServerDirectory_GetClientUpdateHosts_Response {
            hosts_kv: ::std::option::Option::None,
            valid_until_time: ::std::option::Option::None,
            ip_country: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CContentServerDirectory_GetClientUpdateHosts_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetClientUpdateHosts_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetClientUpdateHosts_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CContentServerDirectory_GetClientUpdateHosts_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-steammessages_contentsystem.steamclient.proto\x1a,steammessages_unifi\
    ed_base.steamclient.proto\"\xef\x02\n6CContentServerDirectory_GetServers\
    ForSteamPipe_Request\x12+\n\x07cell_id\x18\x01\x20\x01(\rR\x06cellIdB\
    \x12\x82\xb5\x18\x0eclient\x20Cell\x20ID\x12E\n\x0bmax_servers\x18\x02\
    \x20\x01(\r:\x0220R\nmaxServersB\x20\x82\xb5\x18\x1cmax\x20servers\x20in\
    \x20response\x20list\x126\n\x0bip_override\x18\x03\x20\x01(\tR\nipOverri\
    deB\x15\x82\xb5\x18\x11client\x20IP\x20address\x129\n\rlauncher_type\x18\
    \x04\x20\x01(\x05:\x010R\x0clauncherTypeB\x11\x82\xb5\x18\rlauncher\x20t\
    ype\x12N\n\x0bipv6_public\x18\x05\x20\x01(\tR\nipv6PublicB-\x82\xb5\x18)\
    client\x20public\x20ipv6\x20address\x20if\x20it\x20knows\x20it\"\x90\x04\
    \n\"CContentServerDirectory_ServerInfo\x12\x12\n\x04type\x18\x01\x20\x01\
    (\tR\x04type\x12\x1b\n\tsource_id\x18\x02\x20\x01(\x05R\x08sourceId\x12\
    \x17\n\x07cell_id\x18\x03\x20\x01(\x05R\x06cellId\x12\x12\n\x04load\x18\
    \x04\x20\x01(\x05R\x04load\x12#\n\rweighted_load\x18\x05\x20\x01(\x02R\
    \x0cweightedLoad\x12:\n\x1anum_entries_in_client_list\x18\x06\x20\x01(\
    \x05R\x16numEntriesInClientList\x12(\n\x10steam_china_only\x18\x07\x20\
    \x01(\x08R\x0esteamChinaOnly\x12\x12\n\x04host\x18\x08\x20\x01(\tR\x04ho\
    st\x12\x14\n\x05vhost\x18\t\x20\x01(\tR\x05vhost\x12\x20\n\x0cuse_as_pro\
    xy\x18\n\x20\x01(\x08R\nuseAsProxy\x12=\n\x1bproxy_request_path_template\
    \x18\x0b\x20\x01(\tR\x18proxyRequestPathTemplate\x12#\n\rhttps_support\
    \x18\x0c\x20\x01(\tR\x0chttpsSupport\x12&\n\x0fallowed_app_ids\x18\r\x20\
    \x03(\rR\rallowedAppIds\x12)\n\x10preferred_server\x18\x0e\x20\x01(\x08R\
    \x0fpreferredServer\"x\n7CContentServerDirectory_GetServersForSteamPipe_\
    Response\x12=\n\x07servers\x18\x01\x20\x03(\x0b2#.CContentServerDirector\
    y_ServerInfoR\x07servers\"\xbd\x01\n1CContentServerDirectory_GetDepotPat\
    chInfo_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\n\
    \x07depotid\x18\x02\x20\x01(\rR\x07depotid\x12+\n\x11source_manifestid\
    \x18\x03\x20\x01(\x04R\x10sourceManifestid\x12+\n\x11target_manifestid\
    \x18\x04\x20\x01(\x04R\x10targetManifestid\"W\n2CContentServerDirectory_\
    GetDepotPatchInfo_Response\x12!\n\x0cis_available\x18\x01\x20\x01(\x08R\
    \x0bisAvailable\"a\n4CContentServerDirectory_GetClientUpdateHosts_Reques\
    t\x12)\n\x10cached_signature\x18\x01\x20\x01(\tR\x0fcachedSignature\"\
    \x9b\x01\n5CContentServerDirectory_GetClientUpdateHosts_Response\x12\x19\
    \n\x08hosts_kv\x18\x01\x20\x01(\tR\x07hostsKv\x12(\n\x10valid_until_time\
    \x18\x02\x20\x01(\x04R\x0evalidUntilTime\x12\x1d\n\nip_country\x18\x03\
    \x20\x01(\tR\tipCountry2\xd2\x03\n\x16ContentServerDirectory\x12\x8b\x01\
    \n\x16GetServersForSteamPipe\x127.CContentServerDirectory_GetServersForS\
    teamPipe_Request\x1a8.CContentServerDirectory_GetServersForSteamPipe_Res\
    ponse\x12|\n\x11GetDepotPatchInfo\x122.CContentServerDirectory_GetDepotP\
    atchInfo_Request\x1a3.CContentServerDirectory_GetDepotPatchInfo_Response\
    \x12\x85\x01\n\x14GetClientUpdateHosts\x125.CContentServerDirectory_GetC\
    lientUpdateHosts_Request\x1a6.CContentServerDirectory_GetClientUpdateHos\
    ts_Response\x1a$\x82\xb5\x18\x20Content\x20Server\x20and\x20CDN\x20direc\
    toryB\x03\x80\x01\x01J\xb6\x14\n\x06\x12\x04\0\0<\x01\n\t\n\x02\x03\0\
    \x12\x03\0\06\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\x10\x12\x03\
    \x02\0\"\n\n\n\x02\x04\0\x12\x04\x04\0\n\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x04\x08>\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x08G\n\x0c\n\x05\x04\0\x02\
    \0\x04\x12\x03\x05\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x11\
    \x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x18\x1f\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x05\"#\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x05$F\n\
    \x0f\n\x08\x04\0\x02\0\x08\xd0\x86\x03\x12\x03\x05%E\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\x06\x08g\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x06\x08\
    \x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x11\x17\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x06\x18#\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06&\
    '\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x06(f\n\x0c\n\x05\x04\0\x02\x01\
    \x07\x12\x03\x0635\n\x0f\n\x08\x04\0\x02\x01\x08\xd0\x86\x03\x12\x03\x06\
    7e\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x07\x08N\n\x0c\n\x05\x04\0\x02\x02\
    \x04\x12\x03\x07\x08\x10\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x07\x11\
    \x17\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x07\x18#\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\x07&'\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x07(M\n\
    \x0f\n\x08\x04\0\x02\x02\x08\xd0\x86\x03\x12\x03\x07)L\n\x0b\n\x04\x04\0\
    \x02\x03\x12\x03\x08\x08X\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x08\x08\
    \x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x08\x11\x16\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03\x08\x17$\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x08'\
    (\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\x08)W\n\x0c\n\x05\x04\0\x02\x03\
    \x07\x12\x03\x0845\n\x0f\n\x08\x04\0\x02\x03\x08\xd0\x86\x03\x12\x03\x08\
    7V\n\x0b\n\x04\x04\0\x02\x04\x12\x03\t\x08f\n\x0c\n\x05\x04\0\x02\x04\
    \x04\x12\x03\t\x08\x10\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\t\x11\x17\n\
    \x0c\n\x05\x04\0\x02\x04\x01\x12\x03\t\x18#\n\x0c\n\x05\x04\0\x02\x04\
    \x03\x12\x03\t&'\n\x0c\n\x05\x04\0\x02\x04\x08\x12\x03\t(e\n\x0f\n\x08\
    \x04\0\x02\x04\x08\xd0\x86\x03\x12\x03\t)d\n\n\n\x02\x04\x01\x12\x04\x0c\
    \0\x1b\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0c\x08*\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03\r\x08!\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\r\x08\x10\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\r\x11\x17\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\r\x18\x1c\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\r\x1f\x20\n\
    \x0b\n\x04\x04\x01\x02\x01\x12\x03\x0e\x08%\n\x0c\n\x05\x04\x01\x02\x01\
    \x04\x12\x03\x0e\x08\x10\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0e\x11\
    \x16\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0e\x17\x20\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\x0e#$\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0f\
    \x08#\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\x0f\x08\x10\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\x0f\x11\x16\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03\x0f\x17\x1e\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0f!\"\n\
    \x0b\n\x04\x04\x01\x02\x03\x12\x03\x10\x08\x20\n\x0c\n\x05\x04\x01\x02\
    \x03\x04\x12\x03\x10\x08\x10\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x10\
    \x11\x16\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x10\x17\x1b\n\x0c\n\x05\
    \x04\x01\x02\x03\x03\x12\x03\x10\x1e\x1f\n\x0b\n\x04\x04\x01\x02\x04\x12\
    \x03\x11\x08)\n\x0c\n\x05\x04\x01\x02\x04\x04\x12\x03\x11\x08\x10\n\x0c\
    \n\x05\x04\x01\x02\x04\x05\x12\x03\x11\x11\x16\n\x0c\n\x05\x04\x01\x02\
    \x04\x01\x12\x03\x11\x17$\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x11'(\
    \n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x12\x086\n\x0c\n\x05\x04\x01\x02\
    \x05\x04\x12\x03\x12\x08\x10\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03\x12\
    \x11\x16\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x12\x171\n\x0c\n\x05\
    \x04\x01\x02\x05\x03\x12\x03\x1245\n\x0b\n\x04\x04\x01\x02\x06\x12\x03\
    \x13\x08+\n\x0c\n\x05\x04\x01\x02\x06\x04\x12\x03\x13\x08\x10\n\x0c\n\
    \x05\x04\x01\x02\x06\x05\x12\x03\x13\x11\x15\n\x0c\n\x05\x04\x01\x02\x06\
    \x01\x12\x03\x13\x16&\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03\x13)*\n\
    \x0b\n\x04\x04\x01\x02\x07\x12\x03\x14\x08!\n\x0c\n\x05\x04\x01\x02\x07\
    \x04\x12\x03\x14\x08\x10\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x03\x14\x11\
    \x17\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\x03\x14\x18\x1c\n\x0c\n\x05\x04\
    \x01\x02\x07\x03\x12\x03\x14\x1f\x20\n\x0b\n\x04\x04\x01\x02\x08\x12\x03\
    \x15\x08\"\n\x0c\n\x05\x04\x01\x02\x08\x04\x12\x03\x15\x08\x10\n\x0c\n\
    \x05\x04\x01\x02\x08\x05\x12\x03\x15\x11\x17\n\x0c\n\x05\x04\x01\x02\x08\
    \x01\x12\x03\x15\x18\x1d\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\x03\x15\x20\
    !\n\x0b\n\x04\x04\x01\x02\t\x12\x03\x16\x08(\n\x0c\n\x05\x04\x01\x02\t\
    \x04\x12\x03\x16\x08\x10\n\x0c\n\x05\x04\x01\x02\t\x05\x12\x03\x16\x11\
    \x15\n\x0c\n\x05\x04\x01\x02\t\x01\x12\x03\x16\x16\"\n\x0c\n\x05\x04\x01\
    \x02\t\x03\x12\x03\x16%'\n\x0b\n\x04\x04\x01\x02\n\x12\x03\x17\x089\n\
    \x0c\n\x05\x04\x01\x02\n\x04\x12\x03\x17\x08\x10\n\x0c\n\x05\x04\x01\x02\
    \n\x05\x12\x03\x17\x11\x17\n\x0c\n\x05\x04\x01\x02\n\x01\x12\x03\x17\x18\
    3\n\x0c\n\x05\x04\x01\x02\n\x03\x12\x03\x1768\n\x0b\n\x04\x04\x01\x02\
    \x0b\x12\x03\x18\x08+\n\x0c\n\x05\x04\x01\x02\x0b\x04\x12\x03\x18\x08\
    \x10\n\x0c\n\x05\x04\x01\x02\x0b\x05\x12\x03\x18\x11\x17\n\x0c\n\x05\x04\
    \x01\x02\x0b\x01\x12\x03\x18\x18%\n\x0c\n\x05\x04\x01\x02\x0b\x03\x12\
    \x03\x18(*\n\x0b\n\x04\x04\x01\x02\x0c\x12\x03\x19\x08-\n\x0c\n\x05\x04\
    \x01\x02\x0c\x04\x12\x03\x19\x08\x10\n\x0c\n\x05\x04\x01\x02\x0c\x05\x12\
    \x03\x19\x11\x17\n\x0c\n\x05\x04\x01\x02\x0c\x01\x12\x03\x19\x18'\n\x0c\
    \n\x05\x04\x01\x02\x0c\x03\x12\x03\x19*,\n\x0b\n\x04\x04\x01\x02\r\x12\
    \x03\x1a\x08,\n\x0c\n\x05\x04\x01\x02\r\x04\x12\x03\x1a\x08\x10\n\x0c\n\
    \x05\x04\x01\x02\r\x05\x12\x03\x1a\x11\x15\n\x0c\n\x05\x04\x01\x02\r\x01\
    \x12\x03\x1a\x16&\n\x0c\n\x05\x04\x01\x02\r\x03\x12\x03\x1a)+\n\n\n\x02\
    \x04\x02\x12\x04\x1d\0\x1f\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1d\x08?\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03\x1e\x08A\n\x0c\n\x05\x04\x02\x02\0\x04\
    \x12\x03\x1e\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x1e\x114\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1e5<\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x1e?@\n\n\n\x02\x04\x03\x12\x04!\0&\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03!\x089\n\x0b\n\x04\x04\x03\x02\0\x12\x03\"\x08\"\n\x0c\n\x05\x04\
    \x03\x02\0\x04\x12\x03\"\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\"\
    \x11\x17\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\"\x18\x1d\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03\"\x20!\n\x0b\n\x04\x04\x03\x02\x01\x12\x03#\x08$\
    \n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03#\x08\x10\n\x0c\n\x05\x04\x03\
    \x02\x01\x05\x12\x03#\x11\x17\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03#\
    \x18\x1f\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03#\"#\n\x0b\n\x04\x04\x03\
    \x02\x02\x12\x03$\x08.\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03$\x08\x10\
    \n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03$\x11\x17\n\x0c\n\x05\x04\x03\
    \x02\x02\x01\x12\x03$\x18)\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03$,-\n\
    \x0b\n\x04\x04\x03\x02\x03\x12\x03%\x08.\n\x0c\n\x05\x04\x03\x02\x03\x04\
    \x12\x03%\x08\x10\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03%\x11\x17\n\x0c\
    \n\x05\x04\x03\x02\x03\x01\x12\x03%\x18)\n\x0c\n\x05\x04\x03\x02\x03\x03\
    \x12\x03%,-\n\n\n\x02\x04\x04\x12\x04(\0*\x01\n\n\n\x03\x04\x04\x01\x12\
    \x03(\x08:\n\x0b\n\x04\x04\x04\x02\0\x12\x03)\x08'\n\x0c\n\x05\x04\x04\
    \x02\0\x04\x12\x03)\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03)\x11\
    \x15\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03)\x16\"\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x03)%&\n\n\n\x02\x04\x05\x12\x04,\0.\x01\n\n\n\x03\x04\
    \x05\x01\x12\x03,\x08<\n\x0b\n\x04\x04\x05\x02\0\x12\x03-\x08-\n\x0c\n\
    \x05\x04\x05\x02\0\x04\x12\x03-\x08\x10\n\x0c\n\x05\x04\x05\x02\0\x05\
    \x12\x03-\x11\x17\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03-\x18(\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x03-+,\n\n\n\x02\x04\x06\x12\x040\04\x01\n\n\
    \n\x03\x04\x06\x01\x12\x030\x08=\n\x0b\n\x04\x04\x06\x02\0\x12\x031\x08%\
    \n\x0c\n\x05\x04\x06\x02\0\x04\x12\x031\x08\x10\n\x0c\n\x05\x04\x06\x02\
    \0\x05\x12\x031\x11\x17\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x031\x18\x20\n\
    \x0c\n\x05\x04\x06\x02\0\x03\x12\x031#$\n\x0b\n\x04\x04\x06\x02\x01\x12\
    \x032\x08-\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x032\x08\x10\n\x0c\n\x05\
    \x04\x06\x02\x01\x05\x12\x032\x11\x17\n\x0c\n\x05\x04\x06\x02\x01\x01\
    \x12\x032\x18(\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x032+,\n\x0b\n\x04\
    \x04\x06\x02\x02\x12\x033\x08'\n\x0c\n\x05\x04\x06\x02\x02\x04\x12\x033\
    \x08\x10\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x033\x11\x17\n\x0c\n\x05\
    \x04\x06\x02\x02\x01\x12\x033\x18\"\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\
    \x033%&\n\n\n\x02\x06\0\x12\x046\0<\x01\n\n\n\x03\x06\0\x01\x12\x036\x08\
    \x1e\n\n\n\x03\x06\0\x03\x12\x037\x08J\n\r\n\x06\x06\0\x03\xd0\x86\x03\
    \x12\x037\x08J\n\x0c\n\x04\x06\0\x02\0\x12\x049\x08\xa0\x01\n\x0c\n\x05\
    \x06\0\x02\0\x01\x12\x039\x0c\"\n\x0c\n\x05\x06\0\x02\0\x02\x12\x039$[\n\
    \r\n\x05\x06\0\x02\0\x03\x12\x049f\x9e\x01\n\x0c\n\x04\x06\0\x02\x01\x12\
    \x04:\x08\x91\x01\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03:\x0c\x1d\n\x0c\n\
    \x05\x06\0\x02\x01\x02\x12\x03:\x1fQ\n\r\n\x05\x06\0\x02\x01\x03\x12\x04\
    :\\\x8f\x01\n\x0c\n\x04\x06\0\x02\x02\x12\x04;\x08\x9a\x01\n\x0c\n\x05\
    \x06\0\x02\x02\x01\x12\x03;\x0c\x20\n\x0c\n\x05\x06\0\x02\x02\x02\x12\
    \x03;\"W\n\r\n\x05\x06\0\x02\x02\x03\x12\x04;b\x98\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(CContentServerDirectory_GetServersForSteamPipe_Request::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_ServerInfo::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetServersForSteamPipe_Response::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetDepotPatchInfo_Request::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetDepotPatchInfo_Response::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetClientUpdateHosts_Request::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetClientUpdateHosts_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
