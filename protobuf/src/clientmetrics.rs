// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `clientmetrics.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CClientMetrics_ClientBootstrap_RequestInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CClientMetrics_ClientBootstrap_RequestInfo {
    // message fields
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.original_hostname)
    pub original_hostname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.actual_hostname)
    pub actual_hostname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.path)
    pub path: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.base_name)
    pub base_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.success)
    pub success: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.status_code)
    pub status_code: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.address_of_request_url)
    pub address_of_request_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.response_time_ms)
    pub response_time_ms: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.bytes_received)
    pub bytes_received: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.num_retries)
    pub num_retries: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CClientMetrics_ClientBootstrap_RequestInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CClientMetrics_ClientBootstrap_RequestInfo {
    fn default() -> &'a CClientMetrics_ClientBootstrap_RequestInfo {
        <CClientMetrics_ClientBootstrap_RequestInfo as ::protobuf::Message>::default_instance()
    }
}

impl CClientMetrics_ClientBootstrap_RequestInfo {
    pub fn new() -> CClientMetrics_ClientBootstrap_RequestInfo {
        ::std::default::Default::default()
    }

    // optional string original_hostname = 1;

    pub fn original_hostname(&self) -> &str {
        match self.original_hostname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_original_hostname(&mut self) {
        self.original_hostname = ::std::option::Option::None;
    }

    pub fn has_original_hostname(&self) -> bool {
        self.original_hostname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_original_hostname(&mut self, v: ::std::string::String) {
        self.original_hostname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_hostname(&mut self) -> &mut ::std::string::String {
        if self.original_hostname.is_none() {
            self.original_hostname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.original_hostname.as_mut().unwrap()
    }

    // Take field
    pub fn take_original_hostname(&mut self) -> ::std::string::String {
        self.original_hostname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string actual_hostname = 2;

    pub fn actual_hostname(&self) -> &str {
        match self.actual_hostname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_actual_hostname(&mut self) {
        self.actual_hostname = ::std::option::Option::None;
    }

    pub fn has_actual_hostname(&self) -> bool {
        self.actual_hostname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_actual_hostname(&mut self, v: ::std::string::String) {
        self.actual_hostname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actual_hostname(&mut self) -> &mut ::std::string::String {
        if self.actual_hostname.is_none() {
            self.actual_hostname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.actual_hostname.as_mut().unwrap()
    }

    // Take field
    pub fn take_actual_hostname(&mut self) -> ::std::string::String {
        self.actual_hostname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string path = 3;

    pub fn path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_path(&mut self) {
        self.path = ::std::option::Option::None;
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path = ::std::option::Option::Some(::std::string::String::new());
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string base_name = 4;

    pub fn base_name(&self) -> &str {
        match self.base_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_base_name(&mut self) {
        self.base_name = ::std::option::Option::None;
    }

    pub fn has_base_name(&self) -> bool {
        self.base_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_name(&mut self, v: ::std::string::String) {
        self.base_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_name(&mut self) -> &mut ::std::string::String {
        if self.base_name.is_none() {
            self.base_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.base_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_name(&mut self) -> ::std::string::String {
        self.base_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool success = 5;

    pub fn success(&self) -> bool {
        self.success.unwrap_or(false)
    }

    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    // optional uint32 status_code = 6;

    pub fn status_code(&self) -> u32 {
        self.status_code.unwrap_or(0)
    }

    pub fn clear_status_code(&mut self) {
        self.status_code = ::std::option::Option::None;
    }

    pub fn has_status_code(&self) -> bool {
        self.status_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status_code(&mut self, v: u32) {
        self.status_code = ::std::option::Option::Some(v);
    }

    // optional string address_of_request_url = 7;

    pub fn address_of_request_url(&self) -> &str {
        match self.address_of_request_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_address_of_request_url(&mut self) {
        self.address_of_request_url = ::std::option::Option::None;
    }

    pub fn has_address_of_request_url(&self) -> bool {
        self.address_of_request_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address_of_request_url(&mut self, v: ::std::string::String) {
        self.address_of_request_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_of_request_url(&mut self) -> &mut ::std::string::String {
        if self.address_of_request_url.is_none() {
            self.address_of_request_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.address_of_request_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_address_of_request_url(&mut self) -> ::std::string::String {
        self.address_of_request_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 response_time_ms = 8;

    pub fn response_time_ms(&self) -> u32 {
        self.response_time_ms.unwrap_or(0)
    }

    pub fn clear_response_time_ms(&mut self) {
        self.response_time_ms = ::std::option::Option::None;
    }

    pub fn has_response_time_ms(&self) -> bool {
        self.response_time_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response_time_ms(&mut self, v: u32) {
        self.response_time_ms = ::std::option::Option::Some(v);
    }

    // optional uint64 bytes_received = 9;

    pub fn bytes_received(&self) -> u64 {
        self.bytes_received.unwrap_or(0)
    }

    pub fn clear_bytes_received(&mut self) {
        self.bytes_received = ::std::option::Option::None;
    }

    pub fn has_bytes_received(&self) -> bool {
        self.bytes_received.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes_received(&mut self, v: u64) {
        self.bytes_received = ::std::option::Option::Some(v);
    }

    // optional uint32 num_retries = 10;

    pub fn num_retries(&self) -> u32 {
        self.num_retries.unwrap_or(0)
    }

    pub fn clear_num_retries(&mut self) {
        self.num_retries = ::std::option::Option::None;
    }

    pub fn has_num_retries(&self) -> bool {
        self.num_retries.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_retries(&mut self, v: u32) {
        self.num_retries = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "original_hostname",
            |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.original_hostname },
            |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.original_hostname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "actual_hostname",
            |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.actual_hostname },
            |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.actual_hostname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "path",
            |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.path },
            |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "base_name",
            |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.base_name },
            |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.base_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "success",
            |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.success },
            |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.success },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status_code",
            |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.status_code },
            |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.status_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address_of_request_url",
            |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.address_of_request_url },
            |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.address_of_request_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "response_time_ms",
            |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.response_time_ms },
            |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.response_time_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bytes_received",
            |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.bytes_received },
            |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.bytes_received },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_retries",
            |m: &CClientMetrics_ClientBootstrap_RequestInfo| { &m.num_retries },
            |m: &mut CClientMetrics_ClientBootstrap_RequestInfo| { &mut m.num_retries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CClientMetrics_ClientBootstrap_RequestInfo>(
            "CClientMetrics_ClientBootstrap_RequestInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CClientMetrics_ClientBootstrap_RequestInfo {
    const NAME: &'static str = "CClientMetrics_ClientBootstrap_RequestInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.original_hostname = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.actual_hostname = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.path = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.base_name = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.success = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.status_code = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.address_of_request_url = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.response_time_ms = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.bytes_received = ::std::option::Option::Some(is.read_uint64()?);
                },
                80 => {
                    self.num_retries = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.original_hostname.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.actual_hostname.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.base_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.success {
            my_size += 1 + 1;
        }
        if let Some(v) = self.status_code {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.address_of_request_url.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.response_time_ms {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.bytes_received {
            my_size += ::protobuf::rt::uint64_size(9, v);
        }
        if let Some(v) = self.num_retries {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.original_hostname.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.actual_hostname.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.path.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.base_name.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.success {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.status_code {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.address_of_request_url.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.response_time_ms {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.bytes_received {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.num_retries {
            os.write_uint32(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CClientMetrics_ClientBootstrap_RequestInfo {
        CClientMetrics_ClientBootstrap_RequestInfo::new()
    }

    fn clear(&mut self) {
        self.original_hostname = ::std::option::Option::None;
        self.actual_hostname = ::std::option::Option::None;
        self.path = ::std::option::Option::None;
        self.base_name = ::std::option::Option::None;
        self.success = ::std::option::Option::None;
        self.status_code = ::std::option::Option::None;
        self.address_of_request_url = ::std::option::Option::None;
        self.response_time_ms = ::std::option::Option::None;
        self.bytes_received = ::std::option::Option::None;
        self.num_retries = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CClientMetrics_ClientBootstrap_RequestInfo {
        static instance: CClientMetrics_ClientBootstrap_RequestInfo = CClientMetrics_ClientBootstrap_RequestInfo {
            original_hostname: ::std::option::Option::None,
            actual_hostname: ::std::option::Option::None,
            path: ::std::option::Option::None,
            base_name: ::std::option::Option::None,
            success: ::std::option::Option::None,
            status_code: ::std::option::Option::None,
            address_of_request_url: ::std::option::Option::None,
            response_time_ms: ::std::option::Option::None,
            bytes_received: ::std::option::Option::None,
            num_retries: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CClientMetrics_ClientBootstrap_RequestInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CClientMetrics_ClientBootstrap_RequestInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CClientMetrics_ClientBootstrap_RequestInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CClientMetrics_ClientBootstrap_RequestInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CClientMetrics_ClientBootstrap_Summary)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CClientMetrics_ClientBootstrap_Summary {
    // message fields
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.launcher_type)
    pub launcher_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.steam_realm)
    pub steam_realm: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.beta_name)
    pub beta_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.download_completed)
    pub download_completed: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.total_time_ms)
    pub total_time_ms: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.manifest_requests)
    pub manifest_requests: ::std::vec::Vec<CClientMetrics_ClientBootstrap_RequestInfo>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.package_requests)
    pub package_requests: ::std::vec::Vec<CClientMetrics_ClientBootstrap_RequestInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CClientMetrics_ClientBootstrap_Summary.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CClientMetrics_ClientBootstrap_Summary {
    fn default() -> &'a CClientMetrics_ClientBootstrap_Summary {
        <CClientMetrics_ClientBootstrap_Summary as ::protobuf::Message>::default_instance()
    }
}

impl CClientMetrics_ClientBootstrap_Summary {
    pub fn new() -> CClientMetrics_ClientBootstrap_Summary {
        ::std::default::Default::default()
    }

    // optional uint32 launcher_type = 1;

    pub fn launcher_type(&self) -> u32 {
        self.launcher_type.unwrap_or(0)
    }

    pub fn clear_launcher_type(&mut self) {
        self.launcher_type = ::std::option::Option::None;
    }

    pub fn has_launcher_type(&self) -> bool {
        self.launcher_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_launcher_type(&mut self, v: u32) {
        self.launcher_type = ::std::option::Option::Some(v);
    }

    // optional uint32 steam_realm = 2;

    pub fn steam_realm(&self) -> u32 {
        self.steam_realm.unwrap_or(0)
    }

    pub fn clear_steam_realm(&mut self) {
        self.steam_realm = ::std::option::Option::None;
    }

    pub fn has_steam_realm(&self) -> bool {
        self.steam_realm.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_realm(&mut self, v: u32) {
        self.steam_realm = ::std::option::Option::Some(v);
    }

    // optional string beta_name = 3;

    pub fn beta_name(&self) -> &str {
        match self.beta_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_beta_name(&mut self) {
        self.beta_name = ::std::option::Option::None;
    }

    pub fn has_beta_name(&self) -> bool {
        self.beta_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beta_name(&mut self, v: ::std::string::String) {
        self.beta_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_beta_name(&mut self) -> &mut ::std::string::String {
        if self.beta_name.is_none() {
            self.beta_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.beta_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_beta_name(&mut self) -> ::std::string::String {
        self.beta_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool download_completed = 4;

    pub fn download_completed(&self) -> bool {
        self.download_completed.unwrap_or(false)
    }

    pub fn clear_download_completed(&mut self) {
        self.download_completed = ::std::option::Option::None;
    }

    pub fn has_download_completed(&self) -> bool {
        self.download_completed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_download_completed(&mut self, v: bool) {
        self.download_completed = ::std::option::Option::Some(v);
    }

    // optional uint32 total_time_ms = 6;

    pub fn total_time_ms(&self) -> u32 {
        self.total_time_ms.unwrap_or(0)
    }

    pub fn clear_total_time_ms(&mut self) {
        self.total_time_ms = ::std::option::Option::None;
    }

    pub fn has_total_time_ms(&self) -> bool {
        self.total_time_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_time_ms(&mut self, v: u32) {
        self.total_time_ms = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "launcher_type",
            |m: &CClientMetrics_ClientBootstrap_Summary| { &m.launcher_type },
            |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.launcher_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_realm",
            |m: &CClientMetrics_ClientBootstrap_Summary| { &m.steam_realm },
            |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.steam_realm },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "beta_name",
            |m: &CClientMetrics_ClientBootstrap_Summary| { &m.beta_name },
            |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.beta_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "download_completed",
            |m: &CClientMetrics_ClientBootstrap_Summary| { &m.download_completed },
            |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.download_completed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "total_time_ms",
            |m: &CClientMetrics_ClientBootstrap_Summary| { &m.total_time_ms },
            |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.total_time_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "manifest_requests",
            |m: &CClientMetrics_ClientBootstrap_Summary| { &m.manifest_requests },
            |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.manifest_requests },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "package_requests",
            |m: &CClientMetrics_ClientBootstrap_Summary| { &m.package_requests },
            |m: &mut CClientMetrics_ClientBootstrap_Summary| { &mut m.package_requests },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CClientMetrics_ClientBootstrap_Summary>(
            "CClientMetrics_ClientBootstrap_Summary",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CClientMetrics_ClientBootstrap_Summary {
    const NAME: &'static str = "CClientMetrics_ClientBootstrap_Summary";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.launcher_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.steam_realm = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.beta_name = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.download_completed = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.total_time_ms = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.manifest_requests.push(is.read_message()?);
                },
                66 => {
                    self.package_requests.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.launcher_type {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steam_realm {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.beta_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.download_completed {
            my_size += 1 + 1;
        }
        if let Some(v) = self.total_time_ms {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        for value in &self.manifest_requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.package_requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.launcher_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steam_realm {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.beta_name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.download_completed {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.total_time_ms {
            os.write_uint32(6, v)?;
        }
        for v in &self.manifest_requests {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.package_requests {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CClientMetrics_ClientBootstrap_Summary {
        CClientMetrics_ClientBootstrap_Summary::new()
    }

    fn clear(&mut self) {
        self.launcher_type = ::std::option::Option::None;
        self.steam_realm = ::std::option::Option::None;
        self.beta_name = ::std::option::Option::None;
        self.download_completed = ::std::option::Option::None;
        self.total_time_ms = ::std::option::Option::None;
        self.manifest_requests.clear();
        self.package_requests.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CClientMetrics_ClientBootstrap_Summary {
        static instance: CClientMetrics_ClientBootstrap_Summary = CClientMetrics_ClientBootstrap_Summary {
            launcher_type: ::std::option::Option::None,
            steam_realm: ::std::option::Option::None,
            beta_name: ::std::option::Option::None,
            download_completed: ::std::option::Option::None,
            total_time_ms: ::std::option::Option::None,
            manifest_requests: ::std::vec::Vec::new(),
            package_requests: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CClientMetrics_ClientBootstrap_Summary {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CClientMetrics_ClientBootstrap_Summary").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CClientMetrics_ClientBootstrap_Summary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CClientMetrics_ClientBootstrap_Summary {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13clientmetrics.proto\"\x95\x03\n*CClientMetrics_ClientBootstrap_Req\
    uestInfo\x12+\n\x11original_hostname\x18\x01\x20\x01(\tR\x10originalHost\
    name\x12'\n\x0factual_hostname\x18\x02\x20\x01(\tR\x0eactualHostname\x12\
    \x12\n\x04path\x18\x03\x20\x01(\tR\x04path\x12\x1b\n\tbase_name\x18\x04\
    \x20\x01(\tR\x08baseName\x12\x18\n\x07success\x18\x05\x20\x01(\x08R\x07s\
    uccess\x12\x1f\n\x0bstatus_code\x18\x06\x20\x01(\rR\nstatusCode\x123\n\
    \x16address_of_request_url\x18\x07\x20\x01(\tR\x13addressOfRequestUrl\
    \x12(\n\x10response_time_ms\x18\x08\x20\x01(\rR\x0eresponseTimeMs\x12%\n\
    \x0ebytes_received\x18\t\x20\x01(\x04R\rbytesReceived\x12\x1f\n\x0bnum_r\
    etries\x18\n\x20\x01(\rR\nnumRetries\"\x90\x03\n&CClientMetrics_ClientBo\
    otstrap_Summary\x12#\n\rlauncher_type\x18\x01\x20\x01(\rR\x0clauncherTyp\
    e\x12\x1f\n\x0bsteam_realm\x18\x02\x20\x01(\rR\nsteamRealm\x12\x1b\n\tbe\
    ta_name\x18\x03\x20\x01(\tR\x08betaName\x12-\n\x12download_completed\x18\
    \x04\x20\x01(\x08R\x11downloadCompleted\x12\"\n\rtotal_time_ms\x18\x06\
    \x20\x01(\rR\x0btotalTimeMs\x12X\n\x11manifest_requests\x18\x07\x20\x03(\
    \x0b2+.CClientMetrics_ClientBootstrap_RequestInfoR\x10manifestRequests\
    \x12V\n\x10package_requests\x18\x08\x20\x03(\x0b2+.CClientMetrics_Client\
    Bootstrap_RequestInfoR\x0fpackageRequestsB\x05H\x01\x80\x01\0J\xf7\t\n\
    \x06\x12\x04\0\0\x18\x01\n\x08\n\x01\x08\x12\x03\0\0\x1c\n\t\n\x02\x08\t\
    \x12\x03\0\0\x1c\n\x08\n\x01\x08\x12\x03\x01\0#\n\t\n\x02\x08\x10\x12\
    \x03\x01\0#\n\n\n\x02\x04\0\x12\x04\x03\0\x0e\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\x03\x082\n\x0b\n\x04\x04\0\x02\0\x12\x03\x04\x08.\n\x0c\n\x05\
    \x04\0\x02\0\x04\x12\x03\x04\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x04\x11\x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x04\x18)\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x04,-\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x05\x08\
    ,\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x05\x08\x10\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\x05\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x05\x18'\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x05*+\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\x06\x08!\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x06\x08\
    \x10\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x06\x11\x17\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x06\x18\x1c\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x06\x1f\x20\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x07\x08&\n\x0c\n\x05\x04\
    \0\x02\x03\x04\x12\x03\x07\x08\x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\
    \x07\x11\x17\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x07\x18!\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03\x07$%\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x08\
    \x08\"\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x08\x08\x10\n\x0c\n\x05\x04\
    \0\x02\x04\x05\x12\x03\x08\x11\x15\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\
    \x08\x16\x1d\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x08\x20!\n\x0b\n\x04\
    \x04\0\x02\x05\x12\x03\t\x08(\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\t\
    \x08\x10\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\t\x11\x17\n\x0c\n\x05\x04\
    \0\x02\x05\x01\x12\x03\t\x18#\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\t&'\
    \n\x0b\n\x04\x04\0\x02\x06\x12\x03\n\x083\n\x0c\n\x05\x04\0\x02\x06\x04\
    \x12\x03\n\x08\x10\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\n\x11\x17\n\x0c\
    \n\x05\x04\0\x02\x06\x01\x12\x03\n\x18.\n\x0c\n\x05\x04\0\x02\x06\x03\
    \x12\x03\n12\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x0b\x08-\n\x0c\n\x05\x04\
    \0\x02\x07\x04\x12\x03\x0b\x08\x10\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\
    \x0b\x11\x17\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x0b\x18(\n\x0c\n\x05\
    \x04\0\x02\x07\x03\x12\x03\x0b+,\n\x0b\n\x04\x04\0\x02\x08\x12\x03\x0c\
    \x08+\n\x0c\n\x05\x04\0\x02\x08\x04\x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\
    \0\x02\x08\x05\x12\x03\x0c\x11\x17\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\
    \x0c\x18&\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x0c)*\n\x0b\n\x04\x04\0\
    \x02\t\x12\x03\r\x08)\n\x0c\n\x05\x04\0\x02\t\x04\x12\x03\r\x08\x10\n\
    \x0c\n\x05\x04\0\x02\t\x05\x12\x03\r\x11\x17\n\x0c\n\x05\x04\0\x02\t\x01\
    \x12\x03\r\x18#\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03\r&(\n\n\n\x02\x04\
    \x01\x12\x04\x10\0\x18\x01\n\n\n\x03\x04\x01\x01\x12\x03\x10\x08.\n\x0b\
    \n\x04\x04\x01\x02\0\x12\x03\x11\x08*\n\x0c\n\x05\x04\x01\x02\0\x04\x12\
    \x03\x11\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x11\x11\x17\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03\x11\x18%\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x11()\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x12\x08(\n\x0c\n\x05\
    \x04\x01\x02\x01\x04\x12\x03\x12\x08\x10\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03\x12\x11\x17\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x12\x18#\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x12&'\n\x0b\n\x04\x04\x01\x02\x02\
    \x12\x03\x13\x08&\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\x13\x08\x10\n\
    \x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x13\x11\x17\n\x0c\n\x05\x04\x01\
    \x02\x02\x01\x12\x03\x13\x18!\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\
    \x13$%\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x14\x08-\n\x0c\n\x05\x04\x01\
    \x02\x03\x04\x12\x03\x14\x08\x10\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\
    \x14\x11\x15\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x14\x16(\n\x0c\n\
    \x05\x04\x01\x02\x03\x03\x12\x03\x14+,\n\x0b\n\x04\x04\x01\x02\x04\x12\
    \x03\x15\x08*\n\x0c\n\x05\x04\x01\x02\x04\x04\x12\x03\x15\x08\x10\n\x0c\
    \n\x05\x04\x01\x02\x04\x05\x12\x03\x15\x11\x17\n\x0c\n\x05\x04\x01\x02\
    \x04\x01\x12\x03\x15\x18%\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x15()\
    \n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x16\x08S\n\x0c\n\x05\x04\x01\x02\
    \x05\x04\x12\x03\x16\x08\x10\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\x03\x16\
    \x11<\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x16=N\n\x0c\n\x05\x04\x01\
    \x02\x05\x03\x12\x03\x16QR\n\x0b\n\x04\x04\x01\x02\x06\x12\x03\x17\x08R\
    \n\x0c\n\x05\x04\x01\x02\x06\x04\x12\x03\x17\x08\x10\n\x0c\n\x05\x04\x01\
    \x02\x06\x06\x12\x03\x17\x11<\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\
    \x17=M\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03\x17PQ\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(CClientMetrics_ClientBootstrap_RequestInfo::generated_message_descriptor_data());
            messages.push(CClientMetrics_ClientBootstrap_Summary::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
