// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_linkfilter.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:CCommunity_GetLinkFilterHashPrefixes_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetLinkFilterHashPrefixes_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashPrefixes_Request.hit_type)
    pub hit_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashPrefixes_Request.count)
    pub count: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashPrefixes_Request.start)
    pub start: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetLinkFilterHashPrefixes_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterHashPrefixes_Request {
    fn default() -> &'a CCommunity_GetLinkFilterHashPrefixes_Request {
        <CCommunity_GetLinkFilterHashPrefixes_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterHashPrefixes_Request {
    pub fn new() -> CCommunity_GetLinkFilterHashPrefixes_Request {
        ::std::default::Default::default()
    }

    // optional uint32 hit_type = 1;

    pub fn hit_type(&self) -> u32 {
        self.hit_type.unwrap_or(0)
    }

    pub fn clear_hit_type(&mut self) {
        self.hit_type = ::std::option::Option::None;
    }

    pub fn has_hit_type(&self) -> bool {
        self.hit_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hit_type(&mut self, v: u32) {
        self.hit_type = ::std::option::Option::Some(v);
    }

    // optional uint32 count = 2;

    pub fn count(&self) -> u32 {
        self.count.unwrap_or(0)
    }

    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = ::std::option::Option::Some(v);
    }

    // optional uint64 start = 3;

    pub fn start(&self) -> u64 {
        self.start.unwrap_or(0)
    }

    pub fn clear_start(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: u64) {
        self.start = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hit_type",
            |m: &CCommunity_GetLinkFilterHashPrefixes_Request| { &m.hit_type },
            |m: &mut CCommunity_GetLinkFilterHashPrefixes_Request| { &mut m.hit_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "count",
            |m: &CCommunity_GetLinkFilterHashPrefixes_Request| { &m.count },
            |m: &mut CCommunity_GetLinkFilterHashPrefixes_Request| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "start",
            |m: &CCommunity_GetLinkFilterHashPrefixes_Request| { &m.start },
            |m: &mut CCommunity_GetLinkFilterHashPrefixes_Request| { &mut m.start },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetLinkFilterHashPrefixes_Request>(
            "CCommunity_GetLinkFilterHashPrefixes_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetLinkFilterHashPrefixes_Request {
    const NAME: &'static str = "CCommunity_GetLinkFilterHashPrefixes_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.hit_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.count = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.start = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hit_type {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.count {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.start {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.hit_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.count {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.start {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetLinkFilterHashPrefixes_Request {
        CCommunity_GetLinkFilterHashPrefixes_Request::new()
    }

    fn clear(&mut self) {
        self.hit_type = ::std::option::Option::None;
        self.count = ::std::option::Option::None;
        self.start = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterHashPrefixes_Request {
        static instance: CCommunity_GetLinkFilterHashPrefixes_Request = CCommunity_GetLinkFilterHashPrefixes_Request {
            hit_type: ::std::option::Option::None,
            count: ::std::option::Option::None,
            start: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetLinkFilterHashPrefixes_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetLinkFilterHashPrefixes_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetLinkFilterHashPrefixes_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetLinkFilterHashPrefixes_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetLinkFilterHashPrefixes_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetLinkFilterHashPrefixes_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashPrefixes_Response.hash_prefixes)
    pub hash_prefixes: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetLinkFilterHashPrefixes_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterHashPrefixes_Response {
    fn default() -> &'a CCommunity_GetLinkFilterHashPrefixes_Response {
        <CCommunity_GetLinkFilterHashPrefixes_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterHashPrefixes_Response {
    pub fn new() -> CCommunity_GetLinkFilterHashPrefixes_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "hash_prefixes",
            |m: &CCommunity_GetLinkFilterHashPrefixes_Response| { &m.hash_prefixes },
            |m: &mut CCommunity_GetLinkFilterHashPrefixes_Response| { &mut m.hash_prefixes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetLinkFilterHashPrefixes_Response>(
            "CCommunity_GetLinkFilterHashPrefixes_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetLinkFilterHashPrefixes_Response {
    const NAME: &'static str = "CCommunity_GetLinkFilterHashPrefixes_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.hash_prefixes)?;
                },
                8 => {
                    self.hash_prefixes.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.hash_prefixes {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.hash_prefixes {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetLinkFilterHashPrefixes_Response {
        CCommunity_GetLinkFilterHashPrefixes_Response::new()
    }

    fn clear(&mut self) {
        self.hash_prefixes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterHashPrefixes_Response {
        static instance: CCommunity_GetLinkFilterHashPrefixes_Response = CCommunity_GetLinkFilterHashPrefixes_Response {
            hash_prefixes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetLinkFilterHashPrefixes_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetLinkFilterHashPrefixes_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetLinkFilterHashPrefixes_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetLinkFilterHashPrefixes_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetLinkFilterHashes_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetLinkFilterHashes_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashes_Request.hit_type)
    pub hit_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashes_Request.count)
    pub count: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashes_Request.start)
    pub start: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetLinkFilterHashes_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterHashes_Request {
    fn default() -> &'a CCommunity_GetLinkFilterHashes_Request {
        <CCommunity_GetLinkFilterHashes_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterHashes_Request {
    pub fn new() -> CCommunity_GetLinkFilterHashes_Request {
        ::std::default::Default::default()
    }

    // optional uint32 hit_type = 1;

    pub fn hit_type(&self) -> u32 {
        self.hit_type.unwrap_or(0)
    }

    pub fn clear_hit_type(&mut self) {
        self.hit_type = ::std::option::Option::None;
    }

    pub fn has_hit_type(&self) -> bool {
        self.hit_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hit_type(&mut self, v: u32) {
        self.hit_type = ::std::option::Option::Some(v);
    }

    // optional uint32 count = 2;

    pub fn count(&self) -> u32 {
        self.count.unwrap_or(0)
    }

    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = ::std::option::Option::Some(v);
    }

    // optional uint64 start = 3;

    pub fn start(&self) -> u64 {
        self.start.unwrap_or(0)
    }

    pub fn clear_start(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: u64) {
        self.start = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hit_type",
            |m: &CCommunity_GetLinkFilterHashes_Request| { &m.hit_type },
            |m: &mut CCommunity_GetLinkFilterHashes_Request| { &mut m.hit_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "count",
            |m: &CCommunity_GetLinkFilterHashes_Request| { &m.count },
            |m: &mut CCommunity_GetLinkFilterHashes_Request| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "start",
            |m: &CCommunity_GetLinkFilterHashes_Request| { &m.start },
            |m: &mut CCommunity_GetLinkFilterHashes_Request| { &mut m.start },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetLinkFilterHashes_Request>(
            "CCommunity_GetLinkFilterHashes_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetLinkFilterHashes_Request {
    const NAME: &'static str = "CCommunity_GetLinkFilterHashes_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.hit_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.count = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.start = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hit_type {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.count {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.start {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.hit_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.count {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.start {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetLinkFilterHashes_Request {
        CCommunity_GetLinkFilterHashes_Request::new()
    }

    fn clear(&mut self) {
        self.hit_type = ::std::option::Option::None;
        self.count = ::std::option::Option::None;
        self.start = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterHashes_Request {
        static instance: CCommunity_GetLinkFilterHashes_Request = CCommunity_GetLinkFilterHashes_Request {
            hit_type: ::std::option::Option::None,
            count: ::std::option::Option::None,
            start: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetLinkFilterHashes_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetLinkFilterHashes_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetLinkFilterHashes_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetLinkFilterHashes_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetLinkFilterHashes_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetLinkFilterHashes_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashes_Response.hashes)
    pub hashes: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetLinkFilterHashes_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterHashes_Response {
    fn default() -> &'a CCommunity_GetLinkFilterHashes_Response {
        <CCommunity_GetLinkFilterHashes_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterHashes_Response {
    pub fn new() -> CCommunity_GetLinkFilterHashes_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "hashes",
            |m: &CCommunity_GetLinkFilterHashes_Response| { &m.hashes },
            |m: &mut CCommunity_GetLinkFilterHashes_Response| { &mut m.hashes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetLinkFilterHashes_Response>(
            "CCommunity_GetLinkFilterHashes_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetLinkFilterHashes_Response {
    const NAME: &'static str = "CCommunity_GetLinkFilterHashes_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hashes.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.hashes {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.hashes {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetLinkFilterHashes_Response {
        CCommunity_GetLinkFilterHashes_Response::new()
    }

    fn clear(&mut self) {
        self.hashes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterHashes_Response {
        static instance: CCommunity_GetLinkFilterHashes_Response = CCommunity_GetLinkFilterHashes_Response {
            hashes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetLinkFilterHashes_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetLinkFilterHashes_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetLinkFilterHashes_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetLinkFilterHashes_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetLinkFilterListVersion_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetLinkFilterListVersion_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterListVersion_Request.hit_type)
    pub hit_type: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetLinkFilterListVersion_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterListVersion_Request {
    fn default() -> &'a CCommunity_GetLinkFilterListVersion_Request {
        <CCommunity_GetLinkFilterListVersion_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterListVersion_Request {
    pub fn new() -> CCommunity_GetLinkFilterListVersion_Request {
        ::std::default::Default::default()
    }

    // optional uint32 hit_type = 1;

    pub fn hit_type(&self) -> u32 {
        self.hit_type.unwrap_or(0)
    }

    pub fn clear_hit_type(&mut self) {
        self.hit_type = ::std::option::Option::None;
    }

    pub fn has_hit_type(&self) -> bool {
        self.hit_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hit_type(&mut self, v: u32) {
        self.hit_type = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hit_type",
            |m: &CCommunity_GetLinkFilterListVersion_Request| { &m.hit_type },
            |m: &mut CCommunity_GetLinkFilterListVersion_Request| { &mut m.hit_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetLinkFilterListVersion_Request>(
            "CCommunity_GetLinkFilterListVersion_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetLinkFilterListVersion_Request {
    const NAME: &'static str = "CCommunity_GetLinkFilterListVersion_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.hit_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hit_type {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.hit_type {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetLinkFilterListVersion_Request {
        CCommunity_GetLinkFilterListVersion_Request::new()
    }

    fn clear(&mut self) {
        self.hit_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterListVersion_Request {
        static instance: CCommunity_GetLinkFilterListVersion_Request = CCommunity_GetLinkFilterListVersion_Request {
            hit_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetLinkFilterListVersion_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetLinkFilterListVersion_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetLinkFilterListVersion_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetLinkFilterListVersion_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetLinkFilterListVersion_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetLinkFilterListVersion_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterListVersion_Response.version)
    pub version: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterListVersion_Response.count)
    pub count: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetLinkFilterListVersion_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterListVersion_Response {
    fn default() -> &'a CCommunity_GetLinkFilterListVersion_Response {
        <CCommunity_GetLinkFilterListVersion_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterListVersion_Response {
    pub fn new() -> CCommunity_GetLinkFilterListVersion_Response {
        ::std::default::Default::default()
    }

    // optional string version = 1;

    pub fn version(&self) -> &str {
        match self.version.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        if self.version.is_none() {
            self.version = ::std::option::Option::Some(::std::string::String::new());
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        self.version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 count = 2;

    pub fn count(&self) -> u64 {
        self.count.unwrap_or(0)
    }

    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u64) {
        self.count = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &CCommunity_GetLinkFilterListVersion_Response| { &m.version },
            |m: &mut CCommunity_GetLinkFilterListVersion_Response| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "count",
            |m: &CCommunity_GetLinkFilterListVersion_Response| { &m.count },
            |m: &mut CCommunity_GetLinkFilterListVersion_Response| { &mut m.count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetLinkFilterListVersion_Response>(
            "CCommunity_GetLinkFilterListVersion_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetLinkFilterListVersion_Response {
    const NAME: &'static str = "CCommunity_GetLinkFilterListVersion_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.count = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.version.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.count {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.version.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.count {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetLinkFilterListVersion_Response {
        CCommunity_GetLinkFilterListVersion_Response::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterListVersion_Response {
        static instance: CCommunity_GetLinkFilterListVersion_Response = CCommunity_GetLinkFilterListVersion_Response {
            version: ::std::option::Option::None,
            count: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetLinkFilterListVersion_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetLinkFilterListVersion_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetLinkFilterListVersion_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetLinkFilterListVersion_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*steammessages_linkfilter.steamclient.proto\x1a,steammessages_unified_\
    base.steamclient.proto\"\xb4\x02\n,CCommunity_GetLinkFilterHashPrefixes_\
    Request\x12P\n\x08hit_type\x18\x01\x20\x01(\rR\x07hitTypeB5\x82\xb5\x181\
    The\x20retrieved\x20hits\x20will\x20be\x20filtered\x20to\x20this\x20type\
    .\x12c\n\x05count\x18\x02\x20\x01(\rR\x05countBM\x82\xb5\x18IThe\x20numb\
    er\x20of\x20hits\x20to\x20retrieve\x20in\x20a\x20single\x20batch.\x20Spe\
    cify\x200\x20for\x20no\x20limit.\x12M\n\x05start\x18\x03\x20\x01(\x04R\
    \x05startB7\x82\xb5\x183The\x20starting\x20count\x20when\x20retrieving\
    \x20hits\x20in\x20batches.\"\x95\x01\n-CCommunity_GetLinkFilterHashPrefi\
    xes_Response\x12d\n\rhash_prefixes\x18\x01\x20\x03(\rR\x0chashPrefixesB?\
    \x82\xb5\x18;The\x20first\x2032\x20bits\x20of\x20the\x20SHA1\x20hashes\
    \x20of\x20each\x20hit\x20requested.\"\xae\x02\n&CCommunity_GetLinkFilter\
    Hashes_Request\x12P\n\x08hit_type\x18\x01\x20\x01(\rR\x07hitTypeB5\x82\
    \xb5\x181The\x20retrieved\x20hits\x20will\x20be\x20filtered\x20to\x20thi\
    s\x20type.\x12c\n\x05count\x18\x02\x20\x01(\rR\x05countBM\x82\xb5\x18ITh\
    e\x20number\x20of\x20hits\x20to\x20retrieve\x20in\x20a\x20single\x20batc\
    h.\x20Specify\x200\x20for\x20no\x20limit.\x12M\n\x05start\x18\x03\x20\
    \x01(\x04R\x05startB7\x82\xb5\x183The\x20starting\x20count\x20when\x20re\
    trieving\x20hits\x20in\x20batches.\"r\n'CCommunity_GetLinkFilterHashes_R\
    esponse\x12G\n\x06hashes\x18\x01\x20\x03(\x0cR\x06hashesB/\x82\xb5\x18+A\
    \x20list\x20of\x20hashes\x20returned\x20from\x20our\x20request.\"\x89\
    \x01\n+CCommunity_GetLinkFilterListVersion_Request\x12Z\n\x08hit_type\
    \x18\x01\x20\x01(\rR\x07hitTypeB?\x82\xb5\x18;The\x20version\x20hashes\
    \x20for\x20this\x20type's\x20chunks\x20will\x20be\x20returned.\"\xba\x01\
    \n,CCommunity_GetLinkFilterListVersion_Response\x12O\n\x07version\x18\
    \x01\x20\x01(\tR\x07versionB5\x82\xb5\x181A\x20hash\x20built\x20using\
    \x20the\x20IDs\x20of\x20the\x20contained\x20hits.\x129\n\x05count\x18\
    \x02\x20\x01(\x04R\x05countB#\x82\xb5\x18\x1fThe\x20number\x20of\x20hits\
    \x20of\x20this\x20type2\xc6\x05\n\x13CommunityLinkFilter\x12\xd2\x01\n\
    \x19GetLinkFilterHashPrefixes\x12-.CCommunity_GetLinkFilterHashPrefixes_\
    Request\x1a..CCommunity_GetLinkFilterHashPrefixes_Response\"V\x82\xb5\
    \x18RGet\x20a\x20list\x20of\x20hash\x20prefixes\x20for\x20the\x20specifi\
    ed\x20hit\x20type,\x20to\x20use\x20for\x20client\x20caching.\x12\xb9\x01\
    \n\x13GetLinkFilterHashes\x12'.CCommunity_GetLinkFilterHashes_Request\
    \x1a(.CCommunity_GetLinkFilterHashes_Response\"O\x82\xb5\x18KGet\x20a\
    \x20list\x20of\x20hashes\x20for\x20the\x20specified\x20hit\x20type,\x20t\
    o\x20use\x20for\x20client\x20caching.\x12\xcd\x01\n\x18GetLinkFilterList\
    Version\x12,.CCommunity_GetLinkFilterListVersion_Request\x1a-.CCommunity\
    _GetLinkFilterListVersion_Response\"T\x82\xb5\x18PGet\x20a\x20list\x20of\
    \x20hashes\x20describing\x20the\x20version\x20of\x20each\x20chunk\x20of\
    \x20the\x20requested\x20size.\x1aN\x82\xb5\x18JA\x20service\x20for\x20re\
    cording\x20data\x20about\x20Steam\x20Community\x20phishing\x20link\x20fi\
    lteringB\x03\x80\x01\x01J\xc4\x0c\n\x06\x12\x04\0\0/\x01\n\t\n\x02\x03\0\
    \x12\x03\0\06\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\x10\x12\x03\
    \x02\0\"\n\n\n\x02\x04\0\x12\x04\x04\0\x08\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x04\x084\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x08k\n\x0c\n\x05\x04\0\
    \x02\0\x04\x12\x03\x05\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\
    \x11\x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x18\x20\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x05#$\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x05%j\n\
    \x0f\n\x08\x04\0\x02\0\x08\xd0\x86\x03\x12\x03\x05&i\n\x0c\n\x04\x04\0\
    \x02\x01\x12\x04\x06\x08\x80\x01\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\
    \x06\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x11\x17\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x06\x18\x1d\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x06\x20!\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x06\"\x7f\n\x0f\
    \n\x08\x04\0\x02\x01\x08\xd0\x86\x03\x12\x03\x06#~\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x07\x08j\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x07\x08\x10\
    \n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x07\x11\x17\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x07\x18\x1d\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x07\
    \x20!\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x07\"i\n\x0f\n\x08\x04\0\x02\
    \x02\x08\xd0\x86\x03\x12\x03\x07#h\n\n\n\x02\x04\x01\x12\x04\n\0\x0c\x01\
    \n\n\n\x03\x04\x01\x01\x12\x03\n\x085\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x0b\x08z\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x0b\x08\x10\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03\x0b\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x0b\x18%\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0b()\n\x0c\n\x05\
    \x04\x01\x02\0\x08\x12\x03\x0b*y\n\x0f\n\x08\x04\x01\x02\0\x08\xd0\x86\
    \x03\x12\x03\x0b+x\n\n\n\x02\x04\x02\x12\x04\x0e\0\x12\x01\n\n\n\x03\x04\
    \x02\x01\x12\x03\x0e\x08.\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x0f\x08k\n\
    \x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x0f\x08\x10\n\x0c\n\x05\x04\x02\x02\
    \0\x05\x12\x03\x0f\x11\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0f\x18\
    \x20\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x0f#$\n\x0c\n\x05\x04\x02\x02\
    \0\x08\x12\x03\x0f%j\n\x0f\n\x08\x04\x02\x02\0\x08\xd0\x86\x03\x12\x03\
    \x0f&i\n\x0c\n\x04\x04\x02\x02\x01\x12\x04\x10\x08\x80\x01\n\x0c\n\x05\
    \x04\x02\x02\x01\x04\x12\x03\x10\x08\x10\n\x0c\n\x05\x04\x02\x02\x01\x05\
    \x12\x03\x10\x11\x17\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x10\x18\x1d\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x10\x20!\n\x0c\n\x05\x04\x02\
    \x02\x01\x08\x12\x03\x10\"\x7f\n\x0f\n\x08\x04\x02\x02\x01\x08\xd0\x86\
    \x03\x12\x03\x10#~\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x11\x08j\n\x0c\n\
    \x05\x04\x02\x02\x02\x04\x12\x03\x11\x08\x10\n\x0c\n\x05\x04\x02\x02\x02\
    \x05\x12\x03\x11\x11\x17\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x11\x18\
    \x1d\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x11\x20!\n\x0c\n\x05\x04\
    \x02\x02\x02\x08\x12\x03\x11\"i\n\x0f\n\x08\x04\x02\x02\x02\x08\xd0\x86\
    \x03\x12\x03\x11#h\n\n\n\x02\x04\x03\x12\x04\x14\0\x16\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03\x14\x08/\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x15\x08b\n\
    \x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x15\x08\x10\n\x0c\n\x05\x04\x03\x02\
    \0\x05\x12\x03\x15\x11\x16\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x15\x17\
    \x1d\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x15\x20!\n\x0c\n\x05\x04\x03\
    \x02\0\x08\x12\x03\x15\"a\n\x0f\n\x08\x04\x03\x02\0\x08\xd0\x86\x03\x12\
    \x03\x15#`\n\n\n\x02\x04\x04\x12\x04\x18\0\x1a\x01\n\n\n\x03\x04\x04\x01\
    \x12\x03\x18\x083\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x19\x08u\n\x0c\n\x05\
    \x04\x04\x02\0\x04\x12\x03\x19\x08\x10\n\x0c\n\x05\x04\x04\x02\0\x05\x12\
    \x03\x19\x11\x17\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x19\x18\x20\n\x0c\
    \n\x05\x04\x04\x02\0\x03\x12\x03\x19#$\n\x0c\n\x05\x04\x04\x02\0\x08\x12\
    \x03\x19%t\n\x0f\n\x08\x04\x04\x02\0\x08\xd0\x86\x03\x12\x03\x19&s\n\n\n\
    \x02\x04\x05\x12\x04\x1c\0\x1f\x01\n\n\n\x03\x04\x05\x01\x12\x03\x1c\x08\
    4\n\x0b\n\x04\x04\x05\x02\0\x12\x03\x1d\x08j\n\x0c\n\x05\x04\x05\x02\0\
    \x04\x12\x03\x1d\x08\x10\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03\x1d\x11\
    \x17\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03\x1d\x18\x1f\n\x0c\n\x05\x04\
    \x05\x02\0\x03\x12\x03\x1d\"#\n\x0c\n\x05\x04\x05\x02\0\x08\x12\x03\x1d$\
    i\n\x0f\n\x08\x04\x05\x02\0\x08\xd0\x86\x03\x12\x03\x1d%h\n\x0b\n\x04\
    \x04\x05\x02\x01\x12\x03\x1e\x08V\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\
    \x03\x1e\x08\x10\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03\x1e\x11\x17\n\
    \x0c\n\x05\x04\x05\x02\x01\x01\x12\x03\x1e\x18\x1d\n\x0c\n\x05\x04\x05\
    \x02\x01\x03\x12\x03\x1e\x20!\n\x0c\n\x05\x04\x05\x02\x01\x08\x12\x03\
    \x1e\"U\n\x0f\n\x08\x04\x05\x02\x01\x08\xd0\x86\x03\x12\x03\x1e#T\n\n\n\
    \x02\x06\0\x12\x04!\0/\x01\n\n\n\x03\x06\0\x01\x12\x03!\x08\x1b\n\n\n\
    \x03\x06\0\x03\x12\x03\"\x08t\n\r\n\x06\x06\0\x03\xd0\x86\x03\x12\x03\"\
    \x08t\n\x0c\n\x04\x06\0\x02\0\x12\x04$\x08&\t\n\x0c\n\x05\x06\0\x02\0\
    \x01\x12\x03$\x0c%\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03$'T\n\r\n\x05\x06\
    \0\x02\0\x03\x12\x04$_\x8d\x01\n\r\n\x05\x06\0\x02\0\x04\x12\x04%\x10\
    \x83\x01\n\x10\n\x08\x06\0\x02\0\x04\xd0\x86\x03\x12\x04%\x10\x83\x01\n\
    \x0c\n\x04\x06\0\x02\x01\x12\x04(\x08*\t\n\x0c\n\x05\x06\0\x02\x01\x01\
    \x12\x03(\x0c\x1f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03(!H\n\x0c\n\x05\
    \x06\0\x02\x01\x03\x12\x03(S{\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03)\x10\
    |\n\x0f\n\x08\x06\0\x02\x01\x04\xd0\x86\x03\x12\x03)\x10|\n\x0c\n\x04\
    \x06\0\x02\x02\x12\x04,\x08.\t\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03,\
    \x0c$\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03,&R\n\r\n\x05\x06\0\x02\x02\
    \x03\x12\x04,]\x8a\x01\n\r\n\x05\x06\0\x02\x02\x04\x12\x04-\x10\x81\x01\
    \n\x10\n\x08\x06\0\x02\x02\x04\xd0\x86\x03\x12\x04-\x10\x81\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(CCommunity_GetLinkFilterHashPrefixes_Request::generated_message_descriptor_data());
            messages.push(CCommunity_GetLinkFilterHashPrefixes_Response::generated_message_descriptor_data());
            messages.push(CCommunity_GetLinkFilterHashes_Request::generated_message_descriptor_data());
            messages.push(CCommunity_GetLinkFilterHashes_Response::generated_message_descriptor_data());
            messages.push(CCommunity_GetLinkFilterListVersion_Request::generated_message_descriptor_data());
            messages.push(CCommunity_GetLinkFilterListVersion_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
